{"version":3,"sources":["components/Card.jsx","components/UsersTable.jsx","components/PollsTable.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","number","name","children","iconClass","cardClass","className","UsersTable","this","allUsers","totalOfActivityTime","getSumOfTime","eventsArr","reduce","prevVal","elem","stoppedOn","startedOn","Date","getTime","getOnlinePercentage","registeredOn","leftOn","totalUserOnlineTime","Math","ceil","tsToHHmmss","ts","toISOString","substr","id","defaultMessage","Object","values","length","sort","a","b","isModerator","map","user","xmlns","fill","viewBox","stroke","isDialIn","strokeLinecap","strokeLinejoin","strokeWidth","d","value","month","day","hour","minute","second","title","toString","style","width","role","talk","totalTime","webcams","totalOfMessages","emojis","filter","emoji","colSpan","React","Component","injectIntl","PollsTable","polls","intl","getUserAnswer","poll","answers","pollId","index","question","anonymous","formatMessage","anonymousAnswers","answer","App","state","activitiesJson","tab","fetchActivitiesJson","setInterval","urlSearchParams","URLSearchParams","window","location","search","params","fromEntries","entries","meeting","report","fetch","then","response","json","setState","document","totalOfActivity","minTime","users","createdOn","year","endedOn","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Dashboard","intlMessages","intlLocale","setMessages","language","navigator","lang","fetchMessages","Promise","resolve","reject","url","replace","ok","all","mergedMessages","assign","catch","defaultLocale","locale","messages","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.8f1acbe1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card(props) {\n  const {\n    number, name, children, iconClass, cardClass,\n  } = props;\n\n  return (\n    <div className={`flex items-center justify-between p-4 bg-white rounded-md shadow border-l-8 ${cardClass}`}>\n      <div className=\"w-70\">\n        <p className=\"text-lg font-semibold text-gray-700\">\n          { number }\n        </p>\n        <p className=\"mb-2 text-sm font-medium text-gray-600\">\n          { name }\n        </p>\n      </div>\n      <div className={`p-3 mr-4 text-orange-500 rounded-full ${iconClass}`}>\n        { children }\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport { FormattedMessage, FormattedDate, injectIntl } from 'react-intl';\n\nclass UsersTable extends React.Component {\n  render() {\n    const { allUsers, totalOfActivityTime } = this.props;\n\n    function getSumOfTime(eventsArr) {\n      return eventsArr.reduce((prevVal, elem) => {\n        if (elem.stoppedOn > 0) return prevVal + (elem.stoppedOn - elem.startedOn);\n        return prevVal + (new Date().getTime() - elem.startedOn);\n      }, 0);\n    }\n\n    function getOnlinePercentage(registeredOn, leftOn) {\n      const totalUserOnlineTime = ((leftOn > 0 ? leftOn : (new Date()).getTime())) - registeredOn;\n      return Math.ceil((totalUserOnlineTime / totalOfActivityTime) * 100);\n    }\n\n    function tsToHHmmss(ts) {\n      return (new Date(ts).toISOString().substr(11, 8));\n    }\n\n    return (\n      <table className=\"w-full whitespace-no-wrap\">\n        <thead>\n          <tr className=\"text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b bg-gray-100\">\n            <th className=\"px-4 py-3\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colParticipant\" defaultMessage=\"Participant\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colOnline\" defaultMessage=\"Online time\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colTalk\" defaultMessage=\"Talk time\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colWebcam\" defaultMessage=\"Webcam Time\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colMessages\" defaultMessage=\"Messages\" />\n            </th>\n            <th className=\"px-4 py-3 text-left\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colEmojis\" defaultMessage=\"Emojis\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colRaiseHands\" defaultMessage=\"Raise Hand\" />\n            </th>\n            <th className=\"px-4 py-3\">\n              <FormattedMessage id=\"app.learningDashboard.participantsTable.colStatus\" defaultMessage=\"Status\" />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y\">\n          { typeof allUsers === 'object' && Object.values(allUsers || {}).length > 0 ? (\n            Object.values(allUsers || {})\n              .sort((a, b) => {\n                if (a.isModerator === true && b.isModerator === false) return -1;\n                if (a.isModerator === false && b.isModerator === true) return 1;\n                if (a.name < b.name) return -1;\n                if (a.name > b.name) return 1;\n                return 0;\n              })\n              .map((user) => (\n                <tr key={user} className=\"text-gray-700\">\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center text-sm\">\n                      <div className=\"relative hidden w-8 h-8 mr-3 rounded-full md:block\">\n                        {/* <img className=\"object-cover w-full h-full rounded-full\" */}\n                        {/*     src=\"\" */}\n                        {/*     alt=\"\" loading=\"lazy\" /> */}\n                        <div className={`border-2 border-gray-800 items-center ${user.isModerator ? 'rounded-md' : 'rounded-full'}`}>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-full w-full p-1\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            {user.isDialIn\n                              ? (\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth=\"2\"\n                                  d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"\n                                />\n                              )\n                              : (\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth=\"2\"\n                                  d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n                                />\n                              )}\n                          </svg>\n                        </div>\n                        <div\n                          className=\"absolute inset-0 rounded-full shadow-inner\"\n                          aria-hidden=\"true\"\n                        />\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">\n                          {user.name}\n                        </p>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\"\n                            />\n                          </svg>\n                          <FormattedDate\n                            value={user.registeredOn}\n                            month=\"short\"\n                            day=\"numeric\"\n                            hour=\"2-digit\"\n                            minute=\"2-digit\"\n                            second=\"2-digit\"\n                          />\n                        </p>\n                        {\n                            user.leftOn > 0\n                              ? (\n                                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                  <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    className=\"h-4 w-4 inline\"\n                                    fill=\"none\"\n                                    viewBox=\"0 0 24 24\"\n                                    stroke=\"currentColor\"\n                                  >\n                                    <path\n                                      strokeLinecap=\"round\"\n                                      strokeLinejoin=\"round\"\n                                      strokeWidth=\"2\"\n                                      d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"\n                                    />\n                                  </svg>\n\n                                  <FormattedDate\n                                    value={user.leftOn}\n                                    month=\"short\"\n                                    day=\"numeric\"\n                                    hour=\"2-digit\"\n                                    minute=\"2-digit\"\n                                    second=\"2-digit\"\n                                  />\n                                </p>\n                              )\n                              : null\n                          }\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center items-center\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-4 w-4 mr-1 inline\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M5.636 18.364a9 9 0 010-12.728m12.728 0a9 9 0 010 12.728m-9.9-2.829a5 5 0 010-7.07m7.072 0a5 5 0 010 7.07M13 12a1 1 0 11-2 0 1 1 0 012 0z\"\n                      />\n                    </svg>\n                    { tsToHHmmss(\n                      (user.leftOn > 0 ? user.leftOn : (new Date()).getTime()) - user.registeredOn,\n                    ) }\n                    <br />\n                    <div\n                      className=\"bg-gray-200 transition-colors duration-500 rounded-full overflow-hidden\"\n                      title={`${getOnlinePercentage(user.registeredOn, user.leftOn).toString()}%`}\n                    >\n                      <div\n                        aria-label=\" \"\n                        className=\"bg-gradient-to-br from-green-100 to-green-600 transition-colors duration-900 h-1.5\"\n                        style={{ width: `${getOnlinePercentage(user.registeredOn, user.leftOn).toString()}%` }}\n                        role=\"progressbar\"\n                      />\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { user.talk.totalTime > 0\n                      ? (\n                        <span className=\"text-center\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 mr-1 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n                            />\n                          </svg>\n                          { tsToHHmmss(user.talk.totalTime) }\n                        </span>\n                      ) : null }\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { getSumOfTime(user.webcams) > 0\n                      ? (\n                        <span className=\"text-center\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 mr-1 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\"\n                            />\n                          </svg>\n                          { tsToHHmmss(getSumOfTime(user.webcams)) }\n                        </span>\n                      ) : null }\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { user.totalOfMessages > 0\n                      ? (\n                        <span>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 mr-1 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"\n                            />\n                          </svg>\n                          {user.totalOfMessages}\n                        </span>\n                      ) : null }\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-left\">\n                    { user.emojis.filter((emoji) => emoji.name === 'away').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-time text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'away').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.awayLabel\" defaultMessage=\"Away\" />\n                      </div>\n                    ) : null}\n                    { user.emojis.filter((emoji) => emoji.name === 'neutral').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-undecided text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'neutral').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.neutralLabel\" defaultMessage=\"Undecided\" />\n                      </div>\n                    ) : null}\n                    { user.emojis.filter((emoji) => emoji.name === 'confused').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-undecided text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'confused').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.confusedLabel\" defaultMessage=\"Confused\" />\n                      </div>\n                    ) : null}\n                    { user.emojis.filter((emoji) => emoji.name === 'sad').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-sad text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'sad').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.sadLabel\" defaultMessage=\"Sad\" />\n                      </div>\n                    ) : null}\n                    { user.emojis.filter((emoji) => emoji.name === 'happy').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-happy text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'happy').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.happyLabel\" defaultMessage=\"Happy\" />\n                      </div>\n                    ) : null}\n                    { user.emojis.filter((emoji) => emoji.name === 'applause').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-applause text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'applause').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.applauseLabel\" defaultMessage=\"Applaud\" />\n                      </div>\n                    ) : null}\n                    { user.emojis.filter((emoji) => emoji.name === 'thumbsUp').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-thumbs_up text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'thumbsUp').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.thumbsUpLabel\" defaultMessage=\"Thumbs up\" />\n                      </div>\n                    ) : null}\n                    { user.emojis.filter((emoji) => emoji.name === 'thumbsDown').length > 0 ? (\n                      <div className=\"text-xs\">\n                        <i className=\"icon-bbb-thumbs_down text-sm\" />\n                        &nbsp;\n                        {user.emojis.filter((emoji) => emoji.name === 'thumbsDown').length}\n                        &nbsp;\n                        <FormattedMessage id=\"app.actionsBar.emojiMenu.thumbsDownLabel\" defaultMessage=\"Thumbs down\" />\n                      </div>\n                    ) : null}\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { user.emojis.filter((emoji) => emoji.name === 'raiseHand').length > 0\n                      ? (\n                        <span>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 mr-1 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 00-3 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11m0-5.5a1.5 1.5 0 013 0v3m0 0V11\"\n                            />\n                          </svg>\n                          {user.emojis.filter((emoji) => emoji.name === 'raiseHand').length}\n                        </span>\n                      ) : null }\n                  </td>\n                  <td className=\"px-4 py-3 text-xs\">\n                    {\n                                      user.leftOn > 0\n                                        ? (\n                                          <span className=\"px-2 py-1 font-semibold leading-tight text-red-700 bg-red-100 rounded-full\">\n                                            <FormattedMessage id=\"app.learningDashboard.participantsTable.userStatusOffline\" defaultMessage=\"Offline\" />\n                                          </span>\n                                        )\n                                        : (\n                                          <span className=\"px-2 py-1 font-semibold leading-tight text-green-700 bg-green-100 rounded-full\">\n                                            <FormattedMessage id=\"app.learningDashboard.participantsTable.userStatusOnline\" defaultMessage=\"Online\" />\n                                          </span>\n                                        )\n                                  }\n                  </td>\n                </tr>\n              ))\n          ) : (\n            <tr className=\"text-gray-700\">\n              <td colSpan=\"8\" className=\"px-4 py-3 text-sm text-center\">\n                <FormattedMessage id=\"app.learningDashboard.participantsTable.noUsers\" defaultMessage=\"No users\" />\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default injectIntl(UsersTable);\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nclass PollsTable extends React.Component {\n  render() {\n    const { allUsers, polls } = this.props;\n    const { intl } = this.props;\n\n    function getUserAnswer(user, poll) {\n      if (typeof user.answers[poll.pollId] !== 'undefined') {\n        return user.answers[poll.pollId];\n      }\n      return '';\n    }\n\n    return (\n      <table className=\"w-full whitespace-no-wrap\">\n        <thead>\n          <tr className=\"text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b bg-gray-100\">\n            <th className=\"px-4 py-3\">\n              <FormattedMessage id=\"app.learningDashboard.pollsTable.colParticipant\" defaultMessage=\"Participant\" />\n            </th>\n            {typeof polls === 'object' && Object.values(polls || {}).length > 0 ? (\n              Object.values(polls || {}).map((poll, index) => <th className=\"px-4 py-3 text-center\">{poll.question || `Poll ${index + 1}`}</th>)\n            ) : null }\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y\">\n          { typeof allUsers === 'object' && Object.values(allUsers || {}).length > 0 ? (\n            Object.values(allUsers || {})\n              .filter((user) => Object.values(user.answers).length > 0)\n              .map((user) => (\n                <tr className=\"text-gray-700\">\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center text-sm\">\n                      <div className=\"relative hidden w-8 h-8 mr-3 rounded-full md:block\">\n                        {/* <img className=\"object-cover w-full h-full rounded-full\" */}\n                        {/*     src=\"\" */}\n                        {/*     alt=\"\" loading=\"lazy\" /> */}\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          className=\"relative hidden w-8 h-8 mr-3 rounded-full md:block\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"2\"\n                            d=\"M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                          />\n                        </svg>\n\n                        <div\n                          className=\"absolute inset-0 rounded-full shadow-inner\"\n                          aria-hidden=\"true\"\n                        />\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">{user.name}</p>\n                      </div>\n                    </div>\n                  </td>\n\n                  {typeof polls === 'object' && Object.values(polls || {}).length > 0 ? (\n                    Object.values(polls || {}).map((poll) => (\n                      <td className=\"px-4 py-3 text-sm text-center\">\n                        { getUserAnswer(user, poll) }\n                        { poll.anonymous\n                          ? (\n                            <span title={intl.formatMessage({\n                              id: 'app.learningDashboard.pollsTable.anonymousAnswer',\n                              defaultMessage: 'Anonymous Poll (answers in the last row)',\n                            })}\n                            >\n                              <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-4 w-4 inline\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth=\"2\"\n                                  d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                                />\n                              </svg>\n                            </span>\n                          )\n                          : null }\n                      </td>\n                    ))\n                  ) : null }\n                </tr>\n              ))) : null }\n          <tr className=\"text-gray-700\">\n            <td className=\"px-4 py-3\">\n              <div className=\"flex items-center text-sm\">\n                <div className=\"relative hidden w-8 h-8 mr-3 rounded-full md:block\">\n                  {/* <img className=\"object-cover w-full h-full rounded-full\" */}\n                  {/*     src=\"\" */}\n                  {/*     alt=\"\" loading=\"lazy\" /> */}\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"relative hidden w-8 h-8 mr-3 rounded-full md:block\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <div\n                    className=\"absolute inset-0 rounded-full shadow-inner\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">\n                    <FormattedMessage id=\"app.learningDashboard.pollsTable.anonymousRowName\" defaultMessage=\"Anonymous\" />\n                  </p>\n                </div>\n              </div>\n            </td>\n            {typeof polls === 'object' && Object.values(polls || {}).length > 0 ? (\n              Object.values(polls || {}).map((poll) => (\n                <td className=\"px-4 py-3 text-sm text-center\">\n                  { poll.anonymousAnswers.map((answer) => <p>{answer}</p>) }\n                </td>\n              ))\n            ) : null }\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default injectIntl(PollsTable);\n","import React from 'react';\nimport './App.css';\nimport './bbb-icons.css';\nimport { FormattedMessage, FormattedDate, injectIntl } from 'react-intl';\nimport Card from './components/Card';\nimport UsersTable from './components/UsersTable';\nimport PollsTable from './components/PollsTable';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activitiesJson: {},\n      tab: 'overview',\n    };\n  }\n\n  componentDidMount() {\n    this.fetchActivitiesJson();\n    setInterval(() => {\n      this.fetchActivitiesJson();\n    }, 10000);\n  }\n\n  fetchActivitiesJson() {\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n    if (typeof params.meeting === 'undefined') return;\n    if (typeof params.report === 'undefined') return;\n\n    fetch(`${params.meeting}/${params.report}/activity_report.json`)\n      .then((response) => response.json())\n      .then((json) => {\n        this.setState({ activitiesJson: json });\n        document.title = `Learning Dashboard - ${json.name}`;\n      });\n  }\n\n  render() {\n    const { activitiesJson, tab } = this.state;\n    const { intl } = this.props;\n\n    function totalOfRaiseHand() {\n      if (activitiesJson && activitiesJson.users) {\n        return Object.values(activitiesJson.users)\n          .reduce((prevVal, elem) => prevVal + elem.emojis.filter((emoji) => emoji.name === 'raiseHand').length, 0);\n      }\n      return 0;\n    }\n\n    function tsToHHmmss(ts) {\n      return (new Date(ts).toISOString().substr(11, 8));\n    }\n\n    function totalOfActivity() {\n      const minTime = Object.values(activitiesJson.users || {}).reduce((prevVal, elem) => {\n        if (prevVal === 0 || elem.registeredOn < prevVal) return elem.registeredOn;\n        return prevVal;\n      }, 0);\n\n      const maxTime = Object.values(activitiesJson.users || {}).reduce((prevVal, elem) => {\n        if (elem.leftOn === 0) return (new Date()).getTime();\n        if (elem.leftOn > prevVal) return elem.leftOn;\n        return prevVal;\n      }, 0);\n\n      return maxTime - minTime;\n    }\n\n    return (\n      <div className=\"mx-10\">\n        <div className=\"flex items-start justify-between pb-3\">\n          <h1 className=\"mt-3 text-2xl font-semibold whitespace-nowrap inline-block\">\n            <FormattedMessage id=\"app.learningDashboard.dashboardTitle\" defaultMessage=\"Learning Dashboard\" />\n            <br />\n            <span className=\"text-sm font-medium\">{activitiesJson.name || ''}</span>\n          </h1>\n          <div className=\"mt-3 text-right px-4 py-1 text-gray-500 inline-block\">\n            <p className=\"font-bold\">\n              <FormattedDate\n                value={activitiesJson.createdOn}\n                year=\"numeric\"\n                month=\"short\"\n                day=\"numeric\"\n              />\n              {\n                        activitiesJson.endedOn > 0\n                          ? (\n                            <span className=\"px-2 py-1 ml-3 font-semibold leading-tight text-red-700 bg-red-100 rounded-full\">\n                              <FormattedMessage id=\"app.learningDashboard.indicators.meetingStatusEnded\" defaultMessage=\"Ended\" />\n                            </span>\n                          )\n                          : (\n                            <span className=\"px-2 py-1 ml-3 font-semibold leading-tight text-green-700 bg-green-100 rounded-full\">\n                              <FormattedMessage id=\"app.learningDashboard.indicators.meetingStatusActive\" defaultMessage=\"Active\" />\n                            </span>\n                          )\n                    }\n            </p>\n            <p>\n              <FormattedMessage id=\"app.learningDashboard.indicators.duration\" defaultMessage=\"Duration\" />\n              :&nbsp;\n              {tsToHHmmss(totalOfActivity())}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n          <div aria-hidden=\"true\" className=\"cursor-pointer\" onClick={() => { this.setState({ tab: 'overview' }); }}>\n            <Card\n              name={intl.formatMessage({ id: 'app.learningDashboard.indicators.participants', defaultMessage: 'Participants' })}\n              number={Object.values(activitiesJson.users || {}).length}\n              cardClass=\"border-pink-500\"\n              iconClass=\"bg-pink-50 text-pink-500\"\n              onClick={() => {\n                this.setState({ tab: 'overview' });\n              }}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                />\n              </svg>\n            </Card>\n          </div>\n          <div aria-hidden=\"true\" className=\"cursor-pointer\" onClick={() => { this.setState({ tab: 'polling' }); }}>\n            <Card\n              name={intl.formatMessage({ id: 'app.learningDashboard.indicators.polls', defaultMessage: 'Polls' })}\n              number={Object.values(activitiesJson.polls || {}).length}\n              cardClass=\"border-blue-500\"\n              iconClass=\"bg-blue-100 text-blue-500\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\"\n                />\n              </svg>\n            </Card>\n          </div>\n          <Card\n            name={intl.formatMessage({ id: 'app.learningDashboard.indicators.raiseHand', defaultMessage: 'Raise Hand' })}\n            number={totalOfRaiseHand()}\n            cardClass=\"border-purple-500\"\n            iconClass=\"bg-purple-200 text-purple-500\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-6 w-6\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 00-3 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11m0-5.5a1.5 1.5 0 013 0v3m0 0V11\"\n              />\n            </svg>\n          </Card>\n        </div>\n        <h1 className=\"block my-1 pr-2 text-xl font-semibold\">\n          { tab === 'overview'\n            ? <FormattedMessage id=\"app.learningDashboard.participantsTable.title\" defaultMessage=\"Overview\" />\n            : null }\n          { tab === 'polling'\n            ? <FormattedMessage id=\"app.learningDashboard.pollsTable.title\" defaultMessage=\"Polling\" />\n            : null }\n        </h1>\n        <div className=\"w-full overflow-hidden rounded-md shadow-xs border-2 border-gray-100\">\n          <div className=\"w-full overflow-x-auto\">\n            { tab === 'overview'\n              ? (\n                <UsersTable\n                  allUsers={activitiesJson.users}\n                  totalOfActivityTime={totalOfActivity()}\n                />\n              )\n              : null }\n            { tab === 'polling'\n              ? <PollsTable polls={activitiesJson.polls} allUsers={activitiesJson.users} />\n              : null }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { IntlProvider } from 'react-intl';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      intlMessages: {},\n      intlLocale: 'en',\n    };\n\n    this.setMessages();\n  }\n\n  setMessages() {\n    let { language } = navigator;\n\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n    if (typeof params.lang !== 'undefined') {\n      language = params.lang;\n    }\n\n    const fetchMessages = (lang) => new Promise((resolve, reject) => {\n      const url = `/html5client/locales/${lang.replace('-', '_')}.json`;\n      fetch(url).then((response) => {\n        if (!response.ok) return reject();\n        return resolve(response.json());\n      });\n    });\n\n    Promise.all([fetchMessages('en'), fetchMessages(language)])\n      .then((values) => {\n        let mergedMessages = {};\n\n        if (values[0]) {\n          mergedMessages = Object.assign(mergedMessages, values[0]);\n        }\n\n        if (values[1]) {\n          mergedMessages = Object.assign(mergedMessages, values[1]);\n        }\n\n        this.setState({ intlMessages: mergedMessages, intlLocale: language });\n      }).catch(() => {});\n  }\n\n  render() {\n    const { intlLocale, intlMessages } = this.state;\n\n    return (\n      <IntlProvider defaultLocale=\"en\" locale={intlLocale} messages={intlMessages}>\n        <App />\n      </IntlProvider>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Dashboard />, rootElement);\n\nreportWebVitals();\n"],"sourceRoot":""}