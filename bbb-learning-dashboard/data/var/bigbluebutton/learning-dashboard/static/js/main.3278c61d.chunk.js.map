{"version":3,"sources":["components/Card.jsx","services/EmojiService.js","components/UserAvatar.jsx","components/UsersTable.jsx","components/StatusTable.jsx","components/PollsTable.jsx","components/ErrorMessage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","number","name","children","iconClass","cardClass","className","emojiConfigs","away","icon","intlId","defaultMessage","neutral","confused","sad","happy","applause","thumbsUp","thumbsDown","raiseHand","getUserEmojisSummary","user","skipNames","start","end","userEmojis","emojis","forEach","emoji","split","indexOf","sentOn","UserAvatar","isModerator","xmlns","fill","viewBox","stroke","isDialIn","strokeLinecap","strokeLinejoin","strokeWidth","d","UsersTable","this","allUsers","totalOfActivityTime","totalOfPolls","tab","getSumOfTime","eventsArr","reduce","prevVal","elem","stoppedOn","startedOn","Date","getTime","usersEmojisSummary","getOnlinePercentage","registeredOn","leftOn","totalUserOnlineTime","Math","ceil","tsToHHmmss","ts","toISOString","substr","Object","values","intId","usersActivityScore","allUsersArr","filter","currUser","userPoints","usersTalkTime","map","talk","totalTime","maxTalkTime","max","usersTotalOfMessages","totalOfMessages","maxMessages","usersRaiseHand","length","maxRaiseHand","userRaiseHand","usersEmojis","maxEmojis","answers","getActivityScore","id","sort","a","b","toLowerCase","value","month","day","hour","minute","second","title","toString","style","width","role","webcams","keys","height","x","minimumFractionDigits","maximumFractionDigits","colSpan","React","Component","injectIntl","StatusTable","spanMinutes","intl","usersRegisteredTimes","usersLeftTimes","firstRegisteredOnTime","min","lastLeftOnTime","periods","currPeriod","push","period","userEmojisInPeriod","formatDate","PollsTable","polls","getUserAnswer","poll","pollId","index","question","anonymous","formatMessage","anonymousAnswers","answer","ErrorMessage","message","fillRule","clipRule","App","state","loading","activitiesJson","meetingId","learningDashboardAccessToken","setDashboardParams","setInterval","fetchActivitiesJson","urlSearchParams","URLSearchParams","window","location","search","params","fromEntries","entries","meeting","report","cookieName","decodeURIComponent","document","cookie","val","substring","cookieExpiresDate","setTime","toGMTString","setState","fetch","then","response","json","catch","totalOfActivity","minTime","users","createdOn","year","endedOn","onClick","u","formatNumber","meetingAveragePoints","nrOfUsers","totalTalkTime","prev","totalMessages","totalRaiseHand","totalEmojis","getAverageActivityScore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","RTL_LANGUAGES","getLanguage","language","navigator","lang","Dashboard","intlMessages","intlLocale","setMessages","setRtl","fetchMessages","Promise","resolve","reject","url","replace","ok","all","mergedMessages","assign","includes","body","parentNode","setAttribute","defaultLocale","locale","messages","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3278c61d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card(props) {\n  const {\n    number, name, children, iconClass, cardClass,\n  } = props;\n\n  return (\n    <div className={`flex items-center justify-between p-4 bg-white rounded-md shadow border-l-8 ${cardClass}`}>\n      <div className=\"w-70\">\n        <p className=\"text-lg font-semibold text-gray-700\">\n          { number }\n        </p>\n        <p className=\"mb-2 text-sm font-medium text-gray-600\">\n          { name }\n        </p>\n      </div>\n      <div className={`p-3 mr-4 text-orange-500 rounded-full ${iconClass}`}>\n        { children }\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","export const emojiConfigs = {\n  away: {\n    icon: 'icon-bbb-time',\n    intlId: 'app.actionsBar.emojiMenu.awayLabel',\n    defaultMessage: 'Away',\n  },\n  neutral: {\n    icon: 'icon-bbb-undecided',\n    intlId: 'app.actionsBar.emojiMenu.neutralLabel',\n    defaultMessage: 'Undecided',\n  },\n  confused: {\n    icon: 'icon-bbb-confused',\n    intlId: 'app.actionsBar.emojiMenu.confusedLabel',\n    defaultMessage: 'Confused',\n  },\n  sad: {\n    icon: 'icon-bbb-sad',\n    intlId: 'app.actionsBar.emojiMenu.sadLabel',\n    defaultMessage: 'Sad',\n  },\n  happy: {\n    icon: 'icon-bbb-happy',\n    intlId: 'app.actionsBar.emojiMenu.happyLabel',\n    defaultMessage: 'Happy',\n  },\n  applause: {\n    icon: 'icon-bbb-applause',\n    intlId: 'app.actionsBar.emojiMenu.applauseLabel',\n    defaultMessage: 'Applaud',\n  },\n  thumbsUp: {\n    icon: 'icon-bbb-thumbs_up',\n    intlId: 'app.actionsBar.emojiMenu.thumbsUpLabel',\n    defaultMessage: 'Thumbs up',\n  },\n  thumbsDown: {\n    icon: 'icon-bbb-thumbs_down',\n    intlId: 'app.actionsBar.emojiMenu.thumbsDownLabel',\n    defaultMessage: 'Thumbs down',\n  },\n  raiseHand: {\n    icon: 'icon-bbb-hand',\n    intlId: 'app.actionsBar.emojiMenu.raiseHandLabel',\n    defaultMessage: 'Raise hand',\n  },\n};\n\nexport function getUserEmojisSummary(user, skipNames = null, start = null, end = null) {\n  const userEmojis = {};\n  user.emojis.forEach((emoji) => {\n    if (typeof emojiConfigs[emoji.name] === 'undefined') return;\n    if (skipNames != null && skipNames.split(',').indexOf(emoji.name) > -1) return;\n    if (start != null && emoji.sentOn < start) return;\n    if (end != null && emoji.sentOn > end) return;\n    if (typeof userEmojis[emoji.name] === 'undefined') {\n      userEmojis[emoji.name] = 0;\n    }\n    userEmojis[emoji.name] += 1;\n  });\n  return userEmojis;\n}\n","import React from 'react';\n\nfunction UserAvatar(props) {\n  const {\n    user,\n  } = props;\n\n  return (\n    <div className={`border-2 border-gray-800 items-center ${user.isModerator ? 'rounded-md' : 'rounded-full'}`}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"h-full w-full p-1\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n      >\n        {user.isDialIn\n          ? (\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"\n            />\n          )\n          : (\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\n            />\n          )}\n      </svg>\n    </div>\n  );\n}\n\nexport default UserAvatar;\n","import React from 'react';\nimport {\n  FormattedMessage, FormattedDate, FormattedNumber, injectIntl,\n} from 'react-intl';\nimport { getUserEmojisSummary, emojiConfigs } from '../services/EmojiService';\nimport UserAvatar from './UserAvatar';\n\nclass UsersTable extends React.Component {\n  render() {\n    const {\n      allUsers, totalOfActivityTime, totalOfPolls, tab,\n    } = this.props;\n\n    function getSumOfTime(eventsArr) {\n      return eventsArr.reduce((prevVal, elem) => {\n        if (elem.stoppedOn > 0) return prevVal + (elem.stoppedOn - elem.startedOn);\n        return prevVal + (new Date().getTime() - elem.startedOn);\n      }, 0);\n    }\n\n    function getActivityScore(user) {\n      if (user.isModerator) return 0;\n\n      const allUsersArr = Object.values(allUsers || {}).filter((currUser) => !currUser.isModerator);\n      let userPoints = 0;\n\n      // Calculate points of Talking\n      const usersTalkTime = allUsersArr.map((currUser) => currUser.talk.totalTime);\n      const maxTalkTime = Math.max(...usersTalkTime);\n      if (maxTalkTime > 0) {\n        userPoints += (user.talk.totalTime / maxTalkTime) * 2;\n      }\n\n      // Calculate points of Chatting\n      const usersTotalOfMessages = allUsersArr.map((currUser) => currUser.totalOfMessages);\n      const maxMessages = Math.max(...usersTotalOfMessages);\n      if (maxMessages > 0) {\n        userPoints += (user.totalOfMessages / maxMessages) * 2;\n      }\n\n      // Calculate points of Raise hand\n      const usersRaiseHand = allUsersArr.map((currUser) => currUser.emojis.filter((emoji) => emoji.name === 'raiseHand').length);\n      const maxRaiseHand = Math.max(...usersRaiseHand);\n      const userRaiseHand = user.emojis.filter((emoji) => emoji.name === 'raiseHand').length;\n      if (maxRaiseHand > 0) {\n        userPoints += (userRaiseHand / maxRaiseHand) * 2;\n      }\n\n      // Calculate points of Emojis\n      const usersEmojis = allUsersArr.map((currUser) => currUser.emojis.filter((emoji) => emoji.name !== 'raiseHand').length);\n      const maxEmojis = Math.max(...usersEmojis);\n      const userEmojis = user.emojis.filter((emoji) => emoji.name !== 'raiseHand').length;\n      if (maxEmojis > 0) {\n        userPoints += (userEmojis / maxEmojis) * 2;\n      }\n\n      // Calculate points of Polls\n      if (totalOfPolls > 0) {\n        userPoints += (Object.values(user.answers || {}).length / totalOfPolls) * 2;\n      }\n\n      return userPoints;\n    }\n\n    const usersEmojisSummary = {};\n    Object.values(allUsers || {}).forEach((user) => {\n      usersEmojisSummary[user.intId] = getUserEmojisSummary(user, 'raiseHand');\n    });\n\n    function getOnlinePercentage(registeredOn, leftOn) {\n      const totalUserOnlineTime = ((leftOn > 0 ? leftOn : (new Date()).getTime())) - registeredOn;\n      return Math.ceil((totalUserOnlineTime / totalOfActivityTime) * 100);\n    }\n\n    function tsToHHmmss(ts) {\n      return (new Date(ts).toISOString().substr(11, 8));\n    }\n\n    const usersActivityScore = {};\n    Object.values(allUsers || {}).forEach((user) => {\n      usersActivityScore[user.intId] = getActivityScore(user);\n    });\n\n    return (\n      <table className=\"w-full whitespace-no-wrap\">\n        <thead>\n          <tr className=\"text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b bg-gray-100\">\n            <th className=\"px-4 py-3 col-text-left\">\n              <FormattedMessage id=\"app.learningDashboard.user\" defaultMessage=\"User\" />\n              {\n                tab === 'overview'\n                  ? (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-4 w-4 inline\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\n                    </svg>\n                  )\n                  : null\n              }\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colOnline\" defaultMessage=\"Online time\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colTalk\" defaultMessage=\"Talk time\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colWebcam\" defaultMessage=\"Webcam Time\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colMessages\" defaultMessage=\"Messages\" />\n            </th>\n            <th className=\"px-4 py-3 col-text-left\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colEmojis\" defaultMessage=\"Emojis\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colRaiseHands\" defaultMessage=\"Raise Hand\" />\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colActivityScore\" defaultMessage=\"Activity Score\" />\n              {\n                tab === 'overview_activityscore'\n                  ? (\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-4 w-4 inline\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\n                    </svg>\n                  )\n                  : null\n              }\n            </th>\n            <th className=\"px-4 py-3 text-center\">\n              <FormattedMessage id=\"app.learningDashboard.usersTable.colStatus\" defaultMessage=\"Status\" />\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y\">\n          { typeof allUsers === 'object' && Object.values(allUsers || {}).length > 0 ? (\n            Object.values(allUsers || {})\n              .sort((a, b) => {\n                if (tab === 'overview_activityscore' && usersActivityScore[a.intId] < usersActivityScore[b.intId]) return 1;\n                if (tab === 'overview_activityscore' && usersActivityScore[a.intId] > usersActivityScore[b.intId]) return -1;\n                if (a.isModerator === false && b.isModerator === true) return 1;\n                if (a.isModerator === true && b.isModerator === false) return -1;\n                if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n                if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n                return 0;\n              })\n              .map((user) => (\n                <tr key={user} className=\"text-gray-700\">\n                  <td className=\"px-4 py-3 col-text-left text-sm\">\n                    <div className=\"inline-block relative w-8 h-8 rounded-full\">\n                      {/* <img className=\"object-cover w-full h-full rounded-full\" */}\n                      {/*     src=\"\" */}\n                      {/*     alt=\"\" loading=\"lazy\" /> */}\n                      <UserAvatar user={user} />\n                      <div\n                        className=\"absolute inset-0 rounded-full shadow-inner\"\n                        aria-hidden=\"true\"\n                      />\n                    </div>\n                    &nbsp;&nbsp;&nbsp;\n                    <div className=\"inline-block\">\n                      <p className=\"font-semibold\">\n                        {user.name}\n                      </p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          className=\"h-4 w-4 inline\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"2\"\n                            d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\"\n                          />\n                        </svg>\n                        <FormattedDate\n                          value={user.registeredOn}\n                          month=\"short\"\n                          day=\"numeric\"\n                          hour=\"2-digit\"\n                          minute=\"2-digit\"\n                          second=\"2-digit\"\n                        />\n                      </p>\n                      {\n                          user.leftOn > 0\n                            ? (\n                              <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  className=\"h-4 w-4 inline\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth=\"2\"\n                                    d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"\n                                  />\n                                </svg>\n\n                                <FormattedDate\n                                  value={user.leftOn}\n                                  month=\"short\"\n                                  day=\"numeric\"\n                                  hour=\"2-digit\"\n                                  minute=\"2-digit\"\n                                  second=\"2-digit\"\n                                />\n                              </p>\n                            )\n                            : null\n                        }\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center items-center\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-4 w-4 inline\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M5.636 18.364a9 9 0 010-12.728m12.728 0a9 9 0 010 12.728m-9.9-2.829a5 5 0 010-7.07m7.072 0a5 5 0 010 7.07M13 12a1 1 0 11-2 0 1 1 0 012 0z\"\n                      />\n                    </svg>\n                    &nbsp;\n                    { tsToHHmmss(\n                      (user.leftOn > 0\n                        ? user.leftOn\n                        : (new Date()).getTime()) - user.registeredOn,\n                    ) }\n                    <br />\n                    <div\n                      className=\"bg-gray-200 transition-colors duration-500 rounded-full overflow-hidden\"\n                      title={`${getOnlinePercentage(user.registeredOn, user.leftOn).toString()}%`}\n                    >\n                      <div\n                        aria-label=\" \"\n                        className=\"bg-gradient-to-br from-green-100 to-green-600 transition-colors duration-900 h-1.5\"\n                        style={{ width: `${getOnlinePercentage(user.registeredOn, user.leftOn).toString()}%` }}\n                        role=\"progressbar\"\n                      />\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { user.talk.totalTime > 0\n                      ? (\n                        <span className=\"text-center\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n                            />\n                          </svg>\n                          &nbsp;\n                          { tsToHHmmss(user.talk.totalTime) }\n                        </span>\n                      ) : null }\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { getSumOfTime(user.webcams) > 0\n                      ? (\n                        <span className=\"text-center\">\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\"\n                            />\n                          </svg>\n                          &nbsp;\n                          { tsToHHmmss(getSumOfTime(user.webcams)) }\n                        </span>\n                      ) : null }\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { user.totalOfMessages > 0\n                      ? (\n                        <span>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"\n                            />\n                          </svg>\n                          &nbsp;\n                          {user.totalOfMessages}\n                        </span>\n                      ) : null }\n                  </td>\n                  <td className=\"px-4 py-3 text-sm col-text-left\">\n                    {\n                      Object.keys(usersEmojisSummary[user.intId] || {}).map((emoji) => (\n                        <div className=\"text-xs whitespace-nowrap\">\n                          <i className={`${emojiConfigs[emoji].icon} text-sm`} />\n                          &nbsp;\n                          { usersEmojisSummary[user.intId][emoji] }\n                          &nbsp;\n                          <FormattedMessage\n                            id={emojiConfigs[emoji].intlId}\n                            defaultMessage={emojiConfigs[emoji].defaultMessage}\n                          />\n                        </div>\n                      ))\n                    }\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-center\">\n                    { user.emojis.filter((emoji) => emoji.name === 'raiseHand').length > 0\n                      ? (\n                        <span>\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-4 w-4 inline\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"2\"\n                              d=\"M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 00-3 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11m0-5.5a1.5 1.5 0 013 0v3m0 0V11\"\n                            />\n                          </svg>\n                          &nbsp;\n                          {user.emojis.filter((emoji) => emoji.name === 'raiseHand').length}\n                        </span>\n                      ) : null }\n                  </td>\n                  {\n                      !user.isModerator ? (\n                        <td className=\"px-4 py-3 text-sm text-center items\">\n                          <svg viewBox=\"0 0 82 12\" width=\"82\" height=\"12\" className=\"flex-none m-auto inline\">\n                            <rect width=\"12\" height=\"12\" fill={usersActivityScore[user.intId] > 0 ? '#A7F3D0' : '#e4e4e7'} />\n                            <rect width=\"12\" height=\"12\" x=\"14\" fill={usersActivityScore[user.intId] > 2 ? '#6EE7B7' : '#e4e4e7'} />\n                            <rect width=\"12\" height=\"12\" x=\"28\" fill={usersActivityScore[user.intId] > 4 ? '#34D399' : '#e4e4e7'} />\n                            <rect width=\"12\" height=\"12\" x=\"42\" fill={usersActivityScore[user.intId] > 6 ? '#10B981' : '#e4e4e7'} />\n                            <rect width=\"12\" height=\"12\" x=\"56\" fill={usersActivityScore[user.intId] > 8 ? '#059669' : '#e4e4e7'} />\n                            <rect width=\"12\" height=\"12\" x=\"70\" fill={usersActivityScore[user.intId] === 10 ? '#047857' : '#e4e4e7'} />\n                          </svg>\n                          &nbsp;\n                          <span className=\"text-xs bg-gray-200 rounded-full px-2\">\n                            <FormattedNumber value={usersActivityScore[user.intId]} minimumFractionDigits=\"0\" maximumFractionDigits=\"1\" />\n                          </span>\n                        </td>\n                      ) : <td />\n                    }\n                  <td className=\"px-4 py-3 text-xs text-center\">\n                    {\n                                      user.leftOn > 0\n                                        ? (\n                                          <span className=\"px-2 py-1 font-semibold leading-tight text-red-700 bg-red-100 rounded-full\">\n                                            <FormattedMessage id=\"app.learningDashboard.usersTable.userStatusOffline\" defaultMessage=\"Offline\" />\n                                          </span>\n                                        )\n                                        : (\n                                          <span className=\"px-2 py-1 font-semibold leading-tight text-green-700 bg-green-100 rounded-full\">\n                                            <FormattedMessage id=\"app.learningDashboard.usersTable.userStatusOnline\" defaultMessage=\"Online\" />\n                                          </span>\n                                        )\n                                  }\n                  </td>\n                </tr>\n              ))\n          ) : (\n            <tr className=\"text-gray-700\">\n              <td colSpan=\"8\" className=\"px-4 py-3 text-sm text-center\">\n                <FormattedMessage id=\"app.learningDashboard.usersTable.noUsers\" defaultMessage=\"No users\" />\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default injectIntl(UsersTable);\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { getUserEmojisSummary, emojiConfigs } from '../services/EmojiService';\nimport UserAvatar from './UserAvatar';\n\nclass StatusTable extends React.Component {\n  render() {\n    const spanMinutes = 10 * 60000; // 10 minutes default\n    const { allUsers, intl } = this.props;\n\n    function tsToHHmmss(ts) {\n      return (new Date(ts).toISOString().substr(11, 8));\n    }\n\n    const usersRegisteredTimes = Object.values(allUsers || {}).map((user) => user.registeredOn);\n    const usersLeftTimes = Object.values(allUsers || {}).map((user) => {\n      if (user.leftOn === 0) return (new Date()).getTime();\n      return user.leftOn;\n    });\n\n    const firstRegisteredOnTime = Math.min(...usersRegisteredTimes);\n    const lastLeftOnTime = Math.max(...usersLeftTimes);\n\n    const periods = [];\n    let currPeriod = firstRegisteredOnTime;\n    while (currPeriod < lastLeftOnTime) {\n      periods.push(currPeriod);\n      currPeriod += spanMinutes;\n    }\n\n    return (\n      <table className=\"w-full whitespace-no-wrap\">\n        <thead>\n          <tr className=\"text-xs font-semibold tracking-wide text-gray-500 uppercase border-b bg-gray-100\">\n            <th className=\"px-4 py-3 col-text-left\">\n              <FormattedMessage id=\"app.learningDashboard.user\" defaultMessage=\"User\" />\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-4 w-4 inline\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\n              </svg>\n            </th>\n            { periods.map((period) => <th className=\"px-4 py-3 col-text-left\">{ `${tsToHHmmss(period - firstRegisteredOnTime)}` }</th>) }\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y\">\n          { typeof allUsers === 'object' && Object.values(allUsers || {}).length > 0 ? (\n            Object.values(allUsers || {})\n              .sort((a, b) => {\n                if (a.isModerator === false && b.isModerator === true) return 1;\n                if (a.isModerator === true && b.isModerator === false) return -1;\n                if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n                if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n                return 0;\n              })\n              .map((user) => (\n                <tr className=\"text-gray-700\">\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center text-sm\">\n                      <div className=\"relative hidden w-8 h-8 rounded-full md:block\">\n                        <UserAvatar user={user} />\n                      </div>\n                      &nbsp;&nbsp;\n                      <div>\n                        <p className=\"font-semibold\">{user.name}</p>\n                      </div>\n                    </div>\n                  </td>\n                  { periods.map((period) => {\n                    const userEmojisInPeriod = getUserEmojisSummary(user,\n                      null,\n                      period,\n                      period + spanMinutes);\n                    return (\n                      <td className=\"px-4 py-3 text-sm col-text-left\">\n                        {\n                          user.registeredOn > period && user.registeredOn < period + spanMinutes\n                            ? (\n                              <span title={intl.formatDate(user.registeredOn, {\n                                month: 'short',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit',\n                                second: '2-digit',\n                              })}\n                              >\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  className=\"h-4 w-4 text-xs text-green-400\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth=\"2\"\n                                    d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\"\n                                  />\n                                </svg>\n                              </span>\n                            ) : null\n                        }\n                        { Object.keys(userEmojisInPeriod)\n                          .map((emoji) => (\n                            <div className=\"text-sm text-gray-800\">\n                              <i className={`${emojiConfigs[emoji].icon} text-sm`} />\n                            &nbsp;\n                              { userEmojisInPeriod[emoji] }\n                            &nbsp;\n                              <FormattedMessage\n                                id={emojiConfigs[emoji].intlId}\n                                defaultMessage={emojiConfigs[emoji].defaultMessage}\n                              />\n                            </div>\n                          )) }\n                        {\n                          user.leftOn > period && user.leftOn < period + spanMinutes\n                            ? (\n                              <span title={intl.formatDate(user.leftOn, {\n                                month: 'short',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit',\n                                second: '2-digit',\n                              })}\n                              >\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  className=\"h-4 w-4 text-red-400\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth=\"2\"\n                                    d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"\n                                  />\n                                </svg>\n                              </span>\n                            ) : null\n                        }\n                      </td>\n                    );\n                  }) }\n                </tr>\n              ))) : null }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default injectIntl(StatusTable);\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport UserAvatar from './UserAvatar';\n\nclass PollsTable extends React.Component {\n  render() {\n    const { allUsers, polls } = this.props;\n    const { intl } = this.props;\n\n    function getUserAnswer(user, poll) {\n      if (typeof user.answers[poll.pollId] !== 'undefined') {\n        return user.answers[poll.pollId];\n      }\n      return '';\n    }\n\n    return (\n      <table className=\"w-full whitespace-no-wrap\">\n        <thead>\n          <tr className=\"text-xs font-semibold tracking-wide col-text-left text-gray-500 uppercase border-b bg-gray-100\">\n            <th className=\"px-4 py-3\">\n              <FormattedMessage id=\"app.learningDashboard.user\" defaultMessage=\"User\" />\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-4 w-4 inline\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\n              </svg>\n            </th>\n            {typeof polls === 'object' && Object.values(polls || {}).length > 0 ? (\n              Object.values(polls || {}).map((poll, index) => <th className=\"px-4 py-3 text-center\">{poll.question || `Poll ${index + 1}`}</th>)\n            ) : null }\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y\">\n          { typeof allUsers === 'object' && Object.values(allUsers || {}).length > 0 ? (\n            Object.values(allUsers || {})\n              .filter((user) => Object.values(user.answers).length > 0)\n              .sort((a, b) => {\n                if (a.isModerator === false && b.isModerator === true) return 1;\n                if (a.isModerator === true && b.isModerator === false) return -1;\n                if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n                if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n                return 0;\n              })\n              .map((user) => (\n                <tr className=\"text-gray-700\">\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center text-sm\">\n                      <div className=\"relative hidden w-8 h-8 rounded-full md:block\">\n                        <UserAvatar user={user} />\n                      </div>\n                      &nbsp;&nbsp;\n                      <div>\n                        <p className=\"font-semibold\">{user.name}</p>\n                      </div>\n                    </div>\n                  </td>\n\n                  {typeof polls === 'object' && Object.values(polls || {}).length > 0 ? (\n                    Object.values(polls || {}).map((poll) => (\n                      <td className=\"px-4 py-3 text-sm text-center\">\n                        { getUserAnswer(user, poll) }\n                        { poll.anonymous\n                          ? (\n                            <span title={intl.formatMessage({\n                              id: 'app.learningDashboard.pollsTable.anonymousAnswer',\n                              defaultMessage: 'Anonymous Poll (answers in the last row)',\n                            })}\n                            >\n                              <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-4 w-4 inline\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth=\"2\"\n                                  d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                                />\n                              </svg>\n                            </span>\n                          )\n                          : null }\n                      </td>\n                    ))\n                  ) : null }\n                </tr>\n              ))) : null }\n          <tr className=\"text-gray-700\">\n            <td className=\"px-4 py-3\">\n              <div className=\"flex items-center text-sm\">\n                <div className=\"relative hidden w-8 h-8 mr-3 rounded-full md:block\">\n                  {/* <img className=\"object-cover w-full h-full rounded-full\" */}\n                  {/*     src=\"\" */}\n                  {/*     alt=\"\" loading=\"lazy\" /> */}\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"relative hidden w-8 h-8 mr-3 rounded-full md:block\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <div\n                    className=\"absolute inset-0 rounded-full shadow-inner\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">\n                    <FormattedMessage id=\"app.learningDashboard.pollsTable.anonymousRowName\" defaultMessage=\"Anonymous\" />\n                  </p>\n                </div>\n              </div>\n            </td>\n            {typeof polls === 'object' && Object.values(polls || {}).length > 0 ? (\n              Object.values(polls || {}).map((poll) => (\n                <td className=\"px-4 py-3 text-sm text-center\">\n                  { poll.anonymousAnswers.map((answer) => <p>{answer}</p>) }\n                </td>\n              ))\n            ) : null }\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default injectIntl(PollsTable);\n","import React from 'react';\n\nfunction ErrorMessage(props) {\n  const { message } = props;\n\n  return (\n    <div className=\"container flex flex-col items-center px-6 mx-auto\">\n      <svg className=\"w-12 h-12 my-8 text-gray-700\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z\"\n          clipRule=\"evenodd\"\n        />\n      </svg>\n      <h1 className=\"text-xl font-semibold text-gray-700 dark:text-gray-200\">\n        {message}\n      </h1>\n    </div>\n  );\n}\n\nexport default ErrorMessage;\n","import React from 'react';\nimport './App.css';\nimport './bbb-icons.css';\nimport { FormattedMessage, FormattedDate, injectIntl } from 'react-intl';\nimport Card from './components/Card';\nimport UsersTable from './components/UsersTable';\nimport StatusTable from './components/StatusTable';\nimport PollsTable from './components/PollsTable';\nimport ErrorMessage from './components/ErrorMessage';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      activitiesJson: {},\n      tab: 'overview',\n      meetingId: '',\n      learningDashboardAccessToken: '',\n    };\n  }\n\n  componentDidMount() {\n    this.setDashboardParams();\n    setInterval(() => {\n      this.fetchActivitiesJson();\n    }, 10000);\n  }\n\n  setDashboardParams() {\n    let learningDashboardAccessToken = '';\n    let meetingId = '';\n\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n\n    if (typeof params.meeting !== 'undefined') {\n      meetingId = params.meeting;\n    }\n\n    if (typeof params.report !== 'undefined') {\n      learningDashboardAccessToken = params.report;\n    } else {\n      const cookieName = `learningDashboardAccessToken-${params.meeting}`;\n      const cDecoded = decodeURIComponent(document.cookie);\n      const cArr = cDecoded.split('; ');\n      cArr.forEach((val) => {\n        if (val.indexOf(`${cookieName}=`) === 0) learningDashboardAccessToken = val.substring((`${cookieName}=`).length);\n      });\n\n      // Extend AccessToken lifetime by 30d (in each access)\n      if (learningDashboardAccessToken !== '') {\n        const cookieExpiresDate = new Date();\n        cookieExpiresDate.setTime(cookieExpiresDate.getTime() + (3600000 * 24 * 30));\n        document.cookie = `learningDashboardAccessToken-${meetingId}=${learningDashboardAccessToken}; expires=${cookieExpiresDate.toGMTString()}; path=/;SameSite=None;Secure`;\n      }\n    }\n\n    this.setState({ learningDashboardAccessToken, meetingId }, this.fetchActivitiesJson);\n  }\n\n  fetchActivitiesJson() {\n    const { learningDashboardAccessToken, meetingId } = this.state;\n\n    if (learningDashboardAccessToken !== '') {\n      fetch(`${meetingId}/${learningDashboardAccessToken}/learning_dashboard_data.json`)\n        .then((response) => response.json())\n        .then((json) => {\n          this.setState({ activitiesJson: json, loading: false });\n          document.title = `Learning Dashboard - ${json.name}`;\n        }).catch(() => {\n          this.setState({ loading: false });\n        });\n    } else {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    const {\n      activitiesJson, tab, learningDashboardAccessToken, loading,\n    } = this.state;\n    const { intl } = this.props;\n\n    document.title = `${intl.formatMessage({ id: 'app.learningDashboard.dashboardTitle', defaultMessage: 'Learning Dashboard' })} - ${activitiesJson.name}`;\n\n    function totalOfRaiseHand() {\n      if (activitiesJson && activitiesJson.users) {\n        return Object.values(activitiesJson.users)\n          .reduce((prevVal, elem) => prevVal + elem.emojis.filter((emoji) => emoji.name === 'raiseHand').length, 0);\n      }\n      return 0;\n    }\n\n    function tsToHHmmss(ts) {\n      return (new Date(ts).toISOString().substr(11, 8));\n    }\n\n    function totalOfActivity() {\n      const minTime = Object.values(activitiesJson.users || {}).reduce((prevVal, elem) => {\n        if (prevVal === 0 || elem.registeredOn < prevVal) return elem.registeredOn;\n        return prevVal;\n      }, 0);\n\n      const maxTime = Object.values(activitiesJson.users || {}).reduce((prevVal, elem) => {\n        if (elem.leftOn === 0) return (new Date()).getTime();\n        if (elem.leftOn > prevVal) return elem.leftOn;\n        return prevVal;\n      }, 0);\n\n      return maxTime - minTime;\n    }\n\n    function getAverageActivityScore() {\n      let meetingAveragePoints = 0;\n\n      const allUsers = Object.values(activitiesJson.users || {})\n        .filter((currUser) => !currUser.isModerator);\n      const nrOfUsers = allUsers.length;\n\n      // Calculate points of Talking\n      const usersTalkTime = allUsers.map((currUser) => currUser.talk.totalTime);\n      const maxTalkTime = Math.max(...usersTalkTime);\n      const totalTalkTime = usersTalkTime.reduce((prev, val) => prev + val, 0);\n      if (totalTalkTime > 0) {\n        meetingAveragePoints += ((totalTalkTime / nrOfUsers) / maxTalkTime) * 2;\n      }\n\n      // Calculate points of Chatting\n      const usersTotalOfMessages = allUsers.map((currUser) => currUser.totalOfMessages);\n      const maxMessages = Math.max(...usersTotalOfMessages);\n      const totalMessages = usersTotalOfMessages.reduce((prev, val) => prev + val, 0);\n      if (maxMessages > 0) {\n        meetingAveragePoints += ((totalMessages / nrOfUsers) / maxMessages) * 2;\n      }\n\n      // Calculate points of Raise hand\n      const usersRaiseHand = allUsers.map((currUser) => currUser.emojis.filter((emoji) => emoji.name === 'raiseHand').length);\n      const maxRaiseHand = Math.max(...usersRaiseHand);\n      const totalRaiseHand = usersRaiseHand.reduce((prev, val) => prev + val, 0);\n      if (maxRaiseHand > 0) {\n        meetingAveragePoints += ((totalRaiseHand / nrOfUsers) / maxMessages) * 2;\n      }\n\n      // Calculate points of Emojis\n      const usersEmojis = allUsers.map((currUser) => currUser.emojis.filter((emoji) => emoji.name !== 'raiseHand').length);\n      const maxEmojis = Math.max(...usersEmojis);\n      const totalEmojis = usersEmojis.reduce((prev, val) => prev + val, 0);\n      if (maxEmojis > 0) {\n        meetingAveragePoints += ((totalEmojis / nrOfUsers) / maxEmojis) * 2;\n      }\n\n      // Calculate points of Polls\n      const totalOfPolls = Object.values(activitiesJson.polls || {}).length;\n      if (totalOfPolls > 0) {\n        const totalAnswers = allUsers\n          .reduce((prevVal, currUser) => prevVal + Object.values(currUser.answers || {}).length, 0);\n        meetingAveragePoints += ((totalAnswers / nrOfUsers) / totalOfPolls) * 2;\n      }\n\n      return meetingAveragePoints;\n    }\n\n    function getErrorMessage() {\n      if (learningDashboardAccessToken === '') {\n        return intl.formatMessage({ id: 'app.learningDashboard.errors.invalidToken', defaultMessage: 'Invalid session token' });\n      }\n      return intl.formatMessage({ id: 'app.learningDashboard.errors.dataUnavailable', defaultMessage: 'Data is no longer available' });\n    }\n\n    if (loading === false && typeof activitiesJson.name === 'undefined') return <ErrorMessage message={getErrorMessage()} />;\n\n    return (\n      <div className=\"mx-10\">\n        <div className=\"flex items-start justify-between pb-3\">\n          <h1 className=\"mt-3 text-2xl font-semibold whitespace-nowrap inline-block\">\n            <FormattedMessage id=\"app.learningDashboard.dashboardTitle\" defaultMessage=\"Learning Dashboard\" />\n            <br />\n            <span className=\"text-sm font-medium\">{activitiesJson.name || ''}</span>\n          </h1>\n          <div className=\"mt-3 col-text-right py-1 text-gray-500 inline-block\">\n            <p className=\"font-bold\">\n              <div className=\"inline\">\n                <FormattedDate\n                  value={activitiesJson.createdOn}\n                  year=\"numeric\"\n                  month=\"short\"\n                  day=\"numeric\"\n                />\n              </div>\n              &nbsp;&nbsp;\n              {\n                activitiesJson.endedOn > 0\n                  ? (\n                    <span className=\"px-2 py-1 font-semibold leading-tight text-red-700 bg-red-100 rounded-full\">\n                      <FormattedMessage id=\"app.learningDashboard.indicators.meetingStatusEnded\" defaultMessage=\"Ended\" />\n                    </span>\n                  )\n                  : null\n              }\n              {\n                activitiesJson.endedOn === 0\n                  ? (\n                    <span className=\"px-2 py-1 font-semibold leading-tight text-green-700 bg-green-100 rounded-full\">\n                      <FormattedMessage id=\"app.learningDashboard.indicators.meetingStatusActive\" defaultMessage=\"Active\" />\n                    </span>\n                  )\n                  : null\n              }\n            </p>\n            <p>\n              <FormattedMessage id=\"app.learningDashboard.indicators.duration\" defaultMessage=\"Duration\" />\n              :&nbsp;\n              {tsToHHmmss(totalOfActivity())}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n          <div aria-hidden=\"true\" className=\"cursor-pointer\" onClick={() => { this.setState({ tab: 'overview' }); }}>\n            <Card\n              name={\n                activitiesJson.endedOn === 0\n                  ? intl.formatMessage({ id: 'app.learningDashboard.indicators.usersOnline', defaultMessage: 'Active Users' })\n                  : intl.formatMessage({ id: 'app.learningDashboard.indicators.usersTotal', defaultMessage: 'Total Number Of Users' })\n              }\n              number={Object.values(activitiesJson.users || {})\n                .filter((u) => activitiesJson.endedOn > 0 || u.leftOn === 0).length}\n              cardClass=\"border-pink-500\"\n              iconClass=\"bg-pink-50 text-pink-500\"\n              onClick={() => {\n                this.setState({ tab: 'overview' });\n              }}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                />\n              </svg>\n            </Card>\n          </div>\n          <div aria-hidden=\"true\" className=\"cursor-pointer\" onClick={() => { this.setState({ tab: 'polling' }); }}>\n            <Card\n              name={intl.formatMessage({ id: 'app.learningDashboard.indicators.polls', defaultMessage: 'Polls' })}\n              number={Object.values(activitiesJson.polls || {}).length}\n              cardClass=\"border-blue-500\"\n              iconClass=\"bg-blue-100 text-blue-500\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\"\n                />\n              </svg>\n            </Card>\n          </div>\n          <div aria-hidden=\"true\" className=\"cursor-pointer\" onClick={() => { this.setState({ tab: 'status_timeline' }); }}>\n            <Card\n              name={intl.formatMessage({ id: 'app.learningDashboard.indicators.raiseHand', defaultMessage: 'Raise Hand' })}\n              number={totalOfRaiseHand()}\n              cardClass=\"border-purple-500\"\n              iconClass=\"bg-purple-200 text-purple-500\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 00-3 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11m0-5.5a1.5 1.5 0 013 0v3m0 0V11\"\n                />\n              </svg>\n            </Card>\n          </div>\n          <div aria-hidden=\"true\" className=\"cursor-pointer\" onClick={() => { this.setState({ tab: 'overview_activityscore' }); }}>\n            <Card\n              name={intl.formatMessage({ id: 'app.learningDashboard.indicators.activityScore', defaultMessage: 'Activity Score' })}\n              number={intl.formatNumber((getAverageActivityScore() || 0), {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 1,\n              })}\n              cardClass=\"border-green-500\"\n              iconClass=\"bg-green-200 text-green-500\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z\"\n                />\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z\"\n                />\n              </svg>\n            </Card>\n          </div>\n        </div>\n        <h1 className=\"block my-1 pr-2 text-xl font-semibold\">\n          { tab === 'overview' || tab === 'overview_activityscore'\n            ? <FormattedMessage id=\"app.learningDashboard.usersTable.title\" defaultMessage=\"Overview\" />\n            : null }\n          { tab === 'status_timeline'\n            ? <FormattedMessage id=\"app.learningDashboard.statusTimelineTable.title\" defaultMessage=\"Status Timeline\" />\n            : null }\n          { tab === 'polling'\n            ? <FormattedMessage id=\"app.learningDashboard.pollsTable.title\" defaultMessage=\"Polling\" />\n            : null }\n        </h1>\n        <div className=\"w-full overflow-hidden rounded-md shadow-xs border-2 border-gray-100\">\n          <div className=\"w-full overflow-x-auto\">\n            { (tab === 'overview' || tab === 'overview_activityscore')\n              ? (\n                <UsersTable\n                  allUsers={activitiesJson.users}\n                  totalOfActivityTime={totalOfActivity()}\n                  totalOfPolls={Object.values(activitiesJson.polls || {}).length}\n                  tab={tab}\n                />\n              )\n              : null }\n            { (tab === 'status_timeline')\n              ? <StatusTable allUsers={activitiesJson.users} />\n              : null }\n            { tab === 'polling'\n              ? <PollsTable polls={activitiesJson.polls} allUsers={activitiesJson.users} />\n              : null }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(App);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { IntlProvider } from 'react-intl';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst RTL_LANGUAGES = ['ar', 'dv', 'fa', 'he'];\n\nfunction getLanguage() {\n  let { language } = navigator;\n\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlSearchParams.entries());\n  if (typeof params.lang !== 'undefined') {\n    language = params.lang;\n  }\n\n  return language;\n}\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      intlMessages: {},\n      intlLocale: getLanguage(),\n    };\n\n    this.setMessages();\n    this.setRtl();\n  }\n\n  setMessages() {\n    const fetchMessages = (lang) => new Promise((resolve, reject) => {\n      const url = `/html5client/locales/${lang.replace('-', '_')}.json`;\n      fetch(url).then((response) => {\n        if (!response.ok) return reject();\n        return resolve(response.json());\n      });\n    });\n\n    Promise.all([fetchMessages('en'), fetchMessages(getLanguage())])\n      .then((values) => {\n        let mergedMessages = {};\n\n        if (values[0]) {\n          mergedMessages = Object.assign(mergedMessages, values[0]);\n        }\n\n        if (values[1]) {\n          mergedMessages = Object.assign(mergedMessages, values[1]);\n        }\n\n        this.setState({ intlMessages: mergedMessages });\n      }).catch(() => {});\n  }\n\n  setRtl() {\n    const { intlLocale } = this.state;\n\n    if (RTL_LANGUAGES.includes(intlLocale)) {\n      document.body.parentNode.setAttribute('dir', 'rtl');\n    }\n  }\n\n  render() {\n    const { intlLocale, intlMessages } = this.state;\n\n    return (\n      <IntlProvider defaultLocale=\"en\" locale={intlLocale} messages={intlMessages}>\n        <App />\n      </IntlProvider>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Dashboard />, rootElement);\n\nreportWebVitals();\n"],"sourceRoot":""}