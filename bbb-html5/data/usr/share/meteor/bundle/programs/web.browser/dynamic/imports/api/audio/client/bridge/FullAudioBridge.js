function module(e,t,r){(function(e){let t,i,o,s,n,a,l,c;e.export({default:()=>T}),e.link("./base",{default(e){t=e}},0),e.link("/imports/ui/services/auth",{default(e){i=e}},1),e.link("/imports/startup/client/logger",{default(e){o=e}},2),e.link("/imports/ui/services/bbb-webrtc-sfu/fullaudio-broker",{default(e){s=e}},3),e.link("/imports/ui/services/bbb-webrtc-sfu/load-play",{default(e){n=e}},4),e.link("/imports/utils/fetchStunTurnServers",{fetchWebRTCMappedStunTurnServers(e){a=e},getMappedFallbackStun(e){l=e}},5),e.link("/imports/ui/services/meeting-settings",{default(e){c=e}},6);const u=Meteor.settings.public.kurento.wsUrl,d=Meteor.settings.public.media,h=d.audio.fullAudioMediaServer,b=d.mediaTag.replace(/#/g,""),g="GLOBAL_AUDIO_",m=d.listenOnlyCallTimeout||15e3,f=d.listenOnlyOffering,k="sendrecv",p="recv",v="fullaudio",C="AudioSessionNumber",S={1301:1001,1302:1002,1305:1005,1307:1007},y=e=>{const{errorCode:t}=e,r=S[t];return null==t||null==r||(e.errorCode=r),e},_=()=>c("media-server-fullaudio",h),I=()=>{let e=parseInt(sessionStorage.getItem(C),10);return e||(e=0),e+=1,sessionStorage.setItem(C,e),e};class T extends t{constructor(e){super(),this.internalMeetingID=e.meetingId,this.voiceBridge=e.voiceBridge,this.userId=e.userId,this.name=e.username,this.sessionToken=e.sessionToken,this.media={inputDevice:{}},this.broker=null,this.reconnecting=!1,this.iceServers=[]}async changeOutputDevice(e){const t=document.querySelector("#".concat(b));if(t.setSinkId)try{await t.setSinkId(e),this.media.outputDeviceId=e}catch(r){throw o.error({logCode:"fullaudio_changeoutputdevice_error",extraInfo:{error:r,bridge:v}},"Audio bridge failed to change output device"),new Error(this.baseErrorCodes.MEDIA_ERROR)}return this.media.outputDeviceId||e}getPeerConnection(){if(!this.broker)return null;const{webRtcPeer:e}=this.broker;return e?e.peerConnection:null}handleTermination(){return this.callback({status:this.baseCallStates.ended,bridge:v})}clearReconnectionTimeout(){this.reconnecting=!1,this.reconnectionTimeout&&(clearTimeout(this.reconnectionTimeout),this.reconnectionTimeout=null)}reconnect(){this.broker.stop(),this.callback({status:this.baseCallStates.reconnecting,bridge:v}),this.reconnecting=!0,this.reconnectionTimeout=setTimeout((()=>{this.callback({status:this.baseCallStates.failed,error:1010,bridgeError:"Reconnection timeout",bridge:v}),this.broker.stop(),this.clearReconnectionTimeout()}),m),this.joinAudio({isListenOnly:this.isListenOnly},this.callback).then((()=>this.clearReconnectionTimeout())).catch((e=>{o.debug({logCode:"fullaudio_reconnect_failed",extraInfo:{errorMessage:e.errorMessage,reconnecting:this.reconnecting,bridge:v}},"Fullaudio reconnect failed")}))}handleBrokerFailure(e){return new Promise(((t,r)=>{y(e);const{errorMessage:i,errorCause:s,errorCode:n}=e;return this.broker.started&&!this.reconnecting?(o.error({logCode:"fullaudio_error_try_to_reconnect",extraInfo:{errorMessage:i,errorCode:n,errorCause:s,bridge:v}},"Fullaudio failed, try to reconnect"),this.reconnect(),t()):(o.error({logCode:"fullaudio_error",extraInfo:{errorMessage:i,errorCode:n,errorCause:s,reconnecting:this.reconnecting,bridge:v}},"Fullaudio failed"),this.clearReconnectionTimeout(),this.broker.stop(),this.callback({status:this.baseCallStates.failed,error:n,bridgeError:i,bridge:v}),r(e))}))}dispatchAutoplayHandlingEvent(e){const t=new CustomEvent("audioPlayFailed",{detail:{mediaElement:e}});window.dispatchEvent(t),this.callback({status:this.baseCallStates.autoplayBlocked,bridge:v})}handleStart(){const e=this.broker.webRtcPeer.getRemoteStream(),t=document.getElementById(b);return n(e,t,!1).then((()=>this.callback({status:this.baseCallStates.started,bridge:v}))).catch((e=>{if("NotAllowedError"!==e.name){const t={errorCode:1004,errorMessage:e.message||"AUDIO_PLAY_FAILED"};throw this.callback({status:this.baseCallStates.failed,error:t.errorCode,bridgeError:t.errorMessage,bridge:v}),t}o.error({logCode:"fullaudio_error_autoplay",extraInfo:{errorName:e.name,bridge:v}},"Fullaudio media play failed due to autoplay error"),this.dispatchAutoplayHandlingEvent(t)}))}async _initBrokerEventsPromise(){return new Promise(((e,t)=>{try{this.broker||e(null),this.broker.onended=this.handleTermination.bind(this),this.broker.onerror=e=>{this.handleBrokerFailure(e).catch(t)},this.broker.onstart=()=>{this.handleStart().then(e).catch(t)}}catch(r){t(r)}}))}async _startBroker(e){try{const{isListenOnly:t}=e;this.isListenOnly=t;const r=["".concat(this.userId,"_").concat(I()),"bbbID",t?"".concat(g).concat(this.voiceBridge):this.name].join("-").replace(/"/g,"'"),o={userName:this.name,caleeName:r,iceServers:this.iceServers,offering:f,mediaServer:_()};this.broker=new s(i.authenticateURL(u),this.voiceBridge,this.userId,this.internalMeetingID,t?p:k,o);const n=this._initBrokerEventsPromise();return this.broker.listen(),n}catch(t){throw o.warn({logCode:"fullaudio_bridge_broker_init_fail"},"Problem when initializing SFU broker for fullaudio bridge"),t}}async joinAudio(e,t){try{this.callback=t,this.iceServers=await a(this.sessionToken)}catch(r){o.error({logCode:"fullaudio_stun-turn_fetch_failed"},"SFU audio bridge failed to fetch STUN/TURN info, using default servers"),this.iceServers=l()}finally{await this._startBroker(e)}}async updateAudioConstraints(){return!0}exitAudio(){const e=document.getElementById(b);return this.broker.stop(),this.clearReconnectionTimeout(),e&&"function"==typeof e.pause&&(e.pause(),e.srcObject=null),Promise.resolve()}}r.exports=T}).call(this,r)}

