function module(e,t,r){(function(e){let t,i,s,o,n,a,c,l,u,d,h,b,g,m,p,f,k;e.export({default:()=>F}),e.link("./base",{default(e){t=e}},0),e.link("/imports/ui/services/auth",{default(e){i=e}},1),e.link("/imports/startup/client/logger",{default(e){s=e}},2),e.link("/imports/ui/services/bbb-webrtc-sfu/fullaudio-broker",{default(e){o=e}},3),e.link("/imports/ui/services/bbb-webrtc-sfu/load-play",{default(e){n=e}},4),e.link("/imports/utils/fetchStunTurnServers",{fetchWebRTCMappedStunTurnServers(e){a=e},getMappedFallbackStun(e){c=e}},5),e.link("/imports/ui/services/meeting-settings",{default(e){l=e}},6),e.link("/imports/ui/services/storage/session",{default(e){u=e}},7),e.link("/imports/utils/browserInfo",{default(e){d=e}},8),e.link("/imports/api/audio/client/bridge/service",{DEFAULT_OUTPUT_DEVICE_ID(e){h=e},INPUT_DEVICE_ID_KEY(e){b=e},OUTPUT_DEVICE_ID_KEY(e){g=e},getAudioSessionNumber(e){m=e},getAudioConstraints(e){p=e},filterSupportedConstraints(e){f=e}},9),e.link("/imports/ui/services/bbb-webrtc-sfu/utils",{shouldForceRelay(e){k=e}},10);const v=Meteor.settings.public.kurento.wsUrl,I=Meteor.settings.public.media,C=I.audio.fullAudioMediaServer,_=I.mediaTag.replace(/#/g,""),S="GLOBAL_AUDIO_",y=I.listenOnlyCallTimeout||15e3,T="sendrecv",D="recv",E="fullaudio",w=d.isChrome,N={1301:1001,1302:1002,1305:1005,1307:1007},A=e=>{const{errorCode:t}=e,r=N[t];return null==t||null==r||(e.errorCode=r),e},M=()=>l("media-server-fullaudio",C);class F extends t{constructor(e){super(),this.userId=e.userId,this.name=e.username,this.sessionToken=e.sessionToken,this.media={inputDevice:{}},this.broker=null,this.reconnecting=!1,this.iceServers=[],this.inEchoTest=!1,this.bridgeName=E}get inputDeviceId(){const e=u.getItem(b);return e||(this.media.inputDeviceId?this.media.inputDeviceId:null)}set inputDeviceId(e){u.setItem(b,e),this.media.inputDeviceId=e}get outputDeviceId(){const e=u.getItem(g);return e||(this.media.outputDeviceId?this.media.outputDeviceId:h)}set outputDeviceId(e){u.setItem(g,e),this.media.outputDeviceId=e}get inputStream(){return this.broker?this.broker.getLocalStream():null}async setInputStream(e){try{return null==this.broker?null:(await this.broker.setLocalStream(e),e)}catch(t){return s.warn({logCode:"fullaudio_setinputstream_error",extraInfo:{errorCode:t.code,errorMessage:t.message,bridgeName:this.bridgeName}},"Failed to set input stream (mic)"),null}}getPeerConnection(){if(!this.broker)return null;const{webRtcPeer:e}=this.broker;return e?e.peerConnection:null}handleTermination(){return this.callback({status:this.baseCallStates.ended,bridge:this.bridgeName})}clearReconnectionTimeout(){this.reconnecting=!1,this.reconnectionTimeout&&(clearTimeout(this.reconnectionTimeout),this.reconnectionTimeout=null)}reconnect(){this.broker.stop(),this.callback({status:this.baseCallStates.reconnecting,bridge:this.bridgeName}),this.reconnecting=!0,this.reconnectionTimeout=setTimeout((()=>{this.callback({status:this.baseCallStates.failed,error:1010,bridgeError:"Reconnection timeout",bridge:this.bridgeName}),this.broker.stop(),this.clearReconnectionTimeout()}),y),this.joinAudio({isListenOnly:this.isListenOnly},this.callback).then((()=>this.clearReconnectionTimeout())).catch((e=>{s.debug({logCode:"fullaudio_reconnect_failed",extraInfo:{errorMessage:e.errorMessage,reconnecting:this.reconnecting,bridge:this.bridgeName}},"Fullaudio reconnect failed")}))}handleBrokerFailure(e){return new Promise(((t,r)=>{A(e);const{errorMessage:i,errorCause:o,errorCode:n}=e;return this.broker.started&&!this.reconnecting?(s.error({logCode:"fullaudio_error_try_to_reconnect",extraInfo:{errorMessage:i,errorCode:n,errorCause:o,bridge:this.bridgeName}},"Fullaudio failed, try to reconnect"),this.reconnect(),t()):(s.error({logCode:"fullaudio_error",extraInfo:{errorMessage:i,errorCode:n,errorCause:o,reconnecting:this.reconnecting,bridge:this.bridgeName}},"Fullaudio failed"),this.clearReconnectionTimeout(),this.broker.stop(),this.callback({status:this.baseCallStates.failed,error:n,bridgeError:i,bridge:this.bridgeName}),r(e))}))}dispatchAutoplayHandlingEvent(e){const t=new CustomEvent("audioPlayFailed",{detail:{mediaElement:e}});window.dispatchEvent(t),this.callback({status:this.baseCallStates.autoplayBlocked,bridge:this.bridgeName})}handleStart(){const e=this.broker.webRtcPeer.getRemoteStream(),t=document.getElementById(_);return n(e,t,!1).then((()=>this.callback({status:this.baseCallStates.started,bridge:this.bridgeName}))).catch((e=>{if("NotAllowedError"!==e.name){const t={errorCode:1004,errorMessage:e.message||"AUDIO_PLAY_FAILED"};throw this.callback({status:this.baseCallStates.failed,error:t.errorCode,bridgeError:t.errorMessage,bridge:this.bridgeName}),t}s.error({logCode:"fullaudio_error_autoplay",extraInfo:{errorName:e.name,bridge:this.bridgeName}},"Fullaudio media play failed due to autoplay error"),this.dispatchAutoplayHandlingEvent(t)}))}async _initBrokerEventsPromise(){return new Promise(((e,t)=>{try{this.broker||e(null),this.broker.onended=this.handleTermination.bind(this),this.broker.onerror=e=>{this.handleBrokerFailure(e).catch(t)},this.broker.onstart=()=>{this.handleStart().then(e).catch(t)}}catch(r){t(r)}}))}async _startBroker(e){try{const{isListenOnly:t,extension:r}=e;this.inEchoTest=!!r,this.isListenOnly=t;const s=undefined,n={caleeName:["".concat(this.userId,"_").concat(m()),"bbbID",t?"".concat(S).concat(this.voiceBridge):this.name].join("-").replace(/"/g,"'"),extension:r,iceServers:this.iceServers,mediaServer:M(),constraints:p({deviceId:this.inputDeviceId}),forceRelay:k()};this.broker=new o(i.authenticateURL(v),t?D:T,n);const a=this._initBrokerEventsPromise();return this.broker.listen(),a}catch(t){throw s.warn({logCode:"fullaudio_bridge_broker_init_fail"},"Problem when initializing SFU broker for fullaudio bridge"),t}}async joinAudio(e,t){try{this.callback=t,this.iceServers=await a(this.sessionToken)}catch(r){s.error({logCode:"fullaudio_stun-turn_fetch_failed"},"SFU audio bridge failed to fetch STUN/TURN info, using default servers"),this.iceServers=c()}finally{await this._startBroker(e)}}sendDtmf(e){this.broker&&this.broker.dtmf(e)}transferCall(e){return this.inEchoTest=!1,this.trackTransferState(e)}async liveChangeInputDevice(e){try{const t={audio:p({deviceId:e})};this.inputStream.getAudioTracks().forEach((e=>e.stop()));const r=await navigator.mediaDevices.getUserMedia(t);return await this.setInputStream(r),this.inputDeviceId=e,r}catch(t){return s.warn({logCode:"fullaudio_livechangeinputdevice_error",extraInfo:{errorCode:t.code,errorMessage:t.message,bridgeName:this.bridgeName}},"Failed to change input device (mic)"),null}}async updateAudioConstraints(e){try{if("object"!=typeof e)return;const t=f(e);if(w){t.deviceId=this.inputDeviceId;const e=await navigator.mediaDevices.getUserMedia({audio:t});this.setInputStream(e)}else this.inputStream.getAudioTracks().forEach((e=>e.applyConstraints(t)))}catch(t){s.error({logCode:"fullaudio_audio_constraint_error",extraInfo:{errorCode:t.code,errorMessage:t.message,bridgeName:this.bridgeName}},"Failed to update audio constraint")}}exitAudio(){const e=document.getElementById(_);return this.clearReconnectionTimeout(),this.broker.stop(),this.broker=null,e&&"function"==typeof e.pause&&(e.pause(),e.srcObject=null),Promise.resolve()}}r.exports=F}).call(this,r)}

