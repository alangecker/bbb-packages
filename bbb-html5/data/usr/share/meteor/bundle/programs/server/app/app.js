var require = meteorInstall({"imports":{"api":{"annotations":{"server":{"handlers":{"whiteboardAnnotations.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/handlers/whiteboardAnnotations.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleWhiteboardAnnotations
});

let _;

module.link("lodash", {
  default(v) {
    _ = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let modifyWhiteboardAccess;
module.link("/imports/api/whiteboard-multi-user/server/modifiers/modifyWhiteboardAccess", {
  default(v) {
    modifyWhiteboardAccess = v;
  }

}, 2);
let clearAnnotations;
module.link("../modifiers/clearAnnotations", {
  default(v) {
    clearAnnotations = v;
  }

}, 3);
let addAnnotation;
module.link("../modifiers/addAnnotation", {
  default(v) {
    addAnnotation = v;
  }

}, 4);

function handleWhiteboardAnnotations(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  check(header, Object);

  if (header.userId !== 'nodeJSapp') {
    return false;
  }

  check(meetingId, String);
  check(body, Object);
  const {
    annotations,
    whiteboardId,
    multiUser
  } = body;
  check(annotations, Array);
  check(whiteboardId, String);
  check(multiUser, Array);
  clearAnnotations(meetingId, whiteboardId);

  _.each(annotations, annotation => {
    const {
      wbId,
      userId
    } = annotation;
    addAnnotation(meetingId, wbId, userId, annotation);
  });

  modifyWhiteboardAccess(meetingId, whiteboardId, multiUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"whiteboardCleared.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/handlers/whiteboardCleared.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleWhiteboardCleared
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let AnnotationsStreamer;
module.link("/imports/api/annotations/server/streamer", {
  default(v) {
    AnnotationsStreamer = v;
  }

}, 1);
let clearAnnotations;
module.link("../modifiers/clearAnnotations", {
  default(v) {
    clearAnnotations = v;
  }

}, 2);

function handleWhiteboardCleared(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, {
    userId: String,
    whiteboardId: String,
    fullClear: Boolean
  });
  const {
    whiteboardId,
    fullClear,
    userId
  } = body;

  if (fullClear) {
    AnnotationsStreamer(meetingId).emit('removed', {
      meetingId,
      whiteboardId
    });
    return clearAnnotations(meetingId, whiteboardId);
  }

  AnnotationsStreamer(meetingId).emit('removed', {
    meetingId,
    whiteboardId,
    userId
  });
  return clearAnnotations(meetingId, whiteboardId, userId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"whiteboardSend.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/handlers/whiteboardSend.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleWhiteboardSend
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let AnnotationsStreamer;
module.link("/imports/api/annotations/server/streamer", {
  default(v) {
    AnnotationsStreamer = v;
  }

}, 1);
let addAnnotation;
module.link("../modifiers/addAnnotation", {
  default(v) {
    addAnnotation = v;
  }

}, 2);
let Metrics;
module.link("/imports/startup/server/metrics", {
  default(v) {
    Metrics = v;
  }

}, 3);
const {
  queueMetrics
} = Meteor.settings.private.redis.metrics;
const {
  annotationsQueueProcessInterval: ANNOTATION_PROCESS_INTERVAL
} = Meteor.settings.public.whiteboard;
let annotationsQueue = {};
let annotationsRecieverIsRunning = false;

const process = () => {
  if (!Object.keys(annotationsQueue).length) {
    annotationsRecieverIsRunning = false;
    return;
  }

  annotationsRecieverIsRunning = true;
  Object.keys(annotationsQueue).forEach(meetingId => {
    AnnotationsStreamer(meetingId).emit('added', {
      meetingId,
      annotations: annotationsQueue[meetingId]
    });

    if (queueMetrics) {
      Metrics.setAnnotationQueueLength(meetingId, 0);
    }
  });
  annotationsQueue = {};
  Meteor.setTimeout(process, ANNOTATION_PROCESS_INTERVAL);
};

function handleWhiteboardSend(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const userId = header.userId;
  const annotation = body.annotation;
  check(userId, String);
  check(annotation, Object);
  const whiteboardId = annotation.wbId;
  check(whiteboardId, String);

  if (!annotationsQueue.hasOwnProperty(meetingId)) {
    annotationsQueue[meetingId] = [];
  }

  annotationsQueue[meetingId].push({
    meetingId,
    whiteboardId,
    userId,
    annotation
  });

  if (queueMetrics) {
    Metrics.setAnnotationQueueLength(meetingId, annotationsQueue[meetingId].length);
  }

  if (!annotationsRecieverIsRunning) process();
  return addAnnotation(meetingId, whiteboardId, userId, annotation);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"whiteboardUndo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/handlers/whiteboardUndo.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleWhiteboardUndo
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let AnnotationsStreamer;
module.link("/imports/api/annotations/server/streamer", {
  default(v) {
    AnnotationsStreamer = v;
  }

}, 1);
let removeAnnotation;
module.link("../modifiers/removeAnnotation", {
  default(v) {
    removeAnnotation = v;
  }

}, 2);

function handleWhiteboardUndo(_ref, meetingId) {
  let {
    body
  } = _ref;
  const whiteboardId = body.whiteboardId;
  const shapeId = body.annotationId;
  check(whiteboardId, String);
  check(shapeId, String);
  AnnotationsStreamer(meetingId).emit('removed', {
    meetingId,
    whiteboardId,
    shapeId
  });
  return removeAnnotation(meetingId, whiteboardId, shapeId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"clearWhiteboard.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/methods/clearWhiteboard.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearWhiteboard
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function clearWhiteboard(whiteboardId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'ClearWhiteboardPubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(whiteboardId, String);
    const payload = {
      whiteboardId
    };
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method clearWhiteboard ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendAnnotation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/methods/sendAnnotation.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => sendAnnotation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let sendAnnotationHelper;
module.link("./sendAnnotationHelper", {
  default(v) {
    sendAnnotationHelper = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function sendAnnotation(annotation) {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    sendAnnotationHelper(annotation, meetingId, requesterUserId);
  } catch (err) {
    Logger.error("Exception while invoking method sendAnnotation ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendAnnotationHelper.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/methods/sendAnnotationHelper.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => sendAnnotationHelper
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function sendAnnotationHelper(annotation, meetingId, requesterUserId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'SendWhiteboardAnnotationPubMsg';

  try {
    const whiteboardId = annotation.wbId;
    check(annotation, Object);
    check(whiteboardId, String);

    if (annotation.annotationType === 'text') {
      check(annotation, {
        id: String,
        status: String,
        annotationType: String,
        annotationInfo: {
          x: Number,
          y: Number,
          fontColor: Number,
          calcedFontSize: Number,
          textBoxWidth: Number,
          text: String,
          textBoxHeight: Number,
          id: String,
          whiteboardId: String,
          status: String,
          fontSize: Number,
          dataPoints: String,
          type: String
        },
        wbId: String,
        userId: String,
        position: Number
      });
    } else {
      check(annotation, {
        id: String,
        status: String,
        annotationType: String,
        annotationInfo: {
          color: Number,
          thickness: Number,
          points: Array,
          id: String,
          whiteboardId: String,
          status: String,
          type: String,
          dimensions: Match.Maybe([Number])
        },
        wbId: String,
        userId: String,
        position: Number
      });
    }

    const payload = {
      annotation,
      drawEndOnly: true
    };
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method sendAnnotationHelper ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendBulkAnnotations.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/methods/sendBulkAnnotations.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => sendBulkAnnotations
});
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 0);
let sendAnnotationHelper;
module.link("./sendAnnotationHelper", {
  default(v) {
    sendAnnotationHelper = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function sendBulkAnnotations(payload) {
  const {
    meetingId,
    requesterUserId
  } = extractCredentials(this.userId);

  try {
    check(meetingId, String);
    check(requesterUserId, String);
    payload.forEach(annotation => sendAnnotationHelper(annotation, meetingId, requesterUserId));
    return true;
  } catch (err) {
    Logger.error("Exception while invoking method sendBulkAnnotations ".concat(err.stack));
    return false;
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"undoAnnotation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/methods/undoAnnotation.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => undoAnnotation
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function undoAnnotation(whiteboardId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'UndoWhiteboardPubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(whiteboardId, String);
    const payload = {
      whiteboardId
    };
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method undoAnnotation ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addAnnotation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/modifiers/addAnnotation.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addAnnotation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Annotations;
module.link("/imports/api/annotations", {
  default(v) {
    Annotations = v;
  }

}, 2);
let addAnnotationQuery;
module.link("/imports/api/annotations/addAnnotation", {
  default(v) {
    addAnnotationQuery = v;
  }

}, 3);

function addAnnotation(meetingId, whiteboardId, userId, annotation) {
  check(meetingId, String);
  check(whiteboardId, String);
  check(annotation, Object);
  const query = addAnnotationQuery(meetingId, whiteboardId, userId, annotation);

  try {
    const {
      insertedId
    } = Annotations.upsert(query.selector, query.modifier);

    if (insertedId) {
      Logger.info("Added annotation id=".concat(annotation.id, " whiteboard=").concat(whiteboardId));
    }
  } catch (err) {
    Logger.error("Adding annotation to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearAnnotations.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/modifiers/clearAnnotations.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearAnnotations
});
let Annotations;
module.link("/imports/api/annotations", {
  default(v) {
    Annotations = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearAnnotations(meetingId, whiteboardId, userId) {
  const selector = {};

  if (meetingId) {
    selector.meetingId = meetingId;
  }

  if (whiteboardId) {
    selector.whiteboardId = whiteboardId;
  }

  if (userId) {
    selector.userId = userId;
  }

  try {
    const numberAffected = Annotations.remove(selector);

    if (numberAffected) {
      if (userId) {
        Logger.info("Cleared Annotations for userId=".concat(userId, " where whiteboard=").concat(whiteboardId));
        return;
      }

      if (whiteboardId) {
        Logger.info("Cleared Annotations for whiteboard=".concat(whiteboardId));
        return;
      }

      if (meetingId) {
        Logger.info("Cleared Annotations (".concat(meetingId, ")"));
        return;
      }

      Logger.info('Cleared Annotations (all)');
    }
  } catch (err) {
    Logger.error("Removing Annotations from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeAnnotation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/modifiers/removeAnnotation.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeAnnotation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Annotations;
module.link("/imports/api/annotations", {
  default(v) {
    Annotations = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function removeAnnotation(meetingId, whiteboardId, shapeId) {
  check(meetingId, String);
  check(whiteboardId, String);
  check(shapeId, String);
  const selector = {
    meetingId,
    whiteboardId,
    id: shapeId
  };

  try {
    const numberAffected = Annotations.remove(selector);

    if (numberAffected) {
      Logger.info("Removed annotation id=".concat(shapeId, " whiteboard=").concat(whiteboardId));
    }
  } catch (err) {
    Logger.error("Removing annotation from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/eventHandlers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let processForHTML5ServerOnly;
module.link("/imports/api/common/server/helpers", {
  processForHTML5ServerOnly(v) {
    processForHTML5ServerOnly = v;
  }

}, 1);
let handleWhiteboardCleared;
module.link("./handlers/whiteboardCleared", {
  default(v) {
    handleWhiteboardCleared = v;
  }

}, 2);
let handleWhiteboardUndo;
module.link("./handlers/whiteboardUndo", {
  default(v) {
    handleWhiteboardUndo = v;
  }

}, 3);
let handleWhiteboardSend;
module.link("./handlers/whiteboardSend", {
  default(v) {
    handleWhiteboardSend = v;
  }

}, 4);
let handleWhiteboardAnnotations;
module.link("./handlers/whiteboardAnnotations", {
  default(v) {
    handleWhiteboardAnnotations = v;
  }

}, 5);
RedisPubSub.on('ClearWhiteboardEvtMsg', handleWhiteboardCleared);
RedisPubSub.on('UndoWhiteboardEvtMsg', handleWhiteboardUndo);
RedisPubSub.on('SendWhiteboardAnnotationEvtMsg', handleWhiteboardSend);
RedisPubSub.on('GetWhiteboardAnnotationsRespMsg', processForHTML5ServerOnly(handleWhiteboardAnnotations));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/methods.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let undoAnnotation;
module.link("./methods/undoAnnotation", {
  default(v) {
    undoAnnotation = v;
  }

}, 1);
let clearWhiteboard;
module.link("./methods/clearWhiteboard", {
  default(v) {
    clearWhiteboard = v;
  }

}, 2);
let sendAnnotation;
module.link("./methods/sendAnnotation", {
  default(v) {
    sendAnnotation = v;
  }

}, 3);
let sendBulkAnnotations;
module.link("./methods/sendBulkAnnotations", {
  default(v) {
    sendBulkAnnotations = v;
  }

}, 4);
Meteor.methods({
  undoAnnotation,
  clearWhiteboard,
  sendAnnotation,
  sendBulkAnnotations
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/publishers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Annotations;
module.link("/imports/api/annotations", {
  default(v) {
    Annotations = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function annotations() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Annotations was requested by unauth connection ".concat(this.connection.id));
    return Annotations.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing Annotations', {
    meetingId,
    userId
  });
  return Annotations.find({
    meetingId
  });
}

function publish() {
  const boundAnnotations = annotations.bind(this);
  return boundAnnotations(...arguments);
}

Meteor.publish('annotations', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"streamer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/server/streamer.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  removeAnnotationsStreamer: () => removeAnnotationsStreamer,
  addAnnotationsStreamer: () => addAnnotationsStreamer,
  default: () => get
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);

function removeAnnotationsStreamer(meetingId) {
  Logger.info("Removing Annotations streamer object for meeting ".concat(meetingId));
  delete Meteor.StreamerCentral.instances["annotations-".concat(meetingId)];
}

function addAnnotationsStreamer(meetingId) {
  const streamer = new Meteor.Streamer("annotations-".concat(meetingId), {
    retransmit: false
  });
  streamer.allowRead(function allowRead() {
    if (!this.userId) return false;
    return this.userId && this.userId.includes(meetingId);
  });
  streamer.allowWrite(function allowWrite() {
    return false;
  });
}

function get(meetingId) {
  return Meteor.StreamerCentral.instances["annotations-".concat(meetingId)];
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"addAnnotation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/addAnnotation.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addAnnotation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
const ANNOTATION_TYPE_TEXT = 'text';
const ANNOTATION_TYPE_PENCIL = 'pencil'; // line, triangle, ellipse, rectangle

function handleCommonAnnotation(meetingId, whiteboardId, userId, annotation) {
  const {
    id,
    status,
    annotationType,
    annotationInfo,
    wbId,
    position
  } = annotation;
  const selector = {
    meetingId,
    id,
    userId
  };
  const modifier = {
    $set: {
      whiteboardId,
      meetingId,
      id,
      status,
      annotationType,
      annotationInfo,
      wbId
    },
    $setOnInsert: {
      position
    },
    $inc: {
      version: 1
    }
  };
  return {
    selector,
    modifier
  };
}

function handleTextUpdate(meetingId, whiteboardId, userId, annotation) {
  const {
    id,
    status,
    annotationType,
    annotationInfo,
    wbId,
    position
  } = annotation;
  const selector = {
    meetingId,
    id,
    userId
  };
  annotationInfo.text = annotationInfo.text.replace(/[\r]/g, '\n');
  const modifier = {
    $set: {
      whiteboardId,
      meetingId,
      id,
      status,
      annotationType,
      annotationInfo,
      wbId
    },
    $setOnInsert: {
      position
    },
    $inc: {
      version: 1
    }
  };
  return {
    selector,
    modifier
  };
}

function handlePencilUpdate(meetingId, whiteboardId, userId, annotation) {
  const DRAW_START = 'DRAW_START';
  const DRAW_UPDATE = 'DRAW_UPDATE';
  const DRAW_END = 'DRAW_END';
  const {
    id,
    status,
    annotationType,
    annotationInfo,
    wbId,
    position
  } = annotation;
  const baseSelector = {
    meetingId,
    id,
    userId,
    whiteboardId
  };
  let baseModifier;

  switch (status) {
    case DRAW_START:
      // on start we split the points
      // create the 'pencil_base'
      // TODO: find and removed unused props (chunks, version, etc)
      baseModifier = {
        $set: {
          id,
          userId,
          meetingId,
          whiteboardId,
          position,
          status,
          annotationType,
          annotationInfo,
          wbId,
          version: 1
        }
      };
      break;

    case DRAW_UPDATE:
      baseModifier = {
        $push: {
          'annotationInfo.points': {
            $each: annotationInfo.points
          }
        },
        $set: {
          status
        },
        $inc: {
          version: 1
        }
      };
      break;

    case DRAW_END:
      // Updating the main pencil object with the final info
      baseModifier = {
        $set: {
          whiteboardId,
          meetingId,
          id,
          status,
          annotationType,
          annotationInfo,
          wbId,
          position
        },
        $inc: {
          version: 1
        }
      };
      break;

    default:
      break;
  }

  return {
    selector: baseSelector,
    modifier: baseModifier
  };
}

function addAnnotation(meetingId, whiteboardId, userId, annotation) {
  check(meetingId, String);
  check(whiteboardId, String);
  check(annotation, Object);

  switch (annotation.annotationType) {
    case ANNOTATION_TYPE_TEXT:
      return handleTextUpdate(meetingId, whiteboardId, userId, annotation);

    case ANNOTATION_TYPE_PENCIL:
      return handlePencilUpdate(meetingId, whiteboardId, userId, annotation);

    default:
      return handleCommonAnnotation(meetingId, whiteboardId, userId, annotation);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/annotations/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Annotations = new Mongo.Collection('annotations');

if (Meteor.isServer) {
  // types of queries for the annotations  (Total):
  // 1. meetingId, id, userId               ( 8 )
  // 2. meetingId, id, userId, whiteboardId ( 1 )
  // 3. meetingId                           ( 1 )
  // 4. meetingId, whiteboardId             ( 1 )
  // 5. meetingId, whiteboardId, id         ( 1 )
  // 6. meetingId, whiteboardId, userId     ( 1 )
  // These 2 indexes seem to cover all of the cases
  Annotations._ensureIndex({
    id: 1
  });

  Annotations._ensureIndex({
    meetingId: 1,
    whiteboardId: 1,
    userId: 1
  });
}

module.exportDefault(Annotations);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"auth-token-validation":{"server":{"modifiers":{"clearAuthTokenValidation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/auth-token-validation/server/modifiers/clearAuthTokenValidation.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearAuthTokenValidation
});
let AuthTokenValidation;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let ClientConnections;
module.link("/imports/startup/server/ClientConnections", {
  default(v) {
    ClientConnections = v;
  }

}, 2);

function clearAuthTokenValidation(meetingId) {
  return AuthTokenValidation.remove({
    meetingId
  }, (err, num) => {
    if (err) {
      Logger.info("Error when removing auth-token-validation for meeting=".concat(meetingId));
    }

    if (!process.env.BBB_HTML5_ROLE || process.env.BBB_HTML5_ROLE === 'frontend') {
      ClientConnections.removeMeeting(meetingId);
    }

    Logger.info("Cleared AuthTokenValidation (".concat(meetingId, ")"));
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"upsertValidationState.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/auth-token-validation/server/modifiers/upsertValidationState.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => upsertValidationState
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let AuthTokenValidation;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  }

}, 1);

function upsertValidationState(meetingId, userId, validationStatus, connectionId) {
  let reason = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  const selector = {
    meetingId,
    userId,
    connectionId
  };
  const modifier = {
    $set: {
      meetingId,
      userId,
      connectionId,
      validationStatus,
      updatedAt: new Date().getTime(),
      reason
    }
  };

  try {
    const {
      numberAffected
    } = AuthTokenValidation.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Upserted ".concat(JSON.stringify(selector), " ").concat(validationStatus, " in AuthTokenValidation"));
    }
  } catch (err) {
    Logger.error("Could not upsert to collection AuthTokenValidation: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/auth-token-validation/server/index.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/auth-token-validation/server/publishers.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let AuthTokenValidation;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function authTokenValidation(_ref) {
  let {
    meetingId,
    userId
  } = _ref;
  const selector = {
    meetingId,
    userId
  };
  Logger.debug("Publishing auth-token-validation for ".concat(meetingId, " ").concat(userId));
  return AuthTokenValidation.find(selector);
}

function publish() {
  const boundAuthTokenValidation = authTokenValidation.bind(this);
  return boundAuthTokenValidation(...arguments);
}

Meteor.publish('auth-token-validation', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/auth-token-validation/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  ValidationStates: () => ValidationStates
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const AuthTokenValidation = new Mongo.Collection('auth-token-validation');

if (Meteor.isServer) {
  AuthTokenValidation._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

const ValidationStates = Object.freeze({
  NOT_VALIDATED: 1,
  VALIDATING: 2,
  VALIDATED: 3,
  INVALID: 4
});
module.exportDefault(AuthTokenValidation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"breakouts":{"server":{"handlers":{"breakoutClosed.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/handlers/breakoutClosed.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleBreakoutClosed
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let clearBreakouts;
module.link("../modifiers/clearBreakouts", {
  default(v) {
    clearBreakouts = v;
  }

}, 1);

function handleBreakoutClosed(_ref) {
  let {
    body
  } = _ref;
  const {
    breakoutId
  } = body;
  check(breakoutId, String);
  return clearBreakouts(breakoutId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"breakoutJoinURL.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/handlers/breakoutJoinURL.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleBreakoutJoinURL
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Breakouts;
module.link("/imports/api/breakouts", {
  default(v) {
    Breakouts = v;
  }

}, 2);

function handleBreakoutJoinURL(_ref) {
  let {
    body
  } = _ref;
  const {
    redirectToHtml5JoinURL,
    userId,
    breakoutId
  } = body;
  check(redirectToHtml5JoinURL, String);
  const selector = {
    breakoutId
  };
  const modifier = {
    $push: {
      users: {
        userId,
        redirectToHtml5JoinURL,
        insertedTime: new Date().getTime()
      }
    }
  };

  try {
    const {
      insertedId,
      numberAffected
    } = Breakouts.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added breakout id=".concat(breakoutId));
    } else if (numberAffected) {
      Logger.info("Upserted breakout id=".concat(breakoutId));
    }
  } catch (err) {
    Logger.error("Adding breakout to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"breakoutStarted.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/handlers/breakoutStarted.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleBreakoutRoomStarted
});
let Breakouts;
module.link("/imports/api/breakouts", {
  default(v) {
    Breakouts = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 3);

function handleBreakoutRoomStarted(_ref, meetingId) {
  let {
    body
  } = _ref;
  // 0 seconds default breakout time, forces use of real expiration time
  const DEFAULT_TIME_REMAINING = 0;
  const {
    parentMeetingId,
    breakout
  } = body;
  const {
    breakoutId
  } = breakout;
  check(meetingId, String);
  const selector = {
    breakoutId
  };
  const modifier = {
    $set: Object.assign({
      users: [],
      joinedUsers: []
    }, {
      timeRemaining: DEFAULT_TIME_REMAINING
    }, {
      parentMeetingId
    }, flat(breakout))
  };

  try {
    const {
      numberAffected
    } = Breakouts.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info('Updated timeRemaining and externalMeetingId ' + "for breakout id=".concat(breakoutId));
    }
  } catch (err) {
    Logger.error("updating breakout: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinedUsersChanged.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/handlers/joinedUsersChanged.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => joinedUsersChanged
});
let Breakouts;
module.link("/imports/api/breakouts", {
  default(v) {
    Breakouts = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function joinedUsersChanged(_ref) {
  let {
    body
  } = _ref;
  check(body, Object);
  const {
    parentId,
    breakoutId,
    users
  } = body;
  check(parentId, String);
  check(breakoutId, String);
  check(users, Array);
  const selector = {
    parentMeetingId: parentId,
    breakoutId
  };
  const usersMapped = users.map(user => ({
    userId: user.id,
    name: user.name
  }));
  const modifier = {
    $set: {
      joinedUsers: usersMapped
    }
  };

  try {
    const numberAffected = Breakouts.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Updated joined users in breakout id=".concat(breakoutId));
    }
  } catch (err) {
    Logger.error("updating joined users in breakout: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateTimeRemaining.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/handlers/updateTimeRemaining.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleUpdateTimeRemaining
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Breakouts;
module.link("/imports/api/breakouts", {
  default(v) {
    Breakouts = v;
  }

}, 2);

function handleUpdateTimeRemaining(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    timeRemaining
  } = body;
  check(meetingId, String);
  check(timeRemaining, Number);
  const selector = {
    parentMeetingId: meetingId
  };
  const modifier = {
    $set: {
      timeRemaining
    }
  };
  const options = {
    multi: true
  };

  try {
    const numberAffected = Breakouts.update(selector, modifier, options);

    if (numberAffected) {
      Logger.info("Updated breakout time remaining for breakouts where parentMeetingId=".concat(meetingId));
    }
  } catch (err) {
    Logger.error("Updating breakouts: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"createBreakout.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/methods/createBreakout.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => createBreakoutRoom
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function createBreakoutRoom(rooms, durationInMinutes) {
  let record = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const BREAKOUT_LIM = Meteor.settings.public.app.breakouts.breakoutRoomLimit;
  const MIN_BREAKOUT_ROOMS = 2;
  const MAX_BREAKOUT_ROOMS = BREAKOUT_LIM > MIN_BREAKOUT_ROOMS ? BREAKOUT_LIM : MIN_BREAKOUT_ROOMS;
  const EVENT_NAME = 'CreateBreakoutRoomsCmdMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);

    if (rooms.length > MAX_BREAKOUT_ROOMS) {
      Logger.info("Attempt to create breakout rooms with invalid number of rooms in meeting id=".concat(meetingId));
      return;
    }

    const payload = {
      record,
      durationInMinutes,
      rooms,
      meetingId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method createBreakoutRoom ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"endAllBreakouts.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/methods/endAllBreakouts.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => endAllBreakouts
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function endAllBreakouts() {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'EndAllBreakoutRoomsMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, null);
  } catch (err) {
    Logger.error("Exception while invoking method endAllBreakouts ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"requestJoinURL.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/methods/requestJoinURL.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => requestJoinURL
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function requestJoinURL(_ref) {
  let {
    breakoutId,
    userId: userIdToInvite
  } = _ref;
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'RequestBreakoutJoinURLReqMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const userId = userIdToInvite || requesterUserId;
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, {
      meetingId,
      breakoutId,
      userId
    });
  } catch (err) {
    Logger.error("Exception while invoking method requestJoinURL ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearBreakouts.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/modifiers/clearBreakouts.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearBreakouts
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Breakouts;
module.link("/imports/api/breakouts", {
  default(v) {
    Breakouts = v;
  }

}, 1);

function clearBreakouts(breakoutId) {
  if (breakoutId) {
    const selector = {
      breakoutId
    };

    try {
      const numberAffected = Breakouts.remove(selector);

      if (numberAffected) {
        Logger.info("Cleared Breakouts (".concat(breakoutId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing Breakouts (".concat(breakoutId, ")"));
    }
  } else {
    try {
      const numberAffected = Breakouts.remove({});

      if (numberAffected) {
        Logger.info('Cleared Breakouts (all)');
      }
    } catch (err) {
      Logger.error('Error on clearing Breakouts (all)');
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/eventHandlers.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleBreakoutJoinURL;
module.link("./handlers/breakoutJoinURL", {
  default(v) {
    handleBreakoutJoinURL = v;
  }

}, 1);
let handleBreakoutStarted;
module.link("./handlers/breakoutStarted", {
  default(v) {
    handleBreakoutStarted = v;
  }

}, 2);
let handleUpdateTimeRemaining;
module.link("./handlers/updateTimeRemaining", {
  default(v) {
    handleUpdateTimeRemaining = v;
  }

}, 3);
let handleBreakoutClosed;
module.link("./handlers/breakoutClosed", {
  default(v) {
    handleBreakoutClosed = v;
  }

}, 4);
let joinedUsersChanged;
module.link("./handlers/joinedUsersChanged", {
  default(v) {
    joinedUsersChanged = v;
  }

}, 5);
RedisPubSub.on('BreakoutRoomStartedEvtMsg', handleBreakoutStarted);
RedisPubSub.on('BreakoutRoomJoinURLEvtMsg', handleBreakoutJoinURL);
RedisPubSub.on('RequestBreakoutJoinURLRespMsg', handleBreakoutJoinURL);
RedisPubSub.on('BreakoutRoomsTimeRemainingUpdateEvtMsg', handleUpdateTimeRemaining);
RedisPubSub.on('BreakoutRoomEndedEvtMsg', handleBreakoutClosed);
RedisPubSub.on('UpdateBreakoutUsersEvtMsg', joinedUsersChanged);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/methods.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let createBreakoutRoom;
module.link("/imports/api/breakouts/server/methods/createBreakout", {
  default(v) {
    createBreakoutRoom = v;
  }

}, 1);
let requestJoinURL;
module.link("./methods/requestJoinURL", {
  default(v) {
    requestJoinURL = v;
  }

}, 2);
let endAllBreakouts;
module.link("./methods/endAllBreakouts", {
  default(v) {
    endAllBreakouts = v;
  }

}, 3);
Meteor.methods({
  requestJoinURL,
  createBreakoutRoom,
  endAllBreakouts
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/server/publishers.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Breakouts;
module.link("/imports/api/breakouts", {
  default(v) {
    Breakouts = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 4);
const ROLE_MODERATOR = Meteor.settings.public.user.role_moderator;

function breakouts(role) {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Breakouts was requested by unauth connection ".concat(this.connection.id));
    return Breakouts.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  const User = Users.findOne({
    userId,
    meetingId
  }, {
    fields: {
      role: 1
    }
  });
  Logger.debug('Publishing Breakouts', {
    meetingId,
    userId
  });

  if (!!User && User.role === ROLE_MODERATOR) {
    const presenterSelector = {
      $or: [{
        parentMeetingId: meetingId
      }, {
        breakoutId: meetingId
      }]
    };
    return Breakouts.find(presenterSelector);
  }

  const selector = {
    $or: [{
      parentMeetingId: meetingId,
      freeJoin: true
    }, {
      parentMeetingId: meetingId,
      'users.userId': userId
    }, {
      breakoutId: meetingId
    }]
  };
  return Breakouts.find(selector);
}

function publish() {
  const boundBreakouts = breakouts.bind(this);
  return boundBreakouts(...arguments);
}

Meteor.publish('breakouts', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/breakouts/index.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Breakouts = new Mongo.Collection('breakouts');

if (Meteor.isServer) {
  // types of queries for the breakouts:
  // 1. breakoutId ( handleJoinUrl, roomStarted, clearBreakouts )
  // 2. parentMeetingId ( updateTimeRemaining )
  Breakouts._ensureIndex({
    breakoutId: 1
  });

  Breakouts._ensureIndex({
    parentMeetingId: 1
  });
}

module.exportDefault(Breakouts);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"captions":{"server":{"handlers":{"padCreate.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/handlers/padCreate.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePadCreate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let fetchReadOnlyPadId;
module.link("/imports/api/captions/server/methods/fetchReadOnlyPadId", {
  default(v) {
    fetchReadOnlyPadId = v;
  }

}, 1);

function handlePadCreate(_ref) {
  let {
    body
  } = _ref;
  const {
    pad
  } = body;
  const {
    id
  } = pad;
  check(id, String);
  fetchReadOnlyPadId(id);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"padUpdate.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/handlers/padUpdate.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePadUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let getDataFromChangeset;
module.link("/imports/api/captions/server/helpers", {
  getDataFromChangeset(v) {
    getDataFromChangeset = v;
  }

}, 1);
let updatePad;
module.link("/imports/api/captions/server/modifiers/updatePad", {
  default(v) {
    updatePad = v;
  }

}, 2);

function handlePadUpdate(_ref) {
  let {
    body
  } = _ref;
  const {
    pad,
    revs,
    changeset
  } = body;
  const {
    id
  } = pad;
  check(id, String);
  check(changeset, String);
  check(revs, Number);
  const data = getDataFromChangeset(changeset);

  if (data !== '') {
    updatePad(id, data, revs);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"addCaptionsPads.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/addCaptionsPads.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addCaptionsPads
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function addCaptionsPads(meetingId, padIds) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'AddCaptionsPadsSysMsg';

  try {
    check(meetingId, String);
    check(padIds, [String]);
    const payload = {
      padIds
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, 'nodeJSapp', payload);
  } catch (err) {
    Logger.error("Exception while invoking method addCaptionsPads ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addPad.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/addPad.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addPad
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function addPad(padId, readOnlyId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'AddPadSysMsg';

  try {
    check(padId, String);
    check(readOnlyId, String);
    const pad = Captions.findOne({
      padId
    });

    if (!pad) {
      Logger.error("Could not find closed captions pad ".concat(padId));
      return;
    }

    const {
      meetingId
    } = pad;
    check(meetingId, String);
    const payload = {
      padId,
      readOnlyId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, 'nodeJSapp', payload);
  } catch (err) {
    Logger.error("Exception while invoking method addPad ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"appendText.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/appendText.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => appendText
});
let axios;
module.link("axios", {
  default(v) {
    axios = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 3);
let CAPTIONS_TOKEN;
module.link("/imports/api/captions/server/helpers", {
  CAPTIONS_TOKEN(v) {
    CAPTIONS_TOKEN = v;
  }

}, 4);
let appendTextURL;
module.link("/imports/api/common/server/etherpad", {
  appendTextURL(v) {
    appendTextURL = v;
  }

}, 5);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 6);

function appendText(text, locale) {
  try {
    const {
      meetingId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(text, String);
    check(locale, String);
    const captions = Captions.findOne({
      meetingId,
      padId: {
        $regex: "".concat(CAPTIONS_TOKEN).concat(locale, "$")
      }
    });

    if (!captions) {
      Logger.error("Could not find captions' pad for meetingId=".concat(meetingId, " locale=").concat(locale));
      return;
    }

    const {
      padId
    } = captions;
    axios({
      method: 'get',
      url: appendTextURL(padId, text),
      responseType: 'json'
    }).then(response => {
      const {
        status
      } = response;

      if (status !== 200) {
        Logger.error("Could not append captions for padId=".concat(padId));
      }
    }).catch(error => Logger.error("Could not append captions for padId=".concat(padId, ": ").concat(error)));
  } catch (err) {
    Logger.error("Exception while invoking method appendText ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createCaptions.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/createCaptions.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => createCaptions
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let generatePadId, isEnabled, getLocalesURL;
module.link("/imports/api/captions/server/helpers", {
  generatePadId(v) {
    generatePadId = v;
  },

  isEnabled(v) {
    isEnabled = v;
  },

  getLocalesURL(v) {
    getLocalesURL = v;
  }

}, 2);
let withInstaceId;
module.link("/imports/api/common/server/etherpad", {
  withInstaceId(v) {
    withInstaceId = v;
  }

}, 3);
let addCaption;
module.link("/imports/api/captions/server/modifiers/addCaption", {
  default(v) {
    addCaption = v;
  }

}, 4);
let addCaptionsPads;
module.link("/imports/api/captions/server/methods/addCaptionsPads", {
  default(v) {
    addCaptionsPads = v;
  }

}, 5);
let axios;
module.link("axios", {
  default(v) {
    axios = v;
  }

}, 6);

function createCaptions(meetingId, instanceId) {
  // Avoid captions creation if this feature is disabled
  if (!isEnabled()) {
    Logger.warn('Closed captions are disabled');
    return;
  }

  try {
    check(meetingId, String);
    check(instanceId, Number);
    axios({
      method: 'get',
      url: getLocalesURL(),
      responseType: 'json'
    }).then(response => {
      const {
        status
      } = response;

      if (status !== 200) {
        Logger.error("Could not get locales info for ".concat(meetingId, " ").concat(status));
        return;
      }

      const padIds = [];
      const locales = response.data;
      locales.forEach(locale => {
        const padId = withInstaceId(instanceId, generatePadId(meetingId, locale.locale));
        addCaption(meetingId, padId, locale);
        padIds.push(padId);
      });
      addCaptionsPads(meetingId, padIds);
    }).catch(error => Logger.error("Could not create captions for ".concat(meetingId, ": ").concat(error)));
  } catch (err) {
    Logger.error("Exception while invoking method createCaptions ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"editCaptions.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/editCaptions.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => editCaptions
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

const getIndex = (data, length) => length - data.length;

function editCaptions(padId, data) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'EditCaptionHistoryPubMsg';

  try {
    check(padId, String);
    check(data, String);
    const pad = Captions.findOne({
      padId
    });

    if (!pad) {
      Logger.error("Editing captions history: ".concat(padId));
      return;
    }

    const {
      meetingId,
      ownerId,
      locale,
      length
    } = pad;
    check(meetingId, String);
    check(ownerId, String);
    check(locale, {
      locale: String,
      name: String
    });
    check(length, Number);
    const index = getIndex(data, length);
    const payload = {
      startIndex: index,
      localeCode: locale.locale,
      locale: locale.name,
      endIndex: index,
      text: data
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, ownerId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method editCaptions ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fetchReadOnlyPadId.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/fetchReadOnlyPadId.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => fetchReadOnlyPadId
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let getReadOnlyIdURL;
module.link("/imports/api/common/server/etherpad", {
  getReadOnlyIdURL(v) {
    getReadOnlyIdURL = v;
  }

}, 2);
let getDataFromResponse;
module.link("/imports/api/note/server/helpers", {
  getDataFromResponse(v) {
    getDataFromResponse = v;
  }

}, 3);
let updateReadOnlyPadId;
module.link("/imports/api/captions/server/modifiers/updateReadOnlyPadId", {
  default(v) {
    updateReadOnlyPadId = v;
  }

}, 4);
let axios;
module.link("axios", {
  default(v) {
    axios = v;
  }

}, 5);

function fetchReadOnlyPadId(padId) {
  try {
    check(padId, String);
    axios({
      method: 'get',
      url: getReadOnlyIdURL(padId),
      responseType: 'json'
    }).then(response => {
      const {
        status
      } = response;

      if (status !== 200) {
        Logger.error("Could not get closed captions readOnlyID for ".concat(padId, " ").concat(status));
        return;
      }

      const readOnlyPadId = getDataFromResponse(response.data, 'readOnlyID');

      if (readOnlyPadId) {
        updateReadOnlyPadId(padId, readOnlyPadId);
      } else {
        Logger.error("Could not get pad readOnlyID for ".concat(padId));
      }
    }).catch(error => Logger.error("Could not get pad readOnlyID for ".concat(padId, ": ").concat(error)));
  } catch (err) {
    Logger.error("Exception while invoking method fetchReadOnlyPadId ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"takeOwnership.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/takeOwnership.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => takeOwnership
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 1);
let updateOwnerId;
module.link("/imports/api/captions/server/modifiers/updateOwnerId", {
  default(v) {
    updateOwnerId = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let CAPTIONS_TOKEN;
module.link("/imports/api/captions/server/helpers", {
  CAPTIONS_TOKEN(v) {
    CAPTIONS_TOKEN = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function takeOwnership(locale) {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(locale, String);
    const pad = Captions.findOne({
      meetingId,
      padId: {
        $regex: "".concat(CAPTIONS_TOKEN).concat(locale, "$")
      }
    });

    if (pad) {
      updateOwnerId(meetingId, requesterUserId, pad.padId);
    }
  } catch (err) {
    Logger.error("Exception while invoking method takeOwnership ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateOwner.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods/updateOwner.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateOwner
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function updateOwner(meetingId, userId, padId) {
  // TODO
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'UpdateCaptionOwnerPubMsg';

  try {
    check(meetingId, String);
    check(userId, String);
    check(padId, String);
    const pad = Captions.findOne({
      meetingId,
      padId
    });

    if (!pad) {
      Logger.error("Editing captions owner: ".concat(padId));
      return;
    }

    const {
      locale
    } = pad;
    check(locale, {
      locale: String,
      name: String
    });
    const payload = {
      ownerId: userId,
      locale: locale.name,
      localeCode: locale.locale
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, userId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method updateOwner ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addCaption.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/modifiers/addCaption.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addCaption
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function addCaption(meetingId, padId, locale) {
  check(meetingId, String);
  check(padId, String);
  check(locale, {
    locale: String,
    name: String
  });
  const selector = {
    meetingId,
    padId
  };
  const modifier = {
    meetingId,
    padId,
    locale,
    ownerId: '',
    readOnlyPadId: '',
    data: '',
    revs: 0,
    length: 0
  };

  try {
    const {
      insertedId,
      numberAffected
    } = Captions.upsert(selector, modifier);

    if (insertedId) {
      Logger.verbose('Captions: added locale', {
        locale: locale.locale,
        meetingId
      });
    } else if (numberAffected) {
      Logger.verbose('Captions: upserted locale', {
        locale: locale.locale,
        meetingId
      });
    }
  } catch (err) {
    Logger.error("Adding caption to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearCaptions.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/modifiers/clearCaptions.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearCaptions
});
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearCaptions(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = Captions.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared Captions (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing captions (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = Captions.remove({});

      if (numberAffected) {
        Logger.info('Cleared Captions (all)');
      }
    } catch (err) {
      Logger.error("Error on clearing captions (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateOwnerId.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/modifiers/updateOwnerId.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateOwnerId
});
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let updateOwner;
module.link("/imports/api/captions/server/methods/updateOwner", {
  default(v) {
    updateOwner = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);

function updateOwnerId(meetingId, userId, padId) {
  check(meetingId, String);
  check(userId, String);
  check(padId, String);
  const selector = {
    meetingId,
    padId
  };
  const modifier = {
    $set: {
      ownerId: userId
    }
  };

  try {
    const numberAffected = Captions.update(selector, modifier, {
      multi: true
    });

    if (numberAffected) {
      updateOwner(meetingId, userId, padId);
      Logger.verbose('Captions: updated caption', {
        padId,
        ownerId: userId
      });
    }
  } catch (err) {
    Logger.error('Captions: error while updating pad', {
      err
    });
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updatePad.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/modifiers/updatePad.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updatePad
});
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let editCaptions;
module.link("/imports/api/captions/server/methods/editCaptions", {
  default(v) {
    editCaptions = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);

function updatePad(padId, data, revs) {
  check(padId, String);
  check(data, String);
  check(revs, Number);
  const selector = {
    padId
  };
  const modifier = {
    $set: {
      data,
      revs
    },
    $inc: {
      length: data.length
    }
  };

  try {
    const numberAffected = Captions.update(selector, modifier, {
      multi: true
    });

    if (numberAffected) {
      editCaptions(padId, data, revs);
      Logger.verbose('Captions: updated pad', {
        padId,
        revs
      });
    }
  } catch (err) {
    Logger.error("Updating captions pad: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateReadOnlyPadId.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/modifiers/updateReadOnlyPadId.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateReadOnlyPadId
});
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let addPad;
module.link("/imports/api/captions/server/methods/addPad", {
  default(v) {
    addPad = v;
  }

}, 3);

function updateReadOnlyPadId(padId, readOnlyPadId) {
  check(padId, String);
  check(readOnlyPadId, String);
  const selector = {
    padId
  };
  const modifier = {
    $set: {
      readOnlyPadId
    }
  };

  try {
    const numberAffected = Captions.update(selector, modifier, {
      multi: true
    });

    if (numberAffected) {
      addPad(padId, readOnlyPadId);
      Logger.verbose('Captions: added readOnlyPadId', {
        padId,
        readOnlyPadId
      });
    }
  } catch (err) {
    Logger.error('Captions: error when adding readOnlyPadId', {
      err
    });
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/eventHandlers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let processForCaptionsPadOnly;
module.link("/imports/api/captions/server/helpers", {
  processForCaptionsPadOnly(v) {
    processForCaptionsPadOnly = v;
  }

}, 1);
let handlePadCreate;
module.link("./handlers/padCreate", {
  default(v) {
    handlePadCreate = v;
  }

}, 2);
let handlePadUpdate;
module.link("./handlers/padUpdate", {
  default(v) {
    handlePadUpdate = v;
  }

}, 3);
RedisPubSub.on('PadCreateSysMsg', processForCaptionsPadOnly(handlePadCreate));
RedisPubSub.on('PadUpdateSysMsg', processForCaptionsPadOnly(handlePadUpdate));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/helpers.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  CAPTIONS_TOKEN: () => CAPTIONS_TOKEN,
  generatePadId: () => generatePadId,
  processForCaptionsPadOnly: () => processForCaptionsPadOnly,
  isEnabled: () => isEnabled,
  getLocalesURL: () => getLocalesURL,
  getDataFromChangeset: () => getDataFromChangeset
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let hashSHA1;
module.link("/imports/api/common/server/etherpad", {
  hashSHA1(v) {
    hashSHA1 = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
const ETHERPAD = Meteor.settings.private.etherpad;
const CAPTIONS_CONFIG = Meteor.settings.public.captions;
const BASENAME = Meteor.settings.public.app.basename;
const APP = Meteor.settings.private.app;
const INSTANCE_ID = Meteor.settings.public.app.instanceId;
const LOCALES_URL = "http://".concat(APP.host, ":").concat(process.env.PORT).concat(BASENAME).concat(INSTANCE_ID).concat(APP.localesUrl);
const CAPTIONS_TOKEN = '_cc_';
const TOKEN = '$'; // Captions padId should look like: {prefix}_cc_{locale}

const generatePadId = (meetingId, locale) => "".concat(hashSHA1(meetingId + locale + ETHERPAD.apikey)).concat(CAPTIONS_TOKEN).concat(locale);

const isCaptionsPad = padId => {
  const splitPadId = padId.split(CAPTIONS_TOKEN);
  return splitPadId.length === 2;
};

const getDataFromChangeset = changeset => {
  const splitChangeset = changeset.split(TOKEN);

  if (splitChangeset.length > 1) {
    splitChangeset.shift();
    return splitChangeset.join(TOKEN);
  }

  return '';
};

const isEnabled = () => CAPTIONS_CONFIG.enabled;

const getLocalesURL = () => LOCALES_URL;

const processForCaptionsPadOnly = fn => function (message) {
  const {
    body
  } = message;
  const {
    pad
  } = body;
  const {
    id
  } = pad;
  check(id, String);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (isCaptionsPad(id)) return fn(message, ...args);
  return () => {};
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/index.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/methods.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let takeOwnership;
module.link("/imports/api/captions/server/methods/takeOwnership", {
  default(v) {
    takeOwnership = v;
  }

}, 1);
let appendText;
module.link("/imports/api/captions/server/methods/appendText", {
  default(v) {
    appendText = v;
  }

}, 2);
Meteor.methods({
  takeOwnership,
  appendText
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/server/publishers.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Captions;
module.link("/imports/api/captions", {
  default(v) {
    Captions = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function captions() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Captions was requested by unauth connection ".concat(this.connection.id));
    return Captions.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing Captions', {
    meetingId,
    requestedBy: userId
  });
  return Captions.find({
    meetingId
  });
}

function publish() {
  const boundCaptions = captions.bind(this);
  return boundCaptions(...arguments);
}

Meteor.publish('captions', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/captions/index.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Captions = new Mongo.Collection('captions');

if (Meteor.isServer) {
  Captions._ensureIndex({
    meetingId: 1,
    padId: 1
  });
}

module.exportDefault(Captions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"connection-status":{"server":{"methods":{"addConnectionStatus.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/server/methods/addConnectionStatus.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addConnectionStatus
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let updateConnectionStatus;
module.link("/imports/api/connection-status/server/modifiers/updateConnectionStatus", {
  default(v) {
    updateConnectionStatus = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
const STATS = Meteor.settings.public.stats;

const logConnectionStatus = (meetingId, userId, status, type, value) => {
  switch (status) {
    case 'normal':
      Logger.info("Connection status updated: meetingId=".concat(meetingId, " userId=").concat(userId, " status=").concat(status, " type=").concat(type));
      break;

    case 'warning':
      // Skip
      break;

    case 'danger':
    case 'critical':
      switch (type) {
        case 'audio':
          {
            const {
              jitter,
              loss
            } = value;
            Logger.info("Connection status updated: meetingId=".concat(meetingId, " userId=").concat(userId, " status=").concat(status, " type=").concat(type, " jitter=").concat(jitter, " loss=").concat(loss));
            break;
          }

        case 'socket':
          {
            const {
              rtt
            } = value;
            Logger.info("Connection status updated: meetingId=".concat(meetingId, " userId=").concat(userId, " status=").concat(status, " type=").concat(type, " rtt=").concat(rtt));
            break;
          }

        default:
      }

      break;

    default:
  }
};

function addConnectionStatus(status, type, value) {
  try {
    check(status, String);
    check(type, String);
    check(value, Object);
    if (!this.userId) return;
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    if (STATS.log) logConnectionStatus(meetingId, requesterUserId, status, type, value); // Avoid storing recoveries

    if (status !== 'normal') {
      updateConnectionStatus(meetingId, requesterUserId, status);
    }
  } catch (err) {
    Logger.error("Exception while invoking method addConnectionStatus ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"voidConnection.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/server/methods/voidConnection.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => voidConnection
});

function voidConnection() {
  return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearConnectionStatus.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/server/modifiers/clearConnectionStatus.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearConnectionStatus
});
let ConnectionStatus;
module.link("/imports/api/connection-status", {
  default(v) {
    ConnectionStatus = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearConnectionStatus(meetingId) {
  const selector = {};

  if (meetingId) {
    selector.meetingId = meetingId;
  }

  try {
    const numberAffected = ConnectionStatus.remove(selector);

    if (numberAffected) {
      if (meetingId) {
        Logger.info("Removed ConnectionStatus (".concat(meetingId, ")"));
      } else {
        Logger.info('Removed ConnectionStatus (all)');
      }
    } else {
      Logger.warn('Removing ConnectionStatus nonaffected');
    }
  } catch (err) {
    Logger.error("Removing ConnectionStatus: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateConnectionStatus.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/server/modifiers/updateConnectionStatus.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateConnectionStatus
});
let ConnectionStatus;
module.link("/imports/api/connection-status", {
  default(v) {
    ConnectionStatus = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function updateConnectionStatus(meetingId, userId, level) {
  check(meetingId, String);
  check(userId, String);
  const timestamp = new Date().getTime();
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    meetingId,
    userId,
    level,
    timestamp
  };

  try {
    const {
      numberAffected
    } = ConnectionStatus.upsert(selector, modifier);

    if (numberAffected) {
      Logger.verbose("Updated connection status meetingId=".concat(meetingId, " userId=").concat(userId, " level=").concat(level));
    }
  } catch (err) {
    Logger.error("Updating connection status meetingId=".concat(meetingId, " userId=").concat(userId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/server/index.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/server/methods.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let addConnectionStatus;
module.link("./methods/addConnectionStatus", {
  default(v) {
    addConnectionStatus = v;
  }

}, 1);
let voidConnection;
module.link("./methods/voidConnection", {
  default(v) {
    voidConnection = v;
  }

}, 2);
Meteor.methods({
  addConnectionStatus,
  voidConnection
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/server/publishers.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let ConnectionStatus;
module.link("/imports/api/connection-status", {
  default(v) {
    ConnectionStatus = v;
  }

}, 3);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 4);

function connectionStatus() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing ConnectionStatus was requested by unauth connection ".concat(this.connection.id));
    return ConnectionStatus.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  check(meetingId, String);
  check(userId, String);
  Logger.info("Publishing connection status for ".concat(meetingId, " ").concat(userId));
  return ConnectionStatus.find({
    meetingId
  });
}

function publish() {
  const boundNote = connectionStatus.bind(this);
  return boundNote(...arguments);
}

Meteor.publish('connection-status', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/connection-status/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const ConnectionStatus = new Mongo.Collection('connection-status');

if (Meteor.isServer) {
  ConnectionStatus._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

module.exportDefault(ConnectionStatus);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"cursor":{"server":{"handlers":{"cursorUpdate.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/cursor/server/handlers/cursorUpdate.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleCursorUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let CursorStreamer;
module.link("/imports/api/cursor/server/streamer", {
  default(v) {
    CursorStreamer = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

let _;

module.link("lodash", {
  default(v) {
    _ = v;
  }

}, 3);
const CURSOR_PROCCESS_INTERVAL = 30;
const cursorQueue = {};

const proccess = _.throttle(() => {
  try {
    Object.keys(cursorQueue).forEach(meetingId => {
      try {
        const cursors = [];

        for (let userId in cursorQueue[meetingId]) {
          cursorQueue[meetingId][userId].userId = userId;
          cursors.push(cursorQueue[meetingId][userId]);
        }

        delete cursorQueue[meetingId];
        CursorStreamer(meetingId).emit('message', {
          meetingId,
          cursors
        });
      } catch (error) {
        Logger.error("Error while trying to send cursor streamer data for meeting ".concat(meetingId, ". ").concat(error));
      }
    });
  } catch (error) {
    Logger.error("Error while processing cursor queue. ".concat(error));
  }
}, CURSOR_PROCCESS_INTERVAL);

function handleCursorUpdate(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    userId
  } = header;
  check(body, Object);
  check(meetingId, String);
  check(userId, String);

  if (!cursorQueue[meetingId]) {
    cursorQueue[meetingId] = {};
  } // overwrite since we dont care about the other positions


  cursorQueue[meetingId][userId] = body;
  proccess();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"publishCursorUpdate.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/cursor/server/methods/publishCursorUpdate.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => publishCursorUpdate
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);

function publishCursorUpdate(meetingId, requesterUserId, payload) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'SendCursorPositionPubMsg';
  return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/cursor/server/eventHandlers.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleCursorUpdate;
module.link("./handlers/cursorUpdate", {
  default(v) {
    handleCursorUpdate = v;
  }

}, 1);
RedisPubSub.on('SendCursorPositionEvtMsg', handleCursorUpdate);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/cursor/server/index.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/cursor/server/methods.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let publishCursorUpdate;
module.link("./methods/publishCursorUpdate", {
  default(v) {
    publishCursorUpdate = v;
  }

}, 1);
Meteor.methods({
  publishCursorUpdate
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"streamer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/cursor/server/streamer.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  removeCursorStreamer: () => removeCursorStreamer,
  addCursorStreamer: () => addCursorStreamer,
  default: () => get
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 1);
let publishCursorUpdate;
module.link("./methods/publishCursorUpdate", {
  default(v) {
    publishCursorUpdate = v;
  }

}, 2);
const {
  streamerLog
} = Meteor.settings.private.serverLog;

function removeCursorStreamer(meetingId) {
  Logger.info("Removing Cursor streamer object for meeting ".concat(meetingId));
  delete Meteor.StreamerCentral.instances["cursor-".concat(meetingId)];
}

function addCursorStreamer(meetingId) {
  const streamer = new Meteor.Streamer("cursor-".concat(meetingId), {
    retransmit: false
  });

  if (streamerLog) {
    Logger.debug('Cursor streamer created', {
      meetingId
    });
  }

  streamer.allowRead(function allowRead() {
    if (streamerLog) {
      Logger.debug('Cursor streamer called allowRead', {
        userId: this.userId,
        meetingId
      });
    }

    return this.userId && this.userId.includes(meetingId);
  });
  streamer.allowWrite(function allowWrite() {
    return this.userId && this.userId.includes(meetingId);
  });
  streamer.on('publish', function (message) {
    const {
      requesterUserId
    } = extractCredentials(this.userId);
    publishCursorUpdate(meetingId, requesterUserId, message);
  });
}

function get(meetingId) {
  return Meteor.StreamerCentral.instances["cursor-".concat(meetingId)];
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"external-videos":{"server":{"handlers":{"startExternalVideo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/handlers/startExternalVideo.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleStartExternalVideo
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 3);

function handleStartExternalVideo(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    userId
  } = header;
  check(body, Object);
  check(meetingId, String);
  check(userId, String);
  const externalVideoUrl = body.externalVideoUrl;
  const user = Users.findOne({
    meetingId: meetingId,
    userId: userId
  });

  if (user && user.presenter) {
    try {
      Meetings.update({
        meetingId
      }, {
        $set: {
          externalVideoUrl
        }
      });
      Logger.info("User id=".concat(userId, " sharing an external video: ").concat(externalVideoUrl, " for meeting ").concat(meetingId));
    } catch (err) {
      Logger.error("Error on setting shared external video start in Meetings collection: ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stopExternalVideo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/handlers/stopExternalVideo.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleStopExternalVideo
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 2);

function handleStopExternalVideo(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    userId
  } = header;
  check(body, Object);
  check(meetingId, String);
  check(userId, String);

  try {
    Logger.info("External video stop sharing was initiated by:[".concat(userId, "] for meeting ").concat(meetingId));
    Meetings.update({
      meetingId
    }, {
      $set: {
        externalVideoUrl: null
      }
    });
  } catch (err) {
    Logger.error("Error on setting shared external video stop in Meetings collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateExternalVideo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/handlers/updateExternalVideo.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);
module.export({
  default: () => handleUpdateExternalVideo
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let ExternalVideoStreamer;
module.link("/imports/api/external-videos/server/streamer", {
  default(v) {
    ExternalVideoStreamer = v;
  }

}, 3);

function handleUpdateExternalVideo(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    userId
  } = header;
  check(body, Object);
  check(meetingId, String);
  check(userId, String);
  const user = Users.findOne({
    meetingId: meetingId,
    userId: userId
  });

  if (user && user.presenter) {
    try {
      Logger.info("UpdateExternalVideoEvtMsg received for user ".concat(userId, " and meeting ").concat(meetingId, " event:").concat(body.status));
      ExternalVideoStreamer(meetingId).emit(body.status, _objectSpread({}, body, {
        meetingId: meetingId,
        userId: userId
      }));
    } catch (err) {
      Logger.error("Error on setting shared external video update in Meetings collection: ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"emitExternalVideoEvent.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/methods/emitExternalVideoEvent.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => emitExternalVideoEvent
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function emitExternalVideoEvent(options) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'UpdateExternalVideoPubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const {
      status,
      playerStatus
    } = options;
    const user = Users.findOne({
      meetingId,
      userId: requesterUserId
    });

    if (user && user.presenter) {
      check(status, String);
      check(playerStatus, {
        rate: Match.Maybe(Number),
        time: Match.Maybe(Number),
        state: Match.Maybe(Boolean)
      });
      const rate = playerStatus.rate || 0;
      const time = playerStatus.time || 0;
      const state = playerStatus.state || 0;
      const payload = {
        status,
        rate,
        time,
        state
      };
      Logger.debug("User id=".concat(requesterUserId, " sending ").concat(EVENT_NAME, " event:").concat(state, " for meeting ").concat(meetingId));
      RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
    }
  } catch (err) {
    Logger.error("Exception while invoking method emitExternalVideoEvent ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startWatchingExternalVideo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/methods/startWatchingExternalVideo.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => startWatchingExternalVideo
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function startWatchingExternalVideo(options) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'StartExternalVideoPubMsg';
  const {
    meetingId,
    requesterUserId: userId
  } = extractCredentials(this.userId);
  const {
    externalVideoUrl
  } = options;

  try {
    check(meetingId, String);
    check(userId, String);
    check(externalVideoUrl, String);
    const user = Users.findOne({
      meetingId,
      userId
    }, {
      presenter: 1
    });

    if (user && user.presenter) {
      check(externalVideoUrl, String);
      const payload = {
        externalVideoUrl
      };
      Logger.debug("User id=".concat(userId, " sending ").concat(EVENT_NAME, " url:").concat(externalVideoUrl, " for meeting ").concat(meetingId));
      return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, userId, payload);
    }

    Logger.error("Only presenters are allowed to start external video for a meeting. meeting=".concat(meetingId, " userId=").concat(userId));
  } catch (error) {
    Logger.error("Error on sharing an external video: ".concat(externalVideoUrl, " ").concat(error));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stopWatchingExternalVideo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/methods/stopWatchingExternalVideo.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => stopWatchingExternalVideo
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let stopWatchingExternalVideoSystemCall;
module.link("/imports/api/external-videos/server/methods/stopWatchingExternalVideoSystemCall", {
  default(v) {
    stopWatchingExternalVideoSystemCall = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function stopWatchingExternalVideo() {
  const {
    meetingId,
    requesterUserId
  } = extractCredentials(this.userId);

  try {
    check(meetingId, String);
    check(requesterUserId, String);
    const user = Users.findOne({
      meetingId,
      userId: requesterUserId
    });

    if (user && user.presenter) {
      // proceed and publish the event
      stopWatchingExternalVideoSystemCall({
        meetingId,
        requesterUserId
      });
    }
  } catch (error) {
    Logger.error("Error on stop sharing an external video for meeting=".concat(meetingId, " ").concat(error));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stopWatchingExternalVideoSystemCall.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/methods/stopWatchingExternalVideoSystemCall.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => stopWatchingExternalVideoSystemCall
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 2);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 3);

function stopWatchingExternalVideoSystemCall(_ref) {
  let {
    meetingId,
    requesterUserId
  } = _ref;
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'StopExternalVideoPubMsg';

  try {
    check(meetingId, String);
    check(requesterUserId, String); // check if there is ongoing video shared

    const meeting = Meetings.findOne({
      meetingId
    });
    if (!meeting || meeting.externalVideoUrl === null) return;
    Logger.info('ExternalVideo::stopWatchingExternalVideo was triggered ', {
      meetingId,
      requesterUserId
    });
    const payload = {};
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (error) {
    Logger.error("Error on stop sharing an external video for meeting=".concat(meetingId, " ").concat(error));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/eventHandlers.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleStartExternalVideo;
module.link("./handlers/startExternalVideo", {
  default(v) {
    handleStartExternalVideo = v;
  }

}, 1);
let handleStopExternalVideo;
module.link("./handlers/stopExternalVideo", {
  default(v) {
    handleStopExternalVideo = v;
  }

}, 2);
let handleUpdateExternalVideo;
module.link("./handlers/updateExternalVideo", {
  default(v) {
    handleUpdateExternalVideo = v;
  }

}, 3);
RedisPubSub.on('StartExternalVideoEvtMsg', handleStartExternalVideo);
RedisPubSub.on('StopExternalVideoEvtMsg', handleStopExternalVideo);
RedisPubSub.on('UpdateExternalVideoEvtMsg', handleUpdateExternalVideo);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/index.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./methods");
module.link("./eventHandlers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/methods.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let startWatchingExternalVideo;
module.link("./methods/startWatchingExternalVideo", {
  default(v) {
    startWatchingExternalVideo = v;
  }

}, 1);
let stopWatchingExternalVideo;
module.link("./methods/stopWatchingExternalVideo", {
  default(v) {
    stopWatchingExternalVideo = v;
  }

}, 2);
let emitExternalVideoEvent;
module.link("./methods/emitExternalVideoEvent", {
  default(v) {
    emitExternalVideoEvent = v;
  }

}, 3);
Meteor.methods({
  startWatchingExternalVideo,
  stopWatchingExternalVideo,
  emitExternalVideoEvent
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"streamer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/external-videos/server/streamer.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  removeExternalVideoStreamer: () => removeExternalVideoStreamer,
  addExternalVideoStreamer: () => addExternalVideoStreamer,
  default: () => get
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

const allowRecentMessages = (eventName, message) => {
  const {
    userId,
    meetingId,
    time,
    rate,
    state
  } = message;
  Logger.debug("ExternalVideo Streamer auth allowed userId: ".concat(userId, ", meetingId: ").concat(meetingId, ", event: ").concat(eventName, ", time: ").concat(time, " rate: ").concat(rate, ", state: ").concat(state));
  return true;
};

function removeExternalVideoStreamer(meetingId) {
  const streamName = "external-videos-".concat(meetingId);

  if (Meteor.StreamerCentral.instances[streamName]) {
    Logger.info("Destroying External Video streamer object for ".concat(streamName));
    delete Meteor.StreamerCentral.instances[streamName];
  }
}

function addExternalVideoStreamer(meetingId) {
  const streamName = "external-videos-".concat(meetingId);

  if (!Meteor.StreamerCentral.instances[streamName]) {
    const streamer = new Meteor.Streamer(streamName);
    streamer.allowRead('all');
    streamer.allowWrite('none');
    streamer.allowEmit(allowRecentMessages);
    Logger.info("Created External Video streamer for ".concat(streamName));
  } else {
    Logger.debug("External Video streamer is already created for ".concat(streamName));
  }
}

function get(meetingId) {
  const streamName = "external-videos-".concat(meetingId);
  return Meteor.StreamerCentral.instances[streamName];
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"group-chat":{"server":{"handlers":{"groupChatCreated.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/handlers/groupChatCreated.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGroupChatCreated
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addGroupChat;
module.link("../modifiers/addGroupChat", {
  default(v) {
    addGroupChat = v;
  }

}, 1);

function handleGroupChatCreated(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(meetingId, String);
  check(body, Object);
  addGroupChat(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"groupChatDestroyed.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/handlers/groupChatDestroyed.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGroupChatDestroyed
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addGroupChat;
module.link("../modifiers/addGroupChat", {
  default(v) {
    addGroupChat = v;
  }

}, 1);

function handleGroupChatDestroyed(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(meetingId, String);
  check(body, Object);
  addGroupChat(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"groupChats.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/handlers/groupChats.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGroupChats
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addGroupChat;
module.link("../modifiers/addGroupChat", {
  default(v) {
    addGroupChat = v;
  }

}, 1);

function handleGroupChats(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    chats
  } = body;
  check(meetingId, String);
  check(chats, Array);
  chats.forEach(chat => addGroupChat(meetingId, chat));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"createGroupChat.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/methods/createGroupChat.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => createGroupChat
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let CHAT_ACCESS_PRIVATE;
module.link("/imports/api/group-chat", {
  CHAT_ACCESS_PRIVATE(v) {
    CHAT_ACCESS_PRIVATE = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function createGroupChat(receiver) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'CreateGroupChatReqMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(receiver, Object);
    const payload = {
      correlationId: "".concat(requesterUserId, "-").concat(Date.now()),
      msg: [],
      users: [receiver.userId],
      access: CHAT_ACCESS_PRIVATE,
      name: receiver.name
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method createGroupChat ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"destroyGroupChat.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/methods/destroyGroupChat.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => destroyGroupChat
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function destroyGroupChat() {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const eventName = 'DestroyGroupChatReqMsg';
    const payload = {// TODO: Implement this together with #4988
      // chats: Array[String],
    };
    RedisPubSub.publishUserMessage(CHANNEL, eventName, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method createGroupChat ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addGroupChat.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/modifiers/addGroupChat.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addGroupChat
});
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 0);
let Match, check;
module.link("meteor/check", {
  Match(v) {
    Match = v;
  },

  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let GroupChat;
module.link("/imports/api/group-chat", {
  default(v) {
    GroupChat = v;
  }

}, 3);

function addGroupChat(meetingId, chat) {
  check(meetingId, String);
  check(chat, {
    id: Match.Maybe(String),
    chatId: Match.Maybe(String),
    correlationId: Match.Maybe(String),
    name: String,
    access: String,
    createdBy: Object,
    users: Array,
    msg: Match.Maybe(Array)
  });
  const chatDocument = {
    meetingId,
    chatId: chat.chatId || chat.id,
    name: chat.name,
    access: chat.access,
    users: chat.users.map(u => u.id),
    participants: chat.users,
    createdBy: chat.createdBy.id
  };
  const selector = {
    chatId: chatDocument.chatId,
    meetingId
  };
  const modifier = {
    $set: flat(chatDocument, {
      safe: true
    })
  };

  try {
    const {
      insertedId
    } = GroupChat.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added group-chat name=".concat(chat.name, " meetingId=").concat(meetingId));
    } else {
      Logger.info("Upserted group-chat name=".concat(chat.name, " meetingId=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding group-chat to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearGroupChat.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/modifiers/clearGroupChat.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearGroupChat
});
let GroupChat;
module.link("/imports/api/group-chat", {
  default(v) {
    GroupChat = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let clearGroupChatMsg;
module.link("/imports/api/group-chat-msg/server/modifiers/clearGroupChatMsg", {
  default(v) {
    clearGroupChatMsg = v;
  }

}, 2);

function clearGroupChat(meetingId) {
  try {
    clearGroupChatMsg(meetingId);
    const numberAffected = GroupChat.remove({
      meetingId
    });

    if (numberAffected) {
      Logger.info("Cleared GroupChat (".concat(meetingId, ")"));
    }
  } catch (err) {
    Logger.error("Error on clearing GroupChat (".concat(meetingId, "). ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/eventHandlers.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleGroupChats;
module.link("./handlers/groupChats", {
  default(v) {
    handleGroupChats = v;
  }

}, 1);
let handleGroupChatCreated;
module.link("./handlers/groupChatCreated", {
  default(v) {
    handleGroupChatCreated = v;
  }

}, 2);
let handleGroupChatDestroyed;
module.link("./handlers/groupChatDestroyed", {
  default(v) {
    handleGroupChatDestroyed = v;
  }

}, 3);
let processForHTML5ServerOnly;
module.link("/imports/api/common/server/helpers", {
  processForHTML5ServerOnly(v) {
    processForHTML5ServerOnly = v;
  }

}, 4);
RedisPubSub.on('GetGroupChatsRespMsg', processForHTML5ServerOnly(handleGroupChats));
RedisPubSub.on('GroupChatCreatedEvtMsg', handleGroupChatCreated);
RedisPubSub.on('GroupChatDestroyedEvtMsg', handleGroupChatDestroyed);
RedisPubSub.on('SyncGetGroupChatsRespMsg', handleGroupChats);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("/imports/api/group-chat-msg/server");
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/methods.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let createGroupChat;
module.link("./methods/createGroupChat", {
  default(v) {
    createGroupChat = v;
  }

}, 1);
let destroyGroupChat;
module.link("./methods/destroyGroupChat", {
  default(v) {
    destroyGroupChat = v;
  }

}, 2);
Meteor.methods({
  createGroupChat,
  destroyGroupChat
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/server/publishers.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let GroupChat;
module.link("/imports/api/group-chat", {
  default(v) {
    GroupChat = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function groupChat() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing GroupChat was requested by unauth connection ".concat(this.connection.id));
    return GroupChat.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  const CHAT_CONFIG = Meteor.settings.public.chat;
  const PUBLIC_CHAT_TYPE = CHAT_CONFIG.type_public;
  Logger.debug('Publishing group-chat', {
    meetingId,
    userId
  });
  return GroupChat.find({
    $or: [{
      meetingId,
      access: PUBLIC_CHAT_TYPE
    }, {
      meetingId,
      users: {
        $all: [userId]
      }
    }]
  });
}

function publish() {
  const boundGroupChat = groupChat.bind(this);
  return boundGroupChat(...arguments);
}

Meteor.publish('group-chat', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  CHAT_ACCESS_PUBLIC: () => CHAT_ACCESS_PUBLIC,
  CHAT_ACCESS_PRIVATE: () => CHAT_ACCESS_PRIVATE
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const GroupChat = new Mongo.Collection('group-chat');

if (Meteor.isServer) {
  GroupChat._ensureIndex({
    meetingId: 1,
    chatId: 1,
    access: 1,
    users: 1
  });
}

module.exportDefault(GroupChat);
const CHAT_ACCESS = {
  PUBLIC: 'PUBLIC_ACCESS',
  PRIVATE: 'PRIVATE_ACCESS'
};
const CHAT_ACCESS_PUBLIC = CHAT_ACCESS.PUBLIC;
const CHAT_ACCESS_PRIVATE = CHAT_ACCESS.PRIVATE;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"group-chat-msg":{"server":{"handlers":{"clearPublicGroupChat.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/handlers/clearPublicGroupChat.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearPublicChatHistory
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let clearGroupChatMsg;
module.link("../modifiers/clearGroupChatMsg", {
  default(v) {
    clearGroupChatMsg = v;
  }

}, 1);

function clearPublicChatHistory(_ref) {
  let {
    header,
    body
  } = _ref;
  const {
    meetingId
  } = header;
  const {
    chatId
  } = body;
  check(meetingId, String);
  check(chatId, String);
  return clearGroupChatMsg(meetingId, chatId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"groupChatMsgBroadcast.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/handlers/groupChatMsgBroadcast.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGroupChatMsgBroadcast
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);

let _;

module.link("lodash", {
  default(v) {
    _ = v;
  }

}, 1);
let addGroupChatMsg;
module.link("../modifiers/addGroupChatMsg", {
  default(v) {
    addGroupChatMsg = v;
  }

}, 2);
let addBulkGroupChatMsgs;
module.link("../modifiers/addBulkGroupChatMsgs", {
  default(v) {
    addBulkGroupChatMsgs = v;
  }

}, 3);
const {
  bufferChatInsertsMs
} = Meteor.settings.public.chat;
const msgBuffer = [];

const bulkFn = _.throttle(addBulkGroupChatMsgs, bufferChatInsertsMs);

function handleGroupChatMsgBroadcast(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    chatId,
    msg
  } = body;
  check(meetingId, String);
  check(chatId, String);
  check(msg, Object);

  if (bufferChatInsertsMs) {
    msgBuffer.push({
      meetingId,
      chatId,
      msg
    });
    bulkFn(msgBuffer);
  } else {
    addGroupChatMsg(meetingId, chatId, msg);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"syncGroupsChat.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/handlers/syncGroupsChat.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleSyncGroupChat
});
let Match, check;
module.link("meteor/check", {
  Match(v) {
    Match = v;
  },

  check(v) {
    check = v;
  }

}, 0);
let syncMeetingChatMsgs;
module.link("../modifiers/syncMeetingChatMsgs", {
  default(v) {
    syncMeetingChatMsgs = v;
  }

}, 1);

function handleSyncGroupChat(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    chatId,
    msgs
  } = body;
  check(meetingId, String);
  check(chatId, String);
  check(msgs, Match.Maybe(Array));
  syncMeetingChatMsgs(meetingId, chatId, msgs);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userTyping.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/handlers/userTyping.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleUserTyping
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let startTyping;
module.link("../modifiers/startTyping", {
  default(v) {
    startTyping = v;
  }

}, 1);

function handleUserTyping(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    chatId,
    userId
  } = body;
  check(meetingId, String);
  check(userId, String);
  check(chatId, String);
  startTyping(meetingId, userId, chatId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"chatMessageBeforeJoinCounter.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/methods/chatMessageBeforeJoinCounter.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => chatMessageBeforeJoinCounter
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let GroupChat;
module.link("/imports/api/group-chat", {
  default(v) {
    GroupChat = v;
  }

}, 2);
let GroupChatMsg;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  }

}, 3);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 4);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 5);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 6);
const CHAT_CONFIG = Meteor.settings.public.chat;
const PUBLIC_CHAT_TYPE = CHAT_CONFIG.type_public;

function chatMessageBeforeJoinCounter() {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const groupChats = GroupChat.find({
      $or: [{
        meetingId,
        access: PUBLIC_CHAT_TYPE
      }, {
        meetingId,
        users: {
          $all: [requesterUserId]
        }
      }]
    }).fetch();
    const User = Users.findOne({
      userId: requesterUserId,
      meetingId
    });
    const chatIdWithCounter = groupChats.map(groupChat => {
      const msgCount = GroupChatMsg.find({
        meetingId,
        chatId: groupChat.chatId,
        timestamp: {
          $lt: User.authTokenValidatedTime
        }
      }).count();
      return {
        chatId: groupChat.chatId,
        count: msgCount
      };
    }).filter(chat => chat.count);
    return chatIdWithCounter;
  } catch (err) {
    Logger.error("Exception while invoking method chatMessageBeforeJoinCounter ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearPublicChatHistory.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/methods/clearPublicChatHistory.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearPublicChatHistory
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function clearPublicChatHistory() {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'ClearPublicChatHistoryPubMsg';
  const CHAT_CONFIG = Meteor.settings.public.chat;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const payload = {
      chatId: PUBLIC_GROUP_CHAT_ID
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method clearPublicChatHistory ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fetchMessagePerPage.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/methods/fetchMessagePerPage.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => fetchMessagePerPage
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let GroupChatMsg;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);
const CHAT_CONFIG = Meteor.settings.public.chat;
const ITENS_PER_PAGE = CHAT_CONFIG.itemsPerPage;

function fetchMessagePerPage(chatId, page) {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(chatId, String);
    check(page, Number);
    const User = Users.findOne({
      userId: requesterUserId,
      meetingId
    });
    const messages = GroupChatMsg.find({
      chatId,
      meetingId,
      timestamp: {
        $lt: User.authTokenValidatedTime
      }
    }, {
      sort: {
        timestamp: 1
      },
      skip: page > 0 ? (page - 1) * ITENS_PER_PAGE : 0,
      limit: ITENS_PER_PAGE
    }).fetch();
    return messages;
  } catch (err) {
    Logger.error("Exception while invoking method fetchMessagePerPage ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendGroupChatMsg.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/methods/sendGroupChatMsg.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => sendGroupChatMsg
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let RegexWebUrl;
module.link("/imports/utils/regex-weburl", {
  default(v) {
    RegexWebUrl = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);
const HTML_SAFE_MAP = {
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};

const parseMessage = message => {
  let parsedMessage = message || '';
  parsedMessage = parsedMessage.trim(); // Replace <br/> with \n\r

  parsedMessage = parsedMessage.replace(/<br\s*[\\/]?>/gi, '\n\r'); // Sanitize. See: http://shebang.brandonmintern.com/foolproof-html-escaping-in-javascript/

  parsedMessage = parsedMessage.replace(/[<>'"]/g, c => HTML_SAFE_MAP[c]); // Replace flash links to flash valid ones

  parsedMessage = parsedMessage.replace(RegexWebUrl, "<a href='event:$&'><u>$&</u></a>");
  return parsedMessage;
};

function sendGroupChatMsg(chatId, message) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'SendGroupChatMessageMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(chatId, String);
    check(message, Object);
    const parsedMessage = parseMessage(message.message);
    message.message = parsedMessage;
    const payload = {
      msg: message,
      chatId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method sendGroupChatMsg ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startUserTyping.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/methods/startUserTyping.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => startUserTyping
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function startUserTyping(chatId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'UserTypingPubMsg';
  const CHAT_CONFIG = Meteor.settings.public.chat;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(chatId, String);
    const payload = {
      chatId: chatId || PUBLIC_GROUP_CHAT_ID
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method startUserTyping ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stopUserTyping.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/methods/stopUserTyping.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => stopUserTyping
});
let UsersTyping;
module.link("/imports/api/group-chat-msg", {
  UsersTyping(v) {
    UsersTyping = v;
  }

}, 0);
let stopTyping;
module.link("../modifiers/stopTyping", {
  default(v) {
    stopTyping = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function stopUserTyping() {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const userTyping = UsersTyping.findOne({
      meetingId,
      userId: requesterUserId
    });

    if (userTyping && meetingId && requesterUserId) {
      stopTyping(meetingId, requesterUserId, true);
    }
  } catch (err) {
    Logger.error("Exception while invoking method stopUserTyping ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addBulkGroupChatMsgs.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/modifiers/addBulkGroupChatMsgs.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);

let _objectWithoutProperties;

module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }

}, 1);
module.export({
  default: () => addBulkGroupChatMsgs
});
let GroupChatMsg;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 2);
let parseMessage;
module.link("./addGroupChatMsg", {
  parseMessage(v) {
    parseMessage = v;
  }

}, 3);

function addBulkGroupChatMsgs(msgs) {
  return Promise.asyncApply(() => {
    if (!msgs.length) return;
    const mappedMsgs = msgs.map((_ref) => {
      let {
        chatId,
        meetingId,
        msg
      } = _ref;

      const {
        sender,
        color
      } = msg,
            restMsg = _objectWithoutProperties(msg, ["sender", "color"]);

      return _objectSpread({
        _id: new Mongo.ObjectID()._str
      }, restMsg, {
        meetingId,
        chatId,
        message: parseMessage(msg.message),
        sender: sender.id
      });
    }).map(el => flat(el, {
      safe: true
    }));

    try {
      const {
        insertedCount
      } = Promise.await(GroupChatMsg.rawCollection().insertMany(mappedMsgs));
      msgs.length = 0;

      if (insertedCount) {
        Logger.info("Inserted ".concat(insertedCount, " messages"));
      }
    } catch (err) {
      Logger.error("Error on bulk insert. ".concat(err));
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addGroupChatMsg.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/modifiers/addGroupChatMsg.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);

let _objectWithoutProperties;

module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }

}, 1);
module.export({
  parseMessage: () => parseMessage,
  default: () => addGroupChatMsg
});
let Match, check;
module.link("meteor/check", {
  Match(v) {
    Match = v;
  },

  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let GroupChatMsg;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  }

}, 2);
let BREAK_LINE;
module.link("/imports/utils/lineEndings", {
  BREAK_LINE(v) {
    BREAK_LINE = v;
  }

}, 3);

function parseMessage(message) {
  let parsedMessage = message || ''; // Replace \r and \n to <br/>

  parsedMessage = parsedMessage.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, "$1".concat(BREAK_LINE, "$2")); // Replace flash links to html valid ones

  parsedMessage = parsedMessage.split('<a href=\'event:').join('<a target="_blank" href=\'');
  parsedMessage = parsedMessage.split('<a href="event:').join('<a target="_blank" href="');
  return parsedMessage;
}

function addGroupChatMsg(meetingId, chatId, msg) {
  check(meetingId, String);
  check(chatId, String);
  check(msg, {
    id: Match.Maybe(String),
    timestamp: Number,
    sender: Object,
    color: String,
    message: String,
    correlationId: Match.Maybe(String)
  });

  const {
    color,
    sender
  } = msg,
        restMsg = _objectWithoutProperties(msg, ["color", "sender"]);

  const msgDocument = _objectSpread({}, restMsg, {
    sender: sender.id,
    meetingId,
    chatId,
    message: parseMessage(msg.message)
  });

  try {
    const insertedId = GroupChatMsg.insert(msgDocument);

    if (insertedId) {
      Logger.info("Added group-chat-msg msgId=".concat(msg.id, " chatId=").concat(chatId, " meetingId=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Error on adding group-chat-msg to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addSystemMsg.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/modifiers/addSystemMsg.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);
module.export({
  parseMessage: () => parseMessage,
  default: () => addSystemMsg
});
let Match, check;
module.link("meteor/check", {
  Match(v) {
    Match = v;
  },

  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let GroupChatMsg;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  }

}, 2);
let BREAK_LINE;
module.link("/imports/utils/lineEndings", {
  BREAK_LINE(v) {
    BREAK_LINE = v;
  }

}, 3);

function parseMessage(message) {
  let parsedMessage = message || ''; // Replace \r and \n to <br/>

  parsedMessage = parsedMessage.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, "$1".concat(BREAK_LINE, "$2")); // Replace flash links to html valid ones

  parsedMessage = parsedMessage.split('<a href=\'event:').join('<a target="_blank" href=\'');
  parsedMessage = parsedMessage.split('<a href="event:').join('<a target="_blank" href="');
  return parsedMessage;
}

function addSystemMsg(meetingId, chatId, msg) {
  check(meetingId, String);
  check(chatId, String);
  check(msg, {
    id: Match.Maybe(String),
    timestamp: Number,
    sender: Object,
    message: String,
    extra: Object,
    correlationId: Match.Maybe(String)
  });

  const msgDocument = _objectSpread({}, msg, {
    sender: msg.sender.id,
    meetingId,
    chatId,
    message: parseMessage(msg.message)
  });

  try {
    const insertedId = GroupChatMsg.insert(msgDocument);

    if (insertedId) {
      Logger.info("Added system-msg msgId=".concat(msg.id, " chatId=").concat(chatId, " meetingId=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Error on adding system-msg to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearGroupChatMsg.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/modifiers/clearGroupChatMsg.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearGroupChatMsg
});
let GroupChatMsg;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let addGroupChatMsg;
module.link("/imports/api/group-chat-msg/server/modifiers/addGroupChatMsg", {
  default(v) {
    addGroupChatMsg = v;
  }

}, 2);

function clearGroupChatMsg(meetingId, chatId) {
  const CHAT_CONFIG = Meteor.settings.public.chat;
  const PUBLIC_CHAT_SYSTEM_ID = CHAT_CONFIG.system_userid;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;
  const CHAT_CLEAR_MESSAGE = CHAT_CONFIG.system_messages_keys.chat_clear;
  const SYSTEM_CHAT_TYPE = CHAT_CONFIG.type_system;

  if (chatId) {
    try {
      const numberAffected = GroupChatMsg.remove({
        meetingId,
        chatId
      });

      if (numberAffected) {
        Logger.info("Cleared GroupChatMsg (".concat(meetingId, ", ").concat(chatId, ")"));
        const clearMsg = {
          id: "".concat(SYSTEM_CHAT_TYPE, "-").concat(CHAT_CLEAR_MESSAGE),
          color: '0',
          timestamp: Date.now(),
          correlationId: "".concat(PUBLIC_CHAT_SYSTEM_ID, "-").concat(Date.now()),
          sender: {
            id: PUBLIC_CHAT_SYSTEM_ID,
            name: ''
          },
          message: CHAT_CLEAR_MESSAGE
        };
        addGroupChatMsg(meetingId, PUBLIC_GROUP_CHAT_ID, clearMsg);
      }
    } catch (err) {
      Logger.error("Error on clearing GroupChat (".concat(meetingId, ", ").concat(chatId, "). ").concat(err));
    }

    return true;
  }

  if (meetingId) {
    try {
      const numberAffected = GroupChatMsg.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared GroupChatMsg (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing GroupChatMsg (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = GroupChatMsg.remove({
        chatId: {
          $eq: PUBLIC_GROUP_CHAT_ID
        }
      });

      if (numberAffected) {
        Logger.info('Cleared GroupChatMsg (all)');
      }
    } catch (err) {
      Logger.error("Error on clearing GroupChatMsg (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startTyping.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/modifiers/startTyping.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => startTyping
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let UsersTyping;
module.link("/imports/api/group-chat-msg", {
  UsersTyping(v) {
    UsersTyping = v;
  }

}, 3);
let stopTyping;
module.link("./stopTyping", {
  default(v) {
    stopTyping = v;
  }

}, 4);
const TYPING_TIMEOUT = 5000;

function startTyping(meetingId, userId, chatId) {
  check(meetingId, String);
  check(userId, String);
  const selector = {
    meetingId,
    userId
  };
  const user = Users.findOne(selector, {
    fields: {
      name: 1,
      role: 1
    }
  });
  const modifier = {
    meetingId,
    userId,
    name: user.name,
    isTypingTo: chatId,
    role: user.role,
    time: new Date()
  };
  const typingUser = UsersTyping.findOne(selector, {
    fields: {
      time: 1
    }
  });

  if (typingUser) {
    if (modifier.time - typingUser.time <= TYPING_TIMEOUT - 100) return;
  }

  try {
    const {
      numberAffected
    } = UsersTyping.upsert(selector, modifier);

    if (numberAffected) {
      Logger.debug('Typing indicator update', {
        userId,
        chatId
      });
      Meteor.setTimeout(() => {
        stopTyping(meetingId, userId);
      }, TYPING_TIMEOUT);
    }
  } catch (err) {
    Logger.error("Typing indicator update error: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stopTyping.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/modifiers/stopTyping.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => stopTyping
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let UsersTyping;
module.link("/imports/api/group-chat-msg", {
  UsersTyping(v) {
    UsersTyping = v;
  }

}, 2);

function stopTyping(meetingId, userId) {
  let sendMsgInitiated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  check(meetingId, String);
  check(userId, String);
  check(sendMsgInitiated, Boolean);
  const selector = {
    meetingId,
    userId
  };
  const user = UsersTyping.findOne(selector);
  const stillTyping = !sendMsgInitiated && user && new Date() - user.time < 3000;
  if (stillTyping) return;

  try {
    const numberAffected = UsersTyping.remove(selector);

    if (numberAffected) {
      Logger.debug('Stopped typing indicator', {
        userId
      });
    }
  } catch (err) {
    Logger.error("Stop user=".concat(userId, " typing indicator error: ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"syncMeetingChatMsgs.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/modifiers/syncMeetingChatMsgs.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);

let _objectWithoutProperties;

module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }

}, 1);
module.export({
  default: () => syncMeetingChatMsgs
});
let Match, check;
module.link("meteor/check", {
  Match(v) {
    Match = v;
  },

  check(v) {
    check = v;
  }

}, 0);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 1);
let GroupChatMsg;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let parseMessage;
module.link("./addGroupChatMsg", {
  parseMessage(v) {
    parseMessage = v;
  }

}, 4);

function syncMeetingChatMsgs(meetingId, chatId, msgs) {
  if (!msgs.length) return;
  check(meetingId, String);
  check(chatId, String);
  check(msgs, Match.Maybe(Array));

  try {
    const bulkOperations = GroupChatMsg.rawCollection().initializeOrderedBulkOp();
    msgs.forEach(msg => {
      const {
        sender,
        color
      } = msg,
            restMsg = _objectWithoutProperties(msg, ["sender", "color"]);

      const msgToSync = _objectSpread({}, restMsg, {
        meetingId,
        chatId,
        message: parseMessage(msg.message),
        sender: sender.id
      });

      const modifier = flat(msgToSync, {
        safe: true
      });
      bulkOperations.find({
        chatId,
        meetingId,
        id: msg.id
      }).upsert().updateOne({
        $setOnInsert: {
          _id: new Mongo.ObjectID()._str
        },
        $set: _objectSpread({}, modifier)
      });
    });
    bulkOperations.execute();
    Logger.info('Chat messages synchronized', {
      chatId,
      meetingId
    });
  } catch (err) {
    Logger.error("Error on sync chat messages: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/eventHandlers.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleGroupChatMsgBroadcast;
module.link("./handlers/groupChatMsgBroadcast", {
  default(v) {
    handleGroupChatMsgBroadcast = v;
  }

}, 1);
let handleClearPublicGroupChat;
module.link("./handlers/clearPublicGroupChat", {
  default(v) {
    handleClearPublicGroupChat = v;
  }

}, 2);
let handleUserTyping;
module.link("./handlers/userTyping", {
  default(v) {
    handleUserTyping = v;
  }

}, 3);
let handleSyncGroupChatMsg;
module.link("./handlers/syncGroupsChat", {
  default(v) {
    handleSyncGroupChatMsg = v;
  }

}, 4);
let processForHTML5ServerOnly;
module.link("/imports/api/common/server/helpers", {
  processForHTML5ServerOnly(v) {
    processForHTML5ServerOnly = v;
  }

}, 5);
RedisPubSub.on('GetGroupChatMsgsRespMsg', processForHTML5ServerOnly(handleSyncGroupChatMsg));
RedisPubSub.on('GroupChatMessageBroadcastEvtMsg', handleGroupChatMsgBroadcast);
RedisPubSub.on('ClearPublicChatHistoryEvtMsg', handleClearPublicGroupChat);
RedisPubSub.on('SyncGetGroupChatMsgsRespMsg', handleSyncGroupChatMsg);
RedisPubSub.on('UserTypingEvtMsg', handleUserTyping);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/methods.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let sendGroupChatMsg;
module.link("./methods/sendGroupChatMsg", {
  default(v) {
    sendGroupChatMsg = v;
  }

}, 1);
let clearPublicChatHistory;
module.link("./methods/clearPublicChatHistory", {
  default(v) {
    clearPublicChatHistory = v;
  }

}, 2);
let startUserTyping;
module.link("./methods/startUserTyping", {
  default(v) {
    startUserTyping = v;
  }

}, 3);
let stopUserTyping;
module.link("./methods/stopUserTyping", {
  default(v) {
    stopUserTyping = v;
  }

}, 4);
let chatMessageBeforeJoinCounter;
module.link("./methods/chatMessageBeforeJoinCounter", {
  default(v) {
    chatMessageBeforeJoinCounter = v;
  }

}, 5);
let fetchMessagePerPage;
module.link("./methods/fetchMessagePerPage", {
  default(v) {
    fetchMessagePerPage = v;
  }

}, 6);
Meteor.methods({
  fetchMessagePerPage,
  chatMessageBeforeJoinCounter,
  sendGroupChatMsg,
  clearPublicChatHistory,
  startUserTyping,
  stopUserTyping
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/server/publishers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let GroupChatMsg, UsersTyping;
module.link("/imports/api/group-chat-msg", {
  GroupChatMsg(v) {
    GroupChatMsg = v;
  },

  UsersTyping(v) {
    UsersTyping = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 4);

function groupChatMsg(chatsIds) {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing GroupChatMsg was requested by unauth connection ".concat(this.connection.id));
    return GroupChatMsg.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  const CHAT_CONFIG = Meteor.settings.public.chat;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;
  Logger.debug('Publishing group-chat-msg', {
    meetingId,
    userId
  });
  const User = Users.findOne({
    userId,
    meetingId
  });
  const selector = {
    timestamp: {
      $gte: User.authTokenValidatedTime
    },
    $or: [{
      meetingId,
      chatId: {
        $eq: PUBLIC_GROUP_CHAT_ID
      }
    }, {
      chatId: {
        $in: chatsIds
      }
    }]
  };
  return GroupChatMsg.find(selector);
}

function publish() {
  const boundGroupChat = groupChatMsg.bind(this);
  return boundGroupChat(...arguments);
}

Meteor.publish('group-chat-msg', publish);

function usersTyping() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing users-typing was requested by unauth connection ".concat(this.connection.id));
    return UsersTyping.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing users-typing', {
    meetingId,
    userId
  });
  return UsersTyping.find({
    meetingId
  });
}

function pubishUsersTyping() {
  const boundUsersTyping = usersTyping.bind(this);
  return boundUsersTyping(...arguments);
}

Meteor.publish('users-typing', pubishUsersTyping);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/group-chat-msg/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  GroupChatMsg: () => GroupChatMsg,
  UsersTyping: () => UsersTyping
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const GroupChatMsg = new Mongo.Collection('group-chat-msg');
const UsersTyping = new Mongo.Collection('users-typing');

if (Meteor.isServer) {
  GroupChatMsg._ensureIndex({
    meetingId: 1,
    chatId: 1
  });

  UsersTyping._ensureIndex({
    meetingId: 1,
    isTypingTo: 1
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"guest-users":{"server":{"handlers":{"guestApproved.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/handlers/guestApproved.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGuestApproved
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let setGuestStatus;
module.link("../modifiers/setGuestStatus", {
  default(v) {
    setGuestStatus = v;
  }

}, 1);

function handleGuestApproved(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    approvedBy,
    guests
  } = body;
  check(meetingId, String);
  check(approvedBy, String);
  check(guests, Array);
  return guests.forEach(guest => setGuestStatus(meetingId, guest.guest, guest.status, approvedBy));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"guestWaitingLeft.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/handlers/guestWaitingLeft.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGuestWaitingLeft
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let removeGuest;
module.link("../modifiers/removeGuest", {
  default(v) {
    removeGuest = v;
  }

}, 1);

function handleGuestWaitingLeft(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    userId
  } = body;
  check(meetingId, String);
  check(userId, String);
  return removeGuest(meetingId, userId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"guestsWaitingForApproval.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/handlers/guestsWaitingForApproval.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);
module.export({
  default: () => handleGuestsWaitingForApproval
});
let stringHash;
module.link("string-hash", {
  default(v) {
    stringHash = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let GuestUsers;
module.link("/imports/api/guest-users/", {
  default(v) {
    GuestUsers = v;
  }

}, 3);
const COLOR_LIST = ['#7b1fa2', '#6a1b9a', '#4a148c', '#5e35b1', '#512da8', '#4527a0', '#311b92', '#3949ab', '#303f9f', '#283593', '#1a237e', '#1976d2', '#1565c0', '#0d47a1', '#0277bd', '#01579b'];

function handleGuestsWaitingForApproval(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    guests
  } = body;
  check(guests, Array);
  check(meetingId, String);
  return guests.map(guest => {
    try {
      const {
        insertedId,
        numberAffected
      } = GuestUsers.upsert({
        meetingId,
        intId: guest.intId
      }, _objectSpread({
        approved: false,
        denied: false
      }, guest, {
        meetingId,
        loginTime: guest.registeredOn,
        color: COLOR_LIST[stringHash(guest.intId) % COLOR_LIST.length]
      }));

      if (insertedId) {
        Logger.info("Added guest user meeting=".concat(meetingId));
      } else if (numberAffected) {
        Logger.info("Upserted guest user meeting=".concat(meetingId));
      }
    } catch (err) {
      Logger.error("Adding guest user to collection: ".concat(err));
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"allowPendingUsers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/methods/allowPendingUsers.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => allowPendingUsers
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
const REDIS_CONFIG = Meteor.settings.private.redis;
const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
const EVENT_NAME = 'GuestsWaitingApprovedMsg';

function allowPendingUsers(guests, status) {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(guests, Array);
    const mappedGuests = guests.map(guest => ({
      status,
      guest: guest.intId
    }));
    const payload = {
      approvedBy: requesterUserId,
      guests: mappedGuests
    };
    Logger.info("User=".concat(requesterUserId, " ").concat(status, " guests ").concat(JSON.stringify(mappedGuests)));
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method allowPendingUsers ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changeGuestPolicy.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/methods/changeGuestPolicy.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeGuestPolicy
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
const REDIS_CONFIG = Meteor.settings.private.redis;
const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
const EVENT_NAME = 'SetGuestPolicyCmdMsg';

function changeGuestPolicy(policyRule) {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(policyRule, String);
    const payload = {
      setBy: requesterUserId,
      policy: policyRule
    };
    Logger.info("User=".concat(requesterUserId, " change guest policy to ").concat(policyRule));
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method changeGuestPolicy ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setGuestLobbyMessage.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/methods/setGuestLobbyMessage.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setGuestLobbyMessage
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
const REDIS_CONFIG = Meteor.settings.private.redis;
const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
const EVENT_NAME = 'SetGuestLobbyMessageCmdMsg';

function setGuestLobbyMessage(message) {
  try {
    check(message, String);
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const payload = {
      message
    };
    Logger.info("User=".concat(requesterUserId, " set guest lobby message to ").concat(message));
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method setGuestLobbyMessage ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearGuestUsers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/modifiers/clearGuestUsers.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearGuestUsers
});
let GuestUsers;
module.link("/imports/api/guest-users", {
  default(v) {
    GuestUsers = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearGuestUsers(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = GuestUsers.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared GuestUsers in (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.info("Error on clearing GuestUsers in (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = GuestUsers.remove({});

      if (numberAffected) {
        Logger.info('Cleared GuestUsers in all meetings');
      }
    } catch (err) {
      Logger.error("Error on clearing GuestUsers in all meetings. ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeGuest.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/modifiers/removeGuest.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeGuest
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let GuestUsers;
module.link("/imports/api/guest-users", {
  default(v) {
    GuestUsers = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function removeGuest(meetingId, intId) {
  check(meetingId, String);
  check(intId, String);
  const selector = {
    meetingId,
    intId
  };

  const cb = err => {
    if (err) {
      return Logger.error("Removing guest user from collection: ".concat(err));
    }

    return Logger.info("Removed guest user id=".concat(intId, " meetingId=").concat(meetingId));
  };

  return GuestUsers.remove(selector, cb);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setGuestStatus.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/modifiers/setGuestStatus.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setGuestStatus
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let GuestUsers;
module.link("/imports/api/guest-users", {
  default(v) {
    GuestUsers = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
const GUEST_STATUS_ALLOW = 'ALLOW';
const GUEST_STATUS_DENY = 'DENY';

function setGuestStatus(meetingId, intId, status) {
  let approvedBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  check(meetingId, String);
  check(intId, String);
  check(status, String);
  const selector = {
    meetingId,
    intId
  };
  const modifier = {
    $set: {
      approved: status === GUEST_STATUS_ALLOW,
      denied: status === GUEST_STATUS_DENY,
      approvedBy
    }
  };

  try {
    const numberAffected = GuestUsers.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Updated status=".concat(status, " user=").concat(intId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Updating status=".concat(status, " user=").concat(intId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/eventHandlers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let processForHTML5ServerOnly;
module.link("/imports/api/common/server/helpers", {
  processForHTML5ServerOnly(v) {
    processForHTML5ServerOnly = v;
  }

}, 1);
let handleGuestApproved;
module.link("./handlers/guestApproved", {
  default(v) {
    handleGuestApproved = v;
  }

}, 2);
let handleGuestsWaitingForApproval;
module.link("./handlers/guestsWaitingForApproval", {
  default(v) {
    handleGuestsWaitingForApproval = v;
  }

}, 3);
let handleGuestWaitingLeft;
module.link("./handlers/guestWaitingLeft", {
  default(v) {
    handleGuestWaitingLeft = v;
  }

}, 4);
RedisPubSub.on('GuestWaitingLeftEvtMsg', handleGuestWaitingLeft);
RedisPubSub.on('GuestsWaitingForApprovalEvtMsg', processForHTML5ServerOnly(handleGuestsWaitingForApproval));
RedisPubSub.on('GuestsWaitingApprovedEvtMsg', processForHTML5ServerOnly(handleGuestApproved));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/methods.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let allowPendingUsers;
module.link("/imports/api/guest-users/server/methods/allowPendingUsers", {
  default(v) {
    allowPendingUsers = v;
  }

}, 1);
let changeGuestPolicy;
module.link("/imports/api/guest-users/server/methods/changeGuestPolicy", {
  default(v) {
    changeGuestPolicy = v;
  }

}, 2);
let setGuestLobbyMessage;
module.link("/imports/api/guest-users/server/methods/setGuestLobbyMessage", {
  default(v) {
    setGuestLobbyMessage = v;
  }

}, 3);
Meteor.methods({
  allowPendingUsers,
  changeGuestPolicy,
  setGuestLobbyMessage
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/server/publishers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let GuestUsers;
module.link("/imports/api/guest-users/", {
  default(v) {
    GuestUsers = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function guestUsers() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing GuestUsers was requested by unauth connection ".concat(this.connection.id));
    return GuestUsers.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug("Publishing GuestUsers for ".concat(meetingId, " ").concat(userId));
  return GuestUsers.find({
    meetingId
  });
}

function publish() {
  const boundSlides = guestUsers.bind(this);
  return boundSlides(...arguments);
}

Meteor.publish('guestUser', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/guest-users/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Mongo;
module.link("meteor/mongo", {
  Mongo(v) {
    Mongo = v;
  }

}, 0);
const GuestUsers = new Mongo.Collection('guestUsers');
module.exportDefault(GuestUsers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"local-settings":{"server":{"methods":{"userChangedLocalSettings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/local-settings/server/methods/userChangedLocalSettings.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userChangedLocalSettings
});

let _;

module.link("lodash", {
  default(v) {
    _ = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let LocalSettings;
module.link("/imports/api/local-settings", {
  default(v) {
    LocalSettings = v;
  }

}, 2);
let setChangedLocalSettings;
module.link("../modifiers/setChangedLocalSettings", {
  default(v) {
    setChangedLocalSettings = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function userChangedLocalSettings(settings) {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    if (!meetingId || !requesterUserId) return;
    check(settings, Object);
    check(meetingId, String);
    check(requesterUserId, String);
    const userLocalSettings = LocalSettings.findOne({
      meetingId,
      userId: requesterUserId
    }, {
      fields: {
        settings: 1
      }
    });

    if (!userLocalSettings || !_.isEqual(userLocalSettings.settings, settings)) {
      setChangedLocalSettings(meetingId, requesterUserId, settings);
    }
  } catch (err) {
    Logger.error("Exception while invoking method userChangedLocalSettings ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearLocalSettings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/local-settings/server/modifiers/clearLocalSettings.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearLocalSettings
});
let LocalSettings;
module.link("/imports/api/local-settings", {
  default(v) {
    LocalSettings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearLocalSettings(meetingId) {
  try {
    const numberAffected = LocalSettings.remove({
      meetingId
    });

    if (numberAffected) {
      Logger.info("Cleared Local Settings (".concat(meetingId, ")"));
    }
  } catch (err) {
    Logger.error("Error on clearing Local Settings (".concat(meetingId, "). ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setChangedLocalSettings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/local-settings/server/modifiers/setChangedLocalSettings.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setChangedLocalSettings
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let LocalSettings;
module.link("/imports/api/local-settings", {
  default(v) {
    LocalSettings = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function setChangedLocalSettings(meetingId, userId, settings) {
  check(meetingId, String);
  check(userId, String);
  check(settings, Object);
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      settings
    }
  };

  try {
    const {
      numChanged
    } = LocalSettings.upsert(selector, modifier);

    if (numChanged) {
      Logger.info("Updated settings for user ".concat(userId, " on meeting ").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Error on update settings. ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/local-settings/server/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/local-settings/server/methods.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let userChangedLocalSettings;
module.link("./methods/userChangedLocalSettings", {
  default(v) {
    userChangedLocalSettings = v;
  }

}, 1);
Meteor.methods({
  userChangedLocalSettings
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/local-settings/server/publishers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let LocalSettings;
module.link("/imports/api/local-settings", {
  default(v) {
    LocalSettings = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function localSettings() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing LocalSettings was requested by unauth connection ".concat(this.connection.id));
    return LocalSettings.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing local settings', {
    userId
  });
  return LocalSettings.find({
    meetingId,
    userId
  });
}

function publish() {
  const boundLocalSettings = localSettings.bind(this);
  return boundLocalSettings(...arguments);
}

Meteor.publish('local-settings', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/local-settings/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const LocalSettings = new Mongo.Collection('local-settings');

if (Meteor.isServer) {
  LocalSettings._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

module.exportDefault(LocalSettings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"log-client":{"server":{"methods":{"logClient.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/log-client/server/methods/logClient.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
module.exportDefault(function (type, logDescription) {
  let logCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'was_not_provided';
  let extraInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  let userInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  const connectionId = this.connection.id;
  const logContents = {
    logCode,
    logDescription,
    connectionId,
    extraInfo,
    userInfo
  }; // If I don't pass message, logs will start with `undefined`

  Logger.log({
    message: JSON.stringify(logContents),
    level: type
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/log-client/server/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./methods");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/log-client/server/methods.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let logClient;
module.link("./methods/logClient", {
  default(v) {
    logClient = v;
  }

}, 1);
Meteor.methods({
  logClient
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"meetings":{"server":{"handlers":{"getAllMeetings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/getAllMeetings.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGetAllMeetings
});
let handleMeetingCreation;
module.link("./meetingCreation", {
  default(v) {
    handleMeetingCreation = v;
  }

}, 0);

function handleGetAllMeetings(_ref) {
  let {
    body
  } = _ref;
  return handleMeetingCreation({
    body
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"guestLobbyMessageChanged.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/guestLobbyMessageChanged.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGuestLobbyMessageChanged
});
let setGuestLobbyMessage;
module.link("../modifiers/setGuestLobbyMessage", {
  default(v) {
    setGuestLobbyMessage = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);

function handleGuestLobbyMessageChanged(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    message
  } = body;
  check(meetingId, String);
  check(message, String);
  return setGuestLobbyMessage(meetingId, message);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"guestPolicyChanged.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/guestPolicyChanged.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGuestPolicyChanged
});
let setGuestPolicy;
module.link("../modifiers/setGuestPolicy", {
  default(v) {
    setGuestPolicy = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);

function handleGuestPolicyChanged(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    policy
  } = body;
  check(meetingId, String);
  check(policy, String);
  return setGuestPolicy(meetingId, policy);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meetingCreation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/meetingCreation.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleMeetingCreation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addMeeting;
module.link("../modifiers/addMeeting", {
  default(v) {
    addMeeting = v;
  }

}, 1);

function handleMeetingCreation(_ref) {
  let {
    body
  } = _ref;
  const meeting = body.props;
  const durationInSecods = meeting.durationProps.duration * 60;
  meeting.durationProps.timeRemaining = durationInSecods;
  check(meeting, Object);
  return addMeeting(meeting);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meetingDestruction.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/meetingDestruction.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleMeetingDestruction
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let removeAnnotationsStreamer;
module.link("/imports/api/annotations/server/streamer", {
  removeAnnotationsStreamer(v) {
    removeAnnotationsStreamer = v;
  }

}, 2);
let removeCursorStreamer;
module.link("/imports/api/cursor/server/streamer", {
  removeCursorStreamer(v) {
    removeCursorStreamer = v;
  }

}, 3);
let removeExternalVideoStreamer;
module.link("/imports/api/external-videos/server/streamer", {
  removeExternalVideoStreamer(v) {
    removeExternalVideoStreamer = v;
  }

}, 4);

function handleMeetingDestruction(_ref) {
  let {
    body
  } = _ref;
  check(body, Object);
  const {
    meetingId
  } = body;
  check(meetingId, String);

  if (!process.env.BBB_HTML5_ROLE || process.env.BBB_HTML5_ROLE === 'frontend') {
    removeAnnotationsStreamer(meetingId);
    removeCursorStreamer(meetingId);
    removeExternalVideoStreamer(meetingId);
  }

  return RedisPubSub.destroyMeetingQueue(meetingId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meetingEnd.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/meetingEnd.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleMeetingEnd
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let meetingHasEnded;
module.link("../modifiers/meetingHasEnded", {
  default(v) {
    meetingHasEnded = v;
  }

}, 1);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 2);
let Breakouts;
module.link("/imports/api/breakouts", {
  default(v) {
    Breakouts = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function handleMeetingEnd(_ref) {
  let {
    header,
    body
  } = _ref;
  check(body, Object);
  const {
    meetingId
  } = body;
  check(meetingId, String);
  check(header, Object);
  const {
    userId
  } = header;
  check(userId, String);

  const cb = (err, num, meetingType) => {
    if (err) {
      Logger.error("".concat(meetingType, " ending error: ").concat(err));
      return;
    }

    if (num) {
      Meteor.setTimeout(() => {
        meetingHasEnded(meetingId);
      }, 10000);
    }
  };

  Meetings.update({
    meetingId
  }, {
    $set: {
      meetingEnded: true,
      meetingEndedBy: userId
    }
  }, (err, num) => {
    cb(err, num, 'Meeting');
  });
  Breakouts.update({
    parentMeetingId: meetingId
  }, {
    $set: {
      meetingEnded: true
    }
  }, (err, num) => {
    cb(err, num, 'Breakout');
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meetingLockChange.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/meetingLockChange.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleLockSettingsInMeeting
});
let changeLockSettings;
module.link("../modifiers/changeLockSettings", {
  default(v) {
    changeLockSettings = v;
  }

}, 0);

function handleLockSettingsInMeeting(_ref, meetingId) {
  let {
    body
  } = _ref;
  changeLockSettings(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"recordingStatusChange.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/recordingStatusChange.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleRecordingStatusChange
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let RecordMeetings;
module.link("/imports/api/meetings", {
  RecordMeetings(v) {
    RecordMeetings = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function handleRecordingStatusChange(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    recording
  } = body;
  check(recording, Boolean);
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      recording
    }
  };

  try {
    const {
      numberAffected
    } = RecordMeetings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Changed meeting record status id=".concat(meetingId, " recording=").concat(recording));
    }
  } catch (err) {
    Logger.error("Changing record status: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"recordingTimerChange.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/recordingTimerChange.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleRecordingTimerChange
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let RecordMeetings;
module.link("/imports/api/meetings", {
  RecordMeetings(v) {
    RecordMeetings = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function handleRecordingTimerChange(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    time
  } = body;
  check(meetingId, String);
  check(body, {
    time: Number
  });
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      time
    }
  };

  try {
    RecordMeetings.upsert(selector, modifier);
  } catch (err) {
    Logger.error("Changing recording time: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"selectRandomViewer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/selectRandomViewer.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => randomlySelectedUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let updateRandomViewer;
module.link("../modifiers/updateRandomViewer", {
  default(v) {
    updateRandomViewer = v;
  }

}, 1);

function randomlySelectedUser(_ref) {
  let {
    header,
    body
  } = _ref;
  const {
    userIds,
    choice,
    requestedBy
  } = body;
  const {
    meetingId
  } = header;
  check(meetingId, String);
  check(requestedBy, String);
  check(userIds, Array);
  check(choice, Number);
  updateRandomViewer(meetingId, userIds, choice, requestedBy);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"timeRemainingUpdate.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/timeRemainingUpdate.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleTimeRemainingUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let MeetingTimeRemaining;
module.link("/imports/api/meetings", {
  MeetingTimeRemaining(v) {
    MeetingTimeRemaining = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function handleTimeRemainingUpdate(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(meetingId, String);
  check(body, {
    timeLeftInSec: Number
  });
  const {
    timeLeftInSec
  } = body;
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      timeRemaining: timeLeftInSec
    }
  };

  try {
    MeetingTimeRemaining.upsert(selector, modifier);
  } catch (err) {
    Logger.error("Changing recording time: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userLockChange.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/userLockChange.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleLockSettingsInMeeting
});
let changeUserLock;
module.link("../modifiers/changeUserLock", {
  default(v) {
    changeUserLock = v;
  }

}, 0);

function handleLockSettingsInMeeting(_ref, meetingId) {
  let {
    body
  } = _ref;
  changeUserLock(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"webcamOnlyModerator.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/handlers/webcamOnlyModerator.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleChangeWebcamOnlyModerator
});
let changeWebcamOnlyModerator;
module.link("../modifiers/webcamOnlyModerator", {
  default(v) {
    changeWebcamOnlyModerator = v;
  }

}, 0);

function handleChangeWebcamOnlyModerator(_ref, meetingId) {
  let {
    body
  } = _ref;
  changeWebcamOnlyModerator(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"clearRandomlySelectedUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/methods/clearRandomlySelectedUser.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearRandomlySelectedUser
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);

function clearRandomlySelectedUser() {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const selector = {
      meetingId
    };
    const modifier = {
      $set: {
        randomlySelectedUser: []
      }
    };
    const {
      insertedId
    } = Meetings.update(selector, modifier);

    if (insertedId) {
      Logger.info("Cleared randomly selected user from meeting=".concat(meetingId, " by id=").concat(requesterUserId));
    }
  } catch (err) {
    Logger.error("Exception while invoking method clearRandomlySelectedUser ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"endMeeting.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/methods/endMeeting.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => endMeeting
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function endMeeting() {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'LogoutAndEndMeetingCmdMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const payload = {
      userId: requesterUserId
    };
    Logger.warn("Meeting '".concat(meetingId, "' is destroyed by '").concat(requesterUserId, "'"));
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method endMeeting ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"toggleLockSettings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/methods/toggleLockSettings.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => toggleLockSettings
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function toggleLockSettings(lockSettingsProps) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'ChangeLockSettingsInMeetingCmdMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(lockSettingsProps, {
      disableCam: Boolean,
      disableMic: Boolean,
      disablePrivateChat: Boolean,
      disablePublicChat: Boolean,
      disableNote: Boolean,
      hideUserList: Boolean,
      lockedLayout: Boolean,
      lockOnJoin: Boolean,
      lockOnJoinConfigurable: Boolean,
      setBy: Match.Maybe(String)
    });
    const {
      disableCam,
      disableMic,
      disablePrivateChat: disablePrivChat,
      disablePublicChat: disablePubChat,
      disableNote,
      hideUserList,
      lockedLayout,
      lockOnJoin,
      lockOnJoinConfigurable
    } = lockSettingsProps;
    const payload = {
      disableCam,
      disableMic,
      disablePrivChat,
      disablePubChat,
      disableNote,
      hideUserList,
      lockedLayout,
      lockOnJoin,
      lockOnJoinConfigurable,
      setBy: requesterUserId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method toggleLockSettings ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"toggleRecording.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/methods/toggleRecording.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => toggleRecording
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let RecordMeetings;
module.link("/imports/api/meetings", {
  RecordMeetings(v) {
    RecordMeetings = v;
  }

}, 3);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 4);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 5);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 6);

function toggleRecording() {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const ROLE_MODERATOR = Meteor.settings.public.user.role_moderator;
  const EVENT_NAME = 'SetRecordingStatusCmdMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    let meetingRecorded;
    let allowedToRecord;
    const recordObject = RecordMeetings.findOne({
      meetingId
    });

    if (recordObject != null) {
      const {
        allowStartStopRecording,
        recording,
        record
      } = recordObject;
      meetingRecorded = recording;
      allowedToRecord = record && allowStartStopRecording; // TODO-- remove some day
    }

    const payload = {
      recording: !meetingRecorded,
      setBy: requesterUserId
    };
    const selector = {
      meetingId,
      userId: requesterUserId
    };
    const user = Users.findOne(selector);

    if (allowedToRecord && !!user && user.role === ROLE_MODERATOR) {
      Logger.info("Setting the record parameter to ".concat(!meetingRecorded, " for ").concat(meetingId, " by ").concat(requesterUserId));
      RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
    }
  } catch (err) {
    Logger.error("Exception while invoking method toggleRecording ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"toggleWebcamsOnlyForModerator.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/methods/toggleWebcamsOnlyForModerator.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => toggleWebcamsOnlyForModerator
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let extractCredentials;
module.link("../../../common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function toggleWebcamsOnlyForModerator(webcamsOnlyForModerator) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'UpdateWebcamsOnlyForModeratorCmdMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(webcamsOnlyForModerator, Boolean);
    const payload = {
      webcamsOnlyForModerator,
      setBy: requesterUserId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method toggleWebcamsOnlyForModerator ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"transferUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/methods/transferUser.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => transferUser
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function transferUser(fromMeetingId, toMeetingId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'TransferUserToMeetingRequestMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const payload = {
      fromMeetingId,
      toMeetingId,
      userId: requesterUserId
    };
    Logger.verbose('User was transferred from one meting to another', {
      requesterUserId,
      fromMeetingId,
      toMeetingId
    });
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method transferUser ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addMeeting.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/addMeeting.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);

let _objectWithoutProperties;

module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }

}, 1);
module.export({
  default: () => addMeeting
});
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 0);
let check, Match;
module.link("meteor/check", {
  check(v) {
    check = v;
  },

  Match(v) {
    Match = v;
  }

}, 1);
let SanitizeHTML;
module.link("sanitize-html", {
  default(v) {
    SanitizeHTML = v;
  }

}, 2);
let Meetings, RecordMeetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  },

  RecordMeetings(v) {
    RecordMeetings = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);
let initPads;
module.link("/imports/api/common/server/etherpad", {
  initPads(v) {
    initPads = v;
  }

}, 5);
let addAnnotationsStreamer;
module.link("/imports/api/annotations/server/streamer", {
  addAnnotationsStreamer(v) {
    addAnnotationsStreamer = v;
  }

}, 6);
let addCursorStreamer;
module.link("/imports/api/cursor/server/streamer", {
  addCursorStreamer(v) {
    addCursorStreamer = v;
  }

}, 7);
let addExternalVideoStreamer;
module.link("/imports/api/external-videos/server/streamer", {
  addExternalVideoStreamer(v) {
    addExternalVideoStreamer = v;
  }

}, 8);

function addMeeting(meeting) {
  const meetingId = meeting.meetingProp.intId;
  check(meetingId, String);
  check(meeting, {
    breakoutProps: {
      sequence: Number,
      freeJoin: Boolean,
      breakoutRooms: Array,
      parentId: String,
      enabled: Boolean,
      record: Boolean,
      privateChatEnabled: Boolean
    },
    meetingProp: {
      intId: String,
      extId: String,
      isBreakout: Boolean,
      name: String
    },
    usersProp: {
      webcamsOnlyForModerator: Boolean,
      guestPolicy: String,
      authenticatedGuest: Boolean,
      maxUsers: Number,
      allowModsToUnmuteUsers: Boolean
    },
    durationProps: {
      createdTime: Number,
      duration: Number,
      createdDate: String,
      meetingExpireIfNoUserJoinedInMinutes: Number,
      meetingExpireWhenLastUserLeftInMinutes: Number,
      userInactivityInspectTimerInMinutes: Number,
      userInactivityThresholdInMinutes: Number,
      userActivitySignResponseDelayInMinutes: Number,
      endWhenNoModerator: Boolean,
      endWhenNoModeratorDelayInMinutes: Number,
      timeRemaining: Number
    },
    welcomeProp: {
      welcomeMsg: String,
      modOnlyMessage: String,
      welcomeMsgTemplate: String
    },
    recordProp: Match.ObjectIncluding({
      allowStartStopRecording: Boolean,
      autoStartRecording: Boolean,
      record: Boolean
    }),
    password: {
      viewerPass: String,
      moderatorPass: String
    },
    voiceProp: {
      voiceConf: String,
      dialNumber: String,
      telVoice: String,
      muteOnStart: Boolean
    },
    screenshareProps: {
      red5ScreenshareIp: String,
      red5ScreenshareApp: String,
      screenshareConf: String
    },
    metadataProp: Object,
    lockSettingsProps: {
      disableCam: Boolean,
      disableMic: Boolean,
      disablePrivateChat: Boolean,
      disablePublicChat: Boolean,
      disableNote: Boolean,
      hideUserList: Boolean,
      lockOnJoin: Boolean,
      lockOnJoinConfigurable: Boolean,
      lockedLayout: Boolean
    },
    systemProps: {
      html5InstanceId: Number
    }
  });

  const {
    recordProp
  } = meeting,
        restProps = _objectWithoutProperties(meeting, ["recordProp"]);

  const newMeeting = restProps;
  const selector = {
    meetingId
  };
  newMeeting.lockSettingsProps = Object.assign(meeting.lockSettingsProps, {
    setBy: 'temp'
  });
  const meetingEnded = false;
  let {
    welcomeMsg
  } = newMeeting.welcomeProp;

  const sanitizeTextInChat = original => SanitizeHTML(original, {
    allowedTags: ['a', 'b', 'br', 'i', 'img', 'li', 'small', 'span', 'strong', 'u', 'ul'],
    allowedAttributes: {
      a: ['href', 'name', 'target'],
      img: ['src', 'width', 'height']
    },
    allowedSchemes: ['https']
  });

  const sanitizedWelcomeText = sanitizeTextInChat(welcomeMsg);
  welcomeMsg = sanitizedWelcomeText.replace('href="event:', 'href="');

  const insertBlankTarget = (s, i) => "".concat(s.substr(0, i), " target=\"_blank\"").concat(s.substr(i));

  const linkWithoutTarget = new RegExp('<a href="(.*?)">', 'g');
  linkWithoutTarget.test(welcomeMsg);

  if (linkWithoutTarget.lastIndex > 0) {
    welcomeMsg = insertBlankTarget(welcomeMsg, linkWithoutTarget.lastIndex - 1);
  }

  newMeeting.welcomeProp.welcomeMsg = welcomeMsg; // note: as of July 2020 `modOnlyMessage` is not published to the client side.
  // We are sanitizing this data simply to prevent future potential usage
  // At the moment `modOnlyMessage` is obtained from client side as a response to Enter API

  newMeeting.welcomeProp.modOnlyMessage = sanitizeTextInChat(newMeeting.welcomeProp.modOnlyMessage);
  const modifier = {
    $set: Object.assign({
      meetingId,
      meetingEnded,
      publishedPoll: false,
      guestLobbyMessage: '',
      randomlySelectedUser: []
    }, flat(newMeeting, {
      safe: true
    }))
  };

  if (!process.env.BBB_HTML5_ROLE || process.env.BBB_HTML5_ROLE === 'frontend') {
    addAnnotationsStreamer(meetingId);
    addCursorStreamer(meetingId);
    addExternalVideoStreamer(meetingId); // we don't want to fully process the create meeting message in frontend since it can lead to duplication of meetings in mongo.

    if (process.env.BBB_HTML5_ROLE === 'frontend') {
      return;
    }
  }

  try {
    const {
      insertedId,
      numberAffected
    } = RecordMeetings.upsert(selector, _objectSpread({
      meetingId
    }, recordProp));

    if (insertedId) {
      Logger.info("Added record prop id=".concat(meetingId));
    } else if (numberAffected) {
      Logger.info("Upserted record prop id=".concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding record prop to collection: ".concat(err));
  }

  try {
    const {
      insertedId,
      numberAffected
    } = Meetings.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added meeting id=".concat(meetingId));
      const {
        html5InstanceId
      } = meeting.systemProps;
      initPads(meetingId, html5InstanceId);
    } else if (numberAffected) {
      Logger.info("Upserted meeting id=".concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding meeting to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changeLockSettings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/changeLockSettings.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeLockSettings
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function changeLockSettings(meetingId, payload) {
  check(meetingId, String);
  check(payload, {
    disableCam: Boolean,
    disableMic: Boolean,
    disablePrivChat: Boolean,
    disablePubChat: Boolean,
    disableNote: Boolean,
    hideUserList: Boolean,
    lockedLayout: Boolean,
    lockOnJoin: Boolean,
    lockOnJoinConfigurable: Boolean,
    setBy: Match.Maybe(String)
  });
  const {
    disableCam,
    disableMic,
    disablePrivChat,
    disablePubChat,
    disableNote,
    hideUserList,
    lockedLayout,
    lockOnJoin,
    lockOnJoinConfigurable,
    setBy
  } = payload;
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      lockSettingsProps: {
        disableCam,
        disableMic,
        disablePrivateChat: disablePrivChat,
        disablePublicChat: disablePubChat,
        disableNote,
        hideUserList,
        lockedLayout,
        lockOnJoin,
        lockOnJoinConfigurable,
        setBy
      }
    }
  };

  try {
    const {
      numberAffected
    } = Meetings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Changed meeting={".concat(meetingId, "} updated lock settings"));
    } else {
      Logger.info("meeting={".concat(meetingId, "} lock settings were not updated"));
    }
  } catch (err) {
    Logger.error("Changing meeting={".concat(meetingId, "} lock settings: ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changeUserLock.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/changeUserLock.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeUserLock
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function changeUserLock(meetingId, payload) {
  check(meetingId, String);
  check(payload, {
    userId: String,
    locked: Boolean,
    lockedBy: String
  });
  const {
    userId,
    locked,
    lockedBy
  } = payload;
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      locked
    }
  };

  try {
    const {
      numberAffected
    } = Users.update(selector, modifier);

    if (numberAffected) {
      Logger.info("User's userId=".concat(userId, " lock status was changed to: ").concat(locked, " by user userId=").concat(lockedBy));
    } else {
      Logger.info("User's userId=".concat(userId, " lock status wasn't updated"));
    }
  } catch (err) {
    Logger.error("Changing user lock setting: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearMeetingTimeRemaining.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/clearMeetingTimeRemaining.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearMeetingTimeRemaining
});
let MeetingTimeRemaining;
module.link("/imports/api/meetings", {
  MeetingTimeRemaining(v) {
    MeetingTimeRemaining = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearMeetingTimeRemaining(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = MeetingTimeRemaining.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared MeetingTimeRemaining in (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.info("Error on clearing MeetingTimeRemaining in (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = MeetingTimeRemaining.remove({});

      if (numberAffected) {
        Logger.info('Cleared MeetingTimeRemaining in all meetings');
      }
    } catch (err) {
      Logger.error("Error on clearing MeetingTimeRemaining in all meetings. ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearRecordMeeting.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/clearRecordMeeting.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => meetingHasEnded
});
let RecordMeetings;
module.link("/imports/api/meetings", {
  RecordMeetings(v) {
    RecordMeetings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function meetingHasEnded(meetingId) {
  try {
    const numberAffected = RecordMeetings.remove({
      meetingId
    });

    if (numberAffected) {
      Logger.info("Cleared record prop from meeting with id ".concat(meetingId));
    }
  } catch (err) {
    Logger.error("Error on clearing record prop from meeting with id ".concat(meetingId, ". ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meetingHasEnded.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/meetingHasEnded.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => meetingHasEnded
});
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let removeAnnotationsStreamer;
module.link("/imports/api/annotations/server/streamer", {
  removeAnnotationsStreamer(v) {
    removeAnnotationsStreamer = v;
  }

}, 2);
let removeCursorStreamer;
module.link("/imports/api/cursor/server/streamer", {
  removeCursorStreamer(v) {
    removeCursorStreamer = v;
  }

}, 3);
let removeExternalVideoStreamer;
module.link("/imports/api/external-videos/server/streamer", {
  removeExternalVideoStreamer(v) {
    removeExternalVideoStreamer = v;
  }

}, 4);
let clearUsers;
module.link("/imports/api/users/server/modifiers/clearUsers", {
  default(v) {
    clearUsers = v;
  }

}, 5);
let clearUsersSettings;
module.link("/imports/api/users-settings/server/modifiers/clearUsersSettings", {
  default(v) {
    clearUsersSettings = v;
  }

}, 6);
let clearGroupChat;
module.link("/imports/api/group-chat/server/modifiers/clearGroupChat", {
  default(v) {
    clearGroupChat = v;
  }

}, 7);
let clearGuestUsers;
module.link("/imports/api/guest-users/server/modifiers/clearGuestUsers", {
  default(v) {
    clearGuestUsers = v;
  }

}, 8);
let clearBreakouts;
module.link("/imports/api/breakouts/server/modifiers/clearBreakouts", {
  default(v) {
    clearBreakouts = v;
  }

}, 9);
let clearAnnotations;
module.link("/imports/api/annotations/server/modifiers/clearAnnotations", {
  default(v) {
    clearAnnotations = v;
  }

}, 10);
let clearSlides;
module.link("/imports/api/slides/server/modifiers/clearSlides", {
  default(v) {
    clearSlides = v;
  }

}, 11);
let clearPolls;
module.link("/imports/api/polls/server/modifiers/clearPolls", {
  default(v) {
    clearPolls = v;
  }

}, 12);
let clearCaptions;
module.link("/imports/api/captions/server/modifiers/clearCaptions", {
  default(v) {
    clearCaptions = v;
  }

}, 13);
let clearPresentationPods;
module.link("/imports/api/presentation-pods/server/modifiers/clearPresentationPods", {
  default(v) {
    clearPresentationPods = v;
  }

}, 14);
let clearVoiceUsers;
module.link("/imports/api/voice-users/server/modifiers/clearVoiceUsers", {
  default(v) {
    clearVoiceUsers = v;
  }

}, 15);
let clearUserInfo;
module.link("/imports/api/users-infos/server/modifiers/clearUserInfo", {
  default(v) {
    clearUserInfo = v;
  }

}, 16);
let clearConnectionStatus;
module.link("/imports/api/connection-status/server/modifiers/clearConnectionStatus", {
  default(v) {
    clearConnectionStatus = v;
  }

}, 17);
let clearScreenshare;
module.link("/imports/api/screenshare/server/modifiers/clearScreenshare", {
  default(v) {
    clearScreenshare = v;
  }

}, 18);
let clearNote;
module.link("/imports/api/note/server/modifiers/clearNote", {
  default(v) {
    clearNote = v;
  }

}, 19);
let clearNetworkInformation;
module.link("/imports/api/network-information/server/modifiers/clearNetworkInformation", {
  default(v) {
    clearNetworkInformation = v;
  }

}, 20);
let clearMeetingTimeRemaining;
module.link("/imports/api/meetings/server/modifiers/clearMeetingTimeRemaining", {
  default(v) {
    clearMeetingTimeRemaining = v;
  }

}, 21);
let clearLocalSettings;
module.link("/imports/api/local-settings/server/modifiers/clearLocalSettings", {
  default(v) {
    clearLocalSettings = v;
  }

}, 22);
let clearRecordMeeting;
module.link("./clearRecordMeeting", {
  default(v) {
    clearRecordMeeting = v;
  }

}, 23);
let clearVoiceCallStates;
module.link("/imports/api/voice-call-states/server/modifiers/clearVoiceCallStates", {
  default(v) {
    clearVoiceCallStates = v;
  }

}, 24);
let clearVideoStreams;
module.link("/imports/api/video-streams/server/modifiers/clearVideoStreams", {
  default(v) {
    clearVideoStreams = v;
  }

}, 25);
let clearAuthTokenValidation;
module.link("/imports/api/auth-token-validation/server/modifiers/clearAuthTokenValidation", {
  default(v) {
    clearAuthTokenValidation = v;
  }

}, 26);
let clearUsersPersistentData;
module.link("/imports/api/users-persistent-data/server/modifiers/clearUsersPersistentData", {
  default(v) {
    clearUsersPersistentData = v;
  }

}, 27);
let clearWhiteboardMultiUser;
module.link("/imports/api/whiteboard-multi-user/server/modifiers/clearWhiteboardMultiUser", {
  default(v) {
    clearWhiteboardMultiUser = v;
  }

}, 28);
let Metrics;
module.link("/imports/startup/server/metrics", {
  default(v) {
    Metrics = v;
  }

}, 29);

function meetingHasEnded(meetingId) {
  if (!process.env.BBB_HTML5_ROLE || process.env.BBB_HTML5_ROLE === 'frontend') {
    removeAnnotationsStreamer(meetingId);
    removeCursorStreamer(meetingId);
    removeExternalVideoStreamer(meetingId);
  }

  return Meetings.remove({
    meetingId
  }, () => {
    clearCaptions(meetingId);
    clearGroupChat(meetingId);
    clearGuestUsers(meetingId);
    clearPresentationPods(meetingId);
    clearBreakouts(meetingId);
    clearPolls(meetingId);
    clearAnnotations(meetingId);
    clearSlides(meetingId);
    clearUsers(meetingId);
    clearUsersSettings(meetingId);
    clearVoiceUsers(meetingId);
    clearUserInfo(meetingId);
    clearConnectionStatus(meetingId);
    clearNote(meetingId);
    clearNetworkInformation(meetingId);
    clearLocalSettings(meetingId);
    clearMeetingTimeRemaining(meetingId);
    clearRecordMeeting(meetingId);
    clearVoiceCallStates(meetingId);
    clearVideoStreams(meetingId);
    clearAuthTokenValidation(meetingId);
    clearWhiteboardMultiUser(meetingId);
    clearScreenshare(meetingId);
    clearUsersPersistentData(meetingId);
    Metrics.removeMeeting(meetingId);
    Logger.info("Cleared Meetings with id ".concat(meetingId));
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setGuestLobbyMessage.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/setGuestLobbyMessage.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setGuestLobbyMessage
});
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function setGuestLobbyMessage(meetingId, guestLobbyMessage) {
  check(meetingId, String);
  check(guestLobbyMessage, String);
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      guestLobbyMessage
    }
  };

  try {
    const {
      numberAffected
    } = Meetings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.verbose("Set guest lobby message meetingId=".concat(meetingId, " guestLobbyMessage=").concat(guestLobbyMessage));
    }
  } catch (err) {
    Logger.error("Setting guest lobby message: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setGuestPolicy.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/setGuestPolicy.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setGuestPolicy
});
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function setGuestPolicy(meetingId, guestPolicy) {
  check(meetingId, String);
  check(guestPolicy, String);
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      'usersProp.guestPolicy': guestPolicy
    }
  };

  try {
    const {
      numberAffected
    } = Meetings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.verbose("Set guest policy meetingId=".concat(meetingId, " guestPolicy=").concat(guestPolicy));
    }
  } catch (err) {
    Logger.error("Setting guest policy: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setPublishedPoll.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/setPublishedPoll.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setPublishedPoll
});
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function setPublishedPoll(meetingId, isPublished) {
  check(meetingId, String);
  check(isPublished, Boolean);
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      publishedPoll: isPublished
    }
  };

  try {
    const {
      numberAffected
    } = Meetings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Set publishedPoll=".concat(isPublished, " in meeitingId=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Setting publishedPoll=".concat(isPublished, " for meetingId=").concat(meetingId));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateRandomViewer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/updateRandomViewer.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateRandomUser
});
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function updateRandomUser(meetingId, userIds, choice, requesterId) {
  check(meetingId, String);
  check(userIds, Array);
  check(choice, Number);
  check(requesterId, String);
  const selector = {
    meetingId
  };
  const userList = [];

  if (choice < 0) {
    // no viewer
    userList.push([requesterId, 0]);
  } else if (userIds.length == 1) {
    userList.push([userIds[0], 0]);
  } else {
    const intervals = [0, 200, 450, 750, 1100, 1500];

    while (intervals.length > 0) {
      const userId = userIds[Math.floor(Math.random() * userIds.length)];

      if (userList.length != 0 && userList[userList.length - 1][0] == userId) {
        // prevent same viewer from being selected sequentially
        continue;
      }

      userList.push([userId, intervals.shift()]);
    }

    userList[userList.length - 1][0] = userIds[choice]; // last one should be chosen in akka-app
  }

  if (userIds.length == 2) {
    // I don't like this.. When the userList is same as previous one, we need to change it a bit to make sure that clients does not skip the change in MongoDB
    const previousMeeting = Meetings.findOne(selector, {
      fields: {
        randomlySelectedUser: 1
      }
    });

    if (previousMeeting.randomlySelectedUser.length != 0 && userList[0][0] == previousMeeting.randomlySelectedUser[0][0]) {
      userList[0][0] = userList[1][0];
    }
  }

  const modifier = {
    $set: {
      randomlySelectedUser: userList
    }
  };

  try {
    const {
      insertedId
    } = Meetings.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Set randomly selected userId and interval = ".concat(userList, " by requesterId=").concat(requesterId, " in meeitingId=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Setting randomly selected userId and interval = ".concat(userList, " by requesterId=").concat(requesterId, " in meetingId=").concat(meetingId));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"webcamOnlyModerator.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/modifiers/webcamOnlyModerator.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeWebcamOnlyModerator
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function changeWebcamOnlyModerator(meetingId, payload) {
  check(meetingId, String);
  check(payload, {
    webcamsOnlyForModerator: Boolean,
    setBy: String
  });
  const {
    webcamsOnlyForModerator
  } = payload;
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      'usersProp.webcamsOnlyForModerator': webcamsOnlyForModerator
    }
  };

  try {
    const {
      numberAffected
    } = Meetings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Changed meeting={".concat(meetingId, "} updated webcam Only for Moderator"));
    } else {
      Logger.info("meeting={".concat(meetingId, "} webcam Only for Moderator were not updated"));
    }
  } catch (err) {
    Logger.error("Changwing meeting={".concat(meetingId, "} webcam Only for Moderator: ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/eventHandlers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleMeetingCreation;
module.link("./handlers/meetingCreation", {
  default(v) {
    handleMeetingCreation = v;
  }

}, 1);
let handleGetAllMeetings;
module.link("./handlers/getAllMeetings", {
  default(v) {
    handleGetAllMeetings = v;
  }

}, 2);
let handleMeetingEnd;
module.link("./handlers/meetingEnd", {
  default(v) {
    handleMeetingEnd = v;
  }

}, 3);
let handleMeetingDestruction;
module.link("./handlers/meetingDestruction", {
  default(v) {
    handleMeetingDestruction = v;
  }

}, 4);
let handleMeetingLocksChange;
module.link("./handlers/meetingLockChange", {
  default(v) {
    handleMeetingLocksChange = v;
  }

}, 5);
let handleGuestPolicyChanged;
module.link("./handlers/guestPolicyChanged", {
  default(v) {
    handleGuestPolicyChanged = v;
  }

}, 6);
let handleGuestLobbyMessageChanged;
module.link("./handlers/guestLobbyMessageChanged", {
  default(v) {
    handleGuestLobbyMessageChanged = v;
  }

}, 7);
let handleUserLockChange;
module.link("./handlers/userLockChange", {
  default(v) {
    handleUserLockChange = v;
  }

}, 8);
let handleRecordingStatusChange;
module.link("./handlers/recordingStatusChange", {
  default(v) {
    handleRecordingStatusChange = v;
  }

}, 9);
let handleRecordingTimerChange;
module.link("./handlers/recordingTimerChange", {
  default(v) {
    handleRecordingTimerChange = v;
  }

}, 10);
let handleTimeRemainingUpdate;
module.link("./handlers/timeRemainingUpdate", {
  default(v) {
    handleTimeRemainingUpdate = v;
  }

}, 11);
let handleChangeWebcamOnlyModerator;
module.link("./handlers/webcamOnlyModerator", {
  default(v) {
    handleChangeWebcamOnlyModerator = v;
  }

}, 12);
let handleSelectRandomViewer;
module.link("./handlers/selectRandomViewer", {
  default(v) {
    handleSelectRandomViewer = v;
  }

}, 13);
RedisPubSub.on('MeetingCreatedEvtMsg', handleMeetingCreation);
RedisPubSub.on('SyncGetMeetingInfoRespMsg', handleGetAllMeetings);
RedisPubSub.on('MeetingEndingEvtMsg', handleMeetingEnd);
RedisPubSub.on('MeetingDestroyedEvtMsg', handleMeetingDestruction);
RedisPubSub.on('LockSettingsInMeetingChangedEvtMsg', handleMeetingLocksChange);
RedisPubSub.on('UserLockedInMeetingEvtMsg', handleUserLockChange);
RedisPubSub.on('RecordingStatusChangedEvtMsg', handleRecordingStatusChange);
RedisPubSub.on('UpdateRecordingTimerEvtMsg', handleRecordingTimerChange);
RedisPubSub.on('WebcamsOnlyForModeratorChangedEvtMsg', handleChangeWebcamOnlyModerator);
RedisPubSub.on('GetLockSettingsRespMsg', handleMeetingLocksChange);
RedisPubSub.on('GuestPolicyChangedEvtMsg', handleGuestPolicyChanged);
RedisPubSub.on('GuestLobbyMessageChangedEvtMsg', handleGuestLobbyMessageChanged);
RedisPubSub.on('MeetingTimeRemainingUpdateEvtMsg', handleTimeRemainingUpdate);
RedisPubSub.on('SelectRandomViewerRespMsg', handleSelectRandomViewer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/index.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/methods.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let endMeeting;
module.link("./methods/endMeeting", {
  default(v) {
    endMeeting = v;
  }

}, 1);
let toggleRecording;
module.link("./methods/toggleRecording", {
  default(v) {
    toggleRecording = v;
  }

}, 2);
let transferUser;
module.link("./methods/transferUser", {
  default(v) {
    transferUser = v;
  }

}, 3);
let toggleLockSettings;
module.link("./methods/toggleLockSettings", {
  default(v) {
    toggleLockSettings = v;
  }

}, 4);
let toggleWebcamsOnlyForModerator;
module.link("./methods/toggleWebcamsOnlyForModerator", {
  default(v) {
    toggleWebcamsOnlyForModerator = v;
  }

}, 5);
let clearRandomlySelectedUser;
module.link("./methods/clearRandomlySelectedUser", {
  default(v) {
    clearRandomlySelectedUser = v;
  }

}, 6);
Meteor.methods({
  endMeeting,
  toggleRecording,
  toggleLockSettings,
  transferUser,
  toggleWebcamsOnlyForModerator,
  clearRandomlySelectedUser
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/server/publishers.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Meetings, RecordMeetings, MeetingTimeRemaining;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  },

  RecordMeetings(v) {
    RecordMeetings = v;
  },

  MeetingTimeRemaining(v) {
    MeetingTimeRemaining = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 4);
const ROLE_MODERATOR = Meteor.settings.public.user.role_moderator;

function meetings(role) {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Meetings was requested by unauth connection ".concat(this.connection.id));
    return Meetings.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing meeting', {
    meetingId,
    userId
  });
  const selector = {
    $or: [{
      meetingId
    }]
  };
  const User = Users.findOne({
    userId,
    meetingId
  }, {
    fields: {
      role: 1
    }
  });

  if (!!User && User.role === ROLE_MODERATOR) {
    selector.$or.push({
      'meetingProp.isBreakout': true,
      'breakoutProps.parentId': meetingId
    });
  }

  const options = {
    fields: {
      password: false,
      'welcomeProp.modOnlyMessage': false
    }
  };
  return Meetings.find(selector, options);
}

function publish() {
  const boundMeetings = meetings.bind(this);
  return boundMeetings(...arguments);
}

Meteor.publish('meetings', publish);

function recordMeetings() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing RecordMeetings was requested by unauth connection ".concat(this.connection.id));
    return RecordMeetings.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug("Publishing RecordMeetings for ".concat(meetingId, " ").concat(userId));
  return RecordMeetings.find({
    meetingId
  });
}

function recordPublish() {
  const boundRecordMeetings = recordMeetings.bind(this);
  return boundRecordMeetings(...arguments);
}

Meteor.publish('record-meetings', recordPublish);

function meetingTimeRemaining() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing MeetingTimeRemaining was requested by unauth connection ".concat(this.connection.id));
    return MeetingTimeRemaining.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug("Publishing MeetingTimeRemaining for ".concat(meetingId, " ").concat(userId));
  return MeetingTimeRemaining.find({
    meetingId
  });
}

function timeRemainingPublish() {
  const boundtimeRemaining = meetingTimeRemaining.bind(this);
  return boundtimeRemaining(...arguments);
}

Meteor.publish('meeting-time-remaining', timeRemainingPublish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/meetings/index.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  RecordMeetings: () => RecordMeetings,
  MeetingTimeRemaining: () => MeetingTimeRemaining
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Meetings = new Mongo.Collection('meetings');
const RecordMeetings = new Mongo.Collection('record-meetings');
const MeetingTimeRemaining = new Mongo.Collection('meeting-time-remaining');

if (Meteor.isServer) {
  // types of queries for the meetings:
  // 1. meetingId
  Meetings._ensureIndex({
    meetingId: 1
  });

  RecordMeetings._ensureIndex({
    meetingId: 1
  });

  MeetingTimeRemaining._ensureIndex({
    meetingId: 1
  });
}

module.exportDefault(Meetings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"network-information":{"server":{"methods":{"userInstabilityDetected.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/network-information/server/methods/userInstabilityDetected.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userInstabilityDetected
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let NetworkInformation;
module.link("/imports/api/network-information", {
  default(v) {
    NetworkInformation = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);

function userInstabilityDetected(sender) {
  const {
    meetingId,
    requesterUserId: receiver
  } = extractCredentials(this.userId);
  check(meetingId, String);
  check(receiver, String);
  check(sender, String);
  const payload = {
    time: new Date().getTime(),
    meetingId,
    receiver,
    sender
  };
  Logger.debug('Receiver reported a network instability', {
    receiver,
    meetingId
  });
  return NetworkInformation.insert(payload);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearNetworkInformation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/network-information/server/modifiers/clearNetworkInformation.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearNetworkInformation
});
let NetworkInformation;
module.link("/imports/api/network-information", {
  default(v) {
    NetworkInformation = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearNetworkInformation(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = NetworkInformation.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared Network Information (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing Network Information (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = NetworkInformation.remove({});

      if (numberAffected) {
        Logger.info('Cleared Network Information (all)');
      }
    } catch (err) {
      Logger.error("Error on clearing Network Information (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/network-information/server/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./methods");
module.link("./publisher");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/network-information/server/methods.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let userInstabilityDetected;
module.link("./methods/userInstabilityDetected", {
  default(v) {
    userInstabilityDetected = v;
  }

}, 1);
Meteor.methods({
  userInstabilityDetected
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publisher.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/network-information/server/publisher.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let NetworkInformation;
module.link("/imports/api/network-information", {
  default(v) {
    NetworkInformation = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function networkInformation() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing NetworkInformation was requested by unauth connection ".concat(this.connection.id));
    return NetworkInformation.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug("Publishing NetworkInformation for ".concat(meetingId, " ").concat(userId));
  return NetworkInformation.find({
    meetingId
  });
}

function publish() {
  const boundNetworkInformation = networkInformation.bind(this);
  return boundNetworkInformation(...arguments);
}

Meteor.publish('network-information', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/network-information/index.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const NetworkInformation = new Mongo.Collection('network-information');

if (Meteor.isServer) {
  NetworkInformation._ensureIndex({
    meetingId: 1
  });
}

module.exportDefault(NetworkInformation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"note":{"server":{"handlers":{"padUpdate.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/handlers/padUpdate.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePadUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let updateNote;
module.link("/imports/api/note/server/modifiers/updateNote", {
  default(v) {
    updateNote = v;
  }

}, 1);

function handlePadUpdate(_ref) {
  let {
    body
  } = _ref;
  const {
    pad,
    revs
  } = body;
  const {
    id
  } = pad;
  check(id, String);
  check(revs, Number);
  updateNote(id, revs);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"addPad.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/methods/addPad.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addPad
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function addPad(meetingId, padId, readOnlyId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'AddPadSysMsg';

  try {
    check(meetingId, String);
    check(padId, String);
    check(readOnlyId, String);
    const payload = {
      padId,
      readOnlyId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, 'nodeJSapp', payload);
  } catch (err) {
    Logger.error("Exception while invoking method addPad ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createNote.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/methods/createNote.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => createNote
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let createPadURL, getReadOnlyIdURL, withInstaceId;
module.link("/imports/api/common/server/etherpad", {
  createPadURL(v) {
    createPadURL = v;
  },

  getReadOnlyIdURL(v) {
    getReadOnlyIdURL = v;
  },

  withInstaceId(v) {
    withInstaceId = v;
  }

}, 2);
let generatePadId, isEnabled, getDataFromResponse;
module.link("/imports/api/note/server/helpers", {
  generatePadId(v) {
    generatePadId = v;
  },

  isEnabled(v) {
    isEnabled = v;
  },

  getDataFromResponse(v) {
    getDataFromResponse = v;
  }

}, 3);
let addNote;
module.link("/imports/api/note/server/modifiers/addNote", {
  default(v) {
    addNote = v;
  }

}, 4);
let axios;
module.link("axios", {
  default(v) {
    axios = v;
  }

}, 5);

function createNote(meetingId, instanceId) {
  try {
    // Avoid note creation if this feature is disabled
    if (!isEnabled()) {
      Logger.warn('Shared notes are disabled');
      return;
    }

    check(meetingId, String);
    check(instanceId, Number);
    const noteId = withInstaceId(instanceId, generatePadId(meetingId));
    const createURL = createPadURL(noteId);
    axios({
      method: 'get',
      url: createURL,
      responseType: 'json'
    }).then(responseOuter => {
      const {
        status
      } = responseOuter;

      if (status !== 200) {
        Logger.error("Could not get note info for ".concat(meetingId, " ").concat(status));
        return;
      }

      const readOnlyURL = getReadOnlyIdURL(noteId);
      axios({
        method: 'get',
        url: readOnlyURL,
        responseType: 'json'
      }).then(response => {
        const readOnlyNoteId = getDataFromResponse(response.data, 'readOnlyID');

        if (readOnlyNoteId) {
          addNote(meetingId, noteId, readOnlyNoteId);
        } else {
          Logger.error("Could not get note readOnlyID for ".concat(meetingId));
        }
      }).catch(error => Logger.error("Could not get note readOnlyID for ".concat(meetingId, ": ").concat(error)));
    }).catch(error => Logger.error("Could not create note for ".concat(meetingId, ": ").concat(error)));
  } catch (err) {
    Logger.error("Exception while invoking method createNote ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addNote.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/modifiers/addNote.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addNote
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Note;
module.link("/imports/api/note", {
  default(v) {
    Note = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let addPad;
module.link("/imports/api/note/server/methods/addPad", {
  default(v) {
    addPad = v;
  }

}, 3);

function addNote(meetingId, noteId, readOnlyNoteId) {
  check(meetingId, String);
  check(noteId, String);
  check(readOnlyNoteId, String);
  const selector = {
    meetingId,
    noteId
  };
  const modifier = {
    meetingId,
    noteId,
    readOnlyNoteId,
    revs: 0
  };

  try {
    const {
      insertedId
    } = Note.upsert(selector, modifier);

    if (insertedId) {
      addPad(meetingId, noteId, readOnlyNoteId);
      Logger.info("Added note id=".concat(noteId, " readOnlyId=").concat(readOnlyNoteId, " meeting=").concat(meetingId));
    } else {
      Logger.info("Upserted note id=".concat(noteId, " readOnlyId=").concat(readOnlyNoteId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding note to the collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearNote.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/modifiers/clearNote.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearNote
});
let Note;
module.link("/imports/api/note", {
  default(v) {
    Note = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearNote(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = Note.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared Note (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing Note (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = Note.remove({});

      if (numberAffected) {
        Logger.info('Cleared Note (all)');
      }
    } catch (err) {
      Logger.error("Error on clearing Note (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateNote.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/modifiers/updateNote.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateNote
});
let Note;
module.link("/imports/api/note", {
  default(v) {
    Note = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function updateNote(noteId, revs) {
  check(noteId, String);
  check(revs, Number);
  const selector = {
    noteId
  };
  const modifier = {
    $set: {
      revs
    }
  };

  try {
    const numberAffected = Note.update(selector, modifier, {
      multi: true
    });

    if (numberAffected) {
      Logger.verbose('Notes: update note pad', {
        pad: noteId,
        revs
      });
    }
  } catch (err) {
    Logger.error('Notes: error when updating note pad', {
      err
    });
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/eventHandlers.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let processForNotePadOnly;
module.link("/imports/api/note/server/helpers", {
  processForNotePadOnly(v) {
    processForNotePadOnly = v;
  }

}, 1);
let handlePadUpdate;
module.link("./handlers/padUpdate", {
  default(v) {
    handlePadUpdate = v;
  }

}, 2);
RedisPubSub.on('PadUpdateSysMsg', processForNotePadOnly(handlePadUpdate));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/helpers.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  generatePadId: () => generatePadId,
  isEnabled: () => isEnabled,
  getDataFromResponse: () => getDataFromResponse,
  processForNotePadOnly: () => processForNotePadOnly
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let hashSHA1;
module.link("/imports/api/common/server/etherpad", {
  hashSHA1(v) {
    hashSHA1 = v;
  }

}, 1);
const ETHERPAD = Meteor.settings.private.etherpad;
const NOTE_CONFIG = Meteor.settings.public.note;
const TOKEN = '_';

const isEnabled = () => NOTE_CONFIG.enabled;

const getDataFromResponse = (data, key) => {
  if (data) {
    const innerData = data.data;

    if (innerData && innerData[key]) {
      return innerData[key];
    }
  }

  return null;
};

const isNotePad = padId => padId.search(TOKEN);

const processForNotePadOnly = fn => function (message) {
  const {
    body
  } = message;
  const {
    pad
  } = body;
  const {
    id
  } = pad;
  check(id, String);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (isNotePad(id)) return fn(message, ...args);
  return () => {};
};

const generatePadId = meetingId => hashSHA1(meetingId + ETHERPAD.apikey);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./publishers");
module.link("./eventHandlers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/server/publishers.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Note;
module.link("/imports/api/note", {
  default(v) {
    Note = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function note() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Note was requested by unauth connection ".concat(this.connection.id));
    return Note.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.info("Publishing Note for ".concat(meetingId, " ").concat(userId));
  return Note.find({
    meetingId
  });
}

function publish() {
  const boundNote = note.bind(this);
  return boundNote(...arguments);
}

Meteor.publish('note', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/note/index.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Note = new Mongo.Collection('note');

if (Meteor.isServer) {
  Note._ensureIndex({
    meetingId: 1,
    noteId: 1
  });
}

module.exportDefault(Note);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"polls":{"server":{"handlers":{"pollPublished.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/handlers/pollPublished.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => pollPublished
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let setPublishedPoll;
module.link("../../../meetings/server/modifiers/setPublishedPoll", {
  default(v) {
    setPublishedPoll = v;
  }

}, 1);

function pollPublished(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    pollId
  } = body;
  check(meetingId, String);
  check(pollId, String);
  setPublishedPoll(meetingId, true);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"pollStarted.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/handlers/pollStarted.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => pollStarted
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addPoll;
module.link("../modifiers/addPoll", {
  default(v) {
    addPoll = v;
  }

}, 1);
let setPublishedPoll;
module.link("../../../meetings/server/modifiers/setPublishedPoll", {
  default(v) {
    setPublishedPoll = v;
  }

}, 2);

function pollStarted(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    userId,
    poll,
    pollType,
    question
  } = body;
  check(meetingId, String);
  check(userId, String);
  check(poll, Object);
  check(pollType, String);
  check(question, String);
  setPublishedPoll(meetingId, false);
  return addPoll(meetingId, userId, poll, pollType, question);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"pollStopped.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/handlers/pollStopped.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => pollStopped
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let removePoll;
module.link("../modifiers/removePoll", {
  default(v) {
    removePoll = v;
  }

}, 1);
let clearPolls;
module.link("../modifiers/clearPolls", {
  default(v) {
    clearPolls = v;
  }

}, 2);

function pollStopped(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    poll
  } = body;
  check(meetingId, String);

  if (poll) {
    const {
      pollId
    } = poll;
    check(pollId, String);
    return removePoll(meetingId, pollId);
  }

  return clearPolls(meetingId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendPollChatMsg.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/handlers/sendPollChatMsg.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => sendPollChatMsg
});
let addSystemMsg;
module.link("../../../group-chat-msg/server/modifiers/addSystemMsg", {
  default(v) {
    addSystemMsg = v;
  }

}, 0);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 1);
let removePoll;
module.link("../modifiers/removePoll", {
  default(v) {
    removePoll = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function sendPollChatMsg(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    poll
  } = body;
  const CHAT_CONFIG = Meteor.settings.public.chat;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;
  const PUBLIC_CHAT_SYSTEM_ID = CHAT_CONFIG.system_userid;
  const CHAT_POLL_RESULTS_MESSAGE = CHAT_CONFIG.system_messages_keys.chat_poll_result;
  const SYSTEM_CHAT_TYPE = CHAT_CONFIG.type_system;
  const pollData = Polls.findOne({
    meetingId
  });

  if (!pollData) {
    Logger.error("Attempted to send chat message of inexisting poll for meetingId: ".concat(meetingId));
    return false;
  }

  const pollResultData = poll;
  pollResultData.pollType = pollData.pollType;
  const extra = {
    type: 'poll',
    pollResultData
  };
  const payload = {
    id: "".concat(SYSTEM_CHAT_TYPE, "-").concat(CHAT_POLL_RESULTS_MESSAGE),
    timestamp: Date.now(),
    correlationId: "".concat(PUBLIC_CHAT_SYSTEM_ID, "-").concat(Date.now()),
    sender: {
      id: PUBLIC_CHAT_SYSTEM_ID,
      name: ''
    },
    message: '',
    extra
  };
  removePoll(meetingId, pollData.id);
  return addSystemMsg(meetingId, PUBLIC_GROUP_CHAT_ID, payload);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userResponded.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/handlers/userResponded.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userResponded
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function userResponded(_ref) {
  let {
    body
  } = _ref;
  const {
    pollId,
    userId,
    answerId
  } = body;
  check(pollId, String);
  check(userId, String);
  check(answerId, Number);
  const selector = {
    id: pollId
  };
  const modifier = {
    $pull: {
      users: userId
    },
    $push: {
      responses: {
        userId,
        answerId
      }
    }
  };

  try {
    const numberAffected = Polls.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Updating Poll response (userId: ".concat(userId, ", response: ").concat(answerId, ", pollId: ").concat(pollId, ")"));
    }
  } catch (err) {
    Logger.error("Updating Poll responses: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userTypedResponse.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/handlers/userTypedResponse.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userTypedResponse
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);

function userTypedResponse(_ref) {
  let {
    header,
    body
  } = _ref;
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'RespondToPollReqMsg';
  const {
    pollId,
    userId,
    answer
  } = body;
  const {
    meetingId
  } = header;
  check(pollId, String);
  check(meetingId, String);
  check(userId, String);
  check(answer, String);
  const poll = Polls.findOne({
    meetingId,
    id: pollId
  });
  let answerId = 0;
  poll.answers.forEach(a => {
    const {
      id,
      key
    } = a;
    if (key === answer) answerId = id;
  });
  const payload = {
    requesterId: userId,
    pollId,
    questionId: 0,
    answerId
  };
  return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, userId, payload);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userVoted.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/handlers/userVoted.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userVoted
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let updateVotes;
module.link("../modifiers/updateVotes", {
  default(v) {
    updateVotes = v;
  }

}, 1);

function userVoted(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    poll
  } = body;
  check(meetingId, String);
  check(poll, {
    id: String,
    questionType: String,
    questionText: String,
    answers: [{
      id: Number,
      key: String,
      numVotes: Number
    }],
    numRespondents: Number,
    numResponders: Number
  });
  return updateVotes(poll, meetingId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"publishPoll.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/methods/publishPoll.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => publishPoll
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function publishPoll() {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'ShowPollResultReqMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const poll = Polls.findOne({
      meetingId
    }); // TODO--send pollid from client

    if (!poll) {
      Logger.error("Attempted to publish inexisting poll for meetingId: ".concat(meetingId));
      return false;
    }

    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, {
      requesterId: requesterUserId,
      pollId: poll.id
    });
  } catch (err) {
    Logger.error("Exception while invoking method publishPoll ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishTypedVote.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/methods/publishTypedVote.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => publishTypedVote
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function publishTypedVote(id, pollAnswer) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const MAX_INPUT_CHARS = Meteor.settings.public.poll.maxTypedAnswerLength;
  let EVENT_NAME = 'RespondToTypedPollReqMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(pollAnswer, String);
    check(id, String);
    const activePoll = Polls.findOne({
      meetingId,
      id
    }, {
      fields: {
        answers: 1
      }
    });
    let existingAnsId = null;
    activePoll.answers.forEach(a => {
      if (a.key === pollAnswer) existingAnsId = a.id;
    });

    if (existingAnsId !== null) {
      check(existingAnsId, Number);
      EVENT_NAME = 'RespondToPollReqMsg';
      return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, {
        requesterId: requesterUserId,
        pollId: id,
        questionId: 0,
        answerId: existingAnsId
      });
    }

    const payload = {
      requesterId: requesterUserId,
      pollId: id,
      questionId: 0,
      answer: pollAnswer.substring(0, MAX_INPUT_CHARS)
    };
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method publishTypedVote ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishVote.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/methods/publishVote.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => publishVote
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function publishVote(pollId, pollAnswerId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'RespondToPollReqMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(pollAnswerId, Number);
    check(pollId, String);
    const allowedToVote = Polls.findOne({
      id: pollId,
      users: {
        $in: [requesterUserId]
      },
      meetingId
    }, {
      fields: {
        users: 1
      }
    });

    if (!allowedToVote) {
      Logger.info("Poll User={".concat(requesterUserId, "} has already voted in PollId={").concat(pollId, "}"));
      return null;
    }

    const selector = {
      users: requesterUserId,
      meetingId,
      'answers.id': pollAnswerId
    };
    const payload = {
      requesterId: requesterUserId,
      pollId,
      questionId: 0,
      answerId: pollAnswerId
    };
    /*
     We keep an array of people who were in the meeting at the time the poll
     was started. The poll is published to them only.
     Once they vote - their ID is removed and they cannot see the poll anymore
    */

    const modifier = {
      $pull: {
        users: requesterUserId
      }
    };
    const numberAffected = Polls.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Removed responded user=".concat(requesterUserId, " from poll (meetingId: ").concat(meetingId, ", pollId: ").concat(pollId, "!)"));
      RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
    }
  } catch (err) {
    Logger.error("Exception while invoking method publishVote ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startPoll.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/methods/startPoll.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => startPoll
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function startPoll(pollTypes, pollType, pollId, question, answers) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  let EVENT_NAME = 'StartPollReqMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(pollId, String);
    check(pollType, String);
    const payload = {
      requesterId: requesterUserId,
      pollId: "".concat(pollId, "/").concat(new Date().getTime()),
      pollType,
      question
    };

    if (pollType === pollTypes.Custom) {
      EVENT_NAME = 'StartCustomPollReqMsg';
      check(answers, Array);
      payload.answers = answers;
    }

    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method startPoll ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stopPoll.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/methods/stopPoll.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => stopPoll
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function stopPoll() {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'StopPollReqMsg';

  try {
    const {
      meetingId,
      requesterUserId: requesterId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterId, String);
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterId, {
      requesterId
    });
  } catch (err) {
    Logger.error("Exception while invoking method stopPoll ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addPoll.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/modifiers/addPoll.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addPoll
});
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 0);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function addPoll(meetingId, requesterId, poll, pollType) {
  let question = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
  check(requesterId, String);
  check(meetingId, String);
  check(poll, {
    id: String,
    answers: [{
      id: Number,
      key: String
    }]
  });
  const userSelector = {
    meetingId,
    userId: {
      $ne: requesterId
    },
    clientType: {
      $ne: 'dial-in-user'
    }
  };
  const userIds = Users.find(userSelector, {
    fields: {
      userId: 1
    }
  }).fetch().map(user => user.userId);
  const selector = {
    meetingId,
    requester: requesterId,
    id: poll.id
  };
  const modifier = Object.assign({
    meetingId
  }, {
    requester: requesterId
  }, {
    users: userIds
  }, {
    question,
    pollType
  }, flat(poll, {
    safe: true
  }));

  try {
    const {
      insertedId
    } = Polls.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added Poll id=".concat(poll.id));
    } else {
      Logger.info("Upserted Poll id=".concat(poll.id));
    }
  } catch (err) {
    Logger.error("Adding Poll to collection: ".concat(poll.id));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearPolls.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/modifiers/clearPolls.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearPolls
});
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearPolls(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = Polls.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared Polls (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.info("Error on clearing Polls (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = Polls.remove({});

      if (numberAffected) {
        Logger.info('Cleared Polls (all)');
      }
    } catch (err) {
      Logger.info("Error on clearing Polls (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removePoll.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/modifiers/removePoll.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removePoll
});
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function removePoll(meetingId, id) {
  check(meetingId, String);
  check(id, String);
  const selector = {
    meetingId,
    id
  };

  try {
    const numberAffected = Polls.remove(selector);

    if (numberAffected) {
      Logger.info("Removed Poll id=".concat(id));
    }
  } catch (err) {
    Logger.error("Removing Poll from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateVotes.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/modifiers/updateVotes.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateVotes
});
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 3);

function updateVotes(poll, meetingId) {
  check(meetingId, String);
  check(poll, Object);
  const {
    id,
    answers,
    numResponders,
    numRespondents
  } = poll;
  check(id, String);
  check(answers, Array);
  check(numResponders, Number);
  check(numRespondents, Number);
  const selector = {
    meetingId,
    id
  };
  const modifier = {
    $set: flat(poll, {
      safe: true
    })
  };

  try {
    const numberAffected = Polls.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Updating Polls collection (meetingId: ".concat(meetingId, ", pollId: ").concat(id, "!)"));
    }
  } catch (err) {
    Logger.error("Updating Polls collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/eventHandlers.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handlePollStarted;
module.link("./handlers/pollStarted", {
  default(v) {
    handlePollStarted = v;
  }

}, 1);
let handlePollStopped;
module.link("./handlers/pollStopped", {
  default(v) {
    handlePollStopped = v;
  }

}, 2);
let handlePollPublished;
module.link("./handlers/pollPublished", {
  default(v) {
    handlePollPublished = v;
  }

}, 3);
let handleSendSystemChatForPublishedPoll;
module.link("./handlers/sendPollChatMsg", {
  default(v) {
    handleSendSystemChatForPublishedPoll = v;
  }

}, 4);
let handleUserVoted;
module.link("./handlers/userVoted", {
  default(v) {
    handleUserVoted = v;
  }

}, 5);
let handleUserResponded;
module.link("./handlers/userResponded", {
  default(v) {
    handleUserResponded = v;
  }

}, 6);
let handleUserTypedResponse;
module.link("./handlers/userTypedResponse", {
  default(v) {
    handleUserTypedResponse = v;
  }

}, 7);
RedisPubSub.on('PollShowResultEvtMsg', handlePollPublished);
RedisPubSub.on('PollShowResultEvtMsg', handleSendSystemChatForPublishedPoll);
RedisPubSub.on('PollStartedEvtMsg', handlePollStarted);
RedisPubSub.on('PollStoppedEvtMsg', handlePollStopped);
RedisPubSub.on('PollUpdatedEvtMsg', handleUserVoted);
RedisPubSub.on('UserRespondedToPollRespMsg', handleUserResponded);
RedisPubSub.on('UserRespondedToTypedPollRespMsg', handleUserTypedResponse);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/index.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/methods.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let publishTypedVote;
module.link("./methods/publishTypedVote", {
  default(v) {
    publishTypedVote = v;
  }

}, 1);
let publishVote;
module.link("./methods/publishVote", {
  default(v) {
    publishVote = v;
  }

}, 2);
let publishPoll;
module.link("./methods/publishPoll", {
  default(v) {
    publishPoll = v;
  }

}, 3);
let startPoll;
module.link("./methods/startPoll", {
  default(v) {
    startPoll = v;
  }

}, 4);
let stopPoll;
module.link("./methods/stopPoll", {
  default(v) {
    stopPoll = v;
  }

}, 5);
Meteor.methods({
  publishVote,
  publishTypedVote,
  publishPoll,
  startPoll,
  stopPoll
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/server/publishers.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Polls;
module.link("/imports/api/polls", {
  default(v) {
    Polls = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function currentPoll() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Polls was requested by unauth connection ".concat(this.connection.id));
    return Polls.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing Polls', {
    meetingId,
    userId
  });
  const selector = {
    meetingId
  };
  return Polls.find(selector);
}

function publishCurrentPoll() {
  const boundPolls = currentPoll.bind(this);
  return boundPolls(...arguments);
}

Meteor.publish('current-poll', publishCurrentPoll);

function polls() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Polls was requested by unauth connection ".concat(this.connection.id));
    return Polls.find({
      meetingId: ''
    });
  }

  const options = {
    fields: {
      'answers.numVotes': 0,
      responses: 0
    }
  };
  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing polls', {
    meetingId,
    userId
  });
  const selector = {
    meetingId,
    users: userId
  };
  return Polls.find(selector, options);
}

function publish() {
  const boundPolls = polls.bind(this);
  return boundPolls(...arguments);
}

Meteor.publish('polls', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/polls/index.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Polls = new Mongo.Collection('polls');

if (Meteor.isServer) {
  // We can have just one active poll per meeting
  // makes no sense to index it by anything other than meetingId
  Polls._ensureIndex({
    meetingId: 1
  });
}

module.exportDefault(Polls);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-pods":{"server":{"handlers":{"createNewPresentationPod.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/handlers/createNewPresentationPod.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleCreateNewPresentationPod
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addPresentationPod;
module.link("../modifiers/addPresentationPod", {
  default(v) {
    addPresentationPod = v;
  }

}, 1);

function handleCreateNewPresentationPod(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, {
    currentPresenterId: String,
    podId: String
  });
  check(meetingId, String);
  const {
    currentPresenterId,
    podId
  } = body;
  const pod = {
    currentPresenterId,
    podId
  };
  addPresentationPod(meetingId, pod);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removePresentationPod.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/handlers/removePresentationPod.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleRemovePresentationPod
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let removePresentationPod;
module.link("../modifiers/removePresentationPod", {
  default(v) {
    removePresentationPod = v;
  }

}, 1);

function handleRemovePresentationPod(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, Object);
  check(meetingId, String);
  const {
    podId
  } = body;
  check(podId, String);
  removePresentationPod(meetingId, podId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setPresenterInPod.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/handlers/setPresenterInPod.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleSetPresenterInPod
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let setPresenterInPod;
module.link("../modifiers/setPresenterInPod", {
  default(v) {
    setPresenterInPod = v;
  }

}, 1);

function handleSetPresenterInPod(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, Object);
  const {
    podId,
    nextPresenterId
  } = body;
  check(podId, String);
  check(nextPresenterId, String);
  setPresenterInPod(meetingId, podId, nextPresenterId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"syncGetPresentationPods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/handlers/syncGetPresentationPods.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleSyncGetPresentationPods
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let PresentationPods;
module.link("/imports/api/presentation-pods", {
  default(v) {
    PresentationPods = v;
  }

}, 1);
let removePresentationPod;
module.link("../modifiers/removePresentationPod", {
  default(v) {
    removePresentationPod = v;
  }

}, 2);
let addPresentationPod;
module.link("../modifiers/addPresentationPod", {
  default(v) {
    addPresentationPod = v;
  }

}, 3);

function handleSyncGetPresentationPods(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, Object);
  check(meetingId, String);
  const {
    pods
  } = body;
  check(pods, Array);
  const presentationPodIds = pods.map(pod => pod.id);
  const presentationPodsToRemove = PresentationPods.find({
    meetingId,
    podId: {
      $nin: presentationPodIds
    }
  }, {
    fields: {
      podId: 1
    }
  }).fetch();
  presentationPodsToRemove.forEach(p => removePresentationPod(meetingId, p.podId));
  pods.forEach(pod => {
    // 'podId' and 'currentPresenterId' for some reason called 'id' and 'currentPresenter'
    // in this message
    const {
      id: podId,
      currentPresenter: currentPresenterId,
      presentations
    } = pod;
    addPresentationPod(meetingId, {
      podId,
      currentPresenterId
    }, presentations);
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addPresentationPod.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/modifiers/addPresentationPod.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addPresentationPod
});
let Match, check;
module.link("meteor/check", {
  Match(v) {
    Match = v;
  },

  check(v) {
    check = v;
  }

}, 0);
let PresentationPods;
module.link("/imports/api/presentation-pods", {
  default(v) {
    PresentationPods = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let addPresentation;
module.link("/imports/api/presentations/server/modifiers/addPresentation", {
  default(v) {
    addPresentation = v;
  }

}, 3);

function addPresentationPod(meetingId, pod) {
  let presentations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  check(meetingId, String);
  check(presentations, Match.Maybe(Array));
  check(pod, {
    currentPresenterId: String,
    podId: String
  });
  const {
    currentPresenterId,
    podId
  } = pod;
  const selector = {
    meetingId,
    podId
  };
  const modifier = {
    meetingId,
    podId,
    currentPresenterId
  };

  try {
    const {
      insertedId
    } = PresentationPods.upsert(selector, modifier); // if it's a Sync message - continue adding the attached presentations

    if (presentations) {
      presentations.forEach(presentation => addPresentation(meetingId, podId, presentation));
    }

    if (insertedId) {
      Logger.info("Added presentation pod id=".concat(podId, " meeting=").concat(meetingId));
    } else {
      Logger.info("Upserted presentation pod id=".concat(podId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding presentation pod to the collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearPresentationPods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/modifiers/clearPresentationPods.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearPresentationPods
});
let PresentationPods;
module.link("/imports/api/presentation-pods", {
  default(v) {
    PresentationPods = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let clearPresentations;
module.link("/imports/api/presentations/server/modifiers/clearPresentations", {
  default(v) {
    clearPresentations = v;
  }

}, 2);
let clearPresentationUploadToken;
module.link("/imports/api/presentation-upload-token/server/modifiers/clearPresentationUploadToken", {
  default(v) {
    clearPresentationUploadToken = v;
  }

}, 3);

function clearPresentationPods(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = PresentationPods.remove({
        meetingId
      });

      if (numberAffected) {
        clearPresentations(meetingId);
        clearPresentationUploadToken(meetingId);
        Logger.info("Cleared Presentations Pods (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing Presentations Pods (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = PresentationPods.remove({});

      if (numberAffected) {
        clearPresentations();
        clearPresentationUploadToken();
        Logger.info('Cleared Presentations Pods (all)');
      }
    } catch (err) {
      Logger.error("Error on clearing Presentations Pods (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removePresentationPod.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/modifiers/removePresentationPod.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removePresentationPod
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let PresentationPods;
module.link("/imports/api/presentation-pods", {
  default(v) {
    PresentationPods = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let clearPresentations;
module.link("/imports/api/presentations/server/modifiers/clearPresentations", {
  default(v) {
    clearPresentations = v;
  }

}, 3);
let clearPresentationUploadToken;
module.link("/imports/api/presentation-upload-token/server/modifiers/clearPresentationUploadToken", {
  default(v) {
    clearPresentationUploadToken = v;
  }

}, 4);

function removePresentationPod(meetingId, podId) {
  check(meetingId, String);
  check(podId, String);
  const selector = {
    meetingId,
    podId
  };

  try {
    const numberAffected = PresentationPods.remove(selector);

    if (numberAffected && podId) {
      Logger.info("Removed presentation pod id=".concat(podId, " meeting=").concat(meetingId));
      clearPresentations(meetingId, podId);
      clearPresentationUploadToken(meetingId, podId);
    }
  } catch (err) {
    Logger.error("Error on removing presentation pod from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setPresenterInPod.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/modifiers/setPresenterInPod.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setPresenterInPod
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let PresentationPods;
module.link("/imports/api/presentation-pods", {
  default(v) {
    PresentationPods = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function setPresenterInPod(meetingId, podId, nextPresenterId) {
  check(meetingId, String);
  check(podId, String);
  check(nextPresenterId, String);
  const selector = {
    meetingId,
    podId
  };
  const modifier = {
    $set: {
      currentPresenterId: nextPresenterId
    }
  };

  try {
    const {
      numberAffected
    } = PresentationPods.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Set a new presenter in pod id=".concat(podId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Setting a presenter in pod: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/eventHandlers.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleCreateNewPresentationPod;
module.link("./handlers/createNewPresentationPod", {
  default(v) {
    handleCreateNewPresentationPod = v;
  }

}, 1);
let handleRemovePresentationPod;
module.link("./handlers/removePresentationPod", {
  default(v) {
    handleRemovePresentationPod = v;
  }

}, 2);
let handleSyncGetPresentationPods;
module.link("./handlers/syncGetPresentationPods", {
  default(v) {
    handleSyncGetPresentationPods = v;
  }

}, 3);
let handleSetPresenterInPod;
module.link("./handlers/setPresenterInPod", {
  default(v) {
    handleSetPresenterInPod = v;
  }

}, 4);
RedisPubSub.on('CreateNewPresentationPodEvtMsg', handleCreateNewPresentationPod);
RedisPubSub.on('RemovePresentationPodEvtMsg', handleRemovePresentationPod);
RedisPubSub.on('SetPresenterInPodRespMsg', handleSetPresenterInPod);
RedisPubSub.on('SyncGetPresentationPodsRespMsg', handleSyncGetPresentationPods);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/index.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/methods.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/server/publishers.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let PresentationPods;
module.link("/imports/api/presentation-pods", {
  default(v) {
    PresentationPods = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function presentationPods() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing PresentationPods was requested by unauth connection ".concat(this.connection.id));
    return PresentationPods.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing presentation-pods', {
    meetingId,
    userId
  });
  return PresentationPods.find({
    meetingId
  });
}

function publish() {
  const boundPresentationPods = presentationPods.bind(this);
  return boundPresentationPods(...arguments);
}

Meteor.publish('presentation-pods', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-pods/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const PresentationPods = new Mongo.Collection('presentation-pods');

if (Meteor.isServer) {
  // types of queries for the presentation pods:
  // 1. meetingId, podId  ( 4 )
  PresentationPods._ensureIndex({
    meetingId: 1,
    podId: 1
  });
}

module.exportDefault(PresentationPods);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-upload-token":{"server":{"handlers":{"presentationUploadTokenFail.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/handlers/presentationUploadTokenFail.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresentationUploadTokenFail
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let PresentationUploadToken;
module.link("/imports/api/presentation-upload-token", {
  default(v) {
    PresentationUploadToken = v;
  }

}, 2);

function handlePresentationUploadTokenFail(_ref, meetingId) {
  let {
    body,
    header
  } = _ref;
  check(body, Object);
  const {
    userId
  } = header;
  const {
    podId,
    filename
  } = body;
  check(userId, String);
  check(podId, String);
  check(filename, String);
  const selector = {
    meetingId,
    userId,
    podId,
    filename
  };

  try {
    const {
      numberAffected
    } = PresentationUploadToken.upsert(selector, {
      failed: true,
      authzToken: null
    });

    if (numberAffected) {
      Logger.info("Removing presentationToken filename=".concat(filename, " podId=").concat(podId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Removing presentationToken from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presentationUploadTokenPass.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/handlers/presentationUploadTokenPass.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresentationUploadTokenPass
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let PresentationUploadToken;
module.link("/imports/api/presentation-upload-token", {
  default(v) {
    PresentationUploadToken = v;
  }

}, 2);

function handlePresentationUploadTokenPass(_ref, meetingId) {
  let {
    body,
    header
  } = _ref;
  check(body, Object);
  const {
    userId
  } = header;
  const {
    podId,
    authzToken,
    filename
  } = body;
  check(userId, String);
  check(podId, String);
  check(authzToken, String);
  check(filename, String);
  const selector = {
    meetingId,
    podId,
    userId,
    filename
  };
  const modifier = {
    meetingId,
    podId,
    userId,
    filename,
    authzToken,
    failed: false,
    used: false
  };

  try {
    const {
      insertedId
    } = PresentationUploadToken.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Inserting presentationToken filename=".concat(filename, " podId=").concat(podId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Inserting presentationToken from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"requestPresentationUploadToken.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/methods/requestPresentationUploadToken.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => requestPresentationUploadToken
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function requestPresentationUploadToken(podId, filename) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'PresentationUploadTokenReqMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(podId, String);
    check(filename, String);
    const payload = {
      podId,
      filename
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method requestPresentationUploadToken ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsedToken.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/methods/setUsedToken.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setUsedToken
});
let PresentationUploadToken;
module.link("/imports/api/presentation-upload-token", {
  default(v) {
    PresentationUploadToken = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);

function setUsedToken(authzToken) {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(authzToken, String);
    const payload = {
      $set: {
        used: true
      }
    };
    const numberAffected = PresentationUploadToken.update({
      meetingId,
      userId: requesterUserId,
      authzToken
    }, payload);

    if (numberAffected) {
      Logger.info("Token: ".concat(authzToken, " has been set as used in meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Exception while invoking method setUsedToken ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearPresentationUploadToken.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/modifiers/clearPresentationUploadToken.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearPresentationUploadToken
});
let PresentationUploadToken;
module.link("/imports/api/presentation-upload-token", {
  default(v) {
    PresentationUploadToken = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearPresentationUploadToken(meetingId, podId) {
  if (meetingId && podId) {
    try {
      const numberAffected = PresentationUploadToken.remove({
        meetingId,
        podId
      });

      if (numberAffected) {
        Logger.info("Cleared Presentations Upload Token (".concat(meetingId, ", ").concat(podId, ")"));
        return true;
      }
    } catch (err) {
      Logger.info("Error on clearing Presentations Upload Token (".concat(meetingId, ", ").concat(podId, "). ").concat(err));
      return false;
    }
  }

  if (meetingId) {
    try {
      const numberAffected = PresentationUploadToken.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared Presentations Upload Token (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.info("Error on clearing Presentations Upload Token (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      // clearing presentations for the whole server
      const numberAffected = PresentationUploadToken.remove({});

      if (numberAffected) {
        Logger.info('Cleared Presentations Upload Token (all)');
      }
    } catch (err) {
      Logger.info("Error on clearing Presentations Upload Token (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/eventHandlers.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let processForHTML5ServerOnly;
module.link("/imports/api/common/server/helpers", {
  processForHTML5ServerOnly(v) {
    processForHTML5ServerOnly = v;
  }

}, 1);
let handlePresentationUploadTokenPass;
module.link("./handlers/presentationUploadTokenPass", {
  default(v) {
    handlePresentationUploadTokenPass = v;
  }

}, 2);
let handlePresentationUploadTokenFail;
module.link("./handlers/presentationUploadTokenFail", {
  default(v) {
    handlePresentationUploadTokenFail = v;
  }

}, 3);
RedisPubSub.on('PresentationUploadTokenPassRespMsg', processForHTML5ServerOnly(handlePresentationUploadTokenPass));
RedisPubSub.on('PresentationUploadTokenFailRespMsg', processForHTML5ServerOnly(handlePresentationUploadTokenFail));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/index.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/methods.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let requestPresentationUploadToken;
module.link("./methods/requestPresentationUploadToken", {
  default(v) {
    requestPresentationUploadToken = v;
  }

}, 1);
let setUsedToken;
module.link("./methods/setUsedToken", {
  default(v) {
    setUsedToken = v;
  }

}, 2);
Meteor.methods({
  requestPresentationUploadToken,
  setUsedToken
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/server/publishers.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let PresentationUploadToken;
module.link("/imports/api/presentation-upload-token", {
  default(v) {
    PresentationUploadToken = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 4);

function presentationUploadToken(podId, filename) {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing PresentationUploadToken was requested by unauth connection ".concat(this.connection.id));
    return PresentationUploadToken.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  check(podId, String);
  check(filename, String);
  const selector = {
    meetingId,
    podId,
    userId,
    filename
  };
  Logger.debug('Publishing PresentationUploadToken', {
    meetingId,
    userId
  });
  return PresentationUploadToken.find(selector);
}

function publish() {
  const boundPresentationUploadToken = presentationUploadToken.bind(this);
  return boundPresentationUploadToken(...arguments);
}

Meteor.publish('presentation-upload-token', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentation-upload-token/index.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const PresentationUploadToken = new Mongo.Collection('presentation-upload-token');
module.exportDefault(PresentationUploadToken);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentations":{"server":{"handlers":{"presentationAdded.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/handlers/presentationAdded.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresentationAdded
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addPresentation;
module.link("../modifiers/addPresentation", {
  default(v) {
    addPresentation = v;
  }

}, 1);

function handlePresentationAdded(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, Object);
  const {
    presentation,
    podId
  } = body;
  check(meetingId, String);
  check(podId, String);
  check(presentation, Object);
  return addPresentation(meetingId, podId, presentation);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presentationConversionUpdate.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/handlers/presentationConversionUpdate.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresentationConversionUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 2);
// const OFFICE_DOC_CONVERSION_SUCCESS_KEY = 'OFFICE_DOC_CONVERSION_SUCCESS';
const OFFICE_DOC_CONVERSION_FAILED_KEY = 'OFFICE_DOC_CONVERSION_FAILED';
const OFFICE_DOC_CONVERSION_INVALID_KEY = 'OFFICE_DOC_CONVERSION_INVALID';
const SUPPORTED_DOCUMENT_KEY = 'SUPPORTED_DOCUMENT';
const UNSUPPORTED_DOCUMENT_KEY = 'UNSUPPORTED_DOCUMENT';
const PAGE_COUNT_FAILED_KEY = 'PAGE_COUNT_FAILED';
const PAGE_COUNT_EXCEEDED_KEY = 'PAGE_COUNT_EXCEEDED';
const PDF_HAS_BIG_PAGE_KEY = 'PDF_HAS_BIG_PAGE';
const GENERATED_SLIDE_KEY = 'GENERATED_SLIDE';
const FILE_TOO_LARGE_KEY = 'FILE_TOO_LARGE'; // const GENERATING_THUMBNAIL_KEY = 'GENERATING_THUMBNAIL';
// const GENERATED_THUMBNAIL_KEY = 'GENERATED_THUMBNAIL';
// const GENERATING_TEXTFILES_KEY = 'GENERATING_TEXTFILES';
// const GENERATED_TEXTFILES_KEY = 'GENERATED_TEXTFILES';
// const GENERATING_SVGIMAGES_KEY = 'GENERATING_SVGIMAGES';
// const GENERATED_SVGIMAGES_KEY = 'GENERATED_SVGIMAGES';
// const CONVERSION_COMPLETED_KEY = 'CONVERSION_COMPLETED';

function handlePresentationConversionUpdate(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, Object);
  const {
    presentationId,
    podId,
    messageKey: status,
    presName: presentationName
  } = body;
  check(meetingId, String);
  check(presentationId, Match.Maybe(String));
  check(podId, String);
  check(status, String);
  const statusModifier = {
    'conversion.status': status,
    'conversion.error': false,
    'conversion.done': false
  };

  switch (status) {
    case SUPPORTED_DOCUMENT_KEY:
      statusModifier.id = presentationId;
      statusModifier.name = presentationName;
      break;

    case FILE_TOO_LARGE_KEY:
      statusModifier['conversion.maxFileSize'] = body.maxFileSize;

    case UNSUPPORTED_DOCUMENT_KEY:
    case OFFICE_DOC_CONVERSION_FAILED_KEY:
    case OFFICE_DOC_CONVERSION_INVALID_KEY:
    case PAGE_COUNT_FAILED_KEY:
    case PAGE_COUNT_EXCEEDED_KEY:
      statusModifier['conversion.maxNumberPages'] = body.maxNumberPages;

    case PDF_HAS_BIG_PAGE_KEY:
      statusModifier.id = presentationId !== null && presentationId !== void 0 ? presentationId : body.presentationToken;
      statusModifier.name = presentationName !== null && presentationName !== void 0 ? presentationName : body.presentationName;
      statusModifier['conversion.error'] = true;
      statusModifier['conversion.bigPageSize'] = body.bigPageSize;
      break;

    case GENERATED_SLIDE_KEY:
      statusModifier['conversion.pagesCompleted'] = body.pagesCompleted;
      statusModifier['conversion.numPages'] = body.numberOfPages;
      break;

    default:
      break;
  }

  const selector = {
    meetingId,
    podId,
    id: presentationId !== null && presentationId !== void 0 ? presentationId : body.presentationToken
  };
  const modifier = {
    $set: Object.assign({
      meetingId,
      podId
    }, statusModifier)
  };

  try {
    const {
      insertedId
    } = Presentations.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Updated presentation conversion status=".concat(status, " id=").concat(presentationId, " meeting=").concat(meetingId));
    } else {
      Logger.debug('Upserted presentation conversion', {
        status,
        presentationId,
        meetingId
      });
    }
  } catch (err) {
    Logger.error("Updating conversion status presentation to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presentationCurrentSet.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/handlers/presentationCurrentSet.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresentationCurrentSet
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let setCurrentPresentation;
module.link("../modifiers/setCurrentPresentation", {
  default(v) {
    setCurrentPresentation = v;
  }

}, 1);

function handlePresentationCurrentSet(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, Object);
  const {
    presentationId,
    podId
  } = body;
  check(meetingId, String);
  check(presentationId, String);
  check(podId, String);
  return setCurrentPresentation(meetingId, podId, presentationId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presentationDownloadableSet.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/handlers/presentationDownloadableSet.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresentationDownloadableSet
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let setPresentationDownloadable;
module.link("../modifiers/setPresentationDownloadable", {
  default(v) {
    setPresentationDownloadable = v;
  }

}, 1);

function handlePresentationDownloadableSet(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(body, Object);
  const {
    presentationId,
    podId,
    downloadable
  } = body;
  check(meetingId, String);
  check(presentationId, String);
  check(podId, String);
  check(downloadable, Boolean);
  return setPresentationDownloadable(meetingId, podId, presentationId, downloadable);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presentationRemove.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/handlers/presentationRemove.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresentationRemove
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let removePresentation;
module.link("../modifiers/removePresentation", {
  default(v) {
    removePresentation = v;
  }

}, 1);

function handlePresentationRemove(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    podId,
    presentationId
  } = body;
  check(meetingId, String);
  check(podId, String);
  check(presentationId, String);
  return removePresentation(meetingId, podId, presentationId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"removePresentation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/methods/removePresentation.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removePresentation
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function removePresentation(presentationId, podId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'RemovePresentationPubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(presentationId, String);
    check(podId, String);
    const payload = {
      presentationId,
      podId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method removePresentation ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setPresentation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/methods/setPresentation.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setPresentation
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function setPresentation(presentationId, podId) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'SetCurrentPresentationPubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(presentationId, String);
    check(podId, String);
    const payload = {
      presentationId,
      podId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method setPresentation ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setPresentationDownloadable.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/methods/setPresentationDownloadable.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setPresentationDownloadable
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function setPresentationDownloadable(presentationId, downloadable) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'SetPresentationDownloadablePubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(downloadable, Boolean);
    check(presentationId, String);
    const payload = {
      presentationId,
      podId: 'DEFAULT_PRESENTATION_POD',
      downloadable
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method setPresentationDownloadable ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addPresentation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/modifiers/addPresentation.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addPresentation
});
let HTTP;
module.link("meteor/http", {
  HTTP(v) {
    HTTP = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 4);
let addSlide;
module.link("/imports/api/slides/server/modifiers/addSlide", {
  default(v) {
    addSlide = v;
  }

}, 5);
let setCurrentPresentation;
module.link("./setCurrentPresentation", {
  default(v) {
    setCurrentPresentation = v;
  }

}, 6);

const getSlideText = url => Promise.asyncApply(() => {
  let content = '';

  try {
    content = Promise.await(HTTP.get(url).content);
  } catch (error) {
    Logger.error("No file found. ".concat(error));
  }

  return content;
});

const addSlides = (meetingId, podId, presentationId, slides) => {
  slides.forEach(slide => Promise.asyncApply(() => {
    const content = Promise.await(getSlideText(slide.txtUri));
    Object.assign(slide, {
      content
    });
    addSlide(meetingId, podId, presentationId, slide);
  }));
};

function addPresentation(meetingId, podId, presentation) {
  check(meetingId, String);
  check(podId, String);
  check(presentation, {
    id: String,
    name: String,
    current: Boolean,
    pages: [{
      id: String,
      num: Number,
      thumbUri: String,
      swfUri: String,
      txtUri: String,
      svgUri: String,
      current: Boolean,
      xOffset: Number,
      yOffset: Number,
      widthRatio: Number,
      heightRatio: Number
    }],
    downloadable: Boolean
  });
  const selector = {
    meetingId,
    podId,
    id: presentation.id
  };
  const modifier = {
    $set: Object.assign({
      meetingId,
      podId,
      'conversion.done': true,
      'conversion.error': false
    }, flat(presentation, {
      safe: true
    }))
  };

  try {
    const {
      insertedId
    } = Presentations.upsert(selector, modifier);
    addSlides(meetingId, podId, presentation.id, presentation.pages);

    if (insertedId) {
      if (presentation.current) {
        setCurrentPresentation(meetingId, podId, presentation.id);
        Logger.info("Added presentation id=".concat(presentation.id, " meeting=").concat(meetingId));
      } else {
        Logger.info("Upserted presentation id=".concat(presentation.id, " meeting=").concat(meetingId));
      }
    }
  } catch (err) {
    Logger.error("Adding presentation to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearPresentations.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/modifiers/clearPresentations.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearPresentations
});
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearPresentations(meetingId, podId) {
  // clearing presentations for 1 pod
  if (meetingId && podId) {
    try {
      const numberAffected = Presentations.remove({
        meetingId,
        podId
      });

      if (numberAffected) {
        Logger.info("Cleared Presentations (".concat(meetingId, ", ").concat(podId, ")"));
        return true;
      }
    } catch (err) {
      Logger.error("Error on cleaning Presentations (".concat(meetingId, ", ").concat(podId, "). ").concat(err));
      return false;
    }
  } // clearing presentations for the whole meeting


  if (meetingId) {
    try {
      const numberAffected = Presentations.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared Presentations (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on cleaning Presentations (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = Presentations.remove({});

      if (numberAffected) {
        Logger.info('Cleared Presentations (all)');
      }
    } catch (err) {
      Logger.error("Error on cleaning Presentations (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removePresentation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/modifiers/removePresentation.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removePresentation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let clearSlidesPresentation;
module.link("/imports/api/slides/server/modifiers/clearSlidesPresentation", {
  default(v) {
    clearSlidesPresentation = v;
  }

}, 3);

function removePresentation(meetingId, podId, presentationId) {
  check(meetingId, String);
  check(presentationId, String);
  check(podId, String);
  const selector = {
    meetingId,
    podId,
    id: presentationId
  };

  try {
    const numberAffected = Presentations.remove(selector);

    if (numberAffected) {
      clearSlidesPresentation(meetingId, presentationId);
      Logger.info("Removed presentation id=".concat(presentationId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Removing presentation from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setCurrentPresentation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/modifiers/setCurrentPresentation.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setCurrentPresentation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function setCurrentPresentation(meetingId, podId, presentationId) {
  check(meetingId, String);
  check(presentationId, String);
  check(podId, String);
  const oldCurrent = {
    selector: {
      meetingId,
      podId,
      current: true
    },
    modifier: {
      $set: {
        current: false
      }
    },
    callback: err => {
      if (err) {
        Logger.error("Unsetting the current presentation: ".concat(err));
        return;
      }

      Logger.info('Unsetted as current presentation');
    }
  };
  const newCurrent = {
    selector: {
      meetingId,
      podId,
      id: presentationId
    },
    modifier: {
      $set: {
        current: true
      }
    },
    callback: err => {
      if (err) {
        Logger.error("Setting as current presentation id=".concat(presentationId, ": ").concat(err));
        return;
      }

      Logger.info("Setted as current presentation id=".concat(presentationId));
    }
  };
  const oldPresentation = Presentations.findOne(oldCurrent.selector);
  const newPresentation = Presentations.findOne(newCurrent.selector); // Prevent bug with presentation being unset, same happens in the slide
  // See: https://github.com/bigbluebutton/bigbluebutton/pull/4431

  if (oldPresentation && newPresentation && oldPresentation._id === newPresentation._id) {
    return;
  }

  if (newPresentation) {
    Presentations.update(newPresentation._id, newCurrent.modifier, newCurrent.callback);
  }

  if (oldPresentation) {
    Presentations.update(oldPresentation._id, oldCurrent.modifier, oldCurrent.callback);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setPresentationDownloadable.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/modifiers/setPresentationDownloadable.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setPresentationDownloadable
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function setPresentationDownloadable(meetingId, podId, presentationId, downloadable) {
  check(meetingId, String);
  check(presentationId, String);
  check(podId, String);
  check(downloadable, Boolean);
  const selector = {
    meetingId,
    podId,
    id: presentationId
  };
  const modifier = {
    $set: {
      downloadable
    }
  };

  try {
    const {
      numberAffected
    } = Presentations.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Set downloadable status on presentation {".concat(presentationId, " in meeting {").concat(meetingId, "}"));
    }
  } catch (err) {
    Logger.error("Could not set downloadable on pres {".concat(presentationId, " in meeting {").concat(meetingId, "} ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/eventHandlers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handlePresentationAdded;
module.link("./handlers/presentationAdded", {
  default(v) {
    handlePresentationAdded = v;
  }

}, 1);
let handlePresentationRemove;
module.link("./handlers/presentationRemove", {
  default(v) {
    handlePresentationRemove = v;
  }

}, 2);
let handlePresentationCurrentSet;
module.link("./handlers/presentationCurrentSet", {
  default(v) {
    handlePresentationCurrentSet = v;
  }

}, 3);
let handlePresentationConversionUpdate;
module.link("./handlers/presentationConversionUpdate", {
  default(v) {
    handlePresentationConversionUpdate = v;
  }

}, 4);
let handlePresentationDownloadableSet;
module.link("./handlers/presentationDownloadableSet", {
  default(v) {
    handlePresentationDownloadableSet = v;
  }

}, 5);
RedisPubSub.on('PdfConversionInvalidErrorEvtMsg', handlePresentationConversionUpdate);
RedisPubSub.on('PresentationPageGeneratedEvtMsg', handlePresentationConversionUpdate);
RedisPubSub.on('PresentationPageCountErrorEvtMsg', handlePresentationConversionUpdate);
RedisPubSub.on('PresentationConversionUpdateEvtMsg', handlePresentationConversionUpdate);
RedisPubSub.on('PresentationUploadedFileTooLargeErrorEvtMsg', handlePresentationConversionUpdate);
RedisPubSub.on('PresentationConversionCompletedEvtMsg', handlePresentationAdded);
RedisPubSub.on('RemovePresentationEvtMsg', handlePresentationRemove);
RedisPubSub.on('SetCurrentPresentationEvtMsg', handlePresentationCurrentSet);
RedisPubSub.on('SetPresentationDownloadableEvtMsg', handlePresentationDownloadableSet);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/index.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/methods.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let removePresentation;
module.link("./methods/removePresentation", {
  default(v) {
    removePresentation = v;
  }

}, 1);
let setPresentation;
module.link("./methods/setPresentation", {
  default(v) {
    setPresentation = v;
  }

}, 2);
let setPresentationDownloadable;
module.link("./methods/setPresentationDownloadable", {
  default(v) {
    setPresentationDownloadable = v;
  }

}, 3);
Meteor.methods({
  removePresentation,
  setPresentation,
  setPresentationDownloadable
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/server/publishers.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function presentations() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Presentation was requested by unauth connection ".concat(this.connection.id));
    return Presentations.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing Presentations', {
    meetingId,
    userId
  });
  return Presentations.find({
    meetingId
  });
}

function publish() {
  const boundPresentations = presentations.bind(this);
  return boundPresentations(...arguments);
}

Meteor.publish('presentations', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/presentations/index.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Presentations = new Mongo.Collection('presentations');

if (Meteor.isServer) {
  // types of queries for the presentations:
  // 1. meetingId, podId, id        ( 3 )
  // 2. meetingId, id               ( 1 )
  // 3. meetingId, id, current      ( 2 )
  // 4. meetingId                   ( 1 )
  Presentations._ensureIndex({
    meetingId: 1,
    podId: 1,
    id: 1
  });
}

module.exportDefault(Presentations);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"screenshare":{"server":{"handlers":{"screenshareStarted.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/handlers/screenshareStarted.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleScreenshareStarted
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 1);
let addScreenshare;
module.link("../modifiers/addScreenshare", {
  default(v) {
    addScreenshare = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let stopWatchingExternalVideoSystemCall;
module.link("/imports/api/external-videos/server/methods/stopWatchingExternalVideoSystemCall", {
  default(v) {
    stopWatchingExternalVideoSystemCall = v;
  }

}, 4);

function handleScreenshareStarted(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(meetingId, String);
  check(body, Object);
  const meeting = Meetings.findOne({
    meetingId
  });

  if (meeting && meeting.externalVideoUrl) {
    Logger.info("ScreenshareStarted: There is external video being shared. Stopping it due to presenter change, ".concat(meeting.externalVideoUrl));
    stopWatchingExternalVideoSystemCall({
      meetingId,
      requesterUserId: 'system-screenshare-starting'
    });
  }

  return addScreenshare(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"screenshareStopped.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/handlers/screenshareStopped.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleScreenshareStopped
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let clearScreenshare;
module.link("../modifiers/clearScreenshare", {
  default(v) {
    clearScreenshare = v;
  }

}, 1);

function handleScreenshareStopped(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    screenshareConf
  } = body;
  check(meetingId, String);
  check(screenshareConf, String);
  return clearScreenshare(meetingId, screenshareConf);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addScreenshare.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/modifiers/addScreenshare.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addScreenshare
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let Screenshare;
module.link("/imports/api/screenshare", {
  default(v) {
    Screenshare = v;
  }

}, 3);

function addScreenshare(meetingId, body) {
  check(meetingId, String);
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      meetingId,
      screenshare: flat(body)
    }
  };

  try {
    const {
      numberAffected
    } = Screenshare.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Upserted screenshare id=".concat(body.screenshareConf));
    }
  } catch (err) {
    Logger.error("Adding screenshare to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearScreenshare.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/modifiers/clearScreenshare.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearScreenshare
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Screenshare;
module.link("/imports/api/screenshare", {
  default(v) {
    Screenshare = v;
  }

}, 1);

function clearScreenshare(meetingId, screenshareConf) {
  try {
    let numberAffected;

    if (meetingId && screenshareConf) {
      numberAffected = Screenshare.remove({
        meetingId,
        'screenshare.screenshareConf': screenshareConf
      });
    } else if (meetingId) {
      numberAffected = Screenshare.remove({
        meetingId
      });
    } else {
      numberAffected = Screenshare.remove({});
    }

    if (numberAffected) {
      Logger.info("removed screenshare meetingId=".concat(meetingId, " id=").concat(screenshareConf));
    }
  } catch (err) {
    Logger.error("removing screenshare to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/eventHandlers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleScreenshareStarted;
module.link("./handlers/screenshareStarted", {
  default(v) {
    handleScreenshareStarted = v;
  }

}, 1);
let handleScreenshareStopped;
module.link("./handlers/screenshareStopped", {
  default(v) {
    handleScreenshareStopped = v;
  }

}, 2);
RedisPubSub.on('ScreenshareRtmpBroadcastStartedEvtMsg', handleScreenshareStarted);
RedisPubSub.on('ScreenshareRtmpBroadcastStoppedEvtMsg', handleScreenshareStopped);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/methods.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
Meteor.methods({});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/server/publishers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Screenshare;
module.link("/imports/api/screenshare", {
  default(v) {
    Screenshare = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function screenshare() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Screenshare was requested by unauth connection ".concat(this.connection.id));
    return Screenshare.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing Screenshare', {
    meetingId,
    userId
  });
  return Screenshare.find({
    meetingId
  });
}

function publish() {
  const boundScreenshare = screenshare.bind(this);
  return boundScreenshare(...arguments);
}

Meteor.publish('screenshare', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Screenshare = new Mongo.Collection('screenshare');

if (Meteor.isServer) {
  // types of queries for the screenshare:
  // 1. meetingId
  Screenshare._ensureIndex({
    meetingId: 1
  });
}

module.exportDefault(Screenshare);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"slides":{"server":{"handlers":{"slideChange.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/handlers/slideChange.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleSlideChange
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let changeCurrentSlide;
module.link("../modifiers/changeCurrentSlide", {
  default(v) {
    changeCurrentSlide = v;
  }

}, 1);

function handleSlideChange(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    pageId,
    presentationId,
    podId
  } = body;
  check(pageId, String);
  check(presentationId, String);
  check(podId, String);
  return changeCurrentSlide(meetingId, podId, presentationId, pageId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"slideResize.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/handlers/slideResize.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleSlideResize
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let resizeSlide;
module.link("../modifiers/resizeSlide", {
  default(v) {
    resizeSlide = v;
  }

}, 1);

function handleSlideResize(_ref, meetingId) {
  let {
    body
  } = _ref;
  check(meetingId, String);
  check(body, Object);
  return resizeSlide(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"switchSlide.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/methods/switchSlide.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => switchSlide
});
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 0);
let Slides;
module.link("/imports/api/slides", {
  Slides(v) {
    Slides = v;
  }

}, 1);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 4);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 5);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 6);

function switchSlide(slideNumber, podId) {
  // TODO-- send presentationId and SlideId
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'SetCurrentPagePubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(slideNumber, Number);
    check(podId, String);
    const selector = {
      meetingId,
      podId,
      current: true
    };
    const Presentation = Presentations.findOne(selector);

    if (!Presentation) {
      throw new Meteor.Error('presentation-not-found', 'You need a presentation to be able to switch slides');
    }

    const Slide = Slides.findOne({
      meetingId,
      podId,
      presentationId: Presentation.id,
      num: slideNumber
    });

    if (!Slide) {
      throw new Meteor.Error('slide-not-found', "Slide number ".concat(slideNumber, " not found in the current presentation"));
    }

    const payload = {
      podId,
      presentationId: Presentation.id,
      pageId: Slide.id
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method switchSlide ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"zoomSlide.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/methods/zoomSlide.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => zoomSlide
});
let Presentations;
module.link("/imports/api/presentations", {
  default(v) {
    Presentations = v;
  }

}, 0);
let Slides;
module.link("/imports/api/slides", {
  Slides(v) {
    Slides = v;
  }

}, 1);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 2);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 5);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 6);

function zoomSlide(slideNumber, podId, widthRatio, heightRatio, x, y) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'ResizeAndMovePagePubMsg';

  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const selector = {
      meetingId,
      podId,
      current: true
    };
    const Presentation = Presentations.findOne(selector);

    if (!Presentation) {
      throw new Meteor.Error('presentation-not-found', 'You need a presentation to be able to switch slides');
    }

    const Slide = Slides.findOne({
      meetingId,
      podId,
      presentationId: Presentation.id,
      num: slideNumber
    });

    if (!Slide) {
      throw new Meteor.Error('slide-not-found', "Slide number ".concat(slideNumber, " not found in the current presentation"));
    }

    const payload = {
      podId,
      presentationId: Presentation.id,
      pageId: Slide.id,
      xOffset: x,
      yOffset: y,
      widthRatio,
      heightRatio
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method zoomSlide ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addSlide.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/modifiers/addSlide.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectWithoutProperties;

module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }

}, 0);
module.export({
  default: () => addSlide
});
let probe;
module.link("probe-image-size", {
  default(v) {
    probe = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 3);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 4);
let Slides;
module.link("/imports/api/slides", {
  Slides(v) {
    Slides = v;
  }

}, 5);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 6);
let SVG, PNG;
module.link("/imports/utils/mimeTypes", {
  SVG(v) {
    SVG = v;
  },

  PNG(v) {
    PNG = v;
  }

}, 7);
let calculateSlideData;
module.link("/imports/api/slides/server/helpers", {
  default(v) {
    calculateSlideData = v;
  }

}, 8);
let addSlidePositions;
module.link("./addSlidePositions", {
  default(v) {
    addSlidePositions = v;
  }

}, 9);
const loadSlidesFromHttpAlways = Meteor.settings.private.app.loadSlidesFromHttpAlways || false;

const requestWhiteboardHistory = (meetingId, slideId) => {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'GetWhiteboardAnnotationsReqMsg';
  const USER_ID = 'nodeJSapp';
  const payload = {
    whiteboardId: slideId
  };
  return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, USER_ID, payload);
};

const SUPPORTED_TYPES = [SVG, PNG];

const fetchImageSizes = imageUri => probe(imageUri).then(result => {
  if (!SUPPORTED_TYPES.includes(result.mime)) {
    throw new Meteor.Error('invalid-image-type', "received ".concat(result.mime, " expecting ").concat(SUPPORTED_TYPES.join()));
  }

  return {
    width: result.width,
    height: result.height
  };
}).catch(reason => {
  Logger.error("Error parsing image size. ".concat(reason, ". uri=").concat(imageUri));
  return reason;
});

function addSlide(meetingId, podId, presentationId, slide) {
  check(podId, String);
  check(presentationId, String);
  check(slide, {
    id: String,
    num: Number,
    thumbUri: String,
    swfUri: String,
    txtUri: String,
    svgUri: String,
    current: Boolean,
    xOffset: Number,
    yOffset: Number,
    widthRatio: Number,
    heightRatio: Number,
    content: String
  });

  const {
    id: slideId,
    xOffset,
    yOffset,
    widthRatio,
    heightRatio
  } = slide,
        restSlide = _objectWithoutProperties(slide, ["id", "xOffset", "yOffset", "widthRatio", "heightRatio"]);

  const selector = {
    meetingId,
    podId,
    presentationId,
    id: slideId
  };
  const imageUri = slide.svgUri || slide.pngUri;
  const modifier = {
    $set: Object.assign({
      meetingId
    }, {
      podId
    }, {
      presentationId
    }, {
      id: slideId
    }, {
      imageUri
    }, flat(restSlide), {
      safe: true
    })
  };
  const imageSizeUri = loadSlidesFromHttpAlways ? imageUri.replace(/^https/i, 'http') : imageUri;
  return fetchImageSizes(imageSizeUri).then((_ref) => {
    let {
      width,
      height
    } = _ref;

    // there is a rare case when for a very long not-active meeting the presentation
    // files just disappear and width/height can't be retrieved
    if (width && height) {
      // pre-calculating the width, height, and vieBox coordinates / dimensions
      // to unload the client-side
      const slideData = {
        width,
        height,
        xOffset,
        yOffset,
        widthRatio,
        heightRatio
      };
      const slidePosition = calculateSlideData(slideData);
      addSlidePositions(meetingId, podId, presentationId, slideId, slidePosition);
    }

    try {
      const {
        insertedId,
        numberAffected
      } = Slides.upsert(selector, modifier);
      requestWhiteboardHistory(meetingId, slideId);

      if (insertedId) {
        Logger.info("Added slide id=".concat(slideId, " pod=").concat(podId, " presentation=").concat(presentationId));
      } else if (numberAffected) {
        Logger.info("Upserted slide id=".concat(slideId, " pod=").concat(podId, " presentation=").concat(presentationId));
      }
    } catch (err) {
      Logger.error("Error on adding slide to collection: ".concat(err));
    }
  }).catch(reason => Logger.error("Error parsing image size. ".concat(reason, ". slide=").concat(slideId, " uri=").concat(imageUri)));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addSlidePositions.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/modifiers/addSlidePositions.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addSlidePositions
});
let SlidePositions;
module.link("/imports/api/slides", {
  SlidePositions(v) {
    SlidePositions = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 3);

function addSlidePositions(meetingId, podId, presentationId, slideId, slidePosition) {
  check(meetingId, String);
  check(podId, String);
  check(presentationId, String);
  check(slideId, String);
  check(slidePosition, {
    width: Number,
    height: Number,
    x: Number,
    y: Number,
    viewBoxWidth: Number,
    viewBoxHeight: Number
  });
  const selector = {
    meetingId,
    podId,
    presentationId,
    id: slideId
  };
  const modifier = {
    $set: Object.assign({
      meetingId
    }, {
      podId
    }, {
      presentationId
    }, {
      id: slideId
    }, flat(slidePosition), {
      safe: true
    })
  };

  try {
    const {
      insertedId
    } = SlidePositions.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added slide position id=".concat(slideId, " pod=").concat(podId, " presentation=").concat(presentationId));
    } else {
      Logger.info("Upserted slide position id=".concat(slideId, " pod=").concat(podId, " presentation=").concat(presentationId));
    }
  } catch (err) {
    Logger.error("Adding slide position to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changeCurrentSlide.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/modifiers/changeCurrentSlide.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeCurrentSlide
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Slides;
module.link("/imports/api/slides", {
  Slides(v) {
    Slides = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function changeCurrentSlide(meetingId, podId, presentationId, slideId) {
  check(meetingId, String);
  check(presentationId, String);
  check(slideId, String);
  check(podId, String);
  const oldCurrent = {
    selector: {
      meetingId,
      podId,
      presentationId,
      current: true
    },
    modifier: {
      $set: {
        current: false
      }
    },
    callback: err => {
      if (err) {
        Logger.error("Unsetting the current slide: ".concat(err));
        return;
      }

      Logger.info('Unsetted the current slide');
    }
  };
  const newCurrent = {
    selector: {
      meetingId,
      podId,
      presentationId,
      id: slideId
    },
    modifier: {
      $set: {
        current: true
      }
    },
    callback: err => {
      if (err) {
        Logger.error("Setting as current slide id=".concat(slideId, ": ").concat(err));
        return;
      }

      Logger.info("Setted as current slide id=".concat(slideId));
    }
  };
  const oldSlide = Slides.findOne(oldCurrent.selector);
  const newSlide = Slides.findOne(newCurrent.selector); // if the oldCurrent and newCurrent have the same ids

  if (oldSlide && newSlide && oldSlide._id === newSlide._id) {
    return;
  }

  if (newSlide) {
    Slides.update(newSlide._id, newCurrent.modifier, newCurrent.callback);
  }

  if (oldSlide) {
    Slides.update(oldSlide._id, oldCurrent.modifier, oldCurrent.callback);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearSlides.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/modifiers/clearSlides.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearSlides
});
let Slides, SlidePositions;
module.link("/imports/api/slides", {
  Slides(v) {
    Slides = v;
  },

  SlidePositions(v) {
    SlidePositions = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearSlides(meetingId) {
  if (meetingId) {
    try {
      const numberAffectedSlidePositions = SlidePositions.remove({
        meetingId
      });
      const numberAffected = Slides.remove({
        meetingId
      });

      if (numberAffectedSlidePositions) {
        Logger.info("Cleared SlidePositions (".concat(meetingId, ")"));
      }

      if (numberAffected) {
        Logger.info("Cleared Slides (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on cleaning Slides (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffectedSlidePositions = SlidePositions.remove({
        meetingId
      });
      const numberAffected = Slides.remove({
        meetingId
      });

      if (numberAffectedSlidePositions) {
        Logger.info("Cleared SlidePositions (".concat(meetingId, ")"));
      }

      if (numberAffected) {
        Logger.info('Cleared Slides (all)');
      }
    } catch (err) {
      Logger.error("Error on cleaning Slides (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearSlidesPresentation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/modifiers/clearSlidesPresentation.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearSlidesPresentation
});
let Slides, SlidePositions;
module.link("/imports/api/slides", {
  Slides(v) {
    Slides = v;
  },

  SlidePositions(v) {
    SlidePositions = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let clearAnnotations;
module.link("/imports/api/annotations/server/modifiers/clearAnnotations", {
  default(v) {
    clearAnnotations = v;
  }

}, 3);

function clearSlidesPresentation(meetingId, presentationId) {
  check(meetingId, String);
  check(presentationId, String);
  const selector = {
    meetingId,
    presentationId
  };
  const whiteboardIds = Slides.find(selector, {
    fields: {
      id: 1
    }
  }).map(row => row.id);

  try {
    SlidePositions.remove(selector);
    const numberAffected = Slides.remove(selector);

    if (numberAffected) {
      whiteboardIds.forEach(whiteboardId => clearAnnotations(meetingId, whiteboardId));
      Logger.info("Removed Slides where presentationId=".concat(presentationId));
    }
  } catch (err) {
    Logger.error("Removing Slides from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"resizeSlide.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/modifiers/resizeSlide.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => resizeSlide
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let SlidePositions;
module.link("/imports/api/slides", {
  SlidePositions(v) {
    SlidePositions = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let calculateSlideData;
module.link("/imports/api/slides/server/helpers", {
  default(v) {
    calculateSlideData = v;
  }

}, 3);

function resizeSlide(meetingId, slide) {
  check(meetingId, String);
  const {
    podId,
    presentationId,
    pageId,
    widthRatio,
    heightRatio,
    xOffset,
    yOffset
  } = slide;
  const selector = {
    meetingId,
    podId,
    presentationId,
    id: pageId
  }; // fetching the current slide data
  // and pre-calculating the width, height, and vieBox coordinates / sizes
  // to reduce the client-side load

  const SlidePosition = SlidePositions.findOne(selector);

  if (SlidePosition) {
    const {
      width,
      height
    } = SlidePosition;
    const slideData = {
      width,
      height,
      xOffset,
      yOffset,
      widthRatio,
      heightRatio
    };
    const calculatedData = calculateSlideData(slideData);
    const modifier = {
      $set: calculatedData
    };

    try {
      const numberAffected = SlidePositions.update(selector, modifier);

      if (numberAffected) {
        Logger.debug("Resized slide positions id=".concat(pageId));
      } else {
        Logger.info("No slide positions found with id=".concat(pageId));
      }
    } catch (err) {
      Logger.error("Resizing slide positions id=".concat(pageId, ": ").concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/eventHandlers.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleSlideResize;
module.link("./handlers/slideResize", {
  default(v) {
    handleSlideResize = v;
  }

}, 1);
let handleSlideChange;
module.link("./handlers/slideChange", {
  default(v) {
    handleSlideChange = v;
  }

}, 2);
RedisPubSub.on('ResizeAndMovePageEvtMsg', handleSlideResize);
RedisPubSub.on('SetCurrentPageEvtMsg', handleSlideChange);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/helpers.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const calculateSlideData = slideData => {
  const {
    width,
    height,
    xOffset,
    yOffset,
    widthRatio,
    heightRatio
  } = slideData; // calculating viewBox and offsets for the current presentation

  return {
    width,
    height,
    x: -xOffset * 2 * width / 100,
    y: -yOffset * 2 * height / 100,
    viewBoxWidth: width * widthRatio / 100,
    viewBoxHeight: height * heightRatio / 100
  };
};

module.exportDefault(calculateSlideData);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/index.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/methods.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let switchSlide;
module.link("./methods/switchSlide", {
  default(v) {
    switchSlide = v;
  }

}, 1);
let zoomSlide;
module.link("./methods/zoomSlide", {
  default(v) {
    zoomSlide = v;
  }

}, 2);
Meteor.methods({
  switchSlide,
  zoomSlide
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/server/publishers.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Slides, SlidePositions;
module.link("/imports/api/slides", {
  Slides(v) {
    Slides = v;
  },

  SlidePositions(v) {
    SlidePositions = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function slides() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Slides was requested by unauth connection ".concat(this.connection.id));
    return Slides.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing Slides', {
    meetingId,
    userId
  });
  return Slides.find({
    meetingId
  });
}

function publish() {
  const boundSlides = slides.bind(this);
  return boundSlides(...arguments);
}

Meteor.publish('slides', publish);

function slidePositions() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing SlidePositions was requested by unauth connection ".concat(this.connection.id));
    return SlidePositions.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing SlidePositions', {
    meetingId,
    userId
  });
  return SlidePositions.find({
    meetingId
  });
}

function publishPositions() {
  const boundSlidePositions = slidePositions.bind(this);
  return boundSlidePositions(...arguments);
}

Meteor.publish('slide-positions', publishPositions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/slides/index.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  Slides: () => Slides,
  SlidePositions: () => SlidePositions
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Slides = new Mongo.Collection('slides');
const SlidePositions = new Mongo.Collection('slide-positions');

if (Meteor.isServer) {
  // types of queries for the slides:
  // 1. meetingId                                  ( 1 )
  // 2. meetingId, podId                           ( 1 )
  // 3. meetingId, presentationId                  ( 1 )
  // 3. meetingId, presentationId, num             ( 1 )
  // 4. meetingId, podId, presentationId, id       ( 3 ) - incl. resizeSlide, which can be intense
  // 5. meetingId, podId, presentationId, current  ( 1 )
  Slides._ensureIndex({
    meetingId: 1,
    podId: 1,
    presentationId: 1,
    id: 1
  });

  SlidePositions._ensureIndex({
    meetingId: 1,
    podId: 1,
    presentationId: 1,
    id: 1
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"users":{"server":{"handlers":{"changeRole.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/changeRole.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleChangeRole
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let changeRole;
module.link("/imports/api/users/server/modifiers/changeRole", {
  default(v) {
    changeRole = v;
  }

}, 1);

function handleChangeRole(payload, meetingId) {
  check(payload.body, Object);
  check(meetingId, String);
  const {
    userId,
    role,
    changedBy
  } = payload.body;
  changeRole(role, userId, meetingId, changedBy);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"emojiStatus.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/emojiStatus.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleEmojiStatus
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);

function handleEmojiStatus(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    userId,
    emoji
  } = body;
  check(userId, String);
  check(emoji, String);
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      emojiTime: new Date().getTime(),
      emoji
    }
  };

  try {
    const numberAffected = Users.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Assigned user emoji status ".concat(emoji, " id=").concat(userId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Assigning user emoji status: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presenterAssigned.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/presenterAssigned.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handlePresenterAssigned
});
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 0);
let PresentationPods;
module.link("/imports/api/presentation-pods", {
  default(v) {
    PresentationPods = v;
  }

}, 1);
let changePresenter;
module.link("/imports/api/users/server/modifiers/changePresenter", {
  default(v) {
    changePresenter = v;
  }

}, 2);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 3);

function setPresenterInPodReqMsg(credentials) {
  // TODO-- switch to meetingId, etc
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'SetPresenterInPodReqMsg';
  const {
    meetingId,
    requesterUserId,
    presenterId
  } = credentials;
  const payload = {
    podId: 'DEFAULT_PRESENTATION_POD',
    nextPresenterId: presenterId
  };
  RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
}

function handlePresenterAssigned(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    presenterId,
    assignedBy
  } = body;
  changePresenter(true, presenterId, meetingId, assignedBy);
  const selector = {
    meetingId,
    userId: {
      $ne: presenterId
    },
    presenter: true
  };
  const prevPresenter = Users.findOne(selector); // no previous presenters
  // The below code is responsible for set Meeting presenter to be default pod presenter as well.
  // It's been handled here because right now akka-apps don't handle all cases scenarios.

  if (!prevPresenter) {
    const setPresenterPayload = {
      meetingId,
      requesterUserId: assignedBy,
      presenterId
    };
    const defaultPodSelector = {
      meetingId,
      podId: 'DEFAULT_PRESENTATION_POD'
    };
    const currentDefaultPodPresenter = PresentationPods.findOne(defaultPodSelector);
    const {
      currentPresenterId
    } = currentDefaultPodPresenter;

    if (currentPresenterId === '') {
      return setPresenterInPodReqMsg(setPresenterPayload);
    }

    const oldPresenter = Users.findOne({
      meetingId,
      userId: currentPresenterId
    });

    if ((oldPresenter === null || oldPresenter === void 0 ? void 0 : oldPresenter.userId) !== currentPresenterId) {
      return setPresenterInPodReqMsg(setPresenterPayload);
    }

    return true;
  }

  changePresenter(false, prevPresenter.userId, meetingId, assignedBy);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/removeUser.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleRemoveUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let removeUser;
module.link("../modifiers/removeUser", {
  default(v) {
    removeUser = v;
  }

}, 1);

function handleRemoveUser(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    intId
  } = body;
  check(meetingId, String);
  check(intId, String);
  return removeUser(meetingId, intId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userEjected.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/userEjected.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleEjectedUser
});
let userEjected;
module.link("../modifiers/userEjected", {
  default(v) {
    userEjected = v;
  }

}, 0);

function handleEjectedUser(_ref) {
  let {
    header,
    body
  } = _ref;
  const {
    meetingId,
    userId
  } = header;
  const {
    reasonCode
  } = body;
  userEjected(meetingId, userId, reasonCode);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userInactivityInspect.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/userInactivityInspect.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleUserInactivityInspect
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let userInactivityInspect;
module.link("../modifiers/userInactivityInspect", {
  default(v) {
    userInactivityInspect = v;
  }

}, 1);

function handleUserInactivityInspect(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    userId
  } = header;
  const {
    responseDelay
  } = body;
  check(userId, String);
  check(responseDelay, Match.Integer);
  check(meetingId, String);
  userInactivityInspect(userId, responseDelay);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userJoin.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/userJoin.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userJoin
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);

function userJoin(meetingId, userId, authToken) {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
  const EVENT_NAME = 'UserJoinMeetingReqMsg';
  check(authToken, String);
  const payload = {
    userId,
    authToken,
    clientType: 'HTML5'
  };
  Logger.info("User='".concat(userId, "' is joining meeting='").concat(meetingId, "' authToken='").concat(authToken, "'"));
  return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, userId, payload);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userJoined.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/userJoined.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleUserJoined
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addUser;
module.link("../modifiers/addUser", {
  default(v) {
    addUser = v;
  }

}, 1);

function handleUserJoined(_ref, meetingId) {
  let {
    body
  } = _ref;
  const user = body;
  check(user, Object);
  addUser(meetingId, user);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateAuthToken.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/handlers/validateAuthToken.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleValidateAuthToken
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let userJoin;
module.link("./userJoin", {
  default(v) {
    userJoin = v;
  }

}, 3);
let pendingAuthenticationsStore;
module.link("../store/pendingAuthentications", {
  default(v) {
    pendingAuthenticationsStore = v;
  }

}, 4);
let createDummyUser;
module.link("../modifiers/createDummyUser", {
  default(v) {
    createDummyUser = v;
  }

}, 5);
let ClientConnections;
module.link("/imports/startup/server/ClientConnections", {
  default(v) {
    ClientConnections = v;
  }

}, 6);
let upsertValidationState;
module.link("/imports/api/auth-token-validation/server/modifiers/upsertValidationState", {
  default(v) {
    upsertValidationState = v;
  }

}, 7);
let ValidationStates;
module.link("/imports/api/auth-token-validation", {
  ValidationStates(v) {
    ValidationStates = v;
  }

}, 8);

const clearOtherSessions = function (sessionUserId) {
  let current = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  const serverSessions = Meteor.server.sessions;
  Object.keys(serverSessions).filter(i => serverSessions[i].userId === sessionUserId).filter(i => i !== current).forEach(i => serverSessions[i].close());
};

function handleValidateAuthToken(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    userId,
    valid,
    authToken,
    waitForApproval,
    registeredOn,
    authTokenValidatedOn,
    reasonCode
  } = body;
  check(userId, String);
  check(authToken, String);
  check(valid, Boolean);
  check(waitForApproval, Boolean);
  check(registeredOn, Number);
  check(authTokenValidatedOn, Number);
  check(reasonCode, String);
  const pendingAuths = pendingAuthenticationsStore.take(meetingId, userId, authToken);
  Logger.info("PendingAuths length [".concat(pendingAuths.length, "]"));
  if (pendingAuths.length === 0) return;

  if (!valid) {
    pendingAuths.forEach(pendingAuth => {
      try {
        const {
          methodInvocationObject
        } = pendingAuth;
        const connectionId = methodInvocationObject.connection.id;
        upsertValidationState(meetingId, userId, ValidationStates.INVALID, connectionId, reasonCode); // Schedule socket disconnection for this user, giving some time for client receiving the reason of disconnection

        Meteor.setTimeout(() => {
          methodInvocationObject.connection.close();
        }, 2000);
        Logger.info("Closed connection ".concat(connectionId, " due to invalid auth token."));
      } catch (e) {
        Logger.error("Error closing socket for meetingId '".concat(meetingId, "', userId '").concat(userId, "', authToken ").concat(authToken));
      }
    });
    return;
  } // Define user ID on connections


  pendingAuths.forEach(pendingAuth => {
    const {
      methodInvocationObject
    } = pendingAuth;
    /* Logic migrated from validateAuthToken method ( postponed to only run in case of success response ) - Begin */

    const sessionId = "".concat(meetingId, "--").concat(userId);
    methodInvocationObject.setUserId(sessionId);
    const User = Users.findOne({
      meetingId,
      userId
    });

    if (!User) {
      createDummyUser(meetingId, userId, authToken);
    }

    ClientConnections.add(sessionId, methodInvocationObject.connection);
    upsertValidationState(meetingId, userId, ValidationStates.VALIDATED, methodInvocationObject.connection.id);
    /* End of logic migrated from validateAuthToken */
  });
  const selector = {
    meetingId,
    userId,
    clientType: 'HTML5'
  };
  const User = Users.findOne(selector); // If we dont find the user on our collection is a flash user and we can skip

  if (!User) return; // Publish user join message

  if (!waitForApproval) {
    Logger.info('User=', User);
    userJoin(meetingId, userId, User.authToken);
  }

  const modifier = {
    $set: {
      validated: valid,
      approved: !waitForApproval,
      loginTime: registeredOn,
      authTokenValidatedTime: authTokenValidatedOn,
      inactivityCheck: false
    }
  };

  try {
    const numberAffected = Users.update(selector, modifier);

    if (numberAffected) {
      const sessionUserId = "".concat(meetingId, "-").concat(userId);
      const currentConnectionId = User.connectionId ? User.connectionId : false;
      clearOtherSessions(sessionUserId, currentConnectionId);
      Logger.info("Validated auth token as ".concat(valid, " user=").concat(userId, " meeting=").concat(meetingId));
    } else {
      Logger.info('No auth to validate');
    }
  } catch (err) {
    Logger.error("Validating auth token: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"assignPresenter.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/assignPresenter.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => assignPresenter
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 4);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 5);

function assignPresenter(userId) {
  // TODO-- send username from client side
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'AssignPresenterReqMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(userId, String);
    const User = Users.findOne({
      meetingId,
      userId
    });

    if (!User) {
      throw new Meteor.Error('user-not-found', 'You need a valid user to be able to set presenter');
    }

    const payload = {
      newPresenterId: userId,
      newPresenterName: User.name,
      assignedBy: requesterUserId,
      requesterId: requesterUserId
    };
    Logger.verbose('User set as presenter', {
      userId,
      meetingId,
      setBy: requesterUserId
    });
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method assignPresenter ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changeRole.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/changeRole.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeRole
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function changeRole(userId, role) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ChangeUserRoleCmdMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(userId, String);
    check(role, String);
    const payload = {
      userId,
      role,
      changedBy: requesterUserId
    };
    Logger.verbose('Changed user role', {
      userId,
      role,
      changedBy: requesterUserId,
      meetingId
    });
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method changeRole ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/removeUser.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeUser
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function removeUser(userId, banUser) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'EjectUserFromMeetingCmdMsg';
    const {
      meetingId,
      requesterUserId: ejectedBy
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(ejectedBy, String);
    check(userId, String);
    check(banUser, Boolean);
    const payload = {
      userId,
      ejectedBy,
      banUser
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, ejectedBy, payload);
  } catch (err) {
    Logger.error("Exception while invoking method removeUser ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmojiStatus.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/setEmojiStatus.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setEmojiStatus
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function setEmojiStatus(userId, status) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ChangeUserEmojiCmdMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(userId, String);
    check(status, String);
    const payload = {
      emoji: status,
      userId
    };
    Logger.verbose('User emoji status updated', {
      userId,
      status,
      requesterUserId,
      meetingId
    });
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method setEmojiStatus ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setMobileUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/setMobileUser.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setMobileUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let setMobile;
module.link("../modifiers/setMobile", {
  default(v) {
    setMobile = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);

function setMobileUser() {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    Logger.verbose("Mobile user ".concat(requesterUserId, " from meeting ").concat(meetingId));
    setMobile(meetingId, requesterUserId);
  } catch (err) {
    Logger.error("Exception while invoking method setMobileUser ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRandomUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/setRandomUser.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setRandomUser
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function setRandomUser() {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'SelectRandomViewerReqMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const payload = {
      requestedBy: requesterUserId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method setRandomUser ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUserEffectiveConnectionType.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/setUserEffectiveConnectionType.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setUserEffectiveConnectionType
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let setEffectiveConnectionType;
module.link("../modifiers/setUserEffectiveConnectionType", {
  default(v) {
    setEffectiveConnectionType = v;
  }

}, 5);

function setUserEffectiveConnectionType(effectiveConnectionType) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ChangeUserEffectiveConnectionMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(effectiveConnectionType, String);
    const payload = {
      meetingId,
      userId: requesterUserId,
      effectiveConnectionType
    };
    setEffectiveConnectionType(meetingId, requesterUserId, effectiveConnectionType);
    Logger.verbose('Updated user effective connection', {
      requesterUserId,
      effectiveConnectionType
    });
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method setUserEffectiveConnectionType ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"toggleUserLock.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/toggleUserLock.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => toggleUserLock
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function toggleUserLock(userId, lock) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'LockUserInMeetingCmdMsg';
    const {
      meetingId,
      requesterUserId: lockedBy
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(lockedBy, String);
    check(userId, String);
    check(lock, Boolean);
    const payload = {
      lockedBy,
      userId,
      lock
    };
    Logger.verbose('Updated lock status for user', {
      meetingId,
      userId,
      lock,
      lockedBy
    });
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, lockedBy, payload);
  } catch (err) {
    Logger.error("Exception while invoking method toggleUserLock ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userActivitySign.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/userActivitySign.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userActivitySign
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 5);

function userActivitySign() {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'UserActivitySignCmdMsg';
    const {
      meetingId,
      requesterUserId: userId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(userId, String);
    const payload = {
      userId
    };
    const selector = {
      userId
    };
    const modifier = {
      $set: {
        inactivityCheck: false
      }
    };
    Users.update(selector, modifier); // TODO-- we should move this to a modifier

    Logger.info("User ".concat(userId, " sent a activity sign for meeting ").concat(meetingId));
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, userId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method userActivitySign ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userLeaving.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/userLeaving.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userLeaving
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let AuthTokenValidation;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  }

}, 4);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 5);
let ClientConnections;
module.link("/imports/startup/server/ClientConnections", {
  default(v) {
    ClientConnections = v;
  }

}, 6);

function userLeaving(meetingId, userId, connectionId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'UserLeaveReqMsg';
    check(userId, String);
    const selector = {
      meetingId,
      userId
    };
    const user = Users.findOne(selector);

    if (!user) {
      Logger.info("Skipping userLeaving. Could not find ".concat(userId, " in ").concat(meetingId));
      return;
    }

    const auth = AuthTokenValidation.findOne({
      meetingId,
      userId
    }, {
      sort: {
        updatedAt: -1
      }
    }); // If the current user connection is not the same that triggered the leave we skip

    if ((auth === null || auth === void 0 ? void 0 : auth.connectionId) !== connectionId) {
      Logger.info("Skipping userLeaving. User connectionId=".concat(user.connectionId, " is different from requester connectionId=").concat(connectionId));
      return false;
    }

    const payload = {
      userId,
      sessionId: meetingId,
      loggedOut: user.loggedOut || false
    };
    ClientConnections.removeClientConnection("".concat(meetingId, "--").concat(userId), connectionId);
    Logger.info("User '".concat(userId, "' is leaving meeting '").concat(meetingId, "'"));
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, userId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method userLeaving ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userLeftMeeting.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/userLeftMeeting.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userLeftMeeting
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let ClientConnections;
module.link("/imports/startup/server/ClientConnections", {
  default(v) {
    ClientConnections = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);

function userLeftMeeting() {
  // TODO-- spread the code to method/modifier/handler
  try {
    // so we don't update the db in a method
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const selector = {
      meetingId,
      userId: requesterUserId
    };
    const numberAffected = Users.update(selector, {
      $set: {
        loggedOut: true
      }
    });

    if (numberAffected) {
      Logger.info("user left id=".concat(requesterUserId, " meeting=").concat(meetingId));
      ClientConnections.removeClientConnection(this.userId, this.connection.id);
    }
  } catch (err) {
    Logger.error("Exception while invoking method userLeftMeeting ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateAuthToken.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods/validateAuthToken.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => validateAuthToken
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let upsertValidationState;
module.link("/imports/api/auth-token-validation/server/modifiers/upsertValidationState", {
  default(v) {
    upsertValidationState = v;
  }

}, 3);
let ValidationStates;
module.link("/imports/api/auth-token-validation", {
  ValidationStates(v) {
    ValidationStates = v;
  }

}, 4);
let pendingAuthenticationsStore;
module.link("../store/pendingAuthentications", {
  default(v) {
    pendingAuthenticationsStore = v;
  }

}, 5);

function validateAuthToken(meetingId, requesterUserId, requesterToken, externalId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ValidateAuthTokenReqMsg';
    Logger.debug('ValidateAuthToken method called', {
      meetingId,
      requesterUserId,
      requesterToken,
      externalId
    });
    if (!meetingId) return false; // Store reference of methodInvocationObject ( to postpone the connection userId definition )

    pendingAuthenticationsStore.add(meetingId, requesterUserId, requesterToken, this);
    upsertValidationState(meetingId, requesterUserId, ValidationStates.VALIDATING, this.connection.id);
    const payload = {
      userId: requesterUserId,
      authToken: requesterToken
    };
    Logger.info("User '".concat(requesterUserId, "' is trying to validate auth token for meeting '").concat(meetingId, "' from connection '").concat(this.connection.id, "'"));
    return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method validateAuthToken ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addDialInUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/addDialInUser.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addDialInUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addUser;
module.link("/imports/api/users/server/modifiers/addUser", {
  default(v) {
    addUser = v;
  }

}, 1);

function addDialInUser(meetingId, voiceUser) {
  check(meetingId, String);
  check(voiceUser, Object);
  const USER_CONFIG = Meteor.settings.public.user;
  const ROLE_VIEWER = USER_CONFIG.role_viewer;
  const {
    intId,
    callerName
  } = voiceUser;
  const voiceOnlyUser = {
    intId,
    extId: intId,
    // TODO
    name: callerName,
    role: ROLE_VIEWER.toLowerCase(),
    guest: false,
    authed: true,
    waitingForAcceptance: false,
    guestStatus: 'ALLOW',
    emoji: 'none',
    presenter: false,
    locked: false,
    // TODO
    avatar: '',
    clientType: 'dial-in-user'
  };
  return addUser(meetingId, voiceOnlyUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/addUser.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 3);
let VoiceUsers;
module.link("/imports/api/voice-users/", {
  default(v) {
    VoiceUsers = v;
  }

}, 4);

let _;

module.link("lodash", {
  default(v) {
    _ = v;
  }

}, 5);
let SanitizeHTML;
module.link("sanitize-html", {
  default(v) {
    SanitizeHTML = v;
  }

}, 6);
let addUserPsersistentData;
module.link("/imports/api/users-persistent-data/server/modifiers/addUserPersistentData", {
  default(v) {
    addUserPsersistentData = v;
  }

}, 7);
let stringHash;
module.link("string-hash", {
  default(v) {
    stringHash = v;
  }

}, 8);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 9);
let addVoiceUser;
module.link("/imports/api/voice-users/server/modifiers/addVoiceUser", {
  default(v) {
    addVoiceUser = v;
  }

}, 10);
const COLOR_LIST = ['#7b1fa2', '#6a1b9a', '#4a148c', '#5e35b1', '#512da8', '#4527a0', '#311b92', '#3949ab', '#303f9f', '#283593', '#1a237e', '#1976d2', '#1565c0', '#0d47a1', '#0277bd', '#01579b'];

function addUser(meetingId, userData) {
  const user = userData;
  const sanitizedName = SanitizeHTML(userData.name, {
    allowedTags: [],
    allowedAttributes: {}
  }); // if user typed only tags

  user.name = sanitizedName.length === 0 ? _.escape(userData.name) : sanitizedName;
  check(meetingId, String);
  check(user, {
    intId: String,
    extId: String,
    name: String,
    role: String,
    guest: Boolean,
    authed: Boolean,
    waitingForAcceptance: Match.Maybe(Boolean),
    guestStatus: String,
    emoji: String,
    presenter: Boolean,
    locked: Boolean,
    avatar: String,
    clientType: String
  });
  const userId = user.intId;
  const selector = {
    meetingId,
    userId
  };
  const Meeting = Meetings.findOne({
    meetingId
  });
  /* While the akka-apps dont generate a color we just pick one
    from a list based on the userId */

  const color = COLOR_LIST[stringHash(user.intId) % COLOR_LIST.length];
  const userInfos = Object.assign({
    meetingId,
    sortName: user.name.trim().toLowerCase(),
    color,
    mobile: false,
    breakoutProps: {
      isBreakoutUser: Meeting.meetingProp.isBreakout,
      parentId: Meeting.breakoutProps.parentId
    },
    effectiveConnectionType: null,
    inactivityCheck: false,
    responseDelay: 0,
    loggedOut: false
  }, flat(user));
  const modifier = {
    $set: userInfos
  };
  addUserPsersistentData(userInfos); // Only add an empty VoiceUser if there isn't one already and if the user coming in isn't a
  // dial-in user. We want to avoid overwriting good data

  if (user.clientType !== 'dial-in-user' && !VoiceUsers.findOne({
    meetingId,
    intId: userId
  })) {
    addVoiceUser(meetingId, {
      voiceUserId: '',
      intId: userId,
      callerName: user.name,
      callerNum: '',
      muted: false,
      talking: false,
      callingWith: '',
      listenOnly: false,
      voiceConf: '',
      joined: false
    });
  }

  try {
    const {
      insertedId
    } = Users.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added user id=".concat(userId, " meeting=").concat(meetingId));
    } else {
      Logger.info("Upserted user id=".concat(userId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding user to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changePresenter.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/changePresenter.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changePresenter
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 2);
let stopWatchingExternalVideoSystemCall;
module.link("/imports/api/external-videos/server/methods/stopWatchingExternalVideoSystemCall", {
  default(v) {
    stopWatchingExternalVideoSystemCall = v;
  }

}, 3);

function changePresenter(presenter, userId, meetingId, changedBy) {
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      presenter
    }
  };

  try {
    const meeting = Meetings.findOne({
      meetingId
    });

    if (meeting && meeting.externalVideoUrl) {
      Logger.info("ChangePresenter:There is external video being shared. Stopping it due to presenter change, ".concat(meeting.externalVideoUrl));
      stopWatchingExternalVideoSystemCall({
        meetingId,
        requesterUserId: 'system-presenter-changed'
      });
    }

    const numberAffected = Users.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Changed presenter=".concat(presenter, " id=").concat(userId, " meeting=").concat(meetingId) + "".concat(changedBy ? " changedBy=".concat(changedBy) : ''));
    }
  } catch (err) {
    Logger.error("Changed user role: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changeRole.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/changeRole.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeRole
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let updateRole;
module.link("/imports/api/users-persistent-data/server/modifiers/updateRole", {
  default(v) {
    updateRole = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);

function changeRole(role, userId, meetingId, changedBy) {
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      role
    }
  };

  try {
    const numberAffected = Users.update(selector, modifier);

    if (numberAffected) {
      updateRole(userId, meetingId, role);
      Logger.info("Changed user role=".concat(role, " id=").concat(userId, " meeting=").concat(meetingId) + "".concat(changedBy ? " changedBy=".concat(changedBy) : ''));
    }
  } catch (err) {
    Logger.error("Changed user role: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearUsers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/clearUsers.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearUsers
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Users;
module.link("/imports/api/users/index", {
  default(v) {
    Users = v;
  }

}, 1);

function clearUsers(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = Users.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared Users (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error clearing Users (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = Users.remove({});

      if (numberAffected) {
        Logger.info('Cleared Users (all)');
      }
    } catch (err) {
      Logger.error("Error clearing Users (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createDummyUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/createDummyUser.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => createDummyUser
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 3);

function createDummyUser(meetingId, userId, authToken) {
  check(meetingId, String);
  check(userId, String);
  check(authToken, String);
  const User = Users.findOne({
    meetingId,
    userId
  });

  if (User) {
    throw new Meteor.Error('existing-user', 'Tried to create a dummy user for an existing user');
  }

  const doc = {
    meetingId,
    userId,
    authToken,
    clientType: 'HTML5',
    validated: null
  };

  try {
    const insertedId = Users.insert(doc);

    if (insertedId) {
      Logger.info("Created dummy user id=".concat(userId, " token=").concat(authToken, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Creating dummy user to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/removeUser.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let VideoStreams;
module.link("/imports/api/video-streams", {
  default(v) {
    VideoStreams = v;
  }

}, 2);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 3);
let setloggedOutStatus;
module.link("/imports/api/users-persistent-data/server/modifiers/setloggedOutStatus", {
  default(v) {
    setloggedOutStatus = v;
  }

}, 4);
let stopWatchingExternalVideoSystemCall;
module.link("/imports/api/external-videos/server/methods/stopWatchingExternalVideoSystemCall", {
  default(v) {
    stopWatchingExternalVideoSystemCall = v;
  }

}, 5);
let clearUserInfoForRequester;
module.link("/imports/api/users-infos/server/modifiers/clearUserInfoForRequester", {
  default(v) {
    clearUserInfoForRequester = v;
  }

}, 6);
let ClientConnections;
module.link("/imports/startup/server/ClientConnections", {
  default(v) {
    ClientConnections = v;
  }

}, 7);

const clearAllSessions = sessionUserId => {
  const serverSessions = Meteor.server.sessions;
  Object.keys(serverSessions).filter(i => serverSessions[i].userId === sessionUserId).forEach(i => serverSessions[i].close());
};

function removeUser(meetingId, userId) {
  check(meetingId, String);
  check(userId, String);

  try {
    if (!process.env.BBB_HTML5_ROLE || process.env.BBB_HTML5_ROLE === 'frontend') {
      const sessionUserId = "".concat(meetingId, "-").concat(userId);
      ClientConnections.removeClientConnection("".concat(meetingId, "--").concat(userId));
      clearAllSessions(sessionUserId); // we don't want to fully process the redis message in frontend
      // since the backend is supposed to update Mongo

      if (process.env.BBB_HTML5_ROLE === 'frontend') {
        return;
      }
    }

    const selector = {
      meetingId,
      userId
    };
    const userToRemove = Users.findOne({
      userId,
      meetingId
    });

    if (userToRemove) {
      const {
        presenter
      } = userToRemove;

      if (presenter) {
        stopWatchingExternalVideoSystemCall({
          meetingId,
          requesterUserId: 'system-presenter-was-removed'
        });
      }
    }

    setloggedOutStatus(userId, meetingId, true);
    VideoStreams.remove({
      meetingId,
      userId
    });
    clearUserInfoForRequester(meetingId, userId);
    Users.remove(selector);
    Logger.info("Removed user id=".concat(userId, " meeting=").concat(meetingId));
  } catch (err) {
    Logger.error("Removing user from Users collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setMobile.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/setMobile.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setMobile
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);

function setMobile(meetingId, userId) {
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      mobile: true
    }
  };

  try {
    const numberAffected = Users.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Assigned mobile user id=".concat(userId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Assigning mobile user: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUserEffectiveConnectionType.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/setUserEffectiveConnectionType.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setUserEffectiveConnectionType
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function setUserEffectiveConnectionType(meetingId, userId, effectiveConnectionType) {
  check(meetingId, String);
  check(userId, String);
  check(effectiveConnectionType, String);
  const selector = {
    meetingId,
    userId,
    effectiveConnectionType: {
      $ne: effectiveConnectionType
    }
  };
  const modifier = {
    $set: {
      effectiveConnectionType
    }
  };

  try {
    const numberAffected = Users.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Updated user ".concat(userId, " effective connection to ").concat(effectiveConnectionType, " in meeting ").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Updating user ".concat(userId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userEjected.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/userEjected.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userEjected
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);
let clearUserInfoForRequester;
module.link("/imports/api/users-infos/server/modifiers/clearUserInfoForRequester", {
  default(v) {
    clearUserInfoForRequester = v;
  }

}, 3);

function userEjected(meetingId, userId, ejectedReason) {
  check(meetingId, String);
  check(userId, String);
  check(ejectedReason, String);
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      ejected: true,
      ejectedReason
    }
  };

  try {
    const numberAffected = Users.update(selector, modifier);

    if (numberAffected) {
      clearUserInfoForRequester(meetingId, userId);
      Logger.info("Ejected user id=".concat(userId, " meeting=").concat(meetingId, " reason=").concat(ejectedReason));
    }
  } catch (err) {
    Logger.error("Ejecting user from collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userInactivityInspect.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/modifiers/userInactivityInspect.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userInactivityInspect
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 2);

function userInactivityInspect(userId, responseDelay) {
  check(userId, String);
  check(responseDelay, Match.Integer);
  const selector = {
    userId,
    inactivityCheck: false
  };
  const modifier = {
    $set: {
      inactivityCheck: true,
      responseDelay
    }
  };

  try {
    const {
      numberAffected
    } = Users.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Updated user ".concat(userId, " with inactivity inspect"));
    }
  } catch (err) {
    Logger.error("Inactivity check for user ".concat(userId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"store":{"pendingAuthentications.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/store/pendingAuthentications.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);

class PendingAuthentitcations {
  constructor() {
    Logger.debug('PendingAuthentitcations :: constructor');
    this.store = [];
  }

  generateKey(meetingId, userId, authToken) {
    // Protect against separator injection
    meetingId = meetingId.replace(/ /g, '');
    userId = userId.replace(/ /g, '');
    authToken = authToken.replace(/ /g, ''); // Space separated key

    return "".concat(meetingId, " ").concat(userId, " ").concat(authToken);
  }

  add(meetingId, userId, authToken, methodInvocationObject) {
    Logger.debug('PendingAuthentitcations :: add', {
      meetingId,
      userId,
      authToken
    });
    this.store.push({
      key: this.generateKey(meetingId, userId, authToken),
      meetingId,
      userId,
      authToken,
      methodInvocationObject
    });
  }

  take(meetingId, userId, authToken) {
    const key = this.generateKey(meetingId, userId, authToken);
    Logger.debug('PendingAuthentitcations :: take', {
      key,
      meetingId,
      userId,
      authToken
    }); // find matches

    const matches = this.store.filter(e => e.key === key); // remove matches (if any)

    if (matches.length) {
      this.store = this.store.filter(e => e.key !== key);
    } // return matches


    return matches;
  }

}

module.exportDefault(new PendingAuthentitcations());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/eventHandlers.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleRemoveUser;
module.link("./handlers/removeUser", {
  default(v) {
    handleRemoveUser = v;
  }

}, 1);
let handleUserJoined;
module.link("./handlers/userJoined", {
  default(v) {
    handleUserJoined = v;
  }

}, 2);
let handleValidateAuthToken;
module.link("./handlers/validateAuthToken", {
  default(v) {
    handleValidateAuthToken = v;
  }

}, 3);
let handlePresenterAssigned;
module.link("./handlers/presenterAssigned", {
  default(v) {
    handlePresenterAssigned = v;
  }

}, 4);
let handleEmojiStatus;
module.link("./handlers/emojiStatus", {
  default(v) {
    handleEmojiStatus = v;
  }

}, 5);
let handleUserEjected;
module.link("./handlers/userEjected", {
  default(v) {
    handleUserEjected = v;
  }

}, 6);
let handleChangeRole;
module.link("./handlers/changeRole", {
  default(v) {
    handleChangeRole = v;
  }

}, 7);
let handleUserInactivityInspect;
module.link("./handlers/userInactivityInspect", {
  default(v) {
    handleUserInactivityInspect = v;
  }

}, 8);
RedisPubSub.on('PresenterAssignedEvtMsg', handlePresenterAssigned);
RedisPubSub.on('UserJoinedMeetingEvtMsg', handleUserJoined);
RedisPubSub.on('UserLeftMeetingEvtMsg', handleRemoveUser);
RedisPubSub.on('ValidateAuthTokenRespMsg', handleValidateAuthToken);
RedisPubSub.on('UserEmojiChangedEvtMsg', handleEmojiStatus);
RedisPubSub.on('UserEjectedFromMeetingEvtMsg', handleUserEjected);
RedisPubSub.on('UserRoleChangedEvtMsg', handleChangeRole);
RedisPubSub.on('UserInactivityInspectMsg', handleUserInactivityInspect);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/index.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/methods.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let validateAuthToken;
module.link("./methods/validateAuthToken", {
  default(v) {
    validateAuthToken = v;
  }

}, 1);
let setEmojiStatus;
module.link("./methods/setEmojiStatus", {
  default(v) {
    setEmojiStatus = v;
  }

}, 2);
let setMobileUser;
module.link("./methods/setMobileUser", {
  default(v) {
    setMobileUser = v;
  }

}, 3);
let assignPresenter;
module.link("./methods/assignPresenter", {
  default(v) {
    assignPresenter = v;
  }

}, 4);
let changeRole;
module.link("./methods/changeRole", {
  default(v) {
    changeRole = v;
  }

}, 5);
let removeUser;
module.link("./methods/removeUser", {
  default(v) {
    removeUser = v;
  }

}, 6);
let toggleUserLock;
module.link("./methods/toggleUserLock", {
  default(v) {
    toggleUserLock = v;
  }

}, 7);
let setUserEffectiveConnectionType;
module.link("./methods/setUserEffectiveConnectionType", {
  default(v) {
    setUserEffectiveConnectionType = v;
  }

}, 8);
let userActivitySign;
module.link("./methods/userActivitySign", {
  default(v) {
    userActivitySign = v;
  }

}, 9);
let userLeftMeeting;
module.link("./methods/userLeftMeeting", {
  default(v) {
    userLeftMeeting = v;
  }

}, 10);
let setRandomUser;
module.link("./methods/setRandomUser", {
  default(v) {
    setRandomUser = v;
  }

}, 11);
Meteor.methods({
  setEmojiStatus,
  setMobileUser,
  assignPresenter,
  changeRole,
  removeUser,
  validateAuthToken,
  toggleUserLock,
  setUserEffectiveConnectionType,
  userActivitySign,
  userLeftMeeting,
  setRandomUser
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/server/publishers.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 5);
const ROLE_MODERATOR = Meteor.settings.public.user.role_moderator;

function currentUser() {
  if (!this.userId) {
    return Users.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    requesterUserId
  } = extractCredentials(this.userId);
  check(meetingId, String);
  check(requesterUserId, String);
  const selector = {
    meetingId,
    userId: requesterUserId,
    intId: {
      $exists: true
    }
  };
  const options = {
    fields: {
      user: false,
      authToken: false // Not asking for authToken from client side but also not exposing it

    }
  };
  return Users.find(selector, options);
}

function publishCurrentUser() {
  const boundUsers = currentUser.bind(this);
  return boundUsers(...arguments);
}

Meteor.publish('current-user', publishCurrentUser);

function users(role) {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing Users was requested by unauth connection ".concat(this.connection.id));
    return Users.find({
      meetingId: ''
    });
  }

  if (!this.userId) {
    return Users.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug("Publishing Users for ".concat(meetingId, " ").concat(userId));
  const selector = {
    $or: [{
      meetingId
    }],
    intId: {
      $exists: true
    }
  };
  const User = Users.findOne({
    userId,
    meetingId
  }, {
    fields: {
      role: 1
    }
  });

  if (!!User && User.role === ROLE_MODERATOR) {
    selector.$or.push({
      'breakoutProps.isBreakoutUser': true,
      'breakoutProps.parentId': meetingId
    });
  }

  const options = {
    fields: {
      authToken: false
    }
  };
  Logger.debug('Publishing Users', {
    meetingId,
    userId
  });
  return Users.find(selector, options);
}

function publish() {
  const boundUsers = users.bind(this);
  return boundUsers(...arguments);
}

Meteor.publish('users', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users/index.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const Users = new Mongo.Collection('users');

if (Meteor.isServer) {
  // types of queries for the users:
  // 1. meetingId
  // 2. meetingId, userId
  Users._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

module.exportDefault(Users);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"users-infos":{"server":{"handlers":{"userInformation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/handlers/userInformation.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleUserInformation
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addUserInfo;
module.link("../modifiers/addUserInfo", {
  default(v) {
    addUserInfo = v;
  }

}, 1);

function handleUserInformation(_ref) {
  let {
    header,
    body
  } = _ref;
  check(body, Object);
  check(header, Object);
  const {
    userInfo
  } = body;
  const {
    userId,
    meetingId
  } = header;
  check(userInfo, Array);
  check(userId, String);
  check(meetingId, String);
  return addUserInfo(userInfo, userId, meetingId);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"removeUserInformation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/methods/removeUserInformation.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeUserInformation
});
let UserInfos;
module.link("/imports/api/users-infos", {
  default(v) {
    UserInfos = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);

function removeUserInformation() {
  try {
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const selector = {
      meetingId,
      requesterUserId
    };
    const numberAffected = UserInfos.remove(selector);

    if (numberAffected) {
      Logger.info("Removed user information: requester id=".concat(requesterUserId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Exception while invoking method removeUserInformation ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"requestUserInformation.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/methods/requestUserInformation.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => getUserInformation
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function getUserInformation(externalUserId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toThirdParty;
    const EVENT_NAME = 'LookUpUserReqMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(externalUserId, String);
    const payload = {
      externalUserId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method getUserInformation ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addUserInfo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/modifiers/addUserInfo.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addUserInfo
});
let UserInfos;
module.link("/imports/api/users-infos", {
  default(v) {
    UserInfos = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function addUserInfo(userInfo, requesterUserId, meetingId) {
  const info = {
    meetingId,
    requesterUserId,
    userInfo
  };

  try {
    const numberAffected = UserInfos.insert(info);

    if (numberAffected) {
      Logger.info("Added user information: requester id=".concat(requesterUserId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding user information to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearUserInfo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/modifiers/clearUserInfo.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearUsersInfo
});
let UserInfos;
module.link("/imports/api/users-infos", {
  default(v) {
    UserInfos = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearUsersInfo(meetingId) {
  try {
    const numberAffected = UserInfos.remove({
      meetingId
    });

    if (numberAffected) {
      Logger.info("Cleared User Infos (".concat(meetingId, ")"));
    }
  } catch (err) {
    Logger.error("Error on clearing User Infos (".concat(meetingId, "). ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearUserInfoForRequester.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/modifiers/clearUserInfoForRequester.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearUsersInfoForRequester
});
let UserInfos;
module.link("/imports/api/users-infos", {
  default(v) {
    UserInfos = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearUsersInfoForRequester(meetingId, requesterUserId) {
  try {
    const numberAffected = UserInfos.remove({
      meetingId
    });

    if (numberAffected) {
      Logger.info("Cleared User Infos requested by user=".concat(requesterUserId));
    }
  } catch (err) {
    Logger.info("Error on clearing User Infos requested by user=".concat(requesterUserId, ". ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/eventHandlers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleUserInformation;
module.link("./handlers/userInformation", {
  default(v) {
    handleUserInformation = v;
  }

}, 1);
RedisPubSub.on('LookUpUserRespMsg', handleUserInformation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/methods.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let requestUserInformation;
module.link("./methods/requestUserInformation", {
  default(v) {
    requestUserInformation = v;
  }

}, 1);
let removeUserInformation;
module.link("./methods/removeUserInformation", {
  default(v) {
    removeUserInformation = v;
  }

}, 2);
Meteor.methods({
  requestUserInformation,
  removeUserInformation
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/server/publishers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let UserInfos;
module.link("/imports/api/users-infos", {
  default(v) {
    UserInfos = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function userInfos() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing UserInfos was requested by unauth connection ".concat(this.connection.id));
    return UserInfos.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId: requesterUserId
  } = tokenValidation;
  Logger.debug('Publishing UserInfos requested', {
    meetingId,
    requesterUserId
  });
  return UserInfos.find({
    meetingId,
    requesterUserId
  });
}

function publish() {
  const boundUserInfos = userInfos.bind(this);
  return boundUserInfos(...arguments);
}

Meteor.publish('users-infos', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-infos/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const UserInfos = new Mongo.Collection('users-infos');

if (Meteor.isServer) {
  UserInfos._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

module.exportDefault(UserInfos);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"users-persistent-data":{"server":{"modifiers":{"addUserPersistentData.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-persistent-data/server/modifiers/addUserPersistentData.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addUserPersistentData
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let UsersPersistentData;
module.link("/imports/api/users-persistent-data", {
  default(v) {
    UsersPersistentData = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function addUserPersistentData(user) {
  check(user, {
    meetingId: String,
    sortName: String,
    color: String,
    mobile: Boolean,
    breakoutProps: Object,
    inactivityCheck: Boolean,
    responseDelay: Number,
    loggedOut: Boolean,
    intId: String,
    extId: String,
    name: String,
    role: String,
    guest: Boolean,
    authed: Boolean,
    waitingForAcceptance: Match.Maybe(Boolean),
    guestStatus: String,
    emoji: String,
    presenter: Boolean,
    locked: Boolean,
    avatar: String,
    clientType: String,
    effectiveConnectionType: null
  });
  const {
    intId,
    extId,
    meetingId,
    name,
    role,
    token,
    avatar,
    guest,
    color
  } = user;
  const userData = {
    userId: intId,
    extId,
    meetingId,
    name,
    role,
    token,
    avatar,
    guest,
    color,
    loggedOut: false
  };
  const selector = {
    userId: intId,
    meetingId
  };
  const modifier = {
    $set: userData
  };

  try {
    const {
      insertedId
    } = UsersPersistentData.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added user id=".concat(intId, " to user persistent Data: meeting=").concat(meetingId));
    } else {
      Logger.info("Upserted user id=".concat(intId, " to user persistent Data: meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Adding note to the collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearUsersPersistentData.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-persistent-data/server/modifiers/clearUsersPersistentData.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearUsersPersistentData
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let UsersPersistentData;
module.link("/imports/api/users-persistent-data/index", {
  default(v) {
    UsersPersistentData = v;
  }

}, 1);

function clearUsersPersistentData(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = UsersPersistentData.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared users persistent data (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error clearing users persistent data (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = UsersPersistentData.remove({});

      if (numberAffected) {
        Logger.info('Cleared users persistent data (all)');
      }
    } catch (err) {
      Logger.error("Error clearing users persistent data (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setloggedOutStatus.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-persistent-data/server/modifiers/setloggedOutStatus.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => setloggedOutStatus
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let UsersPersistentData;
module.link("/imports/api/users-persistent-data", {
  default(v) {
    UsersPersistentData = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function setloggedOutStatus(userId, meetingId) {
  let status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  check(userId, String);
  check(meetingId, String);
  check(status, Boolean);
  const selector = {
    userId,
    meetingId
  };
  const modifier = {
    $set: {
      loggedOut: status
    }
  };

  try {
    UsersPersistentData.update(selector, modifier);
  } catch (err) {
    Logger.error("Setting users persistent data's logged out status to the collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateRole.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-persistent-data/server/modifiers/updateRole.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateRole
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let UsersPersistentData;
module.link("/imports/api/users-persistent-data", {
  default(v) {
    UsersPersistentData = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function updateRole(userId, meetingId, role) {
  check(userId, String);
  check(meetingId, String);
  check(role, String);
  const selector = {
    userId,
    meetingId
  };
  const modifier = {
    $set: {
      role
    }
  };

  try {
    UsersPersistentData.update(selector, modifier);
  } catch (err) {
    Logger.error("Updating users persistent data's role to the collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-persistent-data/server/index.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-persistent-data/server/publishers.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let UsersPersistentData;
module.link("/imports/api/users-persistent-data", {
  default(v) {
    UsersPersistentData = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);

function usersPersistentData() {
  if (!this.userId) {
    return UsersPersistentData.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    requesterUserId
  } = extractCredentials(this.userId);
  check(meetingId, String);
  check(requesterUserId, String);
  const selector = {
    meetingId
  };
  return UsersPersistentData.find(selector);
}

function publishUsersPersistentData() {
  const boundUsers = usersPersistentData.bind(this);
  return boundUsers(...arguments);
}

Meteor.publish('users-persistent-data', publishUsersPersistentData);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-persistent-data/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const UsersPersistentData = new Mongo.Collection('users-persistent-data');

if (Meteor.isServer) {
  UsersPersistentData._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

module.exportDefault(UsersPersistentData);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"users-settings":{"server":{"methods":{"addUserSettings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-settings/server/methods/addUserSettings.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);
module.export({
  default: () => addUserSettings
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let addUserSetting;
module.link("/imports/api/users-settings/server/modifiers/addUserSetting", {
  default(v) {
    addUserSetting = v;
  }

}, 1);
let logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    logger = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
const oldParameters = {
  askForFeedbackOnLogout: 'bbb_ask_for_feedback_on_logout',
  autoJoin: 'bbb_auto_join_audio',
  autoShareWebcam: 'bbb_auto_share_webcam',
  autoSwapLayout: 'bbb_auto_swap_layout',
  clientTitle: 'bbb_client_title',
  customStyle: 'bbb_custom_style',
  customStyleUrl: 'bbb_custom_style_url',
  displayBrandingArea: 'bbb_display_branding_area',
  enableScreensharing: 'bbb_enable_screen_sharing',
  enableVideo: 'bbb_enable_video',
  forceListenOnly: 'bbb_force_listen_only',
  hidePresentation: 'bbb_hide_presentation',
  listenOnlyMode: 'bbb_listen_only_mode',
  multiUserPenOnly: 'bbb_multi_user_pen_only',
  multiUserTools: 'bbb_multi_user_tools',
  outsideToggleRecording: 'bbb_outside_toggle_recording',
  outsideToggleSelfVoice: 'bbb_outside_toggle_self_voice',
  presenterTools: 'bbb_presenter_tools',
  shortcuts: 'bbb_shortcuts',
  skipCheck: 'bbb_skip_check_audio'
};
const oldParametersKeys = Object.keys(oldParameters);
const currentParameters = [// APP
'bbb_ask_for_feedback_on_logout', 'bbb_override_default_locale', 'bbb_auto_join_audio', 'bbb_client_title', 'bbb_force_listen_only', 'bbb_listen_only_mode', 'bbb_skip_check_audio', 'bbb_skip_check_audio_on_first_join', // BRANDING
'bbb_display_branding_area', // SHORTCUTS
'bbb_shortcuts', // KURENTO
'bbb_auto_share_webcam', 'bbb_preferred_camera_profile', 'bbb_enable_screen_sharing', 'bbb_enable_video', 'bbb_record_video', 'bbb_skip_video_preview', 'bbb_skip_video_preview_on_first_join', 'bbb_mirror_own_webcam', // PRESENTATION
'bbb_force_restore_presentation_on_new_events', // WHITEBOARD
'bbb_multi_user_pen_only', 'bbb_presenter_tools', 'bbb_multi_user_tools', // SKINNING/THEMMING
'bbb_custom_style', 'bbb_custom_style_url', // LAYOUT
'bbb_auto_swap_layout', 'bbb_hide_presentation', 'bbb_show_participants_on_login', 'bbb_show_public_chat_on_login', // OUTSIDE COMMANDS
'bbb_outside_toggle_self_voice', 'bbb_outside_toggle_recording'];

function valueParser(val) {
  try {
    const parsedValue = JSON.parse(val.toLowerCase().trim());
    return parsedValue;
  } catch (error) {
    logger.warn("addUserSettings:Parameter ".concat(val, " could not be parsed (was not json)"));
    return val;
  }
}

function addUserSettings(settings) {
  try {
    check(settings, [Object]);
    const {
      meetingId,
      requesterUserId: userId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(userId, String);
    let parameters = {};
    settings.forEach(el => {
      const settingKey = Object.keys(el).shift();
      const normalizedKey = settingKey.trim();

      if (currentParameters.includes(normalizedKey)) {
        if (!Object.keys(parameters).includes(normalizedKey)) {
          parameters = _objectSpread({
            [normalizedKey]: valueParser(el[settingKey])
          }, parameters);
        } else {
          parameters[normalizedKey] = el[settingKey];
        }

        return;
      }

      if (oldParametersKeys.includes(normalizedKey)) {
        const matchingNewKey = oldParameters[normalizedKey];

        if (!Object.keys(parameters).includes(matchingNewKey)) {
          parameters = _objectSpread({
            [matchingNewKey]: valueParser(el[settingKey])
          }, parameters);
        }

        return;
      }

      logger.warn("Parameter ".concat(normalizedKey, " not handled"));
    });
    const settingsAdded = [];
    Object.entries(parameters).forEach(el => {
      const setting = el[0];
      const value = el[1];
      settingsAdded.push(addUserSetting(meetingId, userId, setting, value));
    });
    return settingsAdded;
  } catch (err) {
    logger.error("Exception while invoking method addUserSettings ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addUserSetting.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-settings/server/modifiers/addUserSetting.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addUserSetting
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let UserSettings;
module.link("/imports/api/users-settings", {
  default(v) {
    UserSettings = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function addUserSetting(meetingId, userId, setting, value) {
  check(meetingId, String);
  check(userId, String);
  check(setting, String);
  check(value, Match.Any);
  const selector = {
    meetingId,
    userId,
    setting
  };
  const modifier = {
    $set: {
      meetingId,
      userId,
      setting,
      value
    }
  };

  try {
    const {
      numberAffected
    } = UserSettings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.verbose('Upserted user setting', {
        meetingId,
        userId,
        setting
      });
    }
  } catch (err) {
    Logger.error("Adding user setting to collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearUsersSettings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-settings/server/modifiers/clearUsersSettings.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearUsersSettings
});
let UserSettings;
module.link("/imports/api/users-settings", {
  default(v) {
    UserSettings = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);

function clearUsersSettings(meetingId) {
  try {
    const numberAffected = UserSettings.remove({
      meetingId
    });

    if (numberAffected) {
      Logger.info("Cleared User Settings (".concat(meetingId, ")"));
    }
  } catch (err) {
    Logger.error("Error on clearing User Settings (".concat(meetingId, "). ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-settings/server/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-settings/server/methods.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let addUserSettings;
module.link("./methods/addUserSettings", {
  default(v) {
    addUserSettings = v;
  }

}, 1);
Meteor.methods({
  addUserSettings
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-settings/server/publishers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let UserSettings;
module.link("/imports/api/users-settings", {
  default(v) {
    UserSettings = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);
let User;
module.link("/imports/api/users", {
  default(v) {
    User = v;
  }

}, 4);

function userSettings() {
  var _currentUser$breakout;

  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing UserSettings was requested by unauth connection ".concat(this.connection.id));
    return UserSettings.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  const currentUser = User.findOne({
    userId,
    meetingId
  });

  if (currentUser && (currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$breakout = currentUser.breakoutProps) === null || _currentUser$breakout === void 0 ? void 0 : _currentUser$breakout.isBreakoutUser)) {
    const {
      parentId
    } = currentUser.breakoutProps;
    const [externalId] = currentUser.extId.split('-');
    const mainRoomUserSettings = UserSettings.find({
      meetingId: parentId,
      userId: externalId
    });
    mainRoomUserSettings.map((_ref) => {
      let {
        setting,
        value
      } = _ref;
      return {
        meetingId,
        setting,
        userId,
        value
      };
    }).forEach(doc => {
      const selector = {
        meetingId,
        setting: doc.setting
      };
      UserSettings.upsert(selector, doc);
    });
    Logger.debug('Publishing UserSettings', {
      meetingId,
      userId
    });
    return UserSettings.find({
      meetingId,
      userId
    });
  }

  Logger.debug('Publishing UserSettings', {
    meetingId,
    userId
  });
  return UserSettings.find({
    meetingId,
    userId
  });
}

function publish() {
  const boundUserSettings = userSettings.bind(this);
  return boundUserSettings(...arguments);
}

Meteor.publish('users-settings', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/users-settings/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const UserSettings = new Mongo.Collection('users-settings');

if (Meteor.isServer) {
  UserSettings._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

module.exportDefault(UserSettings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"video-streams":{"server":{"handlers":{"floorChanged.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/handlers/floorChanged.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleFloorChanged
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let floorChanged;
module.link("../modifiers/floorChanged", {
  default(v) {
    floorChanged = v;
  }

}, 1);

function handleFloorChanged(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    intId,
    floor,
    lastFloorTime
  } = body;
  check(meetingId, String);
  check(intId, String);
  check(floor, Boolean);
  check(lastFloorTime, String);
  return floorChanged(meetingId, intId, floor, lastFloorTime);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userSharedHtml5Webcam.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/handlers/userSharedHtml5Webcam.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleUserSharedHtml5Webcam
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let sharedWebcam;
module.link("../modifiers/sharedWebcam", {
  default(v) {
    sharedWebcam = v;
  }

}, 1);
let isValidStream;
module.link("/imports/api/video-streams/server/helpers", {
  isValidStream(v) {
    isValidStream = v;
  }

}, 2);

function handleUserSharedHtml5Webcam(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    userId,
    stream
  } = body;
  check(header, Object);
  check(meetingId, String);
  check(userId, String);
  check(stream, String);
  if (!isValidStream(stream)) return false;
  return sharedWebcam(meetingId, userId, stream);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userUnsharedHtml5Webcam.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/handlers/userUnsharedHtml5Webcam.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleUserUnsharedHtml5Webcam
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let unsharedWebcam;
module.link("../modifiers/unsharedWebcam", {
  default(v) {
    unsharedWebcam = v;
  }

}, 1);
let isValidStream;
module.link("/imports/api/video-streams/server/helpers", {
  isValidStream(v) {
    isValidStream = v;
  }

}, 2);

function handleUserUnsharedHtml5Webcam(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const {
    userId,
    stream
  } = body;
  check(header, Object);
  check(meetingId, String);
  check(userId, String);
  check(stream, String);
  if (!isValidStream(stream)) return false;
  return unsharedWebcam(meetingId, userId, stream);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"userShareWebcam.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/methods/userShareWebcam.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userShareWebcam
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function userShareWebcam(stream) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'UserBroadcastCamStartMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(stream, String);
    Logger.info("user sharing webcam: ".concat(meetingId, " ").concat(requesterUserId)); // const actionName = 'joinVideo';

    /* TODO throw an error if user has no permission to share webcam
    if (!isAllowedTo(actionName, credentials)) {
      throw new Meteor.Error('not-allowed', `You are not allowed to share webcam`);
    } */

    const payload = {
      stream
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method userShareWebcam ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"userUnshareWebcam.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/methods/userUnshareWebcam.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => userUnshareWebcam
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);

function userUnshareWebcam(stream) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'UserBroadcastCamStopMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(stream, String);
    Logger.info("user unsharing webcam: ".concat(meetingId, " ").concat(requesterUserId)); // const actionName = 'joinVideo';

    /* TODO throw an error if user has no permission to share webcam
    if (!isAllowedTo(actionName, credentials)) {
      throw new Meteor.Error('not-allowed', `You are not allowed to share webcam`);
    } */

    const payload = {
      stream
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method userUnshareWebcam ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearVideoStreams.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/modifiers/clearVideoStreams.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearVideoStreams
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let VideoStreams;
module.link("/imports/api/video-streams", {
  default(v) {
    VideoStreams = v;
  }

}, 1);

function clearVideoStreams(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = VideoStreams.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared VideoStreams in (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing VideoStreams (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = VideoStreams.remove({});

      if (numberAffected) {
        Logger.info('Cleared VideoStreams in all meetings');
      }
    } catch (err) {
      Logger.error("Error on clearing VideoStreams (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"floorChanged.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/modifiers/floorChanged.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => floorChanged
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let VideoStreams;
module.link("/imports/api/video-streams", {
  default(v) {
    VideoStreams = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);

function floorChanged(meetingId, userId, floor, lastFloorTime) {
  check(meetingId, String);
  check(userId, String);
  check(floor, Boolean);
  check(lastFloorTime, String);
  const selector = {
    meetingId,
    userId
  };
  const modifier = {
    $set: {
      floor,
      lastFloorTime: floor ? lastFloorTime : undefined
    }
  };

  try {
    const numberAffected = VideoStreams.update(selector, modifier, {
      multi: true
    });

    if (numberAffected) {
      Logger.info("Updated user streams floor times userId=".concat(userId, " floor=").concat(floor, " lastFloorTime=").concat(lastFloorTime));
    }
  } catch (error) {
    return Logger.error("Error updating stream floor status: ".concat(error));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sharedWebcam.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/modifiers/sharedWebcam.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => sharedWebcam
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let VideoStreams;
module.link("/imports/api/video-streams", {
  default(v) {
    VideoStreams = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let getDeviceId, getUserName;
module.link("/imports/api/video-streams/server/helpers", {
  getDeviceId(v) {
    getDeviceId = v;
  },

  getUserName(v) {
    getUserName = v;
  }

}, 3);
let VoiceUsers;
module.link("/imports/api/voice-users/", {
  default(v) {
    VoiceUsers = v;
  }

}, 4);
const BASE_FLOOR_TIME = "0";

function sharedWebcam(meetingId, userId, stream) {
  check(meetingId, String);
  check(userId, String);
  check(stream, String);
  const deviceId = getDeviceId(stream);
  const name = getUserName(userId, meetingId);
  const vu = VoiceUsers.findOne({
    meetingId,
    intId: userId
  }, {
    fields: {
      floor: 1,
      lastFloorTime: 1
    }
  }) || {};
  const floor = vu.floor || false;
  const lastFloorTime = vu.lastFloorTime || BASE_FLOOR_TIME;
  const selector = {
    meetingId,
    userId,
    deviceId
  };
  const modifier = {
    $set: {
      stream,
      name,
      lastFloorTime,
      floor
    }
  };

  try {
    const {
      insertedId
    } = VideoStreams.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Updated stream=".concat(stream, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Error setting stream: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unsharedWebcam.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/modifiers/unsharedWebcam.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => unsharedWebcam
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let VideoStreams;
module.link("/imports/api/video-streams", {
  default(v) {
    VideoStreams = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let getDeviceId;
module.link("/imports/api/video-streams/server/helpers", {
  getDeviceId(v) {
    getDeviceId = v;
  }

}, 3);

function unsharedWebcam(meetingId, userId, stream) {
  check(meetingId, String);
  check(userId, String);
  check(stream, String);
  const deviceId = getDeviceId(stream);
  const selector = {
    meetingId,
    userId,
    deviceId
  };

  try {
    VideoStreams.remove(selector);
    Logger.info("Removed stream=".concat(stream, " meeting=").concat(meetingId));
  } catch (err) {
    Logger.error("Error removing stream: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/eventHandlers.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleUserSharedHtml5Webcam;
module.link("./handlers/userSharedHtml5Webcam", {
  default(v) {
    handleUserSharedHtml5Webcam = v;
  }

}, 1);
let handleUserUnsharedHtml5Webcam;
module.link("./handlers/userUnsharedHtml5Webcam", {
  default(v) {
    handleUserUnsharedHtml5Webcam = v;
  }

}, 2);
let handleFloorChanged;
module.link("./handlers/floorChanged", {
  default(v) {
    handleFloorChanged = v;
  }

}, 3);
RedisPubSub.on('UserBroadcastCamStartedEvtMsg', handleUserSharedHtml5Webcam);
RedisPubSub.on('UserBroadcastCamStoppedEvtMsg', handleUserUnsharedHtml5Webcam);
RedisPubSub.on('AudioFloorChangedEvtMsg', handleFloorChanged);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/helpers.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  isValidStream: () => isValidStream,
  getDeviceId: () => getDeviceId,
  getUserName: () => getUserName
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
const FLASH_STREAM_REGEX = /^([A-z0-9]+)-([A-z0-9]+)-([A-z0-9]+)(-recorded)?$/;
const TOKEN = '_';

const isValidStream = stream => !FLASH_STREAM_REGEX.test(stream);

const getDeviceId = stream => {
  const splitStream = stream.split(TOKEN);
  if (splitStream.length === 3) return splitStream[2];
  Logger.warn("Could not get deviceId from stream=".concat(stream));
  return stream;
};

const getUserName = (userId, meetingId) => {
  const user = Users.findOne({
    userId,
    meetingId
  }, {
    fields: {
      name: 1
    }
  });
  if (user) return user.name;
  return userId;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/index.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publisher");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/methods.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let userShareWebcam;
module.link("./methods/userShareWebcam", {
  default(v) {
    userShareWebcam = v;
  }

}, 1);
let userUnshareWebcam;
module.link("./methods/userUnshareWebcam", {
  default(v) {
    userUnshareWebcam = v;
  }

}, 2);
Meteor.methods({
  userShareWebcam,
  userUnshareWebcam
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publisher.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/server/publisher.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let VideoStreams;
module.link("/imports/api/video-streams", {
  default(v) {
    VideoStreams = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function videoStreams() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing VideoStreams was requested by unauth connection ".concat(this.connection.id));
    return VideoStreams.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing VideoStreams', {
    meetingId,
    userId
  });
  const selector = {
    meetingId
  };
  return VideoStreams.find(selector);
}

function publish() {
  const boundVideoStreams = videoStreams.bind(this);
  return boundVideoStreams(...arguments);
}

Meteor.publish('video-streams', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/video-streams/index.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const VideoStreams = new Mongo.Collection('video-streams');

if (Meteor.isServer) {
  // types of queries for the video users:
  // 2. meetingId
  VideoStreams._ensureIndex({
    meetingId: 1
  });
}

module.exportDefault(VideoStreams);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"voice-call-states":{"server":{"handlers":{"voiceCallStateEvent.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-call-states/server/handlers/voiceCallStateEvent.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleVoiceCallStateEvent
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let VoiceCallState;
module.link("/imports/api/voice-call-states", {
  default(v) {
    VoiceCallState = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function handleVoiceCallStateEvent(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    voiceConf,
    clientSession,
    userId,
    callerName,
    callState
  } = body;
  check(meetingId, String);
  check(voiceConf, String);
  check(clientSession, String);
  check(userId, String);
  check(callerName, String);
  check(callState, String);
  const selector = {
    meetingId,
    userId,
    clientSession
  };
  const modifier = {
    $set: {
      meetingId,
      userId,
      voiceConf,
      clientSession,
      callState
    }
  };

  try {
    const {
      numberAffected
    } = VoiceCallState.upsert(selector, modifier);

    if (numberAffected) {
      Logger.debug('Update voice call', {
        state: userId,
        meetingId,
        clientSession,
        callState
      });
    }
  } catch (err) {
    Logger.error("Update voice call state=".concat(userId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearVoiceCallStates.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-call-states/server/modifiers/clearVoiceCallStates.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearVoiceCallStates
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let VoiceCallStates;
module.link("/imports/api/voice-call-states", {
  default(v) {
    VoiceCallStates = v;
  }

}, 1);

function clearVoiceCallStates(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = VoiceCallStates.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared VoiceCallStates in (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.info("Error on clearing VoiceCallStates in (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = VoiceCallStates.remove({});

      if (numberAffected) {
        Logger.info('Cleared VoiceCallStates in all meetings');
      }
    } catch (err) {
      Logger.error("Error on clearing VoiceCallStates in all meetings. ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-call-states/server/eventHandlers.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let handleVoiceCallStateEvent;
module.link("./handlers/voiceCallStateEvent", {
  default(v) {
    handleVoiceCallStateEvent = v;
  }

}, 1);
RedisPubSub.on('VoiceCallStateEvtMsg', handleVoiceCallStateEvent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-call-states/server/index.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-call-states/server/publishers.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let VoiceCallStates;
module.link("/imports/api/voice-call-states", {
  default(v) {
    VoiceCallStates = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function voiceCallStates() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing VoiceCallStates was requested by unauth connection ".concat(this.connection.id));
    return VoiceCallStates.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing Voice Call States', {
    meetingId,
    userId
  });
  return VoiceCallStates.find({
    meetingId,
    userId
  });
}

function publish() {
  const boundVoiceCallStates = voiceCallStates.bind(this);
  return boundVoiceCallStates(...arguments);
}

Meteor.publish('voice-call-states', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-call-states/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const VoiceCallStates = new Mongo.Collection('voiceCallStates');

if (Meteor.isServer) {
  // types of queries for the voice users:
  // 1. intId
  // 2. meetingId, intId
  VoiceCallStates._ensureIndex({
    meetingId: 1,
    userId: 1
  });
}

module.exportDefault(VoiceCallStates);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"voice-users":{"server":{"handlers":{"floorChanged.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/floorChanged.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleFloorChange
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let updateVoiceUser;
module.link("../modifiers/updateVoiceUser", {
  default(v) {
    updateVoiceUser = v;
  }

}, 1);

function handleFloorChange(_ref, meetingId) {
  let {
    header,
    body
  } = _ref;
  const voiceUser = body;
  check(meetingId, String);
  return updateVoiceUser(meetingId, voiceUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getVoiceUsers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/getVoiceUsers.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleGetVoiceUsers
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let VoiceUsers;
module.link("/imports/api/voice-users/", {
  default(v) {
    VoiceUsers = v;
  }

}, 1);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 2);
let addVoiceUser;
module.link("../modifiers/addVoiceUser", {
  default(v) {
    addVoiceUser = v;
  }

}, 3);
let removeVoiceUser;
module.link("../modifiers/removeVoiceUser", {
  default(v) {
    removeVoiceUser = v;
  }

}, 4);
let updateVoiceUser;
module.link("../modifiers/updateVoiceUser", {
  default(v) {
    updateVoiceUser = v;
  }

}, 5);

function handleGetVoiceUsers(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    users
  } = body;
  check(meetingId, String);
  check(users, Array);
  const meeting = Meetings.findOne({
    meetingId
  }, {
    fields: {
      'voiceProp.voiceConf': 1
    }
  });
  const usersIds = users.map(m => m.intId);
  const voiceUsersIdsToUpdate = VoiceUsers.find({
    meetingId,
    intId: {
      $in: usersIds
    }
  }, {
    fields: {
      intId: 1
    }
  }).fetch().map(m => m.intId);
  users.forEach(user => {
    if (voiceUsersIdsToUpdate.indexOf(user.intId) >= 0) {
      // user already exist, then update
      updateVoiceUser(meetingId, {
        intId: user.intId,
        voiceUserId: user.voiceUserId,
        talking: user.talking,
        muted: user.muted,
        voiceConf: meeting.voiceProp.voiceConf,
        joined: true
      });
    } else {
      // user doesn't exist yet, then add it
      addVoiceUser(meetingId, {
        voiceUserId: user.voiceUserId,
        intId: user.intId,
        callerName: user.callerName,
        callerNum: user.callerNum,
        muted: user.muted,
        talking: user.talking,
        callingWith: user.callingWith,
        listenOnly: user.listenOnly,
        voiceConf: meeting.voiceProp.voiceConf,
        joined: true
      });
    }
  }); // removing extra users already existing in Mongo

  const voiceUsersToRemove = VoiceUsers.find({
    meetingId,
    intId: {
      $nin: usersIds
    }
  }).fetch();
  voiceUsersToRemove.forEach(user => removeVoiceUser(meetingId, {
    voiceConf: meeting.voiceProp.voiceConf,
    voiceUserId: user.voiceUserId,
    intId: user.intId
  }));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinVoiceUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/joinVoiceUser.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleJoinVoiceUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 1);
let addDialInUser;
module.link("/imports/api/users/server/modifiers/addDialInUser", {
  default(v) {
    addDialInUser = v;
  }

}, 2);
let addVoiceUser;
module.link("../modifiers/addVoiceUser", {
  default(v) {
    addVoiceUser = v;
  }

}, 3);

function handleJoinVoiceUser(_ref, meetingId) {
  let {
    body
  } = _ref;
  const voiceUser = body;
  voiceUser.joined = true;
  check(meetingId, String);
  check(voiceUser, {
    voiceConf: String,
    intId: String,
    voiceUserId: String,
    callerName: String,
    callerNum: String,
    muted: Boolean,
    talking: Boolean,
    callingWith: String,
    listenOnly: Boolean,
    joined: Boolean
  });
  const {
    intId
  } = voiceUser;
  const User = Users.findOne({
    meetingId,
    intId
  });

  if (!User) {
    /* voice-only user - called into the conference */
    addDialInUser(meetingId, voiceUser);
  }

  return addVoiceUser(meetingId, voiceUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"leftVoiceUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/leftVoiceUser.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleVoiceUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let removeVoiceUser;
module.link("/imports/api/voice-users/server/modifiers/removeVoiceUser", {
  default(v) {
    removeVoiceUser = v;
  }

}, 1);
let removeUser;
module.link("/imports/api/users/server/modifiers/removeUser", {
  default(v) {
    removeUser = v;
  }

}, 2);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 3);

function handleVoiceUpdate(_ref, meetingId) {
  let {
    body
  } = _ref;
  const voiceUser = body;
  check(meetingId, String);
  check(voiceUser, {
    voiceConf: String,
    intId: String,
    voiceUserId: String
  });
  const {
    intId,
    voiceUserId
  } = voiceUser;

  const isDialInUser = (userId, meetingID) => !!Users.findOne({
    meetingId: meetingID,
    userId,
    clientType: 'dial-in-user'
  }); // if the user is dial-in, leaving voice also means leaving userlist


  if (isDialInUser(voiceUserId, meetingId)) removeUser(meetingId, intId);
  return removeVoiceUser(meetingId, voiceUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meetingMuted.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/meetingMuted.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleMeetingMuted
});
let changeMuteMeeting;
module.link("../modifiers/changeMuteMeeting", {
  default(v) {
    changeMuteMeeting = v;
  }

}, 0);

function handleMeetingMuted(_ref, meetingId) {
  let {
    body
  } = _ref;
  changeMuteMeeting(meetingId, body);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutedVoiceUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/mutedVoiceUser.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleVoiceUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let updateVoiceUser;
module.link("../modifiers/updateVoiceUser", {
  default(v) {
    updateVoiceUser = v;
  }

}, 1);

function handleVoiceUpdate(_ref, meetingId) {
  let {
    body
  } = _ref;
  const voiceUser = body;
  check(meetingId, String); // If a person is muted we have to force them to not talking

  if (voiceUser.muted) {
    voiceUser.talking = false;
  }

  return updateVoiceUser(meetingId, voiceUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"talkingVoiceUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/talkingVoiceUser.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleVoiceUpdate
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let updateVoiceUser;
module.link("../modifiers/updateVoiceUser", {
  default(v) {
    updateVoiceUser = v;
  }

}, 1);

function handleVoiceUpdate(_ref, meetingId) {
  let {
    body
  } = _ref;
  const voiceUser = body;
  check(meetingId, String);
  return updateVoiceUser(meetingId, voiceUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"voiceUsers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/handlers/voiceUsers.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleVoiceUsers
});
let VoiceUsers;
module.link("/imports/api/voice-users/", {
  default(v) {
    VoiceUsers = v;
  }

}, 0);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 1);
let addDialInUser;
module.link("/imports/api/users/server/modifiers/addDialInUser", {
  default(v) {
    addDialInUser = v;
  }

}, 2);
let removeVoiceUser;
module.link("../modifiers/removeVoiceUser", {
  default(v) {
    removeVoiceUser = v;
  }

}, 3);
let updateVoiceUser;
module.link("../modifiers/updateVoiceUser", {
  default(v) {
    updateVoiceUser = v;
  }

}, 4);
let addVoiceUser;
module.link("../modifiers/addVoiceUser", {
  default(v) {
    addVoiceUser = v;
  }

}, 5);

function handleVoiceUsers(_ref) {
  let {
    header,
    body
  } = _ref;
  const {
    voiceUsers
  } = body;
  const {
    meetingId
  } = header;
  const meeting = Meetings.findOne({
    meetingId
  }, {
    fields: {
      'voiceProp.voiceConf': 1
    }
  });
  const usersIds = voiceUsers.map(m => m.intId);
  const voiceUsersIdsToUpdate = VoiceUsers.find({
    meetingId,
    intId: {
      $in: usersIds
    }
  }, {
    fields: {
      intId: 1
    }
  }).fetch().map(m => m.intId);
  voiceUsers.forEach(voice => {
    if (voiceUsersIdsToUpdate.indexOf(voice.intId) >= 0) {
      // user already exist, then update
      updateVoiceUser(meetingId, {
        intId: voice.intId,
        voiceUserId: voice.voiceUserId,
        talking: voice.talking,
        muted: voice.muted,
        voiceConf: meeting.voiceProp.voiceConf,
        joined: true
      });
    } else {
      // user doesn't exist yet, then add it
      addVoiceUser(meetingId, {
        voiceUserId: voice.voiceUserId,
        intId: voice.intId,
        callerName: voice.callerName,
        callerNum: voice.callerNum,
        muted: voice.muted,
        talking: voice.talking,
        callingWith: voice.callingWith,
        listenOnly: voice.listenOnly,
        voiceConf: meeting.voiceProp.voiceConf,
        joined: true
      });
      addDialInUser(meetingId, voice);
    }
  }); // removing extra users already existing in Mongo

  const voiceUsersToRemove = VoiceUsers.find({
    meetingId,
    intId: {
      $nin: usersIds
    }
  }, {
    fields: {
      voiceUserId: 1,
      intId: 1
    }
  }).fetch();
  voiceUsersToRemove.forEach(user => removeVoiceUser(meetingId, {
    voiceConf: meeting.voiceProp.voiceConf,
    voiceUserId: user.voiceUserId,
    intId: user.intId
  }));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"ejectUserFromVoice.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/methods/ejectUserFromVoice.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => ejectUserFromVoice
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function ejectUserFromVoice(userId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'EjectUserFromVoiceCmdMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    check(userId, String);
    const payload = {
      userId,
      ejectedBy: requesterUserId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method ejectUserFromVoice ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"muteAllExceptPresenterToggle.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/methods/muteAllExceptPresenterToggle.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => muteAllExceptPresenterToggle
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function muteAllExceptPresenterToggle() {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'MuteAllExceptPresentersCmdMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const meeting = Meetings.findOne({
      meetingId
    });
    const toggleMeetingMuted = !meeting.voiceProp.muteOnStart;
    const payload = {
      mutedBy: requesterUserId,
      mute: toggleMeetingMuted
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method muteAllExceptPresenterToggle ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"muteAllToggle.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/methods/muteAllToggle.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => muteAllToggle
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 1);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function muteAllToggle() {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'MuteMeetingCmdMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const meeting = Meetings.findOne({
      meetingId
    });
    const toggleMeetingMuted = !meeting.voiceProp.muteOnStart;
    const payload = {
      mutedBy: requesterUserId,
      mute: toggleMeetingMuted
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method muteAllToggle ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"muteToggle.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/methods/muteToggle.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => muteToggle
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 1);
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 2);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 3);
let VoiceUsers;
module.link("/imports/api/voice-users", {
  default(v) {
    VoiceUsers = v;
  }

}, 4);
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 5);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 6);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 7);

function muteToggle(uId, toggle) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'MuteUserCmdMsg';
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const userToMute = uId || requesterUserId;
    const requester = Users.findOne({
      meetingId,
      userId: requesterUserId
    });
    const voiceUser = VoiceUsers.findOne({
      intId: userToMute,
      meetingId
    });
    if (!requester || !voiceUser) return;
    const {
      listenOnly,
      muted
    } = voiceUser;
    if (listenOnly) return; // if allowModsToUnmuteUsers is false, users will be kicked out for attempting to unmute others

    if (requesterUserId !== userToMute && muted) {
      const meeting = Meetings.findOne({
        meetingId
      }, {
        fields: {
          'usersProp.allowModsToUnmuteUsers': 1
        }
      });

      if (meeting.usersProp && !meeting.usersProp.allowModsToUnmuteUsers) {
        Logger.warn("Attempted unmuting by another user meetingId:".concat(meetingId, " requester: ").concat(requesterUserId, " userId: ").concat(userToMute));
        return;
      }
    }

    let _muted;

    if (toggle === undefined || toggle === null) {
      _muted = !muted;
    } else {
      _muted = !!toggle;
    }

    const payload = {
      userId: userToMute,
      mutedBy: requesterUserId,
      mute: _muted
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method muteToggle ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"addVoiceUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/modifiers/addVoiceUser.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addVoiceUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let VoiceUsers;
module.link("/imports/api/voice-users", {
  default(v) {
    VoiceUsers = v;
  }

}, 2);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 3);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 4);

function addVoiceUser(meetingId, voiceUser) {
  check(meetingId, String);
  check(voiceUser, {
    voiceUserId: String,
    intId: String,
    callerName: String,
    callerNum: String,
    muted: Boolean,
    talking: Boolean,
    callingWith: String,
    listenOnly: Boolean,
    voiceConf: String,
    joined: Boolean // This is a HTML5 only param.

  });
  const {
    intId,
    talking
  } = voiceUser;
  const selector = {
    meetingId,
    intId
  };
  const modifier = {
    $set: Object.assign({
      meetingId,
      spoke: talking
    }, flat(voiceUser))
  };
  const user = Users.findOne({
    meetingId,
    userId: intId
  }, {
    fields: {
      color: 1
    }
  });
  if (user) modifier.$set.color = user.color;

  try {
    const {
      numberAffected
    } = VoiceUsers.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Add voice user=".concat(intId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Add voice user=".concat(intId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"changeMuteMeeting.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/modifiers/changeMuteMeeting.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => changeMuteMeeting
});
let Meetings;
module.link("/imports/api/meetings", {
  default(v) {
    Meetings = v;
  }

}, 0);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);

function changeMuteMeeting(meetingId, payload) {
  check(meetingId, String);
  check(payload, {
    muted: Boolean,
    mutedBy: String
  });
  const selector = {
    meetingId
  };
  const modifier = {
    $set: {
      'voiceProp.muteOnStart': payload.muted
    }
  };

  try {
    const {
      numberAffected
    } = Meetings.upsert(selector, modifier);

    if (numberAffected) {
      Logger.info("Changed meeting mute status meeting=".concat(meetingId));
    }
  } catch (err) {
    Logger.error("Changing meeting mute status meeting={".concat(meetingId, "} ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"clearVoiceUsers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/modifiers/clearVoiceUsers.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearVoiceUser
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let VoiceUsers;
module.link("/imports/api/voice-users", {
  default(v) {
    VoiceUsers = v;
  }

}, 1);

function clearVoiceUser(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = VoiceUsers.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared VoiceUsers in (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.error("Error on clearing VoiceUsers in ".concat(meetingId, ". ").concat(err));
    }
  } else {
    try {
      const numberAffected = VoiceUsers.remove({});

      if (numberAffected) {
        Logger.info('Cleared VoiceUsers in all meetings');
      }
    } catch (err) {
      Logger.error("Error on clearing VoiceUsers. ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeVoiceUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/modifiers/removeVoiceUser.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeVoiceUser
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let VoiceUsers;
module.link("/imports/api/voice-users", {
  default(v) {
    VoiceUsers = v;
  }

}, 2);
let clearSpokeTimeout;
module.link("/imports/api/common/server/helpers", {
  clearSpokeTimeout(v) {
    clearSpokeTimeout = v;
  }

}, 3);

function removeVoiceUser(meetingId, voiceUser) {
  check(meetingId, String);
  check(voiceUser, {
    voiceConf: String,
    voiceUserId: String,
    intId: String
  });
  const {
    intId
  } = voiceUser;
  const selector = {
    meetingId,
    intId
  };
  const modifier = {
    $set: {
      muted: false,
      talking: false,
      listenOnly: false,
      joined: false,
      spoke: false
    }
  };

  try {
    clearSpokeTimeout(meetingId, intId);
    const numberAffected = VoiceUsers.update(selector, modifier);

    if (numberAffected) {
      Logger.info("Remove voiceUser=".concat(intId, " meeting=").concat(meetingId));
    }
  } catch (err) {
    Logger.error("Remove voiceUser=".concat(intId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateVoiceUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/modifiers/updateVoiceUser.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => updateVoiceUser
});
let Match, check;
module.link("meteor/check", {
  Match(v) {
    Match = v;
  },

  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let VoiceUsers;
module.link("/imports/api/voice-users", {
  default(v) {
    VoiceUsers = v;
  }

}, 2);
let flat;
module.link("flat", {
  default(v) {
    flat = v;
  }

}, 3);
let spokeTimeoutHandles, clearSpokeTimeout;
module.link("/imports/api/common/server/helpers", {
  spokeTimeoutHandles(v) {
    spokeTimeoutHandles = v;
  },

  clearSpokeTimeout(v) {
    clearSpokeTimeout = v;
  }

}, 4);
const TALKING_TIMEOUT = 6000;

function updateVoiceUser(meetingId, voiceUser) {
  check(meetingId, String);
  check(voiceUser, {
    intId: String,
    voiceUserId: String,
    talking: Match.Maybe(Boolean),
    muted: Match.Maybe(Boolean),
    voiceConf: String,
    joined: Match.Maybe(Boolean),
    floor: Match.Maybe(Boolean),
    lastFloorTime: Match.Maybe(String)
  });
  const {
    intId
  } = voiceUser;
  const selector = {
    meetingId,
    intId
  };
  const modifier = {
    $set: Object.assign(flat(voiceUser))
  };

  if (voiceUser.talking) {
    const user = VoiceUsers.findOne({
      meetingId,
      intId
    }, {
      fields: {
        startTime: 1
      }
    });
    if (user && !user.startTime) modifier.$set.startTime = Date.now();
    modifier.$set.spoke = true;
    modifier.$set.endTime = null;
    clearSpokeTimeout(meetingId, intId);
  }

  if (!voiceUser.talking) {
    const timeoutHandle = Meteor.setTimeout(() => {
      const user = VoiceUsers.findOne({
        meetingId,
        intId
      }, {
        fields: {
          endTime: 1,
          talking: 1
        }
      });

      if (user) {
        const {
          endTime,
          talking
        } = user;
        const spokeDelay = Date.now() - endTime < TALKING_TIMEOUT;
        if (talking || spokeDelay) return;
        modifier.$set.spoke = false;
        modifier.$set.startTime = null;

        try {
          const numberAffected = VoiceUsers.update(selector, modifier);

          if (numberAffected) {
            Logger.debug('Update voiceUser', {
              voiceUser: intId,
              meetingId
            });
          }
        } catch (err) {
          Logger.error("Update voiceUser=".concat(intId, ": ").concat(err));
        }
      }
    }, TALKING_TIMEOUT);
    spokeTimeoutHandles["".concat(meetingId, "-").concat(intId)] = timeoutHandle;
    modifier.$set.endTime = Date.now();
  }

  try {
    const numberAffected = VoiceUsers.update(selector, modifier);

    if (numberAffected) {
      Logger.debug('Update voiceUser', {
        voiceUser: intId,
        meetingId
      });
    }
  } catch (err) {
    Logger.error("Update voiceUser=".concat(intId, ": ").concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/eventHandlers.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let processForHTML5ServerOnly;
module.link("/imports/api/common/server/helpers", {
  processForHTML5ServerOnly(v) {
    processForHTML5ServerOnly = v;
  }

}, 1);
let handleJoinVoiceUser;
module.link("./handlers/joinVoiceUser", {
  default(v) {
    handleJoinVoiceUser = v;
  }

}, 2);
let handleLeftVoiceUser;
module.link("./handlers/leftVoiceUser", {
  default(v) {
    handleLeftVoiceUser = v;
  }

}, 3);
let handleTalkingVoiceUser;
module.link("./handlers/talkingVoiceUser", {
  default(v) {
    handleTalkingVoiceUser = v;
  }

}, 4);
let handleMutedVoiceUser;
module.link("./handlers/mutedVoiceUser", {
  default(v) {
    handleMutedVoiceUser = v;
  }

}, 5);
let handleGetVoiceUsers;
module.link("./handlers/getVoiceUsers", {
  default(v) {
    handleGetVoiceUsers = v;
  }

}, 6);
let handleVoiceUsers;
module.link("./handlers/voiceUsers", {
  default(v) {
    handleVoiceUsers = v;
  }

}, 7);
let handleMeetingMuted;
module.link("./handlers/meetingMuted", {
  default(v) {
    handleMeetingMuted = v;
  }

}, 8);
let handleFloorChange;
module.link("./handlers/floorChanged", {
  default(v) {
    handleFloorChange = v;
  }

}, 9);
RedisPubSub.on('UserLeftVoiceConfToClientEvtMsg', handleLeftVoiceUser);
RedisPubSub.on('UserJoinedVoiceConfToClientEvtMsg', handleJoinVoiceUser);
RedisPubSub.on('UserTalkingVoiceEvtMsg', handleTalkingVoiceUser);
RedisPubSub.on('UserMutedVoiceEvtMsg', handleMutedVoiceUser);
RedisPubSub.on('GetVoiceUsersMeetingRespMsg', processForHTML5ServerOnly(handleGetVoiceUsers));
RedisPubSub.on('SyncGetVoiceUsersRespMsg', handleVoiceUsers);
RedisPubSub.on('MeetingMutedEvtMsg', handleMeetingMuted);
RedisPubSub.on('AudioFloorChangedEvtMsg', handleFloorChange);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./publishers");
module.link("./methods");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/methods.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let muteToggle;
module.link("./methods/muteToggle", {
  default(v) {
    muteToggle = v;
  }

}, 1);
let muteAllToggle;
module.link("./methods/muteAllToggle", {
  default(v) {
    muteAllToggle = v;
  }

}, 2);
let muteAllExceptPresenterToggle;
module.link("./methods/muteAllExceptPresenterToggle", {
  default(v) {
    muteAllExceptPresenterToggle = v;
  }

}, 3);
let ejectUserFromVoice;
module.link("./methods/ejectUserFromVoice", {
  default(v) {
    ejectUserFromVoice = v;
  }

}, 4);
Meteor.methods({
  toggleVoice: muteToggle,
  muteAllUsers: muteAllToggle,
  muteAllExceptPresenter: muteAllExceptPresenterToggle,
  ejectUserFromVoice
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/server/publishers.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let VoiceUsers;
module.link("/imports/api/voice-users", {
  default(v) {
    VoiceUsers = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);
let ejectUserFromVoice;
module.link("./methods/ejectUserFromVoice", {
  default(v) {
    ejectUserFromVoice = v;
  }

}, 4);

function voiceUser() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing VoiceUsers was requested by unauth connection ".concat(this.connection.id));
    return VoiceUsers.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId: requesterUserId
  } = tokenValidation;
  const onCloseConnection = Meteor.bindEnvironment(() => {
    try {
      // I used user because voiceUser is the function's name
      const User = VoiceUsers.findOne({
        meetingId,
        requesterUserId
      });

      if (User) {
        ejectUserFromVoice(requesterUserId);
      }
    } catch (e) {
      Logger.error("Exception while executing ejectUserFromVoice for ".concat(requesterUserId, ": ").concat(e));
    }
  });
  Logger.debug('Publishing Voice User', {
    meetingId,
    requesterUserId
  });

  this._session.socket.on('close', _.debounce(onCloseConnection, 100));

  return VoiceUsers.find({
    meetingId
  });
}

function publish() {
  const boundVoiceUser = voiceUser.bind(this);
  return boundVoiceUser(...arguments);
}

Meteor.publish('voiceUsers', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/voice-users/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const VoiceUsers = new Mongo.Collection('voiceUsers');

if (Meteor.isServer) {
  // types of queries for the voice users:
  // 1. intId
  // 2. meetingId, intId
  VoiceUsers._ensureIndex({
    intId: 1
  });

  VoiceUsers._ensureIndex({
    meetingId: 1,
    intId: 1
  });
}

module.exportDefault(VoiceUsers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"whiteboard-multi-user":{"server":{"handlers":{"modifyWhiteboardAccess.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/handlers/modifyWhiteboardAccess.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => handleModifyWhiteboardAccess
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let modifyWhiteboardAccess;
module.link("../modifiers/modifyWhiteboardAccess", {
  default(v) {
    modifyWhiteboardAccess = v;
  }

}, 1);

function handleModifyWhiteboardAccess(_ref, meetingId) {
  let {
    body
  } = _ref;
  const {
    multiUser,
    whiteboardId
  } = body;
  check(multiUser, Array);
  check(whiteboardId, String);
  check(meetingId, String);
  return modifyWhiteboardAccess(meetingId, whiteboardId, multiUser);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"addGlobalAccess.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/methods/addGlobalAccess.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addGlobalAccess
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let getUsers;
module.link("/imports/api/whiteboard-multi-user/server/helpers", {
  getUsers(v) {
    getUsers = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function addGlobalAccess(whiteboardId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ModifyWhiteboardAccessPubMsg';
    check(whiteboardId, String);
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const multiUser = getUsers(meetingId);
    const payload = {
      multiUser,
      whiteboardId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method addGlobalAccess ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addIndividualAccess.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/methods/addIndividualAccess.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => addIndividualAccess
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let getMultiUser;
module.link("/imports/api/whiteboard-multi-user/server/helpers", {
  getMultiUser(v) {
    getMultiUser = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function addIndividualAccess(whiteboardId, userId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ModifyWhiteboardAccessPubMsg';
    check(whiteboardId, String);
    check(userId, String);
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const multiUser = getMultiUser(meetingId, whiteboardId);

    if (!multiUser.includes(userId)) {
      multiUser.push(userId);
      const payload = {
        multiUser,
        whiteboardId
      };
      RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
    }
  } catch (err) {
    Logger.error("Exception while invoking method addIndividualAccess ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeGlobalAccess.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/methods/removeGlobalAccess.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeGlobalAccess
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 3);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 4);

function removeGlobalAccess(whiteboardId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ModifyWhiteboardAccessPubMsg';
    check(whiteboardId, String);
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const payload = {
      multiUser: [],
      whiteboardId
    };
    RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
  } catch (err) {
    Logger.error("Exception while invoking method removeGlobalAccess ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeIndividualAccess.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/methods/removeIndividualAccess.js                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => removeIndividualAccess
});
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 2);
let getMultiUser;
module.link("/imports/api/whiteboard-multi-user/server/helpers", {
  getMultiUser(v) {
    getMultiUser = v;
  }

}, 3);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 4);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 5);

function removeIndividualAccess(whiteboardId, userId) {
  try {
    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'ModifyWhiteboardAccessPubMsg';
    check(whiteboardId, String);
    check(userId, String);
    const {
      meetingId,
      requesterUserId
    } = extractCredentials(this.userId);
    check(meetingId, String);
    check(requesterUserId, String);
    const multiUser = getMultiUser(meetingId, whiteboardId);

    if (multiUser.includes(userId)) {
      const payload = {
        multiUser: multiUser.filter(id => id !== userId),
        whiteboardId
      };
      RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);
    }
  } catch (err) {
    Logger.error("Exception while invoking method removeIndividualAccess ".concat(err.stack));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modifiers":{"clearWhiteboardMultiUser.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/modifiers/clearWhiteboardMultiUser.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => clearWhiteboardMultiUser
});
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let WhiteboardMultiUser;
module.link("/imports/api/whiteboard-multi-user", {
  default(v) {
    WhiteboardMultiUser = v;
  }

}, 1);

function clearWhiteboardMultiUser(meetingId) {
  if (meetingId) {
    try {
      const numberAffected = WhiteboardMultiUser.remove({
        meetingId
      });

      if (numberAffected) {
        Logger.info("Cleared WhiteboardMultiUser (".concat(meetingId, ")"));
      }
    } catch (err) {
      Logger.info("Error clearing WhiteboardMultiUser (".concat(meetingId, "). ").concat(err));
    }
  } else {
    try {
      const numberAffected = WhiteboardMultiUser.remove({});

      if (numberAffected) {
        Logger.info('Cleared WhiteboardMultiUser (all)');
      }
    } catch (err) {
      Logger.info("Error clearing WhiteboardMultiUser (all). ".concat(err));
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"modifyWhiteboardAccess.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/modifiers/modifyWhiteboardAccess.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => modifyWhiteboardAccess
});
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 0);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 1);
let WhiteboardMultiUser;
module.link("/imports/api/whiteboard-multi-user/", {
  default(v) {
    WhiteboardMultiUser = v;
  }

}, 2);

function modifyWhiteboardAccess(meetingId, whiteboardId, multiUser) {
  check(meetingId, String);
  check(whiteboardId, String);
  check(multiUser, Array);
  const selector = {
    meetingId,
    whiteboardId
  };
  const modifier = {
    meetingId,
    whiteboardId,
    multiUser
  };

  try {
    const {
      insertedId
    } = WhiteboardMultiUser.upsert(selector, modifier);

    if (insertedId) {
      Logger.info("Added multiUser flag=".concat(multiUser, " meetingId=").concat(meetingId, " whiteboardId=").concat(whiteboardId));
    } else {
      Logger.info("Upserted multiUser flag=".concat(multiUser, " meetingId=").concat(meetingId, " whiteboardId=").concat(whiteboardId));
    }
  } catch (err) {
    Logger.error("Error while adding an entry to Multi-User collection: ".concat(err));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"eventHandlers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/eventHandlers.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RedisPubSub;
module.link("/imports/startup/server/redis", {
  default(v) {
    RedisPubSub = v;
  }

}, 0);
let processForHTML5ServerOnly;
module.link("/imports/api/common/server/helpers", {
  processForHTML5ServerOnly(v) {
    processForHTML5ServerOnly = v;
  }

}, 1);
let handleGetWhiteboardAccess;
module.link("./handlers/modifyWhiteboardAccess", {
  default(v) {
    handleGetWhiteboardAccess = v;
  }

}, 2);
RedisPubSub.on('GetWhiteboardAccessRespMsg', processForHTML5ServerOnly(handleGetWhiteboardAccess));
RedisPubSub.on('SyncGetWhiteboardAccessRespMsg', handleGetWhiteboardAccess);
RedisPubSub.on('ModifyWhiteboardAccessEvtMsg', handleGetWhiteboardAccess);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/helpers.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  getMultiUser: () => getMultiUser,
  getUsers: () => getUsers
});
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 0);
let WhiteboardMultiUser;
module.link("/imports/api/whiteboard-multi-user/", {
  default(v) {
    WhiteboardMultiUser = v;
  }

}, 1);

const getMultiUser = (meetingId, whiteboardId) => {
  const data = WhiteboardMultiUser.findOne({
    meetingId,
    whiteboardId
  }, {
    fields: {
      multiUser: 1
    }
  });
  if (!data || !data.multiUser || !Array.isArray(data.multiUser)) return [];
  return data.multiUser;
};

const getUsers = meetingId => {
  const data = Users.find({
    meetingId
  }, {
    fields: {
      userId: 1
    }
  }).fetch();
  if (!data) return [];
  return data.map(user => user.userId);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/index.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("./eventHandlers");
module.link("./methods");
module.link("./publishers");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"methods.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/methods.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let addGlobalAccess;
module.link("./methods/addGlobalAccess", {
  default(v) {
    addGlobalAccess = v;
  }

}, 1);
let addIndividualAccess;
module.link("./methods/addIndividualAccess", {
  default(v) {
    addIndividualAccess = v;
  }

}, 2);
let removeGlobalAccess;
module.link("./methods/removeGlobalAccess", {
  default(v) {
    removeGlobalAccess = v;
  }

}, 3);
let removeIndividualAccess;
module.link("./methods/removeIndividualAccess", {
  default(v) {
    removeIndividualAccess = v;
  }

}, 4);
Meteor.methods({
  addGlobalAccess,
  addIndividualAccess,
  removeGlobalAccess,
  removeIndividualAccess
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"publishers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/server/publishers.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let WhiteboardMultiUser;
module.link("/imports/api/whiteboard-multi-user/", {
  default(v) {
    WhiteboardMultiUser = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let AuthTokenValidation, ValidationStates;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  },

  ValidationStates(v) {
    ValidationStates = v;
  }

}, 3);

function whiteboardMultiUser() {
  const tokenValidation = AuthTokenValidation.findOne({
    connectionId: this.connection.id
  });

  if (!tokenValidation || tokenValidation.validationStatus !== ValidationStates.VALIDATED) {
    Logger.warn("Publishing WhiteboardMultiUser was requested by unauth connection ".concat(this.connection.id));
    return WhiteboardMultiUser.find({
      meetingId: ''
    });
  }

  const {
    meetingId,
    userId
  } = tokenValidation;
  Logger.debug('Publishing WhiteboardMultiUser', {
    meetingId,
    userId
  });
  return WhiteboardMultiUser.find({
    meetingId
  });
}

function publish() {
  const boundMultiUser = whiteboardMultiUser.bind(this);
  return boundMultiUser(...arguments);
}

Meteor.publish('whiteboard-multi-user', publish);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/whiteboard-multi-user/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
const WhiteboardMultiUser = new Mongo.Collection('whiteboard-multi-user');

if (Meteor.isServer) {
  // types of queries for the whiteboard-multi-user:
  // 1. meetingId
  WhiteboardMultiUser._ensureIndex({
    meetingId: 1
  });
}

module.exportDefault(WhiteboardMultiUser);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"common":{"server":{"etherpad.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/common/server/etherpad.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  hashSHA1: () => hashSHA1,
  createPadURL: () => createPadURL,
  getReadOnlyIdURL: () => getReadOnlyIdURL,
  appendTextURL: () => appendTextURL,
  initPads: () => initPads,
  withInstaceId: () => withInstaceId
});
let axios;
module.link("axios", {
  default(v) {
    axios = v;
  }

}, 0);
let sha1;
module.link("crypto-js/sha1", {
  default(v) {
    sha1 = v;
  }

}, 1);
let Logger;
module.link("/imports/startup/server/logger", {
  default(v) {
    Logger = v;
  }

}, 2);
let createNote;
module.link("/imports/api/note/server/methods/createNote", {
  default(v) {
    createNote = v;
  }

}, 3);
let createCaptions;
module.link("/imports/api/captions/server/methods/createCaptions", {
  default(v) {
    createCaptions = v;
  }

}, 4);
const ETHERPAD = Meteor.settings.private.etherpad;
const BASE_URL = "http://".concat(ETHERPAD.host, ":").concat(ETHERPAD.port, "/api/").concat(ETHERPAD.version);
const HASH_SIZE = 36;

const createPadURL = padId => "".concat(BASE_URL, "/createPad?apikey=").concat(ETHERPAD.apikey, "&padID=").concat(padId);

const getReadOnlyIdURL = padId => "".concat(BASE_URL, "/getReadOnlyID?apikey=").concat(ETHERPAD.apikey, "&padID=").concat(padId);

const appendTextURL = (padId, text) => "".concat(BASE_URL, "/appendText?apikey=").concat(ETHERPAD.apikey, "&padID=").concat(padId, "&text=").concat(encodeURIComponent(text));

const checkTokenURL = () => "".concat(BASE_URL, "/checkToken?apikey=").concat(ETHERPAD.apikey);

const hashSHA1 = str => sha1(str).toString().substring(0, HASH_SIZE);

const checkServer = () => {
  return new Promise((resolve, reject) => {
    axios({
      method: 'get',
      url: checkTokenURL(),
      responseType: 'json'
    }).then(response => {
      const {
        status
      } = response;
      if (status !== 200) return reject();
      const {
        message
      } = response.data;
      if (message !== 'ok') return reject();
      resolve();
    }).catch(() => reject());
  });
};

const initPads = (meetingId, html5InstanceId) => {
  checkServer().then(() => {
    createNote(meetingId, html5InstanceId);
    createCaptions(meetingId, html5InstanceId);
  }).catch(() => Logger.error("Pads' server unreachable"));
};

const withInstaceId = (instanceId, id) => "[".concat(instanceId, "]").concat(id);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/common/server/helpers.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  spokeTimeoutHandles: () => spokeTimeoutHandles,
  clearSpokeTimeout: () => clearSpokeTimeout,
  indexOf: () => indexOf,
  processForHTML5ServerOnly: () => processForHTML5ServerOnly,
  extractCredentials: () => extractCredentials
});
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 0);
const MSG_DIRECT_TYPE = 'DIRECT';
const NODE_USER = 'nodeJSapp';
const spokeTimeoutHandles = {};

const clearSpokeTimeout = (meetingId, userId) => {
  if (spokeTimeoutHandles["".concat(meetingId, "-").concat(userId)]) {
    Meteor.clearTimeout(spokeTimeoutHandles["".concat(meetingId, "-").concat(userId)]);
    delete spokeTimeoutHandles["".concat(meetingId, "-").concat(userId)];
  }
};

const indexOf = [].indexOf || function (item) {
  for (let i = 0, l = this.length; i < l; i += 1) {
    if (i in this && this[i] === item) {
      return i;
    }
  }

  return -1;
};

const processForHTML5ServerOnly = fn => function (message) {
  const {
    envelope
  } = message;
  const {
    routing
  } = envelope;
  const {
    msgType,
    meetingId,
    userId
  } = routing;
  const selector = {
    userId,
    meetingId
  };
  const user = Users.findOne(selector);
  const shouldSkip = user && msgType === MSG_DIRECT_TYPE && userId !== NODE_USER && user.clientType !== 'HTML5';
  if (shouldSkip) return () => {};

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return fn(message, ...args);
};

const extractCredentials = credentials => {
  if (!credentials) return {};
  const credentialsArray = credentials.split('--');
  const meetingId = credentialsArray[0];
  const requesterUserId = credentialsArray[1];
  return {
    meetingId,
    requesterUserId
  };
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"startup":{"server":{"ClientConnections.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/ClientConnections.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Logger;
module.link("./logger", {
  default(v) {
    Logger = v;
  }

}, 0);
let userLeaving;
module.link("/imports/api/users/server/methods/userLeaving", {
  default(v) {
    userLeaving = v;
  }

}, 1);
let extractCredentials;
module.link("/imports/api/common/server/helpers", {
  extractCredentials(v) {
    extractCredentials = v;
  }

}, 2);
let AuthTokenValidation;
module.link("/imports/api/auth-token-validation", {
  default(v) {
    AuthTokenValidation = v;
  }

}, 3);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 4);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 5);
const {
  enabled,
  syncInterval
} = Meteor.settings.public.syncUsersWithConnectionManager;

class ClientConnections {
  constructor() {
    Logger.debug('Initializing client connections structure', {
      logCode: 'client_connections_init'
    });
    this.connections = new Map();
    setInterval(() => {
      this.print();
    }, 30000);

    if (enabled) {
      const syncConnections = Meteor.bindEnvironment(() => {
        this.syncConnectionsWithServer();
      });
      setInterval(() => {
        syncConnections();
      }, syncInterval);
    }
  }

  add(sessionId, connection) {
    Logger.info('Client connections add called', {
      logCode: 'client_connections_add',
      extraInfo: {
        sessionId,
        connection
      }
    });

    if (!sessionId || !connection) {
      Logger.error("Error on add new client connection. sessionId=".concat(sessionId, " connection=").concat(connection.id), {
        logCode: 'client_connections_add_error',
        extraInfo: {
          sessionId,
          connection
        }
      });
      return;
    }

    const {
      meetingId,
      requesterUserId: userId
    } = extractCredentials(sessionId);
    check(meetingId, String);
    check(userId, String);

    if (!meetingId) {
      Logger.error("Error on add new client connection. sessionId=".concat(sessionId, " connection=").concat(connection.id), {
        logCode: 'client_connections_add_error_meeting_id_null',
        extraInfo: {
          meetingId,
          userId
        }
      });
      return false;
    }

    if (!this.exists(meetingId)) {
      Logger.info("Meeting not found in connections: meetingId=".concat(meetingId));
      this.createMeetingConnections(meetingId);
    }

    const sessionConnections = this.connections.get(meetingId);

    if (sessionConnections.has(userId) && sessionConnections.get(userId).includes(connection.id)) {
      Logger.info("Connection already exists for user. userId=".concat(userId, " connectionId=").concat(connection.id));
      return false;
    }

    connection.onClose(Meteor.bindEnvironment(() => {
      userLeaving(meetingId, userId, connection.id);
    }));
    Logger.info("Adding new connection for sessionId=".concat(sessionId, " connection=").concat(connection.id));

    if (!sessionConnections.has(userId)) {
      Logger.info("Creating connections poll for ".concat(userId));
      sessionConnections.set(userId, []);
      return sessionConnections.get(userId).push(connection.id);
    } else {
      return sessionConnections.get(userId).push(connection.id);
    }
  }

  createMeetingConnections(meetingId) {
    Logger.info("Creating meeting in connections. meetingId=".concat(meetingId));
    if (!this.exists(meetingId)) return this.connections.set(meetingId, new Map());
  }

  exists(meetingId) {
    return this.connections.has(meetingId);
  }

  getConnectionsForClient(sessionId) {
    var _this$connections$get;

    const {
      meetingId,
      requesterUserId: userId
    } = extractCredentials(sessionId);
    check(meetingId, String);
    check(userId, String);
    return (_this$connections$get = this.connections.get(meetingId)) === null || _this$connections$get === void 0 ? void 0 : _this$connections$get.get(userId);
  }

  print() {
    const mapConnectionsObj = {};
    this.connections.forEach((value, key) => {
      mapConnectionsObj[key] = {};
      value.forEach((v, k) => {
        mapConnectionsObj[key][k] = v;
      });
    });
    Logger.info('Active connections', mapConnectionsObj);
  }

  removeClientConnection(sessionId) {
    let connectionId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    Logger.info("Removing connectionId for user. sessionId=".concat(sessionId, " connectionId=").concat(connectionId));
    const {
      meetingId,
      requesterUserId: userId
    } = extractCredentials(sessionId);
    check(meetingId, String);
    check(userId, String);
    const meetingConnections = this.connections.get(meetingId);

    if (meetingConnections === null || meetingConnections === void 0 ? void 0 : meetingConnections.has(userId)) {
      const filteredConnections = meetingConnections.get(userId).filter(c => c !== connectionId);
      return connectionId && filteredConnections.length ? meetingConnections.set(userId, filteredConnections) : meetingConnections.delete(userId);
    }

    return false;
  }

  removeMeeting(meetingId) {
    Logger.debug("Removing connections for meeting=".concat(meetingId));
    return this.connections.delete(meetingId);
  }

  syncConnectionsWithServer() {
    Logger.info('Syncing ClientConnections with server');
    const activeConnections = Array.from(Meteor.server.sessions.keys());
    Logger.debug("Found ".concat(activeConnections.length, " active connections in server"));
    const onlineUsers = AuthTokenValidation.find({
      connectionId: {
        $in: activeConnections
      }
    }, {
      fields: {
        meetingId: 1,
        userId: 1
      }
    }).fetch();
    const onlineUsersId = onlineUsers.map((_ref) => {
      let {
        userId
      } = _ref;
      return userId;
    });
    const usersQuery = {
      userId: {
        $nin: onlineUsersId
      }
    };
    const userWithoutConnectionIds = Users.find(usersQuery, {
      fields: {
        meetingId: 1,
        userId: 1
      }
    }).fetch();
    const removedUsersWithoutConnection = Users.remove(usersQuery);

    if (removedUsersWithoutConnection) {
      Logger.info("Removed ".concat(removedUsersWithoutConnection, " users that are not connected"));
      Logger.info("Clearing connections");

      try {
        userWithoutConnectionIds.forEach((_ref2) => {
          let {
            meetingId,
            userId
          } = _ref2;
          this.removeClientConnection("".concat(meetingId, "--").concat(userId));
        });
      } catch (err) {
        Logger.error('Error on sync ClientConnections', err);
      }
    }
  }

}

if (!process.env.BBB_HTML5_ROLE || process.env.BBB_HTML5_ROLE === 'frontend') {
  Logger.info("ClientConnectionsSingleton was created");
  const ClientConnectionsSingleton = new ClientConnections();
  module.exportDefault(ClientConnectionsSingleton);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"etherpad.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/etherpad.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  isPadMessage: () => isPadMessage,
  getInstanceIdFromPadMessage: () => getInstanceIdFromPadMessage
});
const INSTANCE_ID_REGEX = /\d+/;

const isPadMessage = message => {
  const {
    name
  } = message.core.header;
  const isPadCreate = name === 'PadCreateSysMsg';
  const isPadUpdate = name === 'PadUpdateSysMsg';
  return isPadCreate || isPadUpdate;
};

const getInstanceIdFromPadMessage = message => {
  let instanceId;
  const {
    id
  } = message.core.body.pad; // Pad id is composed by the instance id between brackets

  const match = id.match(INSTANCE_ID_REGEX);
  if (match) instanceId = parseInt(match[0]);
  return instanceId;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;

module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }

}, 0);
module.export({
  eventEmitter: () => eventEmitter,
  redisPubSub: () => redisPubSub
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let WebAppInternals;
module.link("meteor/webapp", {
  WebAppInternals(v) {
    WebAppInternals = v;
  }

}, 1);
let Langmap;
module.link("langmap", {
  default(v) {
    Langmap = v;
  }

}, 2);
let fs;
module.link("fs", {
  default(v) {
    fs = v;
  }

}, 3);
let Users;
module.link("/imports/api/users", {
  default(v) {
    Users = v;
  }

}, 4);
module.link("./settings");
let lookupUserAgent;
module.link("useragent", {
  lookup(v) {
    lookupUserAgent = v;
  }

}, 5);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 6);
let Logger;
module.link("./logger", {
  default(v) {
    Logger = v;
  }

}, 7);
let Redis;
module.link("./redis", {
  default(v) {
    Redis = v;
  }

}, 8);
let setMinBrowserVersions;
module.link("./minBrowserVersion", {
  default(v) {
    setMinBrowserVersions = v;
  }

}, 9);
let guestWaitHtml = '';
const env = Meteor.isDevelopment ? 'development' : 'production';
const meteorRoot = fs.realpathSync("".concat(process.cwd(), "/../"));
const applicationRoot = env === 'development' ? fs.realpathSync("".concat(meteorRoot, "'/../../../../public/locales/")) : fs.realpathSync("".concat(meteorRoot, "/../programs/web.browser/app/locales/"));
const AVAILABLE_LOCALES = fs.readdirSync("".concat(applicationRoot));
const FALLBACK_LOCALES = JSON.parse(Assets.getText('config/fallbackLocales.json'));
process.on('uncaughtException', err => {
  Logger.error("uncaughtException: ".concat(err));
  process.exit(1);
});
process.on('uncaughtException', err => {
  Logger.error("uncaughtException: ".concat(err));
  process.exit(1);
});
Meteor.startup(() => {
  const APP_CONFIG = Meteor.settings.public.app;
  const CDN_URL = APP_CONFIG.cdn;
  const instanceId = parseInt(process.env.INSTANCE_ID, 10) || 1;
  Logger.warn("Started bbb-html5 process with instanceId=".concat(instanceId));
  const {
    customHeartbeat
  } = APP_CONFIG;

  if (customHeartbeat) {
    Logger.warn('Custom heartbeat functions are enabled'); // https://github.com/sockjs/sockjs-node/blob/1ef08901f045aae7b4df0f91ef598d7a11e82897/lib/transport/websocket.js#L74-L82

    const newHeartbeat = function heartbeat() {
      const currentTime = new Date().getTime(); // Skipping heartbeat, because websocket is sending data

      if (currentTime - this.ws.lastSentFrameTimestamp < 10000) {
        try {
          Logger.info('Skipping heartbeat, because websocket is sending data', {
            currentTime,
            lastSentFrameTimestamp: this.ws.lastSentFrameTimestamp,
            userId: this.session.connection._meteorSession.userId
          });
          return;
        } catch (err) {
          Logger.error("Skipping heartbeat error: ".concat(err));
        }
      }

      const supportsHeartbeats = this.ws.ping(null, () => clearTimeout(this.hto_ref));

      if (supportsHeartbeats) {
        this.hto_ref = setTimeout(() => {
          try {
            Logger.info('Heartbeat timeout', {
              userId: this.session.connection._meteorSession.userId,
              sentAt: currentTime,
              now: new Date().getTime()
            });
          } catch (err) {
            Logger.error("Heartbeat timeout error: ".concat(err));
          }
        }, Meteor.server.options.heartbeatTimeout);
      } else {
        Logger.error('Unexpected error supportsHeartbeats=false');
      }
    }; // https://github.com/davhani/hagty/blob/6a5c78e9ae5a5e4ade03e747fb4cc8ea2df4be0c/faye-websocket/lib/faye/websocket/api.js#L84-L88


    const newSend = function send(data) {
      try {
        this.lastSentFrameTimestamp = new Date().getTime();

        if (this.meteorHeartbeat) {
          // Call https://github.com/meteor/meteor/blob/1e7e56eec8414093cd0c1c70750b894069fc972a/packages/ddp-common/heartbeat.js#L80-L88
          this.meteorHeartbeat._seenPacket = true;

          if (this.meteorHeartbeat._heartbeatTimeoutHandle) {
            this.meteorHeartbeat._clearHeartbeatTimeoutTimer();
          }
        }

        if (this.readyState > 1
        /* API.OPEN = 1 */
        ) return false;
        if (!(data instanceof Buffer)) data = String(data);
        return this._driver.messages.write(data);
      } catch (err) {
        console.error('Error on send data', err);
        return false;
      }
    };

    Meteor.setInterval(() => {
      for (const session of Meteor.server.sessions.values()) {
        const {
          socket
        } = session;
        const recv = socket._session.recv;

        if (session.bbbFixApplied || !recv || !recv.ws) {
          continue;
        }

        recv.ws.meteorHeartbeat = session.heartbeat;
        recv.__proto__.heartbeat = newHeartbeat;
        recv.ws.__proto__.send = newSend;
        session.bbbFixApplied = true;
      }
    }, 5000);
  }

  if (CDN_URL.trim()) {
    // Add CDN
    BrowserPolicy.content.disallowEval();
    BrowserPolicy.content.allowInlineScripts();
    BrowserPolicy.content.allowInlineStyles();
    BrowserPolicy.content.allowImageDataUrl(CDN_URL);
    BrowserPolicy.content.allowFontDataUrl(CDN_URL);
    BrowserPolicy.content.allowOriginForAll(CDN_URL);
    WebAppInternals.setBundledJsCssPrefix(CDN_URL + APP_CONFIG.basename + Meteor.settings.public.app.instanceId);
    const fontRegExp = /\.(eot|ttf|otf|woff|woff2)$/;
    WebApp.rawConnectHandlers.use('/', (req, res, next) => {
      if (fontRegExp.test(req._parsedUrl.pathname)) {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Vary', 'Origin');
        res.setHeader('Pragma', 'public');
        res.setHeader('Cache-Control', '"public"');
      }

      return next();
    });
  }

  setMinBrowserVersions();
  Logger.warn("SERVER STARTED.\n  ENV=".concat(env, "\n  nodejs version=").concat(process.version, "\n  BBB_HTML5_ROLE=").concat(process.env.BBB_HTML5_ROLE, "\n  INSTANCE_ID=").concat(instanceId, "\n  PORT=").concat(process.env.PORT, "\n  CDN=").concat(CDN_URL, "\n"), APP_CONFIG);
});

const generateLocaleOptions = () => {
  try {
    Logger.warn('Calculating aggregateLocales (heavy)'); // remove duplicated locales (always remove more generic if same name)

    const tempAggregateLocales = AVAILABLE_LOCALES.map(file => file.replace('.json', '')).map(file => file.replace('_', '-')).map(locale => {
      const localeName = (Langmap[locale] || {}).nativeName || (FALLBACK_LOCALES[locale] || {}).nativeName || locale;
      return {
        locale,
        name: localeName
      };
    }).reverse().filter((item, index, self) => index === self.findIndex(i => i.name === item.name)).reverse();
    Logger.warn("Total locales: ".concat(tempAggregateLocales.length), tempAggregateLocales);
    return tempAggregateLocales;
  } catch (e) {
    Logger.error("'Could not process locales error: ".concat(e));
    return [];
  }
};

let avaibleLocalesNamesJSON = JSON.stringify(generateLocaleOptions());
WebApp.connectHandlers.use('/check', (req, res) => {
  const payload = {
    html5clientStatus: 'running'
  };
  res.setHeader('Content-Type', 'application/json');
  res.writeHead(200);
  res.end(JSON.stringify(payload));
});
WebApp.connectHandlers.use('/locale', (req, res) => {
  const APP_CONFIG = Meteor.settings.public.app;
  const fallback = APP_CONFIG.defaultSettings.application.fallbackLocale;
  const override = APP_CONFIG.defaultSettings.application.overrideLocale;
  const browserLocale = override && req.query.init === 'true' ? override.split(/[-_]/g) : req.query.locale.split(/[-_]/g);
  let localeFile = fallback;
  const usableLocales = AVAILABLE_LOCALES.map(file => file.replace('.json', '')).reduce((locales, locale) => locale.match(browserLocale[0]) ? [...locales, locale] : locales, []);
  let normalizedLocale;
  const regionDefault = usableLocales.find(locale => browserLocale[0] === locale);

  if (browserLocale.length > 1) {
    // browser asks for specific locale
    normalizedLocale = "".concat(browserLocale[0], "_").concat(browserLocale[1].toUpperCase());
    const normDefault = usableLocales.find(locale => normalizedLocale === locale);

    if (normDefault) {
      localeFile = normDefault;
    } else {
      if (regionDefault) {
        localeFile = regionDefault;
      } else {
        const specFallback = usableLocales.find(locale => browserLocale[0] === locale.split("_")[0]);
        if (specFallback) localeFile = specFallback;
      }
    }
  } else {
    // browser asks for region default locale
    if (regionDefault && localeFile === fallback && regionDefault !== localeFile) {
      localeFile = regionDefault;
    } else {
      const normFallback = usableLocales.find(locale => browserLocale[0] === locale.split("_")[0]);
      if (normFallback) localeFile = normFallback;
    }
  }

  res.setHeader('Content-Type', 'application/json');
  res.end(JSON.stringify({
    normalizedLocale: localeFile,
    regionDefaultLocale: regionDefault && regionDefault !== localeFile ? regionDefault : ''
  }));
});
WebApp.connectHandlers.use('/locale-list', (req, res) => {
  if (!avaibleLocalesNamesJSON) {
    avaibleLocalesNamesJSON = JSON.stringify(generateLocaleOptions());
  }

  res.setHeader('Content-Type', 'application/json');
  res.writeHead(200);
  res.end(avaibleLocalesNamesJSON);
});
WebApp.connectHandlers.use('/feedback', (req, res) => {
  req.on('data', Meteor.bindEnvironment(data => {
    const body = JSON.parse(data);
    const {
      meetingId,
      userId,
      authToken,
      userName: reqUserName,
      comment,
      rating
    } = body;
    check(meetingId, String);
    check(userId, String);
    check(authToken, String);
    check(reqUserName, String);
    check(comment, String);
    check(rating, Number);
    const user = Users.findOne({
      meetingId,
      userId,
      authToken
    });

    if (!user) {
      Logger.warn('Couldn\'t find user for feedback');
    }

    res.setHeader('Content-Type', 'application/json');
    res.writeHead(200);
    res.end(JSON.stringify({
      status: 'ok'
    }));
    body.userName = user ? user.name : "[unconfirmed] ".concat(reqUserName);

    const feedback = _objectSpread({}, body);

    Logger.info('FEEDBACK LOG:', feedback);
  }));
});
WebApp.connectHandlers.use('/useragent', (req, res) => {
  const userAgent = req.headers['user-agent'];
  let response = 'No user agent found in header';

  if (userAgent) {
    response = lookupUserAgent(userAgent).toString();
  }

  Logger.info("The requesting user agent is ".concat(response)); // res.setHeader('Content-Type', 'application/json');

  res.writeHead(200);
  res.end(response);
});
WebApp.connectHandlers.use('/guestWait', (req, res) => {
  if (!guestWaitHtml) {
    try {
      guestWaitHtml = Assets.getText('static/guest-wait/guest-wait.html');
    } catch (e) {
      Logger.warn("Could not process guest wait html file: ".concat(e));
    }
  }

  res.setHeader('Content-Type', 'text/html');
  res.writeHead(200);
  res.end(guestWaitHtml);
});
const eventEmitter = Redis.emitter;
const redisPubSub = Redis;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"logger.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/logger.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  logger: () => logger
});
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let createLogger, format, transports;
module.link("winston", {
  createLogger(v) {
    createLogger = v;
  },

  format(v) {
    format = v;
  },

  transports(v) {
    transports = v;
  }

}, 1);
const LOG_CONFIG = Meteor.settings.private.serverLog || {};
const {
  level
} = LOG_CONFIG;
const Logger = createLogger({
  level,
  format: format.combine(format.colorize({
    level: true
  }), format.splat(), format.simple()),
  transports: [// console logging
  new transports.Console({
    prettyPrint: false,
    humanReadableUnhandledException: true,
    colorize: true,
    handleExceptions: true,
    level
  })]
});
module.exportDefault(Logger);
const logger = Logger;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"metrics.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/metrics.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let fs;
module.link("fs", {
  default(v) {
    fs = v;
  }

}, 0);
let path;
module.link("path", {
  default(v) {
    path = v;
  }

}, 1);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 2);
let Logger;
module.link("./logger", {
  default(v) {
    Logger = v;
  }

}, 3);
const {
  metricsDumpIntervalMs,
  metricsFolderPath,
  removeMeetingOnEnd
} = Meteor.settings.private.redis.metrics;

class Metrics {
  constructor() {
    this.metrics = {};
  }

  addEvent(meetingId, eventName, messageLength) {
    if (!this.metrics.hasOwnProperty(meetingId)) {
      this.metrics[meetingId] = {
        currentlyInQueue: {},
        wasInQueue: {}
      };
    }

    const {
      currentlyInQueue
    } = this.metrics[meetingId];

    if (!currentlyInQueue.hasOwnProperty(eventName)) {
      currentlyInQueue[eventName] = {
        count: 1,
        payloadSize: messageLength
      };
    } else {
      currentlyInQueue[eventName].count += 1;
      currentlyInQueue[eventName].payloadSize += messageLength;
    }
  }

  processEvent(meetingId, eventName, size, processingStartTimestamp) {
    const currentProcessingTimestamp = Date.now();
    const processTime = currentProcessingTimestamp - processingStartTimestamp;
    this.addEvent(meetingId, eventName, size);

    if (!this.metrics[meetingId].wasInQueue.hasOwnProperty(eventName)) {
      this.metrics[meetingId].wasInQueue[eventName] = {
        count: 1,
        payloadSize: {
          min: size,
          max: size,
          last: size,
          total: size,
          avg: size
        },
        processingTime: {
          min: processTime,
          max: processTime,
          last: processTime,
          total: processTime,
          avg: processTime
        }
      };
      this.metrics[meetingId].currentlyInQueue[eventName].count -= 1;

      if (!this.metrics[meetingId].currentlyInQueue[eventName].count) {
        delete this.metrics[meetingId].currentlyInQueue[eventName];
      }
    } else {
      const {
        currentlyInQueue,
        wasInQueue
      } = this.metrics[meetingId];
      currentlyInQueue[eventName].count -= 1;

      if (!currentlyInQueue[eventName].count) {
        delete currentlyInQueue[eventName];
      }

      const {
        payloadSize,
        processingTime
      } = wasInQueue[eventName];
      wasInQueue[eventName].count += 1;
      payloadSize.last = size;
      payloadSize.total += size;
      if (payloadSize.min > size) payloadSize.min = size;
      if (payloadSize.max < size) payloadSize.max = size;
      payloadSize.avg = payloadSize.total / wasInQueue[eventName].count;
      if (processingTime.min > processTime) processingTime.min = processTime;
      if (processingTime.max < processTime) processingTime.max = processTime;
      processingTime.last = processTime;
      processingTime.total += processTime;
      processingTime.avg = processingTime.total / wasInQueue[eventName].count;
    }
  }

  setAnnotationQueueLength(meetingId, size) {
    this.metrics[meetingId].annotationQueueLength = size;
  }

  startDumpFile() {
    Meteor.setInterval(() => {
      try {
        const fileDate = new Date();
        const fullYear = fileDate.getFullYear();
        const month = (fileDate.getMonth() + 1).toString().padStart(2, '0');
        const day = fileDate.getDate().toString().padStart(2, '0');
        const hour = fileDate.getHours().toString().padStart(2, '0');
        const minutes = fileDate.getMinutes().toString().padStart(2, '0');
        const seconds = fileDate.getSeconds().toString().padStart(2, '0');
        const folderName = "".concat(fullYear).concat(month).concat(day, "_").concat(hour);
        const fileName = "".concat(folderName).concat(minutes).concat(seconds, "_metrics.json");
        const folderPath = path.join(metricsFolderPath, folderName);
        const fullFilePath = path.join(folderPath, fileName);

        if (!fs.existsSync(folderPath)) {
          Logger.debug("Creating folder: ".concat(folderPath));
          fs.mkdirSync(folderPath);
        }

        fs.writeFileSync(fullFilePath, JSON.stringify(this.metrics));
        Logger.info('Metric file successfully written');
      } catch (err) {
        Logger.error('Error on writing metrics to disk.', err);
      }
    }, metricsDumpIntervalMs);
  }

  removeMeeting(meetingId) {
    if (removeMeetingOnEnd) {
      Logger.info("Removing meeting ".concat(meetingId, " from metrics"));
      delete this.metrics[meetingId];
    } else {
      Logger.info("Skipping remove of meeting ".concat(meetingId, " from metrics"));
    }
  }

}

const metricsSingleton = new Metrics();
module.exportDefault(metricsSingleton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"minBrowserVersion.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/minBrowserVersion.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let setMinimumBrowserVersions;
module.link("meteor/modern-browsers", {
  setMinimumBrowserVersions(v) {
    setMinimumBrowserVersions = v;
  }

}, 1);

const setMinBrowserVersions = () => {
  const {
    minBrowserVersions
  } = Meteor.settings.private;
  const versions = {};
  minBrowserVersions.forEach(elem => {
    let {
      version
    } = elem;
    if (version === 'Infinity') version = Infinity;
    versions[elem.browser] = version;
  });
  setMinimumBrowserVersions(versions, 'bbb-min');
};

module.exportDefault(setMinBrowserVersions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"redis.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/redis.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Redis;
module.link("redis", {
  default(v) {
    Redis = v;
  }

}, 0);
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 1);
let EventEmitter2;
module.link("eventemitter2", {
  EventEmitter2(v) {
    EventEmitter2 = v;
  }

}, 2);
let check;
module.link("meteor/check", {
  check(v) {
    check = v;
  }

}, 3);
let isPadMessage, getInstanceIdFromPadMessage;
module.link("./etherpad", {
  isPadMessage(v) {
    isPadMessage = v;
  },

  getInstanceIdFromPadMessage(v) {
    getInstanceIdFromPadMessage = v;
  }

}, 4);
let Logger;
module.link("./logger", {
  default(v) {
    Logger = v;
  }

}, 5);
let Metrics;
module.link("./metrics", {
  default(v) {
    Metrics = v;
  }

}, 6);
// Fake meetingId used for messages that have no meetingId
const NO_MEETING_ID = '_';
const {
  queueMetrics
} = Meteor.settings.private.redis.metrics;

const makeEnvelope = (channel, eventName, header, body, routing) => {
  const envelope = {
    envelope: {
      name: eventName,
      routing: routing || {
        sender: 'html5-server'
      },
      timestamp: Date.now()
    },
    core: {
      header,
      body
    }
  };
  return JSON.stringify(envelope);
};

const getInstanceIdFromMessage = parsedMessage => {
  var _parsedMessage$core$b, _parsedMessage$core$b2;

  // End meeting message does not seem to have systemProps
  let instanceIdFromMessage = (_parsedMessage$core$b = parsedMessage.core.body.props) === null || _parsedMessage$core$b === void 0 ? void 0 : (_parsedMessage$core$b2 = _parsedMessage$core$b.systemProps) === null || _parsedMessage$core$b2 === void 0 ? void 0 : _parsedMessage$core$b2.html5InstanceId; // Pad messages does not have systemProps

  if (!instanceIdFromMessage && isPadMessage(parsedMessage)) {
    instanceIdFromMessage = getInstanceIdFromPadMessage(parsedMessage);
  }

  return instanceIdFromMessage;
};

class MeetingMessageQueue {
  constructor(eventEmitter) {
    let asyncMessages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let redisDebugEnabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    this.asyncMessages = asyncMessages;
    this.emitter = eventEmitter;
    this.queue = new PowerQueue();
    this.redisDebugEnabled = redisDebugEnabled;
    this.handleTask = this.handleTask.bind(this);
    this.queue.taskHandler = this.handleTask;
  }

  handleTask(data, next) {
    const {
      channel
    } = data;
    const {
      envelope
    } = data.parsedMessage;
    const {
      header
    } = data.parsedMessage.core;
    const {
      body
    } = data.parsedMessage.core;
    const {
      meetingId
    } = header;
    const eventName = header.name;
    const isAsync = this.asyncMessages.includes(channel) || this.asyncMessages.includes(eventName);
    const beginHandleTimestamp = Date.now();
    let called = false;
    check(eventName, String);
    check(body, Object);

    const callNext = () => {
      if (called) return;

      if (this.redisDebugEnabled) {
        Logger.debug("Redis: ".concat(eventName, " completed ").concat(isAsync ? 'async' : 'sync'));
      }

      called = true;

      if (queueMetrics) {
        const queueId = meetingId || NO_MEETING_ID;
        const dataLength = JSON.stringify(data).length;
        Metrics.processEvent(queueId, eventName, dataLength, beginHandleTimestamp);
      }

      const queueLength = this.queue.length();

      if (queueLength > 100) {
        Logger.warn("Redis: MeetingMessageQueue for meetingId=".concat(meetingId, " has queue size=").concat(queueLength, " "));
      }

      next();
    };

    const onError = reason => {
      Logger.error("".concat(eventName, ": ").concat(reason.stack ? reason.stack : reason));
      callNext();
    };

    try {
      if (this.redisDebugEnabled) {
        if (!Meteor.settings.private.analytics.includeChat && eventName === 'GroupChatMessageBroadcastEvtMsg') {
          return;
        }

        Logger.debug("Redis: ".concat(JSON.stringify(data.parsedMessage.core), " emitted"));
      }

      if (isAsync) {
        callNext();
      }

      this.emitter.emitAsync(eventName, {
        envelope,
        header,
        body
      }, meetingId).then(callNext).catch(onError);
    } catch (reason) {
      onError(reason);
    }
  }

  add() {
    return this.queue.add(...arguments);
  }

}

class RedisPubSub {
  static handlePublishError(err) {
    if (err) {
      Logger.error(err);
    }
  }

  constructor() {
    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.config = config;
    this.didSendRequestEvent = false;
    const host = process.env.REDIS_HOST || Meteor.settings.private.redis.host;
    const redisConf = Meteor.settings.private.redis;
    this.instanceId = parseInt(process.env.INSTANCE_ID, 10) || 1; // 1 also handles running in dev mode

    this.role = process.env.BBB_HTML5_ROLE;
    this.customRedisChannel = "to-html5-redis-channel".concat(this.instanceId);
    const {
      password,
      port
    } = redisConf;

    if (password) {
      this.pub = Redis.createClient({
        host,
        port,
        password
      });
      this.sub = Redis.createClient({
        host,
        port,
        password
      });
      this.pub.auth(password);
      this.sub.auth(password);
    } else {
      this.pub = Redis.createClient({
        host,
        port
      });
      this.sub = Redis.createClient({
        host,
        port
      });
    }

    if (queueMetrics) {
      Metrics.startDumpFile();
    }

    this.emitter = new EventEmitter2();
    this.meetingsQueues = {}; // We create this _ meeting queue because we need to be able to handle system messages (no meetingId in core.header)

    this.meetingsQueues[NO_MEETING_ID] = new MeetingMessageQueue(this.emitter, this.config.async, this.config.debug);
    this.handleSubscribe = this.handleSubscribe.bind(this);
    this.handleMessage = this.handleMessage.bind(this);
  }

  init() {
    this.sub.on('psubscribe', Meteor.bindEnvironment(this.handleSubscribe));
    this.sub.on('pmessage', Meteor.bindEnvironment(this.handleMessage));
    const channelsToSubscribe = this.config.subscribeTo;
    channelsToSubscribe.push(this.customRedisChannel);

    switch (this.role) {
      case 'frontend':
        this.sub.psubscribe('from-akka-apps-frontend-redis-channel');

        if (this.redisDebugEnabled) {
          Logger.debug("Redis: NodeJSPool:".concat(this.instanceId, " Role: frontend. Subscribed to 'from-akka-apps-frontend-redis-channel'"));
        }

        break;

      case 'backend':
        channelsToSubscribe.forEach(channel => {
          this.sub.psubscribe(channel);

          if (this.redisDebugEnabled) {
            Logger.debug("Redis: NodeJSPool:".concat(this.instanceId, " Role: backend. Subscribed to '").concat(channelsToSubscribe, "'"));
          }
        });
        break;

      default:
        this.sub.psubscribe('from-akka-apps-frontend-redis-channel');
        channelsToSubscribe.forEach(channel => {
          this.sub.psubscribe(channel);

          if (this.redisDebugEnabled) {
            Logger.debug("Redis: NodeJSPool:".concat(this.instanceId, " Role:").concat(this.role, " (likely only one nodejs running, doing both frontend and backend. Dev env? ). Subscribed to '").concat(channelsToSubscribe, "'"));
          }
        });
        break;
    }
  }

  updateConfig(config) {
    this.config = Object.assign({}, this.config, config);
    this.redisDebugEnabled = this.config.debug;
  } // TODO: Move this out of this class, maybe pass as a callback to init?


  handleSubscribe() {
    if (this.didSendRequestEvent || this.role === 'frontend') return; // populate collections with pre-existing data

    const REDIS_CONFIG = Meteor.settings.private.redis;
    const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;
    const EVENT_NAME = 'GetAllMeetingsReqMsg';
    const body = {
      requesterId: 'nodeJSapp',
      html5InstanceId: this.instanceId
    };
    this.publishSystemMessage(CHANNEL, EVENT_NAME, body);
    this.didSendRequestEvent = true;
  }

  handleMessage(pattern, channel, message) {
    const parsedMessage = JSON.parse(message);
    const {
      ignored: ignoredMessages,
      async
    } = this.config;
    const eventName = parsedMessage.core.header.name;

    if (ignoredMessages.includes(channel) || ignoredMessages.includes(eventName)) {
      if (eventName === 'CheckAlivePongSysMsg') {
        return;
      }

      if (this.redisDebugEnabled) {
        Logger.debug("Redis: ".concat(eventName, " skipped"));
      }

      return;
    }

    if (this.redisDebugEnabled) {
      Logger.warn('Received event to handle', {
        date: new Date().toISOString(),
        eventName
      });
    } // System messages like Create / Destroy Meeting, etc do not have core.header.meetingId.
    // Process them in MeetingQueue['_']  --- the NO_MEETING queueId


    const meetingIdFromMessageCoreHeader = parsedMessage.core.header.meetingId || NO_MEETING_ID;

    if (this.role === 'frontend') {
      // receiving this message means we need to look at it. Frontends do not have instanceId.
      if (meetingIdFromMessageCoreHeader === NO_MEETING_ID) {
        // if this is a system message
        if (eventName === 'MeetingCreatedEvtMsg' || eventName === 'SyncGetMeetingInfoRespMsg') {
          const meetingIdFromMessageMeetingProp = parsedMessage.core.body.props.meetingProp.intId;
          this.meetingsQueues[meetingIdFromMessageMeetingProp] = new MeetingMessageQueue(this.emitter, async, this.redisDebugEnabled);

          if (this.redisDebugEnabled) {
            Logger.warn('Created frontend queue for meeting', {
              date: new Date().toISOString(),
              eventName,
              meetingIdFromMessageMeetingProp
            });
          }
        }
      }

      if (!this.meetingsQueues[meetingIdFromMessageCoreHeader]) {
        Logger.warn("Frontend meeting queue had not been initialized   ".concat(message), {
          eventName,
          meetingIdFromMessageCoreHeader
        });
        this.meetingsQueues[NO_MEETING_ID].add({
          pattern,
          channel,
          eventName,
          parsedMessage
        });
      } else {
        // process the event - whether it's a system message or not, the meetingIdFromMessageCoreHeader value is adjusted
        this.meetingsQueues[meetingIdFromMessageCoreHeader].add({
          pattern,
          channel,
          eventName,
          parsedMessage
        });
      }
    } else {
      // backend
      if (meetingIdFromMessageCoreHeader === NO_MEETING_ID) {
        var _parsedMessage$core$b3, _parsedMessage$core$b4;

        // if this is a system message
        const meetingIdFromMessageMeetingProp = (_parsedMessage$core$b3 = parsedMessage.core.body.props) === null || _parsedMessage$core$b3 === void 0 ? void 0 : (_parsedMessage$core$b4 = _parsedMessage$core$b3.meetingProp) === null || _parsedMessage$core$b4 === void 0 ? void 0 : _parsedMessage$core$b4.intId;
        const instanceIdFromMessage = getInstanceIdFromMessage(parsedMessage);

        if (this.instanceId === instanceIdFromMessage) {
          // create queue or destroy queue
          if (eventName === 'MeetingCreatedEvtMsg' || eventName === 'SyncGetMeetingInfoRespMsg') {
            this.meetingsQueues[meetingIdFromMessageMeetingProp] = new MeetingMessageQueue(this.emitter, async, this.redisDebugEnabled);

            if (this.redisDebugEnabled) {
              Logger.warn('Created backend queue for meeting', {
                date: new Date().toISOString(),
                eventName,
                meetingIdFromMessageMeetingProp
              });
            }
          }

          this.meetingsQueues[NO_MEETING_ID].add({
            pattern,
            channel,
            eventName,
            parsedMessage
          });
        } else {
          if (eventName === 'MeetingEndedEvtMsg' || eventName === 'MeetingDestroyedEvtMsg') {
            // MeetingEndedEvtMsg does not follow the system message pattern for meetingId
            // but we still need to process it on the backend which is processing the rest of the events
            // for this meetingId (it does not contain instanceId either, so we cannot compare that)
            const meetingIdForMeetingEnded = parsedMessage.core.body.meetingId;

            if (!!this.meetingsQueues[meetingIdForMeetingEnded]) {
              this.meetingsQueues[NO_MEETING_ID].add({
                pattern,
                channel,
                eventName,
                parsedMessage
              });
            }
          } // ignore

        }
      } else {
        // add to existing queue
        if (!!this.meetingsQueues[meetingIdFromMessageCoreHeader]) {
          // only handle message if we have a queue for the meeting. If we don't have a queue, it means it's for a different instanceId
          this.meetingsQueues[meetingIdFromMessageCoreHeader].add({
            pattern,
            channel,
            eventName,
            parsedMessage
          });
        } else {// If we reach this line, this means that there is no existing queue for this redis "backend" message
          // which means that the meeting is fully handled by another bbb-html5-backend.
          // Logger.warn('Backend meeting queue had not been initialized', { eventName, meetingIdFromMessageCoreHeader })
        }
      }
    }
  }

  destroyMeetingQueue(id) {
    delete this.meetingsQueues[id];
  }

  on() {
    return this.emitter.on(...arguments);
  }

  publishVoiceMessage(channel, eventName, voiceConf, payload) {
    const header = {
      name: eventName,
      voiceConf
    };
    const envelope = makeEnvelope(channel, eventName, header, payload);
    return this.pub.publish(channel, envelope, RedisPubSub.handlePublishError);
  }

  publishSystemMessage(channel, eventName, payload) {
    const header = {
      name: eventName
    };
    const envelope = makeEnvelope(channel, eventName, header, payload);
    return this.pub.publish(channel, envelope, RedisPubSub.handlePublishError);
  }

  publishMeetingMessage(channel, eventName, meetingId, payload) {
    const header = {
      name: eventName,
      meetingId
    };
    const envelope = makeEnvelope(channel, eventName, header, payload);
    return this.pub.publish(channel, envelope, RedisPubSub.handlePublishError);
  }

  publishUserMessage(channel, eventName, meetingId, userId, payload) {
    const header = {
      name: eventName,
      meetingId,
      userId
    };

    if (!meetingId || !userId) {
      Logger.warn("Publishing ".concat(eventName, " with potentially missing data userId=").concat(userId, " meetingId=").concat(meetingId));
    }

    const envelope = makeEnvelope(channel, eventName, header, payload, {
      meetingId,
      userId
    });
    return this.pub.publish(channel, envelope, RedisPubSub.handlePublishError);
  }

}

const RedisPubSubSingleton = new RedisPubSub();
Meteor.startup(() => {
  const REDIS_CONFIG = Meteor.settings.private.redis;
  RedisPubSubSingleton.updateConfig(REDIS_CONFIG);
  RedisPubSubSingleton.init();
});
module.exportDefault(RedisPubSubSingleton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/server/settings.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Meteor;
module.link("meteor/meteor", {
  Meteor(v) {
    Meteor = v;
  }

}, 0);
let fs;
module.link("fs", {
  default(v) {
    fs = v;
  }

}, 1);
let YAML;
module.link("yaml", {
  default(v) {
    YAML = v;
  }

}, 2);

let _;

module.link("lodash", {
  default(v) {
    _ = v;
  }

}, 3);
const DEFAULT_SETTINGS_FILE_PATH = process.env.BBB_HTML5_SETTINGS || 'assets/app/config/settings.yml';
const LOCAL_SETTINGS_FILE_PATH = process.env.BBB_HTML5_LOCAL_SETTINGS || '/etc/bigbluebutton/bbb-html5.yml';

try {
  if (fs.existsSync(DEFAULT_SETTINGS_FILE_PATH)) {
    const SETTINGS = YAML.parse(fs.readFileSync(DEFAULT_SETTINGS_FILE_PATH, 'utf-8'));

    if (fs.existsSync(LOCAL_SETTINGS_FILE_PATH)) {
      console.log('Local configuration found! Merging with default configuration...');
      const LOCAL_CONFIG = YAML.parse(fs.readFileSync(LOCAL_SETTINGS_FILE_PATH, 'utf-8'));

      _.merge(SETTINGS, LOCAL_CONFIG);
    } else console.log('Local Configuration not found! Loading default configuration...');

    Meteor.settings = SETTINGS;
    Meteor.settings.public.app.instanceId = ''; // no longer use instanceId in URLs. Likely permanent change
    // Meteor.settings.public.app.instanceId = `/${INSTANCE_ID}`;

    __meteor_runtime_config__.PUBLIC_SETTINGS = SETTINGS.public;
  } else {
    throw new Error('File doesn\'t exists');
  }
} catch (error) {
  // eslint-disable-next-line no-console
  console.error('Error on load configuration file.', error);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"utils":{"lineEndings.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/lineEndings.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  BREAK_LINE: () => BREAK_LINE,
  CARRIAGE_RETURN: () => CARRIAGE_RETURN,
  NEW_LINE: () => NEW_LINE
});
// Used in Flash and HTML to show a legitimate break in the line
const BREAK_LINE = '<br/>'; // Soft return in HTML to signify a broken line without
// displaying the escaped '<br/>' line break text

const CARRIAGE_RETURN = '\r'; // Handle this the same as carriage return, in case text copied has this

const NEW_LINE = '\n';
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mimeTypes.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/mimeTypes.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  XLS: () => XLS,
  XLSX: () => XLSX,
  DOC: () => DOC,
  DOCX: () => DOCX,
  PPT: () => PPT,
  PPTX: () => PPTX,
  ODT: () => ODT,
  RTF: () => RTF,
  TXT: () => TXT,
  ODS: () => ODS,
  ODP: () => ODP,
  PDF: () => PDF,
  JPEG: () => JPEG,
  PNG: () => PNG,
  SVG: () => SVG,
  UPLOAD_SUPORTED: () => UPLOAD_SUPORTED
});
const XLS = 'application/vnd.ms-excel';
const XLSX = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
const DOC = 'application/msword';
const DOCX = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
const PPT = 'application/vnd.ms-powerpoint';
const PPTX = 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
const ODT = 'application/vnd.oasis.opendocument.text';
const RTF = 'application/rtf';
const TXT = 'text/plain';
const ODS = 'application/vnd.oasis.opendocument.spreadsheet';
const ODP = 'application/vnd.oasis.opendocument.presentation';
const PDF = 'application/pdf';
const JPEG = 'image/jpeg';
const PNG = 'image/png';
const SVG = 'image/svg+xml';
const UPLOAD_SUPORTED = [XLS, XLSX, DOC, DOCX, PPT, PPTX, ODT, RTF, TXT, ODS, ODP, PDF, JPEG, PNG];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"regex-weburl.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/regex-weburl.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exportDefault(new RegExp( // protocol identifier
'(?:(?:https?|ftp)://)' + // user:pass authentication
'(?:\\S+(?::\\S*)?@)?' + '(?:' + // IP address exclusion
// private & local networks
'(?!(?:10|127)(?:\\.\\d{1,3}){3})' + '(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})' + '(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})' + // IP address dotted notation octets
// excludes loopback network 0.0.0.0
// excludes reserved space >= 224.0.0.0
// excludes network & broacast addresses
// (first & last IP address of each class)
'(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])' + '(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}' + '(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))' + '|' + // host name
"(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)" + // domain name
"(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" + // TLD identifier
"(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))" + // TLD may end with dot
'\\.?' + ')' + // port number
'(?::\\d{2,5})?' + // resource path
'(?:[/?#]\\S*)?', 'img'));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"server":{"main.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// server/main.js                                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.link("/imports/startup/server");
module.link("/imports/api/meetings/server");
module.link("/imports/api/users/server");
module.link("/imports/api/annotations/server");
module.link("/imports/api/cursor/server");
module.link("/imports/api/polls/server");
module.link("/imports/api/captions/server");
module.link("/imports/api/presentations/server");
module.link("/imports/api/presentation-pods/server");
module.link("/imports/api/presentation-upload-token/server");
module.link("/imports/api/slides/server");
module.link("/imports/api/breakouts/server");
module.link("/imports/api/group-chat/server");
module.link("/imports/api/group-chat-msg/server");
module.link("/imports/api/screenshare/server");
module.link("/imports/api/users-settings/server");
module.link("/imports/api/voice-users/server");
module.link("/imports/api/whiteboard-multi-user/server");
module.link("/imports/api/video-streams/server");
module.link("/imports/api/network-information/server");
module.link("/imports/api/users-infos/server");
module.link("/imports/api/users-persistent-data/server");
module.link("/imports/api/connection-status/server");
module.link("/imports/api/note/server");
module.link("/imports/api/external-videos/server");
module.link("/imports/api/guest-users/server");
module.link("/imports/api/local-settings/server");
module.link("/imports/api/voice-call-states/server");
module.link("/imports/api/auth-token-validation/server");
module.link("/imports/api/log-client/server");
module.link("/imports/api/common/server/helpers");
module.link("/imports/startup/server/logger");

let _;

module.link("lodash", {
  default(v) {
    _ = v;
  }

}, 0);
global._ = _;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},{
  "extensions": [
    ".js",
    ".json",
    ".jsx",
    ".mjs"
  ]
});

var exports = require("/server/main.js");
//# sourceURL=meteor://💻app/app/app.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL2hhbmRsZXJzL3doaXRlYm9hcmRBbm5vdGF0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL2hhbmRsZXJzL3doaXRlYm9hcmRDbGVhcmVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvaGFuZGxlcnMvd2hpdGVib2FyZFNlbmQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zL3NlcnZlci9oYW5kbGVycy93aGl0ZWJvYXJkVW5kby5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL21ldGhvZHMvY2xlYXJXaGl0ZWJvYXJkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvbWV0aG9kcy9zZW5kQW5ub3RhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL21ldGhvZHMvc2VuZEFubm90YXRpb25IZWxwZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zL3NlcnZlci9tZXRob2RzL3NlbmRCdWxrQW5ub3RhdGlvbnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zL3NlcnZlci9tZXRob2RzL3VuZG9Bbm5vdGF0aW9uLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZEFubm90YXRpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zL3NlcnZlci9tb2RpZmllcnMvY2xlYXJBbm5vdGF0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL21vZGlmaWVycy9yZW1vdmVBbm5vdGF0aW9uLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvZXZlbnRIYW5kbGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zL3NlcnZlci9zdHJlYW1lci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvYWRkQW5ub3RhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbi9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyQXV0aFRva2VuVmFsaWRhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uL3NlcnZlci9tb2RpZmllcnMvdXBzZXJ0VmFsaWRhdGlvblN0YXRlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24vc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24vc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbi9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYnJlYWtvdXRzL3NlcnZlci9oYW5kbGVycy9icmVha291dENsb3NlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYnJlYWtvdXRzL3NlcnZlci9oYW5kbGVycy9icmVha291dEpvaW5VUkwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2JyZWFrb3V0cy9zZXJ2ZXIvaGFuZGxlcnMvYnJlYWtvdXRTdGFydGVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9icmVha291dHMvc2VydmVyL2hhbmRsZXJzL2pvaW5lZFVzZXJzQ2hhbmdlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYnJlYWtvdXRzL3NlcnZlci9oYW5kbGVycy91cGRhdGVUaW1lUmVtYWluaW5nLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9icmVha291dHMvc2VydmVyL21ldGhvZHMvY3JlYXRlQnJlYWtvdXQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2JyZWFrb3V0cy9zZXJ2ZXIvbWV0aG9kcy9lbmRBbGxCcmVha291dHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2JyZWFrb3V0cy9zZXJ2ZXIvbWV0aG9kcy9yZXF1ZXN0Sm9pblVSTC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYnJlYWtvdXRzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJCcmVha291dHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2JyZWFrb3V0cy9zZXJ2ZXIvZXZlbnRIYW5kbGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYnJlYWtvdXRzL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvYnJlYWtvdXRzL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9icmVha291dHMvc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2JyZWFrb3V0cy9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL2hhbmRsZXJzL3BhZENyZWF0ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL2hhbmRsZXJzL3BhZFVwZGF0ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvYWRkQ2FwdGlvbnNQYWRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbWV0aG9kcy9hZGRQYWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tZXRob2RzL2FwcGVuZFRleHQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tZXRob2RzL2NyZWF0ZUNhcHRpb25zLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbWV0aG9kcy9lZGl0Q2FwdGlvbnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tZXRob2RzL2ZldGNoUmVhZE9ubHlQYWRJZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvdGFrZU93bmVyc2hpcC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvdXBkYXRlT3duZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tb2RpZmllcnMvYWRkQ2FwdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21vZGlmaWVycy9jbGVhckNhcHRpb25zLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbW9kaWZpZXJzL3VwZGF0ZU93bmVySWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tb2RpZmllcnMvdXBkYXRlUGFkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbW9kaWZpZXJzL3VwZGF0ZVJlYWRPbmx5UGFkSWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvaGVscGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NhcHRpb25zL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jb25uZWN0aW9uLXN0YXR1cy9zZXJ2ZXIvbWV0aG9kcy9hZGRDb25uZWN0aW9uU3RhdHVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jb25uZWN0aW9uLXN0YXR1cy9zZXJ2ZXIvbWV0aG9kcy92b2lkQ29ubmVjdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY29ubmVjdGlvbi1zdGF0dXMvc2VydmVyL21vZGlmaWVycy9jbGVhckNvbm5lY3Rpb25TdGF0dXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2Nvbm5lY3Rpb24tc3RhdHVzL3NlcnZlci9tb2RpZmllcnMvdXBkYXRlQ29ubmVjdGlvblN0YXR1cy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY29ubmVjdGlvbi1zdGF0dXMvc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jb25uZWN0aW9uLXN0YXR1cy9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY29ubmVjdGlvbi1zdGF0dXMvc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2Nvbm5lY3Rpb24tc3RhdHVzL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jdXJzb3Ivc2VydmVyL2hhbmRsZXJzL2N1cnNvclVwZGF0ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY3Vyc29yL3NlcnZlci9tZXRob2RzL3B1Ymxpc2hDdXJzb3JVcGRhdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2N1cnNvci9zZXJ2ZXIvZXZlbnRIYW5kbGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY3Vyc29yL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvY3Vyc29yL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9jdXJzb3Ivc2VydmVyL3N0cmVhbWVyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9leHRlcm5hbC12aWRlb3Mvc2VydmVyL2hhbmRsZXJzL3N0YXJ0RXh0ZXJuYWxWaWRlby5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZXh0ZXJuYWwtdmlkZW9zL3NlcnZlci9oYW5kbGVycy9zdG9wRXh0ZXJuYWxWaWRlby5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZXh0ZXJuYWwtdmlkZW9zL3NlcnZlci9oYW5kbGVycy91cGRhdGVFeHRlcm5hbFZpZGVvLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9leHRlcm5hbC12aWRlb3Mvc2VydmVyL21ldGhvZHMvZW1pdEV4dGVybmFsVmlkZW9FdmVudC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZXh0ZXJuYWwtdmlkZW9zL3NlcnZlci9tZXRob2RzL3N0YXJ0V2F0Y2hpbmdFeHRlcm5hbFZpZGVvLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9leHRlcm5hbC12aWRlb3Mvc2VydmVyL21ldGhvZHMvc3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlby5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZXh0ZXJuYWwtdmlkZW9zL3NlcnZlci9tZXRob2RzL3N0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW9TeXN0ZW1DYWxsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9leHRlcm5hbC12aWRlb3Mvc2VydmVyL2V2ZW50SGFuZGxlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2V4dGVybmFsLXZpZGVvcy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2V4dGVybmFsLXZpZGVvcy9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZXh0ZXJuYWwtdmlkZW9zL3NlcnZlci9zdHJlYW1lci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC9zZXJ2ZXIvaGFuZGxlcnMvZ3JvdXBDaGF0Q3JlYXRlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC9zZXJ2ZXIvaGFuZGxlcnMvZ3JvdXBDaGF0RGVzdHJveWVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0L3NlcnZlci9oYW5kbGVycy9ncm91cENoYXRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0L3NlcnZlci9tZXRob2RzL2NyZWF0ZUdyb3VwQ2hhdC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC9zZXJ2ZXIvbWV0aG9kcy9kZXN0cm95R3JvdXBDaGF0LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0L3NlcnZlci9tb2RpZmllcnMvYWRkR3JvdXBDaGF0LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0L3NlcnZlci9tb2RpZmllcnMvY2xlYXJHcm91cENoYXQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQvc2VydmVyL2V2ZW50SGFuZGxlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQvc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0L3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0L3NlcnZlci9wdWJsaXNoZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0L2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZy9zZXJ2ZXIvaGFuZGxlcnMvY2xlYXJQdWJsaWNHcm91cENoYXQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9oYW5kbGVycy9ncm91cENoYXRNc2dCcm9hZGNhc3QuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9oYW5kbGVycy9zeW5jR3JvdXBzQ2hhdC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyL2hhbmRsZXJzL3VzZXJUeXBpbmcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tZXRob2RzL2NoYXRNZXNzYWdlQmVmb3JlSm9pbkNvdW50ZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tZXRob2RzL2NsZWFyUHVibGljQ2hhdEhpc3RvcnkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tZXRob2RzL2ZldGNoTWVzc2FnZVBlclBhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tZXRob2RzL3NlbmRHcm91cENoYXRNc2cuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tZXRob2RzL3N0YXJ0VXNlclR5cGluZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyL21ldGhvZHMvc3RvcFVzZXJUeXBpbmcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tb2RpZmllcnMvYWRkQnVsa0dyb3VwQ2hhdE1zZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tb2RpZmllcnMvYWRkR3JvdXBDaGF0TXNnLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZFN5c3RlbU1zZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyL21vZGlmaWVycy9jbGVhckdyb3VwQ2hhdE1zZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyL21vZGlmaWVycy9zdGFydFR5cGluZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyL21vZGlmaWVycy9zdG9wVHlwaW5nLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZy9zZXJ2ZXIvbW9kaWZpZXJzL3N5bmNNZWV0aW5nQ2hhdE1zZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZy9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9oYW5kbGVycy9ndWVzdEFwcHJvdmVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvZ3Vlc3RXYWl0aW5nTGVmdC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3Vlc3QtdXNlcnMvc2VydmVyL2hhbmRsZXJzL2d1ZXN0c1dhaXRpbmdGb3JBcHByb3ZhbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3Vlc3QtdXNlcnMvc2VydmVyL21ldGhvZHMvYWxsb3dQZW5kaW5nVXNlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9tZXRob2RzL2NoYW5nZUd1ZXN0UG9saWN5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycy9zZXJ2ZXIvbWV0aG9kcy9zZXRHdWVzdExvYmJ5TWVzc2FnZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3Vlc3QtdXNlcnMvc2VydmVyL21vZGlmaWVycy9jbGVhckd1ZXN0VXNlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9tb2RpZmllcnMvcmVtb3ZlR3Vlc3QuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9tb2RpZmllcnMvc2V0R3Vlc3RTdGF0dXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycy9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvZ3Vlc3QtdXNlcnMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzL3NlcnZlci9tZXRob2RzL3VzZXJDaGFuZ2VkTG9jYWxTZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbG9jYWwtc2V0dGluZ3Mvc2VydmVyL21vZGlmaWVycy9jbGVhckxvY2FsU2V0dGluZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzL3NlcnZlci9tb2RpZmllcnMvc2V0Q2hhbmdlZExvY2FsU2V0dGluZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbG9jYWwtc2V0dGluZ3Mvc2VydmVyL21ldGhvZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzL3NlcnZlci9wdWJsaXNoZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9sb2NhbC1zZXR0aW5ncy9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbG9nLWNsaWVudC9zZXJ2ZXIvbWV0aG9kcy9sb2dDbGllbnQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2xvZy1jbGllbnQvc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9sb2ctY2xpZW50L3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvaGFuZGxlcnMvZ2V0QWxsTWVldGluZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy9ndWVzdExvYmJ5TWVzc2FnZUNoYW5nZWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy9ndWVzdFBvbGljeUNoYW5nZWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy9tZWV0aW5nQ3JlYXRpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy9tZWV0aW5nRGVzdHJ1Y3Rpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy9tZWV0aW5nRW5kLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvaGFuZGxlcnMvbWVldGluZ0xvY2tDaGFuZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy9yZWNvcmRpbmdTdGF0dXNDaGFuZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy9yZWNvcmRpbmdUaW1lckNoYW5nZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL2hhbmRsZXJzL3NlbGVjdFJhbmRvbVZpZXdlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL2hhbmRsZXJzL3RpbWVSZW1haW5pbmdVcGRhdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9oYW5kbGVycy91c2VyTG9ja0NoYW5nZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL2hhbmRsZXJzL3dlYmNhbU9ubHlNb2RlcmF0b3IuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9tZXRob2RzL2NsZWFyUmFuZG9tbHlTZWxlY3RlZFVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9tZXRob2RzL2VuZE1lZXRpbmcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9tZXRob2RzL3RvZ2dsZUxvY2tTZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL21ldGhvZHMvdG9nZ2xlUmVjb3JkaW5nLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvbWV0aG9kcy90b2dnbGVXZWJjYW1zT25seUZvck1vZGVyYXRvci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL21ldGhvZHMvdHJhbnNmZXJVc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZE1lZXRpbmcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9tb2RpZmllcnMvY2hhbmdlTG9ja1NldHRpbmdzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvbW9kaWZpZXJzL2NoYW5nZVVzZXJMb2NrLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyTWVldGluZ1RpbWVSZW1haW5pbmcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJSZWNvcmRNZWV0aW5nLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvbW9kaWZpZXJzL21lZXRpbmdIYXNFbmRlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL21vZGlmaWVycy9zZXRHdWVzdExvYmJ5TWVzc2FnZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL21vZGlmaWVycy9zZXRHdWVzdFBvbGljeS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL21vZGlmaWVycy9zZXRQdWJsaXNoZWRQb2xsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvbW9kaWZpZXJzL3VwZGF0ZVJhbmRvbVZpZXdlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL21vZGlmaWVycy93ZWJjYW1Pbmx5TW9kZXJhdG9yLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvZXZlbnRIYW5kbGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9tZWV0aW5ncy9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL21lZXRpbmdzL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9uZXR3b3JrLWluZm9ybWF0aW9uL3NlcnZlci9tZXRob2RzL3VzZXJJbnN0YWJpbGl0eURldGVjdGVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9uZXR3b3JrLWluZm9ybWF0aW9uL3NlcnZlci9tb2RpZmllcnMvY2xlYXJOZXR3b3JrSW5mb3JtYXRpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL25ldHdvcmstaW5mb3JtYXRpb24vc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9uZXR3b3JrLWluZm9ybWF0aW9uL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9uZXR3b3JrLWluZm9ybWF0aW9uL3NlcnZlci9wdWJsaXNoZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL25ldHdvcmstaW5mb3JtYXRpb24vaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL2hhbmRsZXJzL3BhZFVwZGF0ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbm90ZS9zZXJ2ZXIvbWV0aG9kcy9hZGRQYWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL21ldGhvZHMvY3JlYXRlTm90ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbm90ZS9zZXJ2ZXIvbW9kaWZpZXJzL2FkZE5vdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL21vZGlmaWVycy9jbGVhck5vdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL21vZGlmaWVycy91cGRhdGVOb3RlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ub3RlL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ub3RlL3NlcnZlci9oZWxwZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9ub3RlL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbm90ZS9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvbm90ZS9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvc2VydmVyL2hhbmRsZXJzL3BvbGxQdWJsaXNoZWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3BvbGxzL3NlcnZlci9oYW5kbGVycy9wb2xsU3RhcnRlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvc2VydmVyL2hhbmRsZXJzL3BvbGxTdG9wcGVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvaGFuZGxlcnMvc2VuZFBvbGxDaGF0TXNnLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvaGFuZGxlcnMvdXNlclJlc3BvbmRlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvc2VydmVyL2hhbmRsZXJzL3VzZXJUeXBlZFJlc3BvbnNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvaGFuZGxlcnMvdXNlclZvdGVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvbWV0aG9kcy9wdWJsaXNoUG9sbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvc2VydmVyL21ldGhvZHMvcHVibGlzaFR5cGVkVm90ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvc2VydmVyL21ldGhvZHMvcHVibGlzaFZvdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3BvbGxzL3NlcnZlci9tZXRob2RzL3N0YXJ0UG9sbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvc2VydmVyL21ldGhvZHMvc3RvcFBvbGwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3BvbGxzL3NlcnZlci9tb2RpZmllcnMvYWRkUG9sbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvc2VydmVyL21vZGlmaWVycy9jbGVhclBvbGxzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvbW9kaWZpZXJzL3JlbW92ZVBvbGwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3BvbGxzL3NlcnZlci9tb2RpZmllcnMvdXBkYXRlVm90ZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3BvbGxzL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3BvbGxzL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcG9sbHMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi1wb2RzL3NlcnZlci9oYW5kbGVycy9jcmVhdGVOZXdQcmVzZW50YXRpb25Qb2QuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi1wb2RzL3NlcnZlci9oYW5kbGVycy9yZW1vdmVQcmVzZW50YXRpb25Qb2QuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi1wb2RzL3NlcnZlci9oYW5kbGVycy9zZXRQcmVzZW50ZXJJblBvZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXBvZHMvc2VydmVyL2hhbmRsZXJzL3N5bmNHZXRQcmVzZW50YXRpb25Qb2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZFByZXNlbnRhdGlvblBvZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXBvZHMvc2VydmVyL21vZGlmaWVycy9jbGVhclByZXNlbnRhdGlvblBvZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi1wb2RzL3NlcnZlci9tb2RpZmllcnMvcmVtb3ZlUHJlc2VudGF0aW9uUG9kLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcy9zZXJ2ZXIvbW9kaWZpZXJzL3NldFByZXNlbnRlckluUG9kLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcy9zZXJ2ZXIvZXZlbnRIYW5kbGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXBvZHMvc2VydmVyL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcy9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXBvZHMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi11cGxvYWQtdG9rZW4vc2VydmVyL2hhbmRsZXJzL3ByZXNlbnRhdGlvblVwbG9hZFRva2VuRmFpbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbi9zZXJ2ZXIvaGFuZGxlcnMvcHJlc2VudGF0aW9uVXBsb2FkVG9rZW5QYXNzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tdXBsb2FkLXRva2VuL3NlcnZlci9tZXRob2RzL3JlcXVlc3RQcmVzZW50YXRpb25VcGxvYWRUb2tlbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbi9zZXJ2ZXIvbWV0aG9kcy9zZXRVc2VkVG9rZW4uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi11cGxvYWQtdG9rZW4vc2VydmVyL21vZGlmaWVycy9jbGVhclByZXNlbnRhdGlvblVwbG9hZFRva2VuLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tdXBsb2FkLXRva2VuL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tdXBsb2FkLXRva2VuL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbi9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbi9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbi9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucy9zZXJ2ZXIvaGFuZGxlcnMvcHJlc2VudGF0aW9uQWRkZWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvc2VydmVyL2hhbmRsZXJzL3ByZXNlbnRhdGlvbkNvbnZlcnNpb25VcGRhdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvc2VydmVyL2hhbmRsZXJzL3ByZXNlbnRhdGlvbkN1cnJlbnRTZXQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvc2VydmVyL2hhbmRsZXJzL3ByZXNlbnRhdGlvbkRvd25sb2FkYWJsZVNldC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucy9zZXJ2ZXIvaGFuZGxlcnMvcHJlc2VudGF0aW9uUmVtb3ZlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zL3NlcnZlci9tZXRob2RzL3JlbW92ZVByZXNlbnRhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucy9zZXJ2ZXIvbWV0aG9kcy9zZXRQcmVzZW50YXRpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvc2VydmVyL21ldGhvZHMvc2V0UHJlc2VudGF0aW9uRG93bmxvYWRhYmxlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zL3NlcnZlci9tb2RpZmllcnMvYWRkUHJlc2VudGF0aW9uLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zL3NlcnZlci9tb2RpZmllcnMvY2xlYXJQcmVzZW50YXRpb25zLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zL3NlcnZlci9tb2RpZmllcnMvcmVtb3ZlUHJlc2VudGF0aW9uLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zL3NlcnZlci9tb2RpZmllcnMvc2V0Q3VycmVudFByZXNlbnRhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucy9zZXJ2ZXIvbW9kaWZpZXJzL3NldFByZXNlbnRhdGlvbkRvd25sb2FkYWJsZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucy9zZXJ2ZXIvZXZlbnRIYW5kbGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvc2VydmVyL21ldGhvZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NjcmVlbnNoYXJlL3NlcnZlci9oYW5kbGVycy9zY3JlZW5zaGFyZVN0YXJ0ZWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NjcmVlbnNoYXJlL3NlcnZlci9oYW5kbGVycy9zY3JlZW5zaGFyZVN0b3BwZWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NjcmVlbnNoYXJlL3NlcnZlci9tb2RpZmllcnMvYWRkU2NyZWVuc2hhcmUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NjcmVlbnNoYXJlL3NlcnZlci9tb2RpZmllcnMvY2xlYXJTY3JlZW5zaGFyZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2NyZWVuc2hhcmUvc2VydmVyL2V2ZW50SGFuZGxlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NjcmVlbnNoYXJlL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2NyZWVuc2hhcmUvc2VydmVyL21ldGhvZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NjcmVlbnNoYXJlL3NlcnZlci9wdWJsaXNoZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9zY3JlZW5zaGFyZS9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9oYW5kbGVycy9zbGlkZUNoYW5nZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9oYW5kbGVycy9zbGlkZVJlc2l6ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9tZXRob2RzL3N3aXRjaFNsaWRlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9zbGlkZXMvc2VydmVyL21ldGhvZHMvem9vbVNsaWRlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9zbGlkZXMvc2VydmVyL21vZGlmaWVycy9hZGRTbGlkZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9tb2RpZmllcnMvYWRkU2xpZGVQb3NpdGlvbnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NsaWRlcy9zZXJ2ZXIvbW9kaWZpZXJzL2NoYW5nZUN1cnJlbnRTbGlkZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJTbGlkZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NsaWRlcy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyU2xpZGVzUHJlc2VudGF0aW9uLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9zbGlkZXMvc2VydmVyL21vZGlmaWVycy9yZXNpemVTbGlkZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9zbGlkZXMvc2VydmVyL2hlbHBlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NsaWRlcy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3NsaWRlcy9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9wdWJsaXNoZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS9zbGlkZXMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9oYW5kbGVycy9jaGFuZ2VSb2xlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvZW1vamlTdGF0dXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9oYW5kbGVycy9wcmVzZW50ZXJBc3NpZ25lZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL2hhbmRsZXJzL3JlbW92ZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9oYW5kbGVycy91c2VyRWplY3RlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL2hhbmRsZXJzL3VzZXJJbmFjdGl2aXR5SW5zcGVjdC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL2hhbmRsZXJzL3VzZXJKb2luLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvdXNlckpvaW5lZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL2hhbmRsZXJzL3ZhbGlkYXRlQXV0aFRva2VuLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbWV0aG9kcy9hc3NpZ25QcmVzZW50ZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tZXRob2RzL2NoYW5nZVJvbGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tZXRob2RzL3JlbW92ZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tZXRob2RzL3NldEVtb2ppU3RhdHVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbWV0aG9kcy9zZXRNb2JpbGVVc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbWV0aG9kcy9zZXRSYW5kb21Vc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbWV0aG9kcy9zZXRVc2VyRWZmZWN0aXZlQ29ubmVjdGlvblR5cGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tZXRob2RzL3RvZ2dsZVVzZXJMb2NrLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbWV0aG9kcy91c2VyQWN0aXZpdHlTaWduLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbWV0aG9kcy91c2VyTGVhdmluZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL21ldGhvZHMvdXNlckxlZnRNZWV0aW5nLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbWV0aG9kcy92YWxpZGF0ZUF1dGhUb2tlbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL21vZGlmaWVycy9hZGREaWFsSW5Vc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZFVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tb2RpZmllcnMvY2hhbmdlUHJlc2VudGVyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL2NoYW5nZVJvbGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL21vZGlmaWVycy9jcmVhdGVEdW1teVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tb2RpZmllcnMvcmVtb3ZlVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL21vZGlmaWVycy9zZXRNb2JpbGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tb2RpZmllcnMvc2V0VXNlckVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL3VzZXJFamVjdGVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL3VzZXJJbmFjdGl2aXR5SW5zcGVjdC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL3N0b3JlL3BlbmRpbmdBdXRoZW50aWNhdGlvbnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLWluZm9zL3NlcnZlci9oYW5kbGVycy91c2VySW5mb3JtYXRpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLWluZm9zL3NlcnZlci9tZXRob2RzL3JlbW92ZVVzZXJJbmZvcm1hdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMtaW5mb3Mvc2VydmVyL21ldGhvZHMvcmVxdWVzdFVzZXJJbmZvcm1hdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMtaW5mb3Mvc2VydmVyL21vZGlmaWVycy9hZGRVc2VySW5mby5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMtaW5mb3Mvc2VydmVyL21vZGlmaWVycy9jbGVhclVzZXJJbmZvLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy1pbmZvcy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyVXNlckluZm9Gb3JSZXF1ZXN0ZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLWluZm9zL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy1pbmZvcy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLWluZm9zL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy1pbmZvcy9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMtaW5mb3MvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLXBlcnNpc3RlbnQtZGF0YS9zZXJ2ZXIvbW9kaWZpZXJzL2FkZFVzZXJQZXJzaXN0ZW50RGF0YS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMtcGVyc2lzdGVudC1kYXRhL3NlcnZlci9tb2RpZmllcnMvY2xlYXJVc2Vyc1BlcnNpc3RlbnREYXRhLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy1wZXJzaXN0ZW50LWRhdGEvc2VydmVyL21vZGlmaWVycy9zZXRsb2dnZWRPdXRTdGF0dXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLXBlcnNpc3RlbnQtZGF0YS9zZXJ2ZXIvbW9kaWZpZXJzL3VwZGF0ZVJvbGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLXBlcnNpc3RlbnQtZGF0YS9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLXBlcnNpc3RlbnQtZGF0YS9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMtcGVyc2lzdGVudC1kYXRhL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy1zZXR0aW5ncy9zZXJ2ZXIvbWV0aG9kcy9hZGRVc2VyU2V0dGluZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLXNldHRpbmdzL3NlcnZlci9tb2RpZmllcnMvYWRkVXNlclNldHRpbmcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLXNldHRpbmdzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJVc2Vyc1NldHRpbmdzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy1zZXR0aW5ncy9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3VzZXJzLXNldHRpbmdzL3NlcnZlci9tZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS91c2Vycy1zZXR0aW5ncy9zZXJ2ZXIvcHVibGlzaGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdXNlcnMtc2V0dGluZ3MvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZpZGVvLXN0cmVhbXMvc2VydmVyL2hhbmRsZXJzL2Zsb29yQ2hhbmdlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvaGFuZGxlcnMvdXNlclNoYXJlZEh0bWw1V2ViY2FtLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zL3NlcnZlci9oYW5kbGVycy91c2VyVW5zaGFyZWRIdG1sNVdlYmNhbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvbWV0aG9kcy91c2VyU2hhcmVXZWJjYW0uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZpZGVvLXN0cmVhbXMvc2VydmVyL21ldGhvZHMvdXNlclVuc2hhcmVXZWJjYW0uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZpZGVvLXN0cmVhbXMvc2VydmVyL21vZGlmaWVycy9jbGVhclZpZGVvU3RyZWFtcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvbW9kaWZpZXJzL2Zsb29yQ2hhbmdlZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvbW9kaWZpZXJzL3NoYXJlZFdlYmNhbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvbW9kaWZpZXJzL3Vuc2hhcmVkV2ViY2FtLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zL3NlcnZlci9oZWxwZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvcHVibGlzaGVyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS1jYWxsLXN0YXRlcy9zZXJ2ZXIvaGFuZGxlcnMvdm9pY2VDYWxsU3RhdGVFdmVudC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtY2FsbC1zdGF0ZXMvc2VydmVyL21vZGlmaWVycy9jbGVhclZvaWNlQ2FsbFN0YXRlcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtY2FsbC1zdGF0ZXMvc2VydmVyL2V2ZW50SGFuZGxlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZvaWNlLWNhbGwtc3RhdGVzL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtY2FsbC1zdGF0ZXMvc2VydmVyL3B1Ymxpc2hlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZvaWNlLWNhbGwtc3RhdGVzL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvZmxvb3JDaGFuZ2VkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvZ2V0Vm9pY2VVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvc2VydmVyL2hhbmRsZXJzL2pvaW5Wb2ljZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzL3NlcnZlci9oYW5kbGVycy9sZWZ0Vm9pY2VVc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvbWVldGluZ011dGVkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvbXV0ZWRWb2ljZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzL3NlcnZlci9oYW5kbGVycy90YWxraW5nVm9pY2VVc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvaGFuZGxlcnMvdm9pY2VVc2Vycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvc2VydmVyL21ldGhvZHMvZWplY3RVc2VyRnJvbVZvaWNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvbWV0aG9kcy9tdXRlQWxsRXhjZXB0UHJlc2VudGVyVG9nZ2xlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvbWV0aG9kcy9tdXRlQWxsVG9nZ2xlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvbWV0aG9kcy9tdXRlVG9nZ2xlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZFZvaWNlVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvc2VydmVyL21vZGlmaWVycy9jaGFuZ2VNdXRlTWVldGluZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvc2VydmVyL21vZGlmaWVycy9jbGVhclZvaWNlVXNlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzL3NlcnZlci9tb2RpZmllcnMvcmVtb3ZlVm9pY2VVc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL3VwZGF0ZVZvaWNlVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvc2VydmVyL2V2ZW50SGFuZGxlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvc2VydmVyL21ldGhvZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzL3NlcnZlci9wdWJsaXNoZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvd2hpdGVib2FyZC1tdWx0aS11c2VyL3NlcnZlci9oYW5kbGVycy9tb2RpZnlXaGl0ZWJvYXJkQWNjZXNzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS93aGl0ZWJvYXJkLW11bHRpLXVzZXIvc2VydmVyL21ldGhvZHMvYWRkR2xvYmFsQWNjZXNzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS93aGl0ZWJvYXJkLW11bHRpLXVzZXIvc2VydmVyL21ldGhvZHMvYWRkSW5kaXZpZHVhbEFjY2Vzcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvd2hpdGVib2FyZC1tdWx0aS11c2VyL3NlcnZlci9tZXRob2RzL3JlbW92ZUdsb2JhbEFjY2Vzcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvd2hpdGVib2FyZC1tdWx0aS11c2VyL3NlcnZlci9tZXRob2RzL3JlbW92ZUluZGl2aWR1YWxBY2Nlc3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyV2hpdGVib2FyZE11bHRpVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvd2hpdGVib2FyZC1tdWx0aS11c2VyL3NlcnZlci9tb2RpZmllcnMvbW9kaWZ5V2hpdGVib2FyZEFjY2Vzcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvd2hpdGVib2FyZC1tdWx0aS11c2VyL3NlcnZlci9ldmVudEhhbmRsZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS93aGl0ZWJvYXJkLW11bHRpLXVzZXIvc2VydmVyL2hlbHBlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci9zZXJ2ZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci9zZXJ2ZXIvbWV0aG9kcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9hcGkvd2hpdGVib2FyZC1tdWx0aS11c2VyL3NlcnZlci9wdWJsaXNoZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9pbXBvcnRzL2FwaS93aGl0ZWJvYXJkLW11bHRpLXVzZXIvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvZXRoZXJwYWQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9DbGllbnRDb25uZWN0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9ldGhlcnBhZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbWV0cmljcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9taW5Ccm93c2VyVmVyc2lvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9zZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy91dGlscy9saW5lRW5kaW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvaW1wb3J0cy91dGlscy9taW1lVHlwZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL2ltcG9ydHMvdXRpbHMvcmVnZXgtd2VidXJsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9zZXJ2ZXIvbWFpbi5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnQiLCJkZWZhdWx0IiwiaGFuZGxlV2hpdGVib2FyZEFubm90YXRpb25zIiwiXyIsImxpbmsiLCJ2IiwiY2hlY2siLCJtb2RpZnlXaGl0ZWJvYXJkQWNjZXNzIiwiY2xlYXJBbm5vdGF0aW9ucyIsImFkZEFubm90YXRpb24iLCJtZWV0aW5nSWQiLCJoZWFkZXIiLCJib2R5IiwiT2JqZWN0IiwidXNlcklkIiwiU3RyaW5nIiwiYW5ub3RhdGlvbnMiLCJ3aGl0ZWJvYXJkSWQiLCJtdWx0aVVzZXIiLCJBcnJheSIsImVhY2giLCJhbm5vdGF0aW9uIiwid2JJZCIsImhhbmRsZVdoaXRlYm9hcmRDbGVhcmVkIiwiQW5ub3RhdGlvbnNTdHJlYW1lciIsImZ1bGxDbGVhciIsIkJvb2xlYW4iLCJlbWl0IiwiaGFuZGxlV2hpdGVib2FyZFNlbmQiLCJNZXRyaWNzIiwicXVldWVNZXRyaWNzIiwiTWV0ZW9yIiwic2V0dGluZ3MiLCJwcml2YXRlIiwicmVkaXMiLCJtZXRyaWNzIiwiYW5ub3RhdGlvbnNRdWV1ZVByb2Nlc3NJbnRlcnZhbCIsIkFOTk9UQVRJT05fUFJPQ0VTU19JTlRFUlZBTCIsInB1YmxpYyIsIndoaXRlYm9hcmQiLCJhbm5vdGF0aW9uc1F1ZXVlIiwiYW5ub3RhdGlvbnNSZWNpZXZlcklzUnVubmluZyIsInByb2Nlc3MiLCJrZXlzIiwibGVuZ3RoIiwiZm9yRWFjaCIsInNldEFubm90YXRpb25RdWV1ZUxlbmd0aCIsInNldFRpbWVvdXQiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJoYW5kbGVXaGl0ZWJvYXJkVW5kbyIsInJlbW92ZUFubm90YXRpb24iLCJzaGFwZUlkIiwiYW5ub3RhdGlvbklkIiwiY2xlYXJXaGl0ZWJvYXJkIiwiUmVkaXNQdWJTdWIiLCJleHRyYWN0Q3JlZGVudGlhbHMiLCJMb2dnZXIiLCJSRURJU19DT05GSUciLCJDSEFOTkVMIiwiY2hhbm5lbHMiLCJ0b0Fra2FBcHBzIiwiRVZFTlRfTkFNRSIsInJlcXVlc3RlclVzZXJJZCIsInBheWxvYWQiLCJwdWJsaXNoVXNlck1lc3NhZ2UiLCJlcnIiLCJlcnJvciIsInN0YWNrIiwic2VuZEFubm90YXRpb24iLCJzZW5kQW5ub3RhdGlvbkhlbHBlciIsImFubm90YXRpb25UeXBlIiwiaWQiLCJzdGF0dXMiLCJhbm5vdGF0aW9uSW5mbyIsIngiLCJOdW1iZXIiLCJ5IiwiZm9udENvbG9yIiwiY2FsY2VkRm9udFNpemUiLCJ0ZXh0Qm94V2lkdGgiLCJ0ZXh0IiwidGV4dEJveEhlaWdodCIsImZvbnRTaXplIiwiZGF0YVBvaW50cyIsInR5cGUiLCJwb3NpdGlvbiIsImNvbG9yIiwidGhpY2tuZXNzIiwicG9pbnRzIiwiZGltZW5zaW9ucyIsIk1hdGNoIiwiTWF5YmUiLCJkcmF3RW5kT25seSIsInNlbmRCdWxrQW5ub3RhdGlvbnMiLCJ1bmRvQW5ub3RhdGlvbiIsIkFubm90YXRpb25zIiwiYWRkQW5ub3RhdGlvblF1ZXJ5IiwicXVlcnkiLCJpbnNlcnRlZElkIiwidXBzZXJ0Iiwic2VsZWN0b3IiLCJtb2RpZmllciIsImluZm8iLCJudW1iZXJBZmZlY3RlZCIsInJlbW92ZSIsInByb2Nlc3NGb3JIVE1MNVNlcnZlck9ubHkiLCJvbiIsIm1ldGhvZHMiLCJBdXRoVG9rZW5WYWxpZGF0aW9uIiwiVmFsaWRhdGlvblN0YXRlcyIsInRva2VuVmFsaWRhdGlvbiIsImZpbmRPbmUiLCJjb25uZWN0aW9uSWQiLCJjb25uZWN0aW9uIiwidmFsaWRhdGlvblN0YXR1cyIsIlZBTElEQVRFRCIsIndhcm4iLCJmaW5kIiwiZGVidWciLCJwdWJsaXNoIiwiYm91bmRBbm5vdGF0aW9ucyIsImJpbmQiLCJyZW1vdmVBbm5vdGF0aW9uc1N0cmVhbWVyIiwiYWRkQW5ub3RhdGlvbnNTdHJlYW1lciIsImdldCIsIlN0cmVhbWVyQ2VudHJhbCIsImluc3RhbmNlcyIsInN0cmVhbWVyIiwiU3RyZWFtZXIiLCJyZXRyYW5zbWl0IiwiYWxsb3dSZWFkIiwiaW5jbHVkZXMiLCJhbGxvd1dyaXRlIiwiQU5OT1RBVElPTl9UWVBFX1RFWFQiLCJBTk5PVEFUSU9OX1RZUEVfUEVOQ0lMIiwiaGFuZGxlQ29tbW9uQW5ub3RhdGlvbiIsIiRzZXQiLCIkc2V0T25JbnNlcnQiLCIkaW5jIiwidmVyc2lvbiIsImhhbmRsZVRleHRVcGRhdGUiLCJyZXBsYWNlIiwiaGFuZGxlUGVuY2lsVXBkYXRlIiwiRFJBV19TVEFSVCIsIkRSQVdfVVBEQVRFIiwiRFJBV19FTkQiLCJiYXNlU2VsZWN0b3IiLCJiYXNlTW9kaWZpZXIiLCIkcHVzaCIsIiRlYWNoIiwiTW9uZ28iLCJDb2xsZWN0aW9uIiwiaXNTZXJ2ZXIiLCJfZW5zdXJlSW5kZXgiLCJleHBvcnREZWZhdWx0IiwiY2xlYXJBdXRoVG9rZW5WYWxpZGF0aW9uIiwiQ2xpZW50Q29ubmVjdGlvbnMiLCJudW0iLCJlbnYiLCJCQkJfSFRNTDVfUk9MRSIsInJlbW92ZU1lZXRpbmciLCJ1cHNlcnRWYWxpZGF0aW9uU3RhdGUiLCJyZWFzb24iLCJ1cGRhdGVkQXQiLCJEYXRlIiwiZ2V0VGltZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhdXRoVG9rZW5WYWxpZGF0aW9uIiwiYm91bmRBdXRoVG9rZW5WYWxpZGF0aW9uIiwiZnJlZXplIiwiTk9UX1ZBTElEQVRFRCIsIlZBTElEQVRJTkciLCJJTlZBTElEIiwiaGFuZGxlQnJlYWtvdXRDbG9zZWQiLCJjbGVhckJyZWFrb3V0cyIsImJyZWFrb3V0SWQiLCJoYW5kbGVCcmVha291dEpvaW5VUkwiLCJCcmVha291dHMiLCJyZWRpcmVjdFRvSHRtbDVKb2luVVJMIiwidXNlcnMiLCJpbnNlcnRlZFRpbWUiLCJoYW5kbGVCcmVha291dFJvb21TdGFydGVkIiwiZmxhdCIsIkRFRkFVTFRfVElNRV9SRU1BSU5JTkciLCJwYXJlbnRNZWV0aW5nSWQiLCJicmVha291dCIsImFzc2lnbiIsImpvaW5lZFVzZXJzIiwidGltZVJlbWFpbmluZyIsImpvaW5lZFVzZXJzQ2hhbmdlZCIsInBhcmVudElkIiwidXNlcnNNYXBwZWQiLCJtYXAiLCJ1c2VyIiwibmFtZSIsInVwZGF0ZSIsImhhbmRsZVVwZGF0ZVRpbWVSZW1haW5pbmciLCJvcHRpb25zIiwibXVsdGkiLCJjcmVhdGVCcmVha291dFJvb20iLCJyb29tcyIsImR1cmF0aW9uSW5NaW51dGVzIiwicmVjb3JkIiwiQlJFQUtPVVRfTElNIiwiYXBwIiwiYnJlYWtvdXRzIiwiYnJlYWtvdXRSb29tTGltaXQiLCJNSU5fQlJFQUtPVVRfUk9PTVMiLCJNQVhfQlJFQUtPVVRfUk9PTVMiLCJlbmRBbGxCcmVha291dHMiLCJyZXF1ZXN0Sm9pblVSTCIsInVzZXJJZFRvSW52aXRlIiwiaGFuZGxlQnJlYWtvdXRTdGFydGVkIiwiVXNlcnMiLCJST0xFX01PREVSQVRPUiIsInJvbGVfbW9kZXJhdG9yIiwicm9sZSIsIlVzZXIiLCJmaWVsZHMiLCJwcmVzZW50ZXJTZWxlY3RvciIsIiRvciIsImZyZWVKb2luIiwiYm91bmRCcmVha291dHMiLCJoYW5kbGVQYWRDcmVhdGUiLCJmZXRjaFJlYWRPbmx5UGFkSWQiLCJwYWQiLCJoYW5kbGVQYWRVcGRhdGUiLCJnZXREYXRhRnJvbUNoYW5nZXNldCIsInVwZGF0ZVBhZCIsInJldnMiLCJjaGFuZ2VzZXQiLCJkYXRhIiwiYWRkQ2FwdGlvbnNQYWRzIiwicGFkSWRzIiwiYWRkUGFkIiwiQ2FwdGlvbnMiLCJwYWRJZCIsInJlYWRPbmx5SWQiLCJhcHBlbmRUZXh0IiwiYXhpb3MiLCJDQVBUSU9OU19UT0tFTiIsImFwcGVuZFRleHRVUkwiLCJsb2NhbGUiLCJjYXB0aW9ucyIsIiRyZWdleCIsIm1ldGhvZCIsInVybCIsInJlc3BvbnNlVHlwZSIsInRoZW4iLCJyZXNwb25zZSIsImNhdGNoIiwiY3JlYXRlQ2FwdGlvbnMiLCJnZW5lcmF0ZVBhZElkIiwiaXNFbmFibGVkIiwiZ2V0TG9jYWxlc1VSTCIsIndpdGhJbnN0YWNlSWQiLCJhZGRDYXB0aW9uIiwiaW5zdGFuY2VJZCIsImxvY2FsZXMiLCJlZGl0Q2FwdGlvbnMiLCJnZXRJbmRleCIsIm93bmVySWQiLCJpbmRleCIsInN0YXJ0SW5kZXgiLCJsb2NhbGVDb2RlIiwiZW5kSW5kZXgiLCJnZXRSZWFkT25seUlkVVJMIiwiZ2V0RGF0YUZyb21SZXNwb25zZSIsInVwZGF0ZVJlYWRPbmx5UGFkSWQiLCJyZWFkT25seVBhZElkIiwidGFrZU93bmVyc2hpcCIsInVwZGF0ZU93bmVySWQiLCJ1cGRhdGVPd25lciIsInZlcmJvc2UiLCJjbGVhckNhcHRpb25zIiwicHJvY2Vzc0ZvckNhcHRpb25zUGFkT25seSIsImhhc2hTSEExIiwiRVRIRVJQQUQiLCJldGhlcnBhZCIsIkNBUFRJT05TX0NPTkZJRyIsIkJBU0VOQU1FIiwiYmFzZW5hbWUiLCJBUFAiLCJJTlNUQU5DRV9JRCIsIkxPQ0FMRVNfVVJMIiwiaG9zdCIsIlBPUlQiLCJsb2NhbGVzVXJsIiwiVE9LRU4iLCJhcGlrZXkiLCJpc0NhcHRpb25zUGFkIiwic3BsaXRQYWRJZCIsInNwbGl0Iiwic3BsaXRDaGFuZ2VzZXQiLCJzaGlmdCIsImpvaW4iLCJlbmFibGVkIiwiZm4iLCJtZXNzYWdlIiwiYXJncyIsInJlcXVlc3RlZEJ5IiwiYm91bmRDYXB0aW9ucyIsImFkZENvbm5lY3Rpb25TdGF0dXMiLCJ1cGRhdGVDb25uZWN0aW9uU3RhdHVzIiwiU1RBVFMiLCJzdGF0cyIsImxvZ0Nvbm5lY3Rpb25TdGF0dXMiLCJ2YWx1ZSIsImppdHRlciIsImxvc3MiLCJydHQiLCJsb2ciLCJ2b2lkQ29ubmVjdGlvbiIsImNsZWFyQ29ubmVjdGlvblN0YXR1cyIsIkNvbm5lY3Rpb25TdGF0dXMiLCJsZXZlbCIsInRpbWVzdGFtcCIsImNvbm5lY3Rpb25TdGF0dXMiLCJib3VuZE5vdGUiLCJoYW5kbGVDdXJzb3JVcGRhdGUiLCJDdXJzb3JTdHJlYW1lciIsIkNVUlNPUl9QUk9DQ0VTU19JTlRFUlZBTCIsImN1cnNvclF1ZXVlIiwicHJvY2Nlc3MiLCJ0aHJvdHRsZSIsImN1cnNvcnMiLCJwdWJsaXNoQ3Vyc29yVXBkYXRlIiwicmVtb3ZlQ3Vyc29yU3RyZWFtZXIiLCJhZGRDdXJzb3JTdHJlYW1lciIsInN0cmVhbWVyTG9nIiwic2VydmVyTG9nIiwiaGFuZGxlU3RhcnRFeHRlcm5hbFZpZGVvIiwiTWVldGluZ3MiLCJleHRlcm5hbFZpZGVvVXJsIiwicHJlc2VudGVyIiwiaGFuZGxlU3RvcEV4dGVybmFsVmlkZW8iLCJfb2JqZWN0U3ByZWFkIiwiaGFuZGxlVXBkYXRlRXh0ZXJuYWxWaWRlbyIsIkV4dGVybmFsVmlkZW9TdHJlYW1lciIsImVtaXRFeHRlcm5hbFZpZGVvRXZlbnQiLCJwbGF5ZXJTdGF0dXMiLCJyYXRlIiwidGltZSIsInN0YXRlIiwic3RhcnRXYXRjaGluZ0V4dGVybmFsVmlkZW8iLCJzdG9wV2F0Y2hpbmdFeHRlcm5hbFZpZGVvIiwic3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlb1N5c3RlbUNhbGwiLCJtZWV0aW5nIiwicmVtb3ZlRXh0ZXJuYWxWaWRlb1N0cmVhbWVyIiwiYWRkRXh0ZXJuYWxWaWRlb1N0cmVhbWVyIiwiYWxsb3dSZWNlbnRNZXNzYWdlcyIsImV2ZW50TmFtZSIsInN0cmVhbU5hbWUiLCJhbGxvd0VtaXQiLCJoYW5kbGVHcm91cENoYXRDcmVhdGVkIiwiYWRkR3JvdXBDaGF0IiwiaGFuZGxlR3JvdXBDaGF0RGVzdHJveWVkIiwiaGFuZGxlR3JvdXBDaGF0cyIsImNoYXRzIiwiY2hhdCIsImNyZWF0ZUdyb3VwQ2hhdCIsIkNIQVRfQUNDRVNTX1BSSVZBVEUiLCJyZWNlaXZlciIsImNvcnJlbGF0aW9uSWQiLCJub3ciLCJtc2ciLCJhY2Nlc3MiLCJkZXN0cm95R3JvdXBDaGF0IiwiR3JvdXBDaGF0IiwiY2hhdElkIiwiY3JlYXRlZEJ5IiwiY2hhdERvY3VtZW50IiwidSIsInBhcnRpY2lwYW50cyIsInNhZmUiLCJjbGVhckdyb3VwQ2hhdCIsImNsZWFyR3JvdXBDaGF0TXNnIiwiZ3JvdXBDaGF0IiwiQ0hBVF9DT05GSUciLCJQVUJMSUNfQ0hBVF9UWVBFIiwidHlwZV9wdWJsaWMiLCIkYWxsIiwiYm91bmRHcm91cENoYXQiLCJDSEFUX0FDQ0VTU19QVUJMSUMiLCJDSEFUX0FDQ0VTUyIsIlBVQkxJQyIsIlBSSVZBVEUiLCJjbGVhclB1YmxpY0NoYXRIaXN0b3J5IiwiaGFuZGxlR3JvdXBDaGF0TXNnQnJvYWRjYXN0IiwiYWRkR3JvdXBDaGF0TXNnIiwiYWRkQnVsa0dyb3VwQ2hhdE1zZ3MiLCJidWZmZXJDaGF0SW5zZXJ0c01zIiwibXNnQnVmZmVyIiwiYnVsa0ZuIiwiaGFuZGxlU3luY0dyb3VwQ2hhdCIsInN5bmNNZWV0aW5nQ2hhdE1zZ3MiLCJtc2dzIiwiaGFuZGxlVXNlclR5cGluZyIsInN0YXJ0VHlwaW5nIiwiY2hhdE1lc3NhZ2VCZWZvcmVKb2luQ291bnRlciIsIkdyb3VwQ2hhdE1zZyIsImdyb3VwQ2hhdHMiLCJmZXRjaCIsImNoYXRJZFdpdGhDb3VudGVyIiwibXNnQ291bnQiLCIkbHQiLCJhdXRoVG9rZW5WYWxpZGF0ZWRUaW1lIiwiY291bnQiLCJmaWx0ZXIiLCJQVUJMSUNfR1JPVVBfQ0hBVF9JRCIsInB1YmxpY19ncm91cF9pZCIsImZldGNoTWVzc2FnZVBlclBhZ2UiLCJJVEVOU19QRVJfUEFHRSIsIml0ZW1zUGVyUGFnZSIsInBhZ2UiLCJtZXNzYWdlcyIsInNvcnQiLCJza2lwIiwibGltaXQiLCJzZW5kR3JvdXBDaGF0TXNnIiwiUmVnZXhXZWJVcmwiLCJIVE1MX1NBRkVfTUFQIiwicGFyc2VNZXNzYWdlIiwicGFyc2VkTWVzc2FnZSIsInRyaW0iLCJjIiwic3RhcnRVc2VyVHlwaW5nIiwic3RvcFVzZXJUeXBpbmciLCJVc2Vyc1R5cGluZyIsInN0b3BUeXBpbmciLCJ1c2VyVHlwaW5nIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwibWFwcGVkTXNncyIsInNlbmRlciIsInJlc3RNc2ciLCJfaWQiLCJPYmplY3RJRCIsIl9zdHIiLCJlbCIsImluc2VydGVkQ291bnQiLCJyYXdDb2xsZWN0aW9uIiwiaW5zZXJ0TWFueSIsIkJSRUFLX0xJTkUiLCJtc2dEb2N1bWVudCIsImluc2VydCIsImFkZFN5c3RlbU1zZyIsImV4dHJhIiwiUFVCTElDX0NIQVRfU1lTVEVNX0lEIiwic3lzdGVtX3VzZXJpZCIsIkNIQVRfQ0xFQVJfTUVTU0FHRSIsInN5c3RlbV9tZXNzYWdlc19rZXlzIiwiY2hhdF9jbGVhciIsIlNZU1RFTV9DSEFUX1RZUEUiLCJ0eXBlX3N5c3RlbSIsImNsZWFyTXNnIiwiJGVxIiwiVFlQSU5HX1RJTUVPVVQiLCJpc1R5cGluZ1RvIiwidHlwaW5nVXNlciIsInNlbmRNc2dJbml0aWF0ZWQiLCJzdGlsbFR5cGluZyIsImJ1bGtPcGVyYXRpb25zIiwiaW5pdGlhbGl6ZU9yZGVyZWRCdWxrT3AiLCJtc2dUb1N5bmMiLCJ1cGRhdGVPbmUiLCJleGVjdXRlIiwiaGFuZGxlQ2xlYXJQdWJsaWNHcm91cENoYXQiLCJoYW5kbGVTeW5jR3JvdXBDaGF0TXNnIiwiZ3JvdXBDaGF0TXNnIiwiY2hhdHNJZHMiLCIkZ3RlIiwiJGluIiwidXNlcnNUeXBpbmciLCJwdWJpc2hVc2Vyc1R5cGluZyIsImJvdW5kVXNlcnNUeXBpbmciLCJoYW5kbGVHdWVzdEFwcHJvdmVkIiwic2V0R3Vlc3RTdGF0dXMiLCJhcHByb3ZlZEJ5IiwiZ3Vlc3RzIiwiZ3Vlc3QiLCJoYW5kbGVHdWVzdFdhaXRpbmdMZWZ0IiwicmVtb3ZlR3Vlc3QiLCJoYW5kbGVHdWVzdHNXYWl0aW5nRm9yQXBwcm92YWwiLCJzdHJpbmdIYXNoIiwiR3Vlc3RVc2VycyIsIkNPTE9SX0xJU1QiLCJpbnRJZCIsImFwcHJvdmVkIiwiZGVuaWVkIiwibG9naW5UaW1lIiwicmVnaXN0ZXJlZE9uIiwiYWxsb3dQZW5kaW5nVXNlcnMiLCJtYXBwZWRHdWVzdHMiLCJjaGFuZ2VHdWVzdFBvbGljeSIsInBvbGljeVJ1bGUiLCJzZXRCeSIsInBvbGljeSIsInNldEd1ZXN0TG9iYnlNZXNzYWdlIiwiY2xlYXJHdWVzdFVzZXJzIiwiY2IiLCJHVUVTVF9TVEFUVVNfQUxMT1ciLCJHVUVTVF9TVEFUVVNfREVOWSIsImd1ZXN0VXNlcnMiLCJib3VuZFNsaWRlcyIsInVzZXJDaGFuZ2VkTG9jYWxTZXR0aW5ncyIsIkxvY2FsU2V0dGluZ3MiLCJzZXRDaGFuZ2VkTG9jYWxTZXR0aW5ncyIsInVzZXJMb2NhbFNldHRpbmdzIiwiaXNFcXVhbCIsImNsZWFyTG9jYWxTZXR0aW5ncyIsIm51bUNoYW5nZWQiLCJsb2NhbFNldHRpbmdzIiwiYm91bmRMb2NhbFNldHRpbmdzIiwibG9nRGVzY3JpcHRpb24iLCJsb2dDb2RlIiwiZXh0cmFJbmZvIiwidXNlckluZm8iLCJsb2dDb250ZW50cyIsImxvZ0NsaWVudCIsImhhbmRsZUdldEFsbE1lZXRpbmdzIiwiaGFuZGxlTWVldGluZ0NyZWF0aW9uIiwiaGFuZGxlR3Vlc3RMb2JieU1lc3NhZ2VDaGFuZ2VkIiwiaGFuZGxlR3Vlc3RQb2xpY3lDaGFuZ2VkIiwic2V0R3Vlc3RQb2xpY3kiLCJhZGRNZWV0aW5nIiwicHJvcHMiLCJkdXJhdGlvbkluU2Vjb2RzIiwiZHVyYXRpb25Qcm9wcyIsImR1cmF0aW9uIiwiaGFuZGxlTWVldGluZ0Rlc3RydWN0aW9uIiwiZGVzdHJveU1lZXRpbmdRdWV1ZSIsImhhbmRsZU1lZXRpbmdFbmQiLCJtZWV0aW5nSGFzRW5kZWQiLCJtZWV0aW5nVHlwZSIsIm1lZXRpbmdFbmRlZCIsIm1lZXRpbmdFbmRlZEJ5IiwiaGFuZGxlTG9ja1NldHRpbmdzSW5NZWV0aW5nIiwiY2hhbmdlTG9ja1NldHRpbmdzIiwiaGFuZGxlUmVjb3JkaW5nU3RhdHVzQ2hhbmdlIiwiUmVjb3JkTWVldGluZ3MiLCJyZWNvcmRpbmciLCJoYW5kbGVSZWNvcmRpbmdUaW1lckNoYW5nZSIsInJhbmRvbWx5U2VsZWN0ZWRVc2VyIiwidXBkYXRlUmFuZG9tVmlld2VyIiwidXNlcklkcyIsImNob2ljZSIsImhhbmRsZVRpbWVSZW1haW5pbmdVcGRhdGUiLCJNZWV0aW5nVGltZVJlbWFpbmluZyIsInRpbWVMZWZ0SW5TZWMiLCJjaGFuZ2VVc2VyTG9jayIsImhhbmRsZUNoYW5nZVdlYmNhbU9ubHlNb2RlcmF0b3IiLCJjaGFuZ2VXZWJjYW1Pbmx5TW9kZXJhdG9yIiwiY2xlYXJSYW5kb21seVNlbGVjdGVkVXNlciIsImVuZE1lZXRpbmciLCJ0b2dnbGVMb2NrU2V0dGluZ3MiLCJsb2NrU2V0dGluZ3NQcm9wcyIsImRpc2FibGVDYW0iLCJkaXNhYmxlTWljIiwiZGlzYWJsZVByaXZhdGVDaGF0IiwiZGlzYWJsZVB1YmxpY0NoYXQiLCJkaXNhYmxlTm90ZSIsImhpZGVVc2VyTGlzdCIsImxvY2tlZExheW91dCIsImxvY2tPbkpvaW4iLCJsb2NrT25Kb2luQ29uZmlndXJhYmxlIiwiZGlzYWJsZVByaXZDaGF0IiwiZGlzYWJsZVB1YkNoYXQiLCJ0b2dnbGVSZWNvcmRpbmciLCJtZWV0aW5nUmVjb3JkZWQiLCJhbGxvd2VkVG9SZWNvcmQiLCJyZWNvcmRPYmplY3QiLCJhbGxvd1N0YXJ0U3RvcFJlY29yZGluZyIsInRvZ2dsZVdlYmNhbXNPbmx5Rm9yTW9kZXJhdG9yIiwid2ViY2Ftc09ubHlGb3JNb2RlcmF0b3IiLCJ0cmFuc2ZlclVzZXIiLCJmcm9tTWVldGluZ0lkIiwidG9NZWV0aW5nSWQiLCJTYW5pdGl6ZUhUTUwiLCJpbml0UGFkcyIsIm1lZXRpbmdQcm9wIiwiYnJlYWtvdXRQcm9wcyIsInNlcXVlbmNlIiwiYnJlYWtvdXRSb29tcyIsInByaXZhdGVDaGF0RW5hYmxlZCIsImV4dElkIiwiaXNCcmVha291dCIsInVzZXJzUHJvcCIsImd1ZXN0UG9saWN5IiwiYXV0aGVudGljYXRlZEd1ZXN0IiwibWF4VXNlcnMiLCJhbGxvd01vZHNUb1VubXV0ZVVzZXJzIiwiY3JlYXRlZFRpbWUiLCJjcmVhdGVkRGF0ZSIsIm1lZXRpbmdFeHBpcmVJZk5vVXNlckpvaW5lZEluTWludXRlcyIsIm1lZXRpbmdFeHBpcmVXaGVuTGFzdFVzZXJMZWZ0SW5NaW51dGVzIiwidXNlckluYWN0aXZpdHlJbnNwZWN0VGltZXJJbk1pbnV0ZXMiLCJ1c2VySW5hY3Rpdml0eVRocmVzaG9sZEluTWludXRlcyIsInVzZXJBY3Rpdml0eVNpZ25SZXNwb25zZURlbGF5SW5NaW51dGVzIiwiZW5kV2hlbk5vTW9kZXJhdG9yIiwiZW5kV2hlbk5vTW9kZXJhdG9yRGVsYXlJbk1pbnV0ZXMiLCJ3ZWxjb21lUHJvcCIsIndlbGNvbWVNc2ciLCJtb2RPbmx5TWVzc2FnZSIsIndlbGNvbWVNc2dUZW1wbGF0ZSIsInJlY29yZFByb3AiLCJPYmplY3RJbmNsdWRpbmciLCJhdXRvU3RhcnRSZWNvcmRpbmciLCJwYXNzd29yZCIsInZpZXdlclBhc3MiLCJtb2RlcmF0b3JQYXNzIiwidm9pY2VQcm9wIiwidm9pY2VDb25mIiwiZGlhbE51bWJlciIsInRlbFZvaWNlIiwibXV0ZU9uU3RhcnQiLCJzY3JlZW5zaGFyZVByb3BzIiwicmVkNVNjcmVlbnNoYXJlSXAiLCJyZWQ1U2NyZWVuc2hhcmVBcHAiLCJzY3JlZW5zaGFyZUNvbmYiLCJtZXRhZGF0YVByb3AiLCJzeXN0ZW1Qcm9wcyIsImh0bWw1SW5zdGFuY2VJZCIsInJlc3RQcm9wcyIsIm5ld01lZXRpbmciLCJzYW5pdGl6ZVRleHRJbkNoYXQiLCJvcmlnaW5hbCIsImFsbG93ZWRUYWdzIiwiYWxsb3dlZEF0dHJpYnV0ZXMiLCJhIiwiaW1nIiwiYWxsb3dlZFNjaGVtZXMiLCJzYW5pdGl6ZWRXZWxjb21lVGV4dCIsImluc2VydEJsYW5rVGFyZ2V0IiwicyIsImkiLCJzdWJzdHIiLCJsaW5rV2l0aG91dFRhcmdldCIsIlJlZ0V4cCIsInRlc3QiLCJsYXN0SW5kZXgiLCJwdWJsaXNoZWRQb2xsIiwiZ3Vlc3RMb2JieU1lc3NhZ2UiLCJsb2NrZWQiLCJsb2NrZWRCeSIsImNsZWFyTWVldGluZ1RpbWVSZW1haW5pbmciLCJjbGVhclVzZXJzIiwiY2xlYXJVc2Vyc1NldHRpbmdzIiwiY2xlYXJTbGlkZXMiLCJjbGVhclBvbGxzIiwiY2xlYXJQcmVzZW50YXRpb25Qb2RzIiwiY2xlYXJWb2ljZVVzZXJzIiwiY2xlYXJVc2VySW5mbyIsImNsZWFyU2NyZWVuc2hhcmUiLCJjbGVhck5vdGUiLCJjbGVhck5ldHdvcmtJbmZvcm1hdGlvbiIsImNsZWFyUmVjb3JkTWVldGluZyIsImNsZWFyVm9pY2VDYWxsU3RhdGVzIiwiY2xlYXJWaWRlb1N0cmVhbXMiLCJjbGVhclVzZXJzUGVyc2lzdGVudERhdGEiLCJjbGVhcldoaXRlYm9hcmRNdWx0aVVzZXIiLCJzZXRQdWJsaXNoZWRQb2xsIiwiaXNQdWJsaXNoZWQiLCJ1cGRhdGVSYW5kb21Vc2VyIiwicmVxdWVzdGVySWQiLCJ1c2VyTGlzdCIsImludGVydmFscyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInByZXZpb3VzTWVldGluZyIsImhhbmRsZU1lZXRpbmdMb2Nrc0NoYW5nZSIsImhhbmRsZVVzZXJMb2NrQ2hhbmdlIiwiaGFuZGxlU2VsZWN0UmFuZG9tVmlld2VyIiwibWVldGluZ3MiLCJib3VuZE1lZXRpbmdzIiwicmVjb3JkTWVldGluZ3MiLCJyZWNvcmRQdWJsaXNoIiwiYm91bmRSZWNvcmRNZWV0aW5ncyIsIm1lZXRpbmdUaW1lUmVtYWluaW5nIiwidGltZVJlbWFpbmluZ1B1Ymxpc2giLCJib3VuZHRpbWVSZW1haW5pbmciLCJ1c2VySW5zdGFiaWxpdHlEZXRlY3RlZCIsIk5ldHdvcmtJbmZvcm1hdGlvbiIsIm5ldHdvcmtJbmZvcm1hdGlvbiIsImJvdW5kTmV0d29ya0luZm9ybWF0aW9uIiwidXBkYXRlTm90ZSIsImNyZWF0ZU5vdGUiLCJjcmVhdGVQYWRVUkwiLCJhZGROb3RlIiwibm90ZUlkIiwiY3JlYXRlVVJMIiwicmVzcG9uc2VPdXRlciIsInJlYWRPbmx5VVJMIiwicmVhZE9ubHlOb3RlSWQiLCJOb3RlIiwicHJvY2Vzc0Zvck5vdGVQYWRPbmx5IiwiTk9URV9DT05GSUciLCJub3RlIiwia2V5IiwiaW5uZXJEYXRhIiwiaXNOb3RlUGFkIiwic2VhcmNoIiwicG9sbFB1Ymxpc2hlZCIsInBvbGxJZCIsInBvbGxTdGFydGVkIiwiYWRkUG9sbCIsInBvbGwiLCJwb2xsVHlwZSIsInF1ZXN0aW9uIiwicG9sbFN0b3BwZWQiLCJyZW1vdmVQb2xsIiwic2VuZFBvbGxDaGF0TXNnIiwiUG9sbHMiLCJDSEFUX1BPTExfUkVTVUxUU19NRVNTQUdFIiwiY2hhdF9wb2xsX3Jlc3VsdCIsInBvbGxEYXRhIiwicG9sbFJlc3VsdERhdGEiLCJ1c2VyUmVzcG9uZGVkIiwiYW5zd2VySWQiLCIkcHVsbCIsInJlc3BvbnNlcyIsInVzZXJUeXBlZFJlc3BvbnNlIiwiYW5zd2VyIiwiYW5zd2VycyIsInF1ZXN0aW9uSWQiLCJ1c2VyVm90ZWQiLCJ1cGRhdGVWb3RlcyIsInF1ZXN0aW9uVHlwZSIsInF1ZXN0aW9uVGV4dCIsIm51bVZvdGVzIiwibnVtUmVzcG9uZGVudHMiLCJudW1SZXNwb25kZXJzIiwicHVibGlzaFBvbGwiLCJwdWJsaXNoVHlwZWRWb3RlIiwicG9sbEFuc3dlciIsIk1BWF9JTlBVVF9DSEFSUyIsIm1heFR5cGVkQW5zd2VyTGVuZ3RoIiwiYWN0aXZlUG9sbCIsImV4aXN0aW5nQW5zSWQiLCJzdWJzdHJpbmciLCJwdWJsaXNoVm90ZSIsInBvbGxBbnN3ZXJJZCIsImFsbG93ZWRUb1ZvdGUiLCJzdGFydFBvbGwiLCJwb2xsVHlwZXMiLCJDdXN0b20iLCJzdG9wUG9sbCIsInVzZXJTZWxlY3RvciIsIiRuZSIsImNsaWVudFR5cGUiLCJyZXF1ZXN0ZXIiLCJoYW5kbGVQb2xsU3RhcnRlZCIsImhhbmRsZVBvbGxTdG9wcGVkIiwiaGFuZGxlUG9sbFB1Ymxpc2hlZCIsImhhbmRsZVNlbmRTeXN0ZW1DaGF0Rm9yUHVibGlzaGVkUG9sbCIsImhhbmRsZVVzZXJWb3RlZCIsImhhbmRsZVVzZXJSZXNwb25kZWQiLCJoYW5kbGVVc2VyVHlwZWRSZXNwb25zZSIsImN1cnJlbnRQb2xsIiwicHVibGlzaEN1cnJlbnRQb2xsIiwiYm91bmRQb2xscyIsInBvbGxzIiwiaGFuZGxlQ3JlYXRlTmV3UHJlc2VudGF0aW9uUG9kIiwiYWRkUHJlc2VudGF0aW9uUG9kIiwiY3VycmVudFByZXNlbnRlcklkIiwicG9kSWQiLCJwb2QiLCJoYW5kbGVSZW1vdmVQcmVzZW50YXRpb25Qb2QiLCJyZW1vdmVQcmVzZW50YXRpb25Qb2QiLCJoYW5kbGVTZXRQcmVzZW50ZXJJblBvZCIsInNldFByZXNlbnRlckluUG9kIiwibmV4dFByZXNlbnRlcklkIiwiaGFuZGxlU3luY0dldFByZXNlbnRhdGlvblBvZHMiLCJQcmVzZW50YXRpb25Qb2RzIiwicG9kcyIsInByZXNlbnRhdGlvblBvZElkcyIsInByZXNlbnRhdGlvblBvZHNUb1JlbW92ZSIsIiRuaW4iLCJwIiwiY3VycmVudFByZXNlbnRlciIsInByZXNlbnRhdGlvbnMiLCJhZGRQcmVzZW50YXRpb24iLCJ1bmRlZmluZWQiLCJwcmVzZW50YXRpb24iLCJjbGVhclByZXNlbnRhdGlvbnMiLCJjbGVhclByZXNlbnRhdGlvblVwbG9hZFRva2VuIiwicHJlc2VudGF0aW9uUG9kcyIsImJvdW5kUHJlc2VudGF0aW9uUG9kcyIsImhhbmRsZVByZXNlbnRhdGlvblVwbG9hZFRva2VuRmFpbCIsIlByZXNlbnRhdGlvblVwbG9hZFRva2VuIiwiZmlsZW5hbWUiLCJmYWlsZWQiLCJhdXRoelRva2VuIiwiaGFuZGxlUHJlc2VudGF0aW9uVXBsb2FkVG9rZW5QYXNzIiwidXNlZCIsInJlcXVlc3RQcmVzZW50YXRpb25VcGxvYWRUb2tlbiIsInNldFVzZWRUb2tlbiIsInByZXNlbnRhdGlvblVwbG9hZFRva2VuIiwiYm91bmRQcmVzZW50YXRpb25VcGxvYWRUb2tlbiIsImhhbmRsZVByZXNlbnRhdGlvbkFkZGVkIiwiaGFuZGxlUHJlc2VudGF0aW9uQ29udmVyc2lvblVwZGF0ZSIsIlByZXNlbnRhdGlvbnMiLCJPRkZJQ0VfRE9DX0NPTlZFUlNJT05fRkFJTEVEX0tFWSIsIk9GRklDRV9ET0NfQ09OVkVSU0lPTl9JTlZBTElEX0tFWSIsIlNVUFBPUlRFRF9ET0NVTUVOVF9LRVkiLCJVTlNVUFBPUlRFRF9ET0NVTUVOVF9LRVkiLCJQQUdFX0NPVU5UX0ZBSUxFRF9LRVkiLCJQQUdFX0NPVU5UX0VYQ0VFREVEX0tFWSIsIlBERl9IQVNfQklHX1BBR0VfS0VZIiwiR0VORVJBVEVEX1NMSURFX0tFWSIsIkZJTEVfVE9PX0xBUkdFX0tFWSIsInByZXNlbnRhdGlvbklkIiwibWVzc2FnZUtleSIsInByZXNOYW1lIiwicHJlc2VudGF0aW9uTmFtZSIsInN0YXR1c01vZGlmaWVyIiwibWF4RmlsZVNpemUiLCJtYXhOdW1iZXJQYWdlcyIsInByZXNlbnRhdGlvblRva2VuIiwiYmlnUGFnZVNpemUiLCJwYWdlc0NvbXBsZXRlZCIsIm51bWJlck9mUGFnZXMiLCJoYW5kbGVQcmVzZW50YXRpb25DdXJyZW50U2V0Iiwic2V0Q3VycmVudFByZXNlbnRhdGlvbiIsImhhbmRsZVByZXNlbnRhdGlvbkRvd25sb2FkYWJsZVNldCIsInNldFByZXNlbnRhdGlvbkRvd25sb2FkYWJsZSIsImRvd25sb2FkYWJsZSIsImhhbmRsZVByZXNlbnRhdGlvblJlbW92ZSIsInJlbW92ZVByZXNlbnRhdGlvbiIsInNldFByZXNlbnRhdGlvbiIsIkhUVFAiLCJhZGRTbGlkZSIsImdldFNsaWRlVGV4dCIsImNvbnRlbnQiLCJhZGRTbGlkZXMiLCJzbGlkZXMiLCJzbGlkZSIsInR4dFVyaSIsImN1cnJlbnQiLCJwYWdlcyIsInRodW1iVXJpIiwic3dmVXJpIiwic3ZnVXJpIiwieE9mZnNldCIsInlPZmZzZXQiLCJ3aWR0aFJhdGlvIiwiaGVpZ2h0UmF0aW8iLCJjbGVhclNsaWRlc1ByZXNlbnRhdGlvbiIsIm9sZEN1cnJlbnQiLCJjYWxsYmFjayIsIm5ld0N1cnJlbnQiLCJvbGRQcmVzZW50YXRpb24iLCJuZXdQcmVzZW50YXRpb24iLCJib3VuZFByZXNlbnRhdGlvbnMiLCJoYW5kbGVTY3JlZW5zaGFyZVN0YXJ0ZWQiLCJhZGRTY3JlZW5zaGFyZSIsImhhbmRsZVNjcmVlbnNoYXJlU3RvcHBlZCIsIlNjcmVlbnNoYXJlIiwic2NyZWVuc2hhcmUiLCJib3VuZFNjcmVlbnNoYXJlIiwiaGFuZGxlU2xpZGVDaGFuZ2UiLCJjaGFuZ2VDdXJyZW50U2xpZGUiLCJwYWdlSWQiLCJoYW5kbGVTbGlkZVJlc2l6ZSIsInJlc2l6ZVNsaWRlIiwic3dpdGNoU2xpZGUiLCJTbGlkZXMiLCJzbGlkZU51bWJlciIsIlByZXNlbnRhdGlvbiIsIkVycm9yIiwiU2xpZGUiLCJ6b29tU2xpZGUiLCJwcm9iZSIsIlNWRyIsIlBORyIsImNhbGN1bGF0ZVNsaWRlRGF0YSIsImFkZFNsaWRlUG9zaXRpb25zIiwibG9hZFNsaWRlc0Zyb21IdHRwQWx3YXlzIiwicmVxdWVzdFdoaXRlYm9hcmRIaXN0b3J5Iiwic2xpZGVJZCIsIlVTRVJfSUQiLCJTVVBQT1JURURfVFlQRVMiLCJmZXRjaEltYWdlU2l6ZXMiLCJpbWFnZVVyaSIsInJlc3VsdCIsIm1pbWUiLCJ3aWR0aCIsImhlaWdodCIsInJlc3RTbGlkZSIsInBuZ1VyaSIsImltYWdlU2l6ZVVyaSIsInNsaWRlRGF0YSIsInNsaWRlUG9zaXRpb24iLCJTbGlkZVBvc2l0aW9ucyIsInZpZXdCb3hXaWR0aCIsInZpZXdCb3hIZWlnaHQiLCJvbGRTbGlkZSIsIm5ld1NsaWRlIiwibnVtYmVyQWZmZWN0ZWRTbGlkZVBvc2l0aW9ucyIsIndoaXRlYm9hcmRJZHMiLCJyb3ciLCJTbGlkZVBvc2l0aW9uIiwiY2FsY3VsYXRlZERhdGEiLCJzbGlkZVBvc2l0aW9ucyIsInB1Ymxpc2hQb3NpdGlvbnMiLCJib3VuZFNsaWRlUG9zaXRpb25zIiwiaGFuZGxlQ2hhbmdlUm9sZSIsImNoYW5nZVJvbGUiLCJjaGFuZ2VkQnkiLCJoYW5kbGVFbW9qaVN0YXR1cyIsImVtb2ppIiwiZW1vamlUaW1lIiwiaGFuZGxlUHJlc2VudGVyQXNzaWduZWQiLCJjaGFuZ2VQcmVzZW50ZXIiLCJzZXRQcmVzZW50ZXJJblBvZFJlcU1zZyIsImNyZWRlbnRpYWxzIiwicHJlc2VudGVySWQiLCJhc3NpZ25lZEJ5IiwicHJldlByZXNlbnRlciIsInNldFByZXNlbnRlclBheWxvYWQiLCJkZWZhdWx0UG9kU2VsZWN0b3IiLCJjdXJyZW50RGVmYXVsdFBvZFByZXNlbnRlciIsIm9sZFByZXNlbnRlciIsImhhbmRsZVJlbW92ZVVzZXIiLCJyZW1vdmVVc2VyIiwiaGFuZGxlRWplY3RlZFVzZXIiLCJ1c2VyRWplY3RlZCIsInJlYXNvbkNvZGUiLCJoYW5kbGVVc2VySW5hY3Rpdml0eUluc3BlY3QiLCJ1c2VySW5hY3Rpdml0eUluc3BlY3QiLCJyZXNwb25zZURlbGF5IiwiSW50ZWdlciIsInVzZXJKb2luIiwiYXV0aFRva2VuIiwiaGFuZGxlVXNlckpvaW5lZCIsImFkZFVzZXIiLCJoYW5kbGVWYWxpZGF0ZUF1dGhUb2tlbiIsInBlbmRpbmdBdXRoZW50aWNhdGlvbnNTdG9yZSIsImNyZWF0ZUR1bW15VXNlciIsImNsZWFyT3RoZXJTZXNzaW9ucyIsInNlc3Npb25Vc2VySWQiLCJzZXJ2ZXJTZXNzaW9ucyIsInNlcnZlciIsInNlc3Npb25zIiwiY2xvc2UiLCJ2YWxpZCIsIndhaXRGb3JBcHByb3ZhbCIsImF1dGhUb2tlblZhbGlkYXRlZE9uIiwicGVuZGluZ0F1dGhzIiwidGFrZSIsInBlbmRpbmdBdXRoIiwibWV0aG9kSW52b2NhdGlvbk9iamVjdCIsImUiLCJzZXNzaW9uSWQiLCJzZXRVc2VySWQiLCJhZGQiLCJ2YWxpZGF0ZWQiLCJpbmFjdGl2aXR5Q2hlY2siLCJjdXJyZW50Q29ubmVjdGlvbklkIiwiYXNzaWduUHJlc2VudGVyIiwibmV3UHJlc2VudGVySWQiLCJuZXdQcmVzZW50ZXJOYW1lIiwiYmFuVXNlciIsImVqZWN0ZWRCeSIsInNldEVtb2ppU3RhdHVzIiwic2V0TW9iaWxlVXNlciIsInNldE1vYmlsZSIsInNldFJhbmRvbVVzZXIiLCJzZXRVc2VyRWZmZWN0aXZlQ29ubmVjdGlvblR5cGUiLCJzZXRFZmZlY3RpdmVDb25uZWN0aW9uVHlwZSIsImVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlIiwidG9nZ2xlVXNlckxvY2siLCJsb2NrIiwidXNlckFjdGl2aXR5U2lnbiIsInVzZXJMZWF2aW5nIiwiYXV0aCIsImxvZ2dlZE91dCIsInJlbW92ZUNsaWVudENvbm5lY3Rpb24iLCJ1c2VyTGVmdE1lZXRpbmciLCJ2YWxpZGF0ZUF1dGhUb2tlbiIsInJlcXVlc3RlclRva2VuIiwiZXh0ZXJuYWxJZCIsImFkZERpYWxJblVzZXIiLCJ2b2ljZVVzZXIiLCJVU0VSX0NPTkZJRyIsIlJPTEVfVklFV0VSIiwicm9sZV92aWV3ZXIiLCJjYWxsZXJOYW1lIiwidm9pY2VPbmx5VXNlciIsInRvTG93ZXJDYXNlIiwiYXV0aGVkIiwid2FpdGluZ0ZvckFjY2VwdGFuY2UiLCJndWVzdFN0YXR1cyIsImF2YXRhciIsIlZvaWNlVXNlcnMiLCJhZGRVc2VyUHNlcnNpc3RlbnREYXRhIiwiYWRkVm9pY2VVc2VyIiwidXNlckRhdGEiLCJzYW5pdGl6ZWROYW1lIiwiZXNjYXBlIiwiTWVldGluZyIsInVzZXJJbmZvcyIsInNvcnROYW1lIiwibW9iaWxlIiwiaXNCcmVha291dFVzZXIiLCJ2b2ljZVVzZXJJZCIsImNhbGxlck51bSIsIm11dGVkIiwidGFsa2luZyIsImNhbGxpbmdXaXRoIiwibGlzdGVuT25seSIsImpvaW5lZCIsInVwZGF0ZVJvbGUiLCJkb2MiLCJWaWRlb1N0cmVhbXMiLCJzZXRsb2dnZWRPdXRTdGF0dXMiLCJjbGVhclVzZXJJbmZvRm9yUmVxdWVzdGVyIiwiY2xlYXJBbGxTZXNzaW9ucyIsInVzZXJUb1JlbW92ZSIsImVqZWN0ZWRSZWFzb24iLCJlamVjdGVkIiwiUGVuZGluZ0F1dGhlbnRpdGNhdGlvbnMiLCJjb25zdHJ1Y3RvciIsInN0b3JlIiwiZ2VuZXJhdGVLZXkiLCJtYXRjaGVzIiwiaGFuZGxlVXNlckVqZWN0ZWQiLCJjdXJyZW50VXNlciIsIiRleGlzdHMiLCJwdWJsaXNoQ3VycmVudFVzZXIiLCJib3VuZFVzZXJzIiwiaGFuZGxlVXNlckluZm9ybWF0aW9uIiwiYWRkVXNlckluZm8iLCJyZW1vdmVVc2VySW5mb3JtYXRpb24iLCJVc2VySW5mb3MiLCJnZXRVc2VySW5mb3JtYXRpb24iLCJleHRlcm5hbFVzZXJJZCIsInRvVGhpcmRQYXJ0eSIsImNsZWFyVXNlcnNJbmZvIiwiY2xlYXJVc2Vyc0luZm9Gb3JSZXF1ZXN0ZXIiLCJyZXF1ZXN0VXNlckluZm9ybWF0aW9uIiwiYm91bmRVc2VySW5mb3MiLCJhZGRVc2VyUGVyc2lzdGVudERhdGEiLCJVc2Vyc1BlcnNpc3RlbnREYXRhIiwidG9rZW4iLCJ1c2Vyc1BlcnNpc3RlbnREYXRhIiwicHVibGlzaFVzZXJzUGVyc2lzdGVudERhdGEiLCJhZGRVc2VyU2V0dGluZ3MiLCJhZGRVc2VyU2V0dGluZyIsImxvZ2dlciIsIm9sZFBhcmFtZXRlcnMiLCJhc2tGb3JGZWVkYmFja09uTG9nb3V0IiwiYXV0b0pvaW4iLCJhdXRvU2hhcmVXZWJjYW0iLCJhdXRvU3dhcExheW91dCIsImNsaWVudFRpdGxlIiwiY3VzdG9tU3R5bGUiLCJjdXN0b21TdHlsZVVybCIsImRpc3BsYXlCcmFuZGluZ0FyZWEiLCJlbmFibGVTY3JlZW5zaGFyaW5nIiwiZW5hYmxlVmlkZW8iLCJmb3JjZUxpc3Rlbk9ubHkiLCJoaWRlUHJlc2VudGF0aW9uIiwibGlzdGVuT25seU1vZGUiLCJtdWx0aVVzZXJQZW5Pbmx5IiwibXVsdGlVc2VyVG9vbHMiLCJvdXRzaWRlVG9nZ2xlUmVjb3JkaW5nIiwib3V0c2lkZVRvZ2dsZVNlbGZWb2ljZSIsInByZXNlbnRlclRvb2xzIiwic2hvcnRjdXRzIiwic2tpcENoZWNrIiwib2xkUGFyYW1ldGVyc0tleXMiLCJjdXJyZW50UGFyYW1ldGVycyIsInZhbHVlUGFyc2VyIiwidmFsIiwicGFyc2VkVmFsdWUiLCJwYXJzZSIsInBhcmFtZXRlcnMiLCJzZXR0aW5nS2V5Iiwibm9ybWFsaXplZEtleSIsIm1hdGNoaW5nTmV3S2V5Iiwic2V0dGluZ3NBZGRlZCIsImVudHJpZXMiLCJzZXR0aW5nIiwiVXNlclNldHRpbmdzIiwiQW55IiwidXNlclNldHRpbmdzIiwibWFpblJvb21Vc2VyU2V0dGluZ3MiLCJib3VuZFVzZXJTZXR0aW5ncyIsImhhbmRsZUZsb29yQ2hhbmdlZCIsImZsb29yQ2hhbmdlZCIsImxhc3RGbG9vclRpbWUiLCJoYW5kbGVVc2VyU2hhcmVkSHRtbDVXZWJjYW0iLCJzaGFyZWRXZWJjYW0iLCJpc1ZhbGlkU3RyZWFtIiwic3RyZWFtIiwiaGFuZGxlVXNlclVuc2hhcmVkSHRtbDVXZWJjYW0iLCJ1bnNoYXJlZFdlYmNhbSIsInVzZXJTaGFyZVdlYmNhbSIsInVzZXJVbnNoYXJlV2ViY2FtIiwiZ2V0RGV2aWNlSWQiLCJnZXRVc2VyTmFtZSIsIkJBU0VfRkxPT1JfVElNRSIsImRldmljZUlkIiwidnUiLCJGTEFTSF9TVFJFQU1fUkVHRVgiLCJzcGxpdFN0cmVhbSIsInZpZGVvU3RyZWFtcyIsImJvdW5kVmlkZW9TdHJlYW1zIiwiaGFuZGxlVm9pY2VDYWxsU3RhdGVFdmVudCIsIlZvaWNlQ2FsbFN0YXRlIiwiY2xpZW50U2Vzc2lvbiIsImNhbGxTdGF0ZSIsIlZvaWNlQ2FsbFN0YXRlcyIsInZvaWNlQ2FsbFN0YXRlcyIsImJvdW5kVm9pY2VDYWxsU3RhdGVzIiwiaGFuZGxlRmxvb3JDaGFuZ2UiLCJ1cGRhdGVWb2ljZVVzZXIiLCJoYW5kbGVHZXRWb2ljZVVzZXJzIiwicmVtb3ZlVm9pY2VVc2VyIiwidXNlcnNJZHMiLCJtIiwidm9pY2VVc2Vyc0lkc1RvVXBkYXRlIiwiaW5kZXhPZiIsInZvaWNlVXNlcnNUb1JlbW92ZSIsImhhbmRsZUpvaW5Wb2ljZVVzZXIiLCJoYW5kbGVWb2ljZVVwZGF0ZSIsImlzRGlhbEluVXNlciIsIm1lZXRpbmdJRCIsImhhbmRsZU1lZXRpbmdNdXRlZCIsImNoYW5nZU11dGVNZWV0aW5nIiwiaGFuZGxlVm9pY2VVc2VycyIsInZvaWNlVXNlcnMiLCJ2b2ljZSIsImVqZWN0VXNlckZyb21Wb2ljZSIsIm11dGVBbGxFeGNlcHRQcmVzZW50ZXJUb2dnbGUiLCJ0b2dnbGVNZWV0aW5nTXV0ZWQiLCJtdXRlZEJ5IiwibXV0ZSIsIm11dGVBbGxUb2dnbGUiLCJtdXRlVG9nZ2xlIiwidUlkIiwidG9nZ2xlIiwidXNlclRvTXV0ZSIsIl9tdXRlZCIsInNwb2tlIiwiY2xlYXJWb2ljZVVzZXIiLCJjbGVhclNwb2tlVGltZW91dCIsInNwb2tlVGltZW91dEhhbmRsZXMiLCJUQUxLSU5HX1RJTUVPVVQiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwidGltZW91dEhhbmRsZSIsInNwb2tlRGVsYXkiLCJoYW5kbGVMZWZ0Vm9pY2VVc2VyIiwiaGFuZGxlVGFsa2luZ1ZvaWNlVXNlciIsImhhbmRsZU11dGVkVm9pY2VVc2VyIiwidG9nZ2xlVm9pY2UiLCJtdXRlQWxsVXNlcnMiLCJtdXRlQWxsRXhjZXB0UHJlc2VudGVyIiwib25DbG9zZUNvbm5lY3Rpb24iLCJiaW5kRW52aXJvbm1lbnQiLCJfc2Vzc2lvbiIsInNvY2tldCIsImRlYm91bmNlIiwiYm91bmRWb2ljZVVzZXIiLCJoYW5kbGVNb2RpZnlXaGl0ZWJvYXJkQWNjZXNzIiwiYWRkR2xvYmFsQWNjZXNzIiwiZ2V0VXNlcnMiLCJhZGRJbmRpdmlkdWFsQWNjZXNzIiwiZ2V0TXVsdGlVc2VyIiwicmVtb3ZlR2xvYmFsQWNjZXNzIiwicmVtb3ZlSW5kaXZpZHVhbEFjY2VzcyIsIldoaXRlYm9hcmRNdWx0aVVzZXIiLCJoYW5kbGVHZXRXaGl0ZWJvYXJkQWNjZXNzIiwiaXNBcnJheSIsIndoaXRlYm9hcmRNdWx0aVVzZXIiLCJib3VuZE11bHRpVXNlciIsInNoYTEiLCJCQVNFX1VSTCIsInBvcnQiLCJIQVNIX1NJWkUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjaGVja1Rva2VuVVJMIiwic3RyIiwidG9TdHJpbmciLCJjaGVja1NlcnZlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiTVNHX0RJUkVDVF9UWVBFIiwiTk9ERV9VU0VSIiwiY2xlYXJUaW1lb3V0IiwiaXRlbSIsImwiLCJlbnZlbG9wZSIsInJvdXRpbmciLCJtc2dUeXBlIiwic2hvdWxkU2tpcCIsImNyZWRlbnRpYWxzQXJyYXkiLCJzeW5jSW50ZXJ2YWwiLCJzeW5jVXNlcnNXaXRoQ29ubmVjdGlvbk1hbmFnZXIiLCJjb25uZWN0aW9ucyIsIk1hcCIsInNldEludGVydmFsIiwicHJpbnQiLCJzeW5jQ29ubmVjdGlvbnMiLCJzeW5jQ29ubmVjdGlvbnNXaXRoU2VydmVyIiwiZXhpc3RzIiwiY3JlYXRlTWVldGluZ0Nvbm5lY3Rpb25zIiwic2Vzc2lvbkNvbm5lY3Rpb25zIiwiaGFzIiwib25DbG9zZSIsInNldCIsImdldENvbm5lY3Rpb25zRm9yQ2xpZW50IiwibWFwQ29ubmVjdGlvbnNPYmoiLCJrIiwibWVldGluZ0Nvbm5lY3Rpb25zIiwiZmlsdGVyZWRDb25uZWN0aW9ucyIsImRlbGV0ZSIsImFjdGl2ZUNvbm5lY3Rpb25zIiwiZnJvbSIsIm9ubGluZVVzZXJzIiwib25saW5lVXNlcnNJZCIsInVzZXJzUXVlcnkiLCJ1c2VyV2l0aG91dENvbm5lY3Rpb25JZHMiLCJyZW1vdmVkVXNlcnNXaXRob3V0Q29ubmVjdGlvbiIsIkNsaWVudENvbm5lY3Rpb25zU2luZ2xldG9uIiwiaXNQYWRNZXNzYWdlIiwiZ2V0SW5zdGFuY2VJZEZyb21QYWRNZXNzYWdlIiwiSU5TVEFOQ0VfSURfUkVHRVgiLCJjb3JlIiwiaXNQYWRDcmVhdGUiLCJpc1BhZFVwZGF0ZSIsIm1hdGNoIiwicGFyc2VJbnQiLCJldmVudEVtaXR0ZXIiLCJyZWRpc1B1YlN1YiIsIldlYkFwcEludGVybmFscyIsIkxhbmdtYXAiLCJmcyIsImxvb2t1cFVzZXJBZ2VudCIsImxvb2t1cCIsIlJlZGlzIiwic2V0TWluQnJvd3NlclZlcnNpb25zIiwiZ3Vlc3RXYWl0SHRtbCIsImlzRGV2ZWxvcG1lbnQiLCJtZXRlb3JSb290IiwicmVhbHBhdGhTeW5jIiwiY3dkIiwiYXBwbGljYXRpb25Sb290IiwiQVZBSUxBQkxFX0xPQ0FMRVMiLCJyZWFkZGlyU3luYyIsIkZBTExCQUNLX0xPQ0FMRVMiLCJBc3NldHMiLCJnZXRUZXh0IiwiZXhpdCIsInN0YXJ0dXAiLCJBUFBfQ09ORklHIiwiQ0ROX1VSTCIsImNkbiIsImN1c3RvbUhlYXJ0YmVhdCIsIm5ld0hlYXJ0YmVhdCIsImhlYXJ0YmVhdCIsImN1cnJlbnRUaW1lIiwid3MiLCJsYXN0U2VudEZyYW1lVGltZXN0YW1wIiwic2Vzc2lvbiIsIl9tZXRlb3JTZXNzaW9uIiwic3VwcG9ydHNIZWFydGJlYXRzIiwicGluZyIsImh0b19yZWYiLCJzZW50QXQiLCJoZWFydGJlYXRUaW1lb3V0IiwibmV3U2VuZCIsInNlbmQiLCJtZXRlb3JIZWFydGJlYXQiLCJfc2VlblBhY2tldCIsIl9oZWFydGJlYXRUaW1lb3V0SGFuZGxlIiwiX2NsZWFySGVhcnRiZWF0VGltZW91dFRpbWVyIiwicmVhZHlTdGF0ZSIsIkJ1ZmZlciIsIl9kcml2ZXIiLCJ3cml0ZSIsImNvbnNvbGUiLCJ2YWx1ZXMiLCJyZWN2IiwiYmJiRml4QXBwbGllZCIsIl9fcHJvdG9fXyIsIkJyb3dzZXJQb2xpY3kiLCJkaXNhbGxvd0V2YWwiLCJhbGxvd0lubGluZVNjcmlwdHMiLCJhbGxvd0lubGluZVN0eWxlcyIsImFsbG93SW1hZ2VEYXRhVXJsIiwiYWxsb3dGb250RGF0YVVybCIsImFsbG93T3JpZ2luRm9yQWxsIiwic2V0QnVuZGxlZEpzQ3NzUHJlZml4IiwiZm9udFJlZ0V4cCIsIldlYkFwcCIsInJhd0Nvbm5lY3RIYW5kbGVycyIsInVzZSIsInJlcSIsInJlcyIsIm5leHQiLCJfcGFyc2VkVXJsIiwicGF0aG5hbWUiLCJzZXRIZWFkZXIiLCJnZW5lcmF0ZUxvY2FsZU9wdGlvbnMiLCJ0ZW1wQWdncmVnYXRlTG9jYWxlcyIsImZpbGUiLCJsb2NhbGVOYW1lIiwibmF0aXZlTmFtZSIsInJldmVyc2UiLCJzZWxmIiwiZmluZEluZGV4IiwiYXZhaWJsZUxvY2FsZXNOYW1lc0pTT04iLCJjb25uZWN0SGFuZGxlcnMiLCJodG1sNWNsaWVudFN0YXR1cyIsIndyaXRlSGVhZCIsImVuZCIsImZhbGxiYWNrIiwiZGVmYXVsdFNldHRpbmdzIiwiYXBwbGljYXRpb24iLCJmYWxsYmFja0xvY2FsZSIsIm92ZXJyaWRlIiwib3ZlcnJpZGVMb2NhbGUiLCJicm93c2VyTG9jYWxlIiwiaW5pdCIsImxvY2FsZUZpbGUiLCJ1c2FibGVMb2NhbGVzIiwicmVkdWNlIiwibm9ybWFsaXplZExvY2FsZSIsInJlZ2lvbkRlZmF1bHQiLCJ0b1VwcGVyQ2FzZSIsIm5vcm1EZWZhdWx0Iiwic3BlY0ZhbGxiYWNrIiwibm9ybUZhbGxiYWNrIiwicmVnaW9uRGVmYXVsdExvY2FsZSIsInVzZXJOYW1lIiwicmVxVXNlck5hbWUiLCJjb21tZW50IiwicmF0aW5nIiwiZmVlZGJhY2siLCJ1c2VyQWdlbnQiLCJoZWFkZXJzIiwiZW1pdHRlciIsImNyZWF0ZUxvZ2dlciIsImZvcm1hdCIsInRyYW5zcG9ydHMiLCJMT0dfQ09ORklHIiwiY29tYmluZSIsImNvbG9yaXplIiwic3BsYXQiLCJzaW1wbGUiLCJDb25zb2xlIiwicHJldHR5UHJpbnQiLCJodW1hblJlYWRhYmxlVW5oYW5kbGVkRXhjZXB0aW9uIiwiaGFuZGxlRXhjZXB0aW9ucyIsInBhdGgiLCJtZXRyaWNzRHVtcEludGVydmFsTXMiLCJtZXRyaWNzRm9sZGVyUGF0aCIsInJlbW92ZU1lZXRpbmdPbkVuZCIsImFkZEV2ZW50IiwibWVzc2FnZUxlbmd0aCIsImN1cnJlbnRseUluUXVldWUiLCJ3YXNJblF1ZXVlIiwicGF5bG9hZFNpemUiLCJwcm9jZXNzRXZlbnQiLCJzaXplIiwicHJvY2Vzc2luZ1N0YXJ0VGltZXN0YW1wIiwiY3VycmVudFByb2Nlc3NpbmdUaW1lc3RhbXAiLCJwcm9jZXNzVGltZSIsIm1pbiIsIm1heCIsImxhc3QiLCJ0b3RhbCIsImF2ZyIsInByb2Nlc3NpbmdUaW1lIiwiYW5ub3RhdGlvblF1ZXVlTGVuZ3RoIiwic3RhcnREdW1wRmlsZSIsImZpbGVEYXRlIiwiZnVsbFllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJwYWRTdGFydCIsImRheSIsImdldERhdGUiLCJob3VyIiwiZ2V0SG91cnMiLCJtaW51dGVzIiwiZ2V0TWludXRlcyIsInNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZm9sZGVyTmFtZSIsImZpbGVOYW1lIiwiZm9sZGVyUGF0aCIsImZ1bGxGaWxlUGF0aCIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJ3cml0ZUZpbGVTeW5jIiwibWV0cmljc1NpbmdsZXRvbiIsInNldE1pbmltdW1Ccm93c2VyVmVyc2lvbnMiLCJtaW5Ccm93c2VyVmVyc2lvbnMiLCJ2ZXJzaW9ucyIsImVsZW0iLCJJbmZpbml0eSIsImJyb3dzZXIiLCJFdmVudEVtaXR0ZXIyIiwiTk9fTUVFVElOR19JRCIsIm1ha2VFbnZlbG9wZSIsImNoYW5uZWwiLCJnZXRJbnN0YW5jZUlkRnJvbU1lc3NhZ2UiLCJpbnN0YW5jZUlkRnJvbU1lc3NhZ2UiLCJNZWV0aW5nTWVzc2FnZVF1ZXVlIiwiYXN5bmNNZXNzYWdlcyIsInJlZGlzRGVidWdFbmFibGVkIiwicXVldWUiLCJQb3dlclF1ZXVlIiwiaGFuZGxlVGFzayIsInRhc2tIYW5kbGVyIiwiaXNBc3luYyIsImJlZ2luSGFuZGxlVGltZXN0YW1wIiwiY2FsbGVkIiwiY2FsbE5leHQiLCJxdWV1ZUlkIiwiZGF0YUxlbmd0aCIsInF1ZXVlTGVuZ3RoIiwib25FcnJvciIsImFuYWx5dGljcyIsImluY2x1ZGVDaGF0IiwiZW1pdEFzeW5jIiwiaGFuZGxlUHVibGlzaEVycm9yIiwiY29uZmlnIiwiZGlkU2VuZFJlcXVlc3RFdmVudCIsIlJFRElTX0hPU1QiLCJyZWRpc0NvbmYiLCJjdXN0b21SZWRpc0NoYW5uZWwiLCJwdWIiLCJjcmVhdGVDbGllbnQiLCJzdWIiLCJtZWV0aW5nc1F1ZXVlcyIsImFzeW5jIiwiaGFuZGxlU3Vic2NyaWJlIiwiaGFuZGxlTWVzc2FnZSIsImNoYW5uZWxzVG9TdWJzY3JpYmUiLCJzdWJzY3JpYmVUbyIsInBzdWJzY3JpYmUiLCJ1cGRhdGVDb25maWciLCJwdWJsaXNoU3lzdGVtTWVzc2FnZSIsInBhdHRlcm4iLCJpZ25vcmVkIiwiaWdub3JlZE1lc3NhZ2VzIiwiZGF0ZSIsInRvSVNPU3RyaW5nIiwibWVldGluZ0lkRnJvbU1lc3NhZ2VDb3JlSGVhZGVyIiwibWVldGluZ0lkRnJvbU1lc3NhZ2VNZWV0aW5nUHJvcCIsIm1lZXRpbmdJZEZvck1lZXRpbmdFbmRlZCIsInB1Ymxpc2hWb2ljZU1lc3NhZ2UiLCJwdWJsaXNoTWVldGluZ01lc3NhZ2UiLCJSZWRpc1B1YlN1YlNpbmdsZXRvbiIsIllBTUwiLCJERUZBVUxUX1NFVFRJTkdTX0ZJTEVfUEFUSCIsIkJCQl9IVE1MNV9TRVRUSU5HUyIsIkxPQ0FMX1NFVFRJTkdTX0ZJTEVfUEFUSCIsIkJCQl9IVE1MNV9MT0NBTF9TRVRUSU5HUyIsIlNFVFRJTkdTIiwicmVhZEZpbGVTeW5jIiwiTE9DQUxfQ09ORklHIiwibWVyZ2UiLCJfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fIiwiUFVCTElDX1NFVFRJTkdTIiwiQ0FSUklBR0VfUkVUVVJOIiwiTkVXX0xJTkUiLCJYTFMiLCJYTFNYIiwiRE9DIiwiRE9DWCIsIlBQVCIsIlBQVFgiLCJPRFQiLCJSVEYiLCJUWFQiLCJPRFMiLCJPRFAiLCJQREYiLCJKUEVHIiwiVVBMT0FEX1NVUE9SVEVEIiwiZ2xvYmFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUFDQyxTQUFPLEVBQUMsTUFBSUM7QUFBYixDQUFkOztBQUF5RCxJQUFJQyxDQUFKOztBQUFNSixNQUFNLENBQUNLLElBQVAsQ0FBWSxRQUFaLEVBQXFCO0FBQUNILFNBQU8sQ0FBQ0ksQ0FBRCxFQUFHO0FBQUNGLEtBQUMsR0FBQ0UsQ0FBRjtBQUFJOztBQUFoQixDQUFyQixFQUF1QyxDQUF2QztBQUEwQyxJQUFJQyxLQUFKO0FBQVVQLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLGNBQVosRUFBMkI7QUFBQ0UsT0FBSyxDQUFDRCxDQUFELEVBQUc7QUFBQ0MsU0FBSyxHQUFDRCxDQUFOO0FBQVE7O0FBQWxCLENBQTNCLEVBQStDLENBQS9DO0FBQWtELElBQUlFLHNCQUFKO0FBQTJC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UCxDQUFZLHlDQUFaO0FBQXVETCxNQUFNLENBQUNLLElBQVAsQ0FBWSxpQ0FBWjtBQUErQ0wsTUFBTSxDQUFDSyxJQUFQLENBQVksMkNBQVo7QUFBeURMLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLHVDQUFaO0FBQXFETCxNQUFNLENBQUNLLElBQVAsQ0FBWSwwQkFBWjtBQUF3Q0wsTUFBTSxDQUFDSyxJQUFQLENBQVkscUNBQVo7QUFBbURMLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLGlDQUFaO0FBQStDTCxNQUFNLENBQUNLLElBQVAsQ0FBWSxvQ0FBWjtBQUFrREwsTUFBTSxDQUFDSyxJQUFQLENBQVksdUNBQVo7QUFBcURMLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLDJDQUFaO0FBQXlETCxNQUFNLENBQUNLLElBQVAsQ0FBWSxnQ0FBWjtBQUE4Q0wsTUFBTSxDQUFDSyxJQUFQLENBQVksb0NBQVo7QUFBa0RMLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLGdDQUFaOztBQUE4QyxJQUFJRCxDQUFKOztBQUFNSixNQUFNLENBQUNLLElBQVAsQ0FBWSxRQUFaLEVBQXFCO0FBQUNILFNBQU8sQ0FBQ0ksQ0FBRCxFQUFHO0FBQUNGLEtBQUMsR0FBQ0UsQ0FBRjtBQUFJOztBQUFoQixDQUFyQixFQUF1QyxDQUF2QztBQThDaGhENjhDLE1BQU0sQ0FBQy84QyxDQUFQLEdBQVdBLENBQVgsQyIsImZpbGUiOiIvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBtb2RpZnlXaGl0ZWJvYXJkQWNjZXNzIGZyb20gJy9pbXBvcnRzL2FwaS93aGl0ZWJvYXJkLW11bHRpLXVzZXIvc2VydmVyL21vZGlmaWVycy9tb2RpZnlXaGl0ZWJvYXJkQWNjZXNzJztcbmltcG9ydCBjbGVhckFubm90YXRpb25zIGZyb20gJy4uL21vZGlmaWVycy9jbGVhckFubm90YXRpb25zJztcbmltcG9ydCBhZGRBbm5vdGF0aW9uIGZyb20gJy4uL21vZGlmaWVycy9hZGRBbm5vdGF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlV2hpdGVib2FyZEFubm90YXRpb25zKHsgaGVhZGVyLCBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjaGVjayhoZWFkZXIsIE9iamVjdCk7XG4gIGlmIChoZWFkZXIudXNlcklkICE9PSAnbm9kZUpTYXBwJykgeyByZXR1cm4gZmFsc2U7IH1cblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG5cbiAgY29uc3QgeyBhbm5vdGF0aW9ucywgd2hpdGVib2FyZElkLCBtdWx0aVVzZXIgfSA9IGJvZHk7XG5cbiAgY2hlY2soYW5ub3RhdGlvbnMsIEFycmF5KTtcbiAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuICBjaGVjayhtdWx0aVVzZXIsIEFycmF5KTtcblxuICBjbGVhckFubm90YXRpb25zKG1lZXRpbmdJZCwgd2hpdGVib2FyZElkKTtcblxuICBfLmVhY2goYW5ub3RhdGlvbnMsIChhbm5vdGF0aW9uKSA9PiB7XG4gICAgY29uc3QgeyB3YklkLCB1c2VySWQgfSA9IGFubm90YXRpb247XG4gICAgYWRkQW5ub3RhdGlvbihtZWV0aW5nSWQsIHdiSWQsIHVzZXJJZCwgYW5ub3RhdGlvbik7XG4gIH0pO1xuXG4gIG1vZGlmeVdoaXRlYm9hcmRBY2Nlc3MobWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIG11bHRpVXNlcik7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgQW5ub3RhdGlvbnNTdHJlYW1lciBmcm9tICcvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL3N0cmVhbWVyJztcblxuaW1wb3J0IGNsZWFyQW5ub3RhdGlvbnMgZnJvbSAnLi4vbW9kaWZpZXJzL2NsZWFyQW5ub3RhdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVXaGl0ZWJvYXJkQ2xlYXJlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoZWNrKGJvZHksIHtcbiAgICB1c2VySWQ6IFN0cmluZyxcbiAgICB3aGl0ZWJvYXJkSWQ6IFN0cmluZyxcbiAgICBmdWxsQ2xlYXI6IEJvb2xlYW4sXG4gIH0pO1xuXG4gIGNvbnN0IHsgd2hpdGVib2FyZElkLCBmdWxsQ2xlYXIsIHVzZXJJZCB9ID0gYm9keTtcblxuICBpZiAoZnVsbENsZWFyKSB7XG4gICAgQW5ub3RhdGlvbnNTdHJlYW1lcihtZWV0aW5nSWQpLmVtaXQoJ3JlbW92ZWQnLCB7IG1lZXRpbmdJZCwgd2hpdGVib2FyZElkIH0pO1xuICAgIHJldHVybiBjbGVhckFubm90YXRpb25zKG1lZXRpbmdJZCwgd2hpdGVib2FyZElkKTtcbiAgfVxuXG4gIEFubm90YXRpb25zU3RyZWFtZXIobWVldGluZ0lkKS5lbWl0KCdyZW1vdmVkJywgeyBtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgdXNlcklkIH0pO1xuICByZXR1cm4gY2xlYXJBbm5vdGF0aW9ucyhtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgdXNlcklkKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBBbm5vdGF0aW9uc1N0cmVhbWVyIGZyb20gJy9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvc3RyZWFtZXInO1xuaW1wb3J0IGFkZEFubm90YXRpb24gZnJvbSAnLi4vbW9kaWZpZXJzL2FkZEFubm90YXRpb24nO1xuaW1wb3J0IE1ldHJpY3MgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbWV0cmljcyc7XG5cbmNvbnN0IHsgcXVldWVNZXRyaWNzIH0gPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcy5tZXRyaWNzO1xuXG5jb25zdCB7XG4gIGFubm90YXRpb25zUXVldWVQcm9jZXNzSW50ZXJ2YWw6IEFOTk9UQVRJT05fUFJPQ0VTU19JTlRFUlZBTCxcbn0gPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLndoaXRlYm9hcmQ7XG5cbmxldCBhbm5vdGF0aW9uc1F1ZXVlID0ge307XG5sZXQgYW5ub3RhdGlvbnNSZWNpZXZlcklzUnVubmluZyA9IGZhbHNlO1xuXG5jb25zdCBwcm9jZXNzID0gKCkgPT4ge1xuICBpZiAoIU9iamVjdC5rZXlzKGFubm90YXRpb25zUXVldWUpLmxlbmd0aCkge1xuICAgIGFubm90YXRpb25zUmVjaWV2ZXJJc1J1bm5pbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgYW5ub3RhdGlvbnNSZWNpZXZlcklzUnVubmluZyA9IHRydWU7XG4gIE9iamVjdC5rZXlzKGFubm90YXRpb25zUXVldWUpLmZvckVhY2goKG1lZXRpbmdJZCkgPT4ge1xuICAgIEFubm90YXRpb25zU3RyZWFtZXIobWVldGluZ0lkKS5lbWl0KCdhZGRlZCcsIHsgbWVldGluZ0lkLCBhbm5vdGF0aW9uczogYW5ub3RhdGlvbnNRdWV1ZVttZWV0aW5nSWRdIH0pO1xuICAgIGlmIChxdWV1ZU1ldHJpY3MpIHtcbiAgICAgIE1ldHJpY3Muc2V0QW5ub3RhdGlvblF1ZXVlTGVuZ3RoKG1lZXRpbmdJZCwgMCk7XG4gICAgfVxuICB9KTtcbiAgYW5ub3RhdGlvbnNRdWV1ZSA9IHt9O1xuXG4gIE1ldGVvci5zZXRUaW1lb3V0KHByb2Nlc3MsIEFOTk9UQVRJT05fUFJPQ0VTU19JTlRFUlZBTCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVXaGl0ZWJvYXJkU2VuZCh7IGhlYWRlciwgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3QgdXNlcklkID0gaGVhZGVyLnVzZXJJZDtcbiAgY29uc3QgYW5ub3RhdGlvbiA9IGJvZHkuYW5ub3RhdGlvbjtcblxuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKGFubm90YXRpb24sIE9iamVjdCk7XG5cbiAgY29uc3Qgd2hpdGVib2FyZElkID0gYW5ub3RhdGlvbi53YklkO1xuICBjaGVjayh3aGl0ZWJvYXJkSWQsIFN0cmluZyk7XG5cbiAgaWYgKCFhbm5vdGF0aW9uc1F1ZXVlLmhhc093blByb3BlcnR5KG1lZXRpbmdJZCkpIHtcbiAgICBhbm5vdGF0aW9uc1F1ZXVlW21lZXRpbmdJZF0gPSBbXTtcbiAgfVxuXG4gIGFubm90YXRpb25zUXVldWVbbWVldGluZ0lkXS5wdXNoKHsgbWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHVzZXJJZCwgYW5ub3RhdGlvbiB9KTtcbiAgaWYgKHF1ZXVlTWV0cmljcykge1xuICAgIE1ldHJpY3Muc2V0QW5ub3RhdGlvblF1ZXVlTGVuZ3RoKG1lZXRpbmdJZCwgYW5ub3RhdGlvbnNRdWV1ZVttZWV0aW5nSWRdLmxlbmd0aCk7XG4gIH1cbiAgaWYgKCFhbm5vdGF0aW9uc1JlY2lldmVySXNSdW5uaW5nKSBwcm9jZXNzKCk7XG5cbiAgcmV0dXJuIGFkZEFubm90YXRpb24obWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHVzZXJJZCwgYW5ub3RhdGlvbik7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmltcG9ydCBBbm5vdGF0aW9uc1N0cmVhbWVyIGZyb20gJy9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvc3RyZWFtZXInO1xuaW1wb3J0IHJlbW92ZUFubm90YXRpb24gZnJvbSAnLi4vbW9kaWZpZXJzL3JlbW92ZUFubm90YXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVXaGl0ZWJvYXJkVW5kbyh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHdoaXRlYm9hcmRJZCA9IGJvZHkud2hpdGVib2FyZElkO1xuICBjb25zdCBzaGFwZUlkID0gYm9keS5hbm5vdGF0aW9uSWQ7XG5cbiAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuICBjaGVjayhzaGFwZUlkLCBTdHJpbmcpO1xuXG4gIEFubm90YXRpb25zU3RyZWFtZXIobWVldGluZ0lkKS5lbWl0KCdyZW1vdmVkJywgeyBtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgc2hhcGVJZCB9KTtcbiAgcmV0dXJuIHJlbW92ZUFubm90YXRpb24obWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHNoYXBlSWQpO1xufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyV2hpdGVib2FyZCh3aGl0ZWJvYXJkSWQpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdDbGVhcldoaXRlYm9hcmRQdWJNc2cnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHdoaXRlYm9hcmRJZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBjbGVhcldoaXRlYm9hcmQgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBzZW5kQW5ub3RhdGlvbkhlbHBlciBmcm9tICcuL3NlbmRBbm5vdGF0aW9uSGVscGVyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZW5kQW5ub3RhdGlvbihhbm5vdGF0aW9uKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBzZW5kQW5ub3RhdGlvbkhlbHBlcihhbm5vdGF0aW9uLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBzZW5kQW5ub3RhdGlvbiAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZW5kQW5ub3RhdGlvbkhlbHBlcihhbm5vdGF0aW9uLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1NlbmRXaGl0ZWJvYXJkQW5ub3RhdGlvblB1Yk1zZyc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB3aGl0ZWJvYXJkSWQgPSBhbm5vdGF0aW9uLndiSWQ7XG5cbiAgICBjaGVjayhhbm5vdGF0aW9uLCBPYmplY3QpO1xuICAgIGNoZWNrKHdoaXRlYm9hcmRJZCwgU3RyaW5nKTtcblxuICAgIGlmIChhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlID09PSAndGV4dCcpIHtcbiAgICAgIGNoZWNrKGFubm90YXRpb24sIHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgc3RhdHVzOiBTdHJpbmcsXG4gICAgICAgIGFubm90YXRpb25UeXBlOiBTdHJpbmcsXG4gICAgICAgIGFubm90YXRpb25JbmZvOiB7XG4gICAgICAgICAgeDogTnVtYmVyLFxuICAgICAgICAgIHk6IE51bWJlcixcbiAgICAgICAgICBmb250Q29sb3I6IE51bWJlcixcbiAgICAgICAgICBjYWxjZWRGb250U2l6ZTogTnVtYmVyLFxuICAgICAgICAgIHRleHRCb3hXaWR0aDogTnVtYmVyLFxuICAgICAgICAgIHRleHQ6IFN0cmluZyxcbiAgICAgICAgICB0ZXh0Qm94SGVpZ2h0OiBOdW1iZXIsXG4gICAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgICB3aGl0ZWJvYXJkSWQ6IFN0cmluZyxcbiAgICAgICAgICBzdGF0dXM6IFN0cmluZyxcbiAgICAgICAgICBmb250U2l6ZTogTnVtYmVyLFxuICAgICAgICAgIGRhdGFQb2ludHM6IFN0cmluZyxcbiAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIH0sXG4gICAgICAgIHdiSWQ6IFN0cmluZyxcbiAgICAgICAgdXNlcklkOiBTdHJpbmcsXG4gICAgICAgIHBvc2l0aW9uOiBOdW1iZXIsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2soYW5ub3RhdGlvbiwge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBzdGF0dXM6IFN0cmluZyxcbiAgICAgICAgYW5ub3RhdGlvblR5cGU6IFN0cmluZyxcbiAgICAgICAgYW5ub3RhdGlvbkluZm86IHtcbiAgICAgICAgICBjb2xvcjogTnVtYmVyLFxuICAgICAgICAgIHRoaWNrbmVzczogTnVtYmVyLFxuICAgICAgICAgIHBvaW50czogQXJyYXksXG4gICAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgICB3aGl0ZWJvYXJkSWQ6IFN0cmluZyxcbiAgICAgICAgICBzdGF0dXM6IFN0cmluZyxcbiAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgZGltZW5zaW9uczogTWF0Y2guTWF5YmUoW051bWJlcl0pLFxuICAgICAgICB9LFxuICAgICAgICB3YklkOiBTdHJpbmcsXG4gICAgICAgIHVzZXJJZDogU3RyaW5nLFxuICAgICAgICBwb3NpdGlvbjogTnVtYmVyLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIGFubm90YXRpb24sXG4gICAgICBkcmF3RW5kT25seTogdHJ1ZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBzZW5kQW5ub3RhdGlvbkhlbHBlciAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgc2VuZEFubm90YXRpb25IZWxwZXIgZnJvbSAnLi9zZW5kQW5ub3RhdGlvbkhlbHBlcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlbmRCdWxrQW5ub3RhdGlvbnMocGF5bG9hZCkge1xuICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gIHRyeSB7XG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcblxuICAgIHBheWxvYWQuZm9yRWFjaCgoYW5ub3RhdGlvbikgPT4gc2VuZEFubm90YXRpb25IZWxwZXIoYW5ub3RhdGlvbiwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHNlbmRCdWxrQW5ub3RhdGlvbnMgJHtlcnIuc3RhY2t9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5kb0Fubm90YXRpb24od2hpdGVib2FyZElkKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnVW5kb1doaXRlYm9hcmRQdWJNc2cnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHdoaXRlYm9hcmRJZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB1bmRvQW5ub3RhdGlvbiAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEFubm90YXRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucyc7XG5pbXBvcnQgYWRkQW5ub3RhdGlvblF1ZXJ5IGZyb20gJy9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9hZGRBbm5vdGF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkQW5ub3RhdGlvbihtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgdXNlcklkLCBhbm5vdGF0aW9uKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuICBjaGVjayhhbm5vdGF0aW9uLCBPYmplY3QpO1xuXG4gIGNvbnN0IHF1ZXJ5ID0gYWRkQW5ub3RhdGlvblF1ZXJ5KG1lZXRpbmdJZCwgd2hpdGVib2FyZElkLCB1c2VySWQsIGFubm90YXRpb24pO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkIH0gPSBBbm5vdGF0aW9ucy51cHNlcnQocXVlcnkuc2VsZWN0b3IsIHF1ZXJ5Lm1vZGlmaWVyKTtcblxuICAgIGlmIChpbnNlcnRlZElkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQWRkZWQgYW5ub3RhdGlvbiBpZD0ke2Fubm90YXRpb24uaWR9IHdoaXRlYm9hcmQ9JHt3aGl0ZWJvYXJkSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFkZGluZyBhbm5vdGF0aW9uIHRvIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgQW5ub3RhdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJBbm5vdGF0aW9ucyhtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgdXNlcklkKSB7XG4gIGNvbnN0IHNlbGVjdG9yID0ge307XG5cbiAgaWYgKG1lZXRpbmdJZCkge1xuICAgIHNlbGVjdG9yLm1lZXRpbmdJZCA9IG1lZXRpbmdJZDtcbiAgfVxuXG4gIGlmICh3aGl0ZWJvYXJkSWQpIHtcbiAgICBzZWxlY3Rvci53aGl0ZWJvYXJkSWQgPSB3aGl0ZWJvYXJkSWQ7XG4gIH1cblxuICBpZiAodXNlcklkKSB7XG4gICAgc2VsZWN0b3IudXNlcklkID0gdXNlcklkO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IEFubm90YXRpb25zLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIGlmICh1c2VySWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgQW5ub3RhdGlvbnMgZm9yIHVzZXJJZD0ke3VzZXJJZH0gd2hlcmUgd2hpdGVib2FyZD0ke3doaXRlYm9hcmRJZH1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAod2hpdGVib2FyZElkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIEFubm90YXRpb25zIGZvciB3aGl0ZWJvYXJkPSR7d2hpdGVib2FyZElkfWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWV0aW5nSWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgQW5ub3RhdGlvbnMgKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBBbm5vdGF0aW9ucyAoYWxsKScpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBSZW1vdmluZyBBbm5vdGF0aW9ucyBmcm9tIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgQW5ub3RhdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQW5ub3RhdGlvbihtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgc2hhcGVJZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHdoaXRlYm9hcmRJZCwgU3RyaW5nKTtcbiAgY2hlY2soc2hhcGVJZCwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgd2hpdGVib2FyZElkLFxuICAgIGlkOiBzaGFwZUlkLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBBbm5vdGF0aW9ucy5yZW1vdmUoc2VsZWN0b3IpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgUmVtb3ZlZCBhbm5vdGF0aW9uIGlkPSR7c2hhcGVJZH0gd2hpdGVib2FyZD0ke3doaXRlYm9hcmRJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgUmVtb3ZpbmcgYW5ub3RhdGlvbiBmcm9tIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0ZvckhUTUw1U2VydmVyT25seSB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IGhhbmRsZVdoaXRlYm9hcmRDbGVhcmVkIGZyb20gJy4vaGFuZGxlcnMvd2hpdGVib2FyZENsZWFyZWQnO1xuaW1wb3J0IGhhbmRsZVdoaXRlYm9hcmRVbmRvIGZyb20gJy4vaGFuZGxlcnMvd2hpdGVib2FyZFVuZG8nO1xuaW1wb3J0IGhhbmRsZVdoaXRlYm9hcmRTZW5kIGZyb20gJy4vaGFuZGxlcnMvd2hpdGVib2FyZFNlbmQnO1xuaW1wb3J0IGhhbmRsZVdoaXRlYm9hcmRBbm5vdGF0aW9ucyBmcm9tICcuL2hhbmRsZXJzL3doaXRlYm9hcmRBbm5vdGF0aW9ucyc7XG5cblJlZGlzUHViU3ViLm9uKCdDbGVhcldoaXRlYm9hcmRFdnRNc2cnLCBoYW5kbGVXaGl0ZWJvYXJkQ2xlYXJlZCk7XG5SZWRpc1B1YlN1Yi5vbignVW5kb1doaXRlYm9hcmRFdnRNc2cnLCBoYW5kbGVXaGl0ZWJvYXJkVW5kbyk7XG5SZWRpc1B1YlN1Yi5vbignU2VuZFdoaXRlYm9hcmRBbm5vdGF0aW9uRXZ0TXNnJywgaGFuZGxlV2hpdGVib2FyZFNlbmQpO1xuUmVkaXNQdWJTdWIub24oJ0dldFdoaXRlYm9hcmRBbm5vdGF0aW9uc1Jlc3BNc2cnLCBwcm9jZXNzRm9ySFRNTDVTZXJ2ZXJPbmx5KGhhbmRsZVdoaXRlYm9hcmRBbm5vdGF0aW9ucykpO1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgdW5kb0Fubm90YXRpb24gZnJvbSAnLi9tZXRob2RzL3VuZG9Bbm5vdGF0aW9uJztcbmltcG9ydCBjbGVhcldoaXRlYm9hcmQgZnJvbSAnLi9tZXRob2RzL2NsZWFyV2hpdGVib2FyZCc7XG5pbXBvcnQgc2VuZEFubm90YXRpb24gZnJvbSAnLi9tZXRob2RzL3NlbmRBbm5vdGF0aW9uJztcbmltcG9ydCBzZW5kQnVsa0Fubm90YXRpb25zIGZyb20gJy4vbWV0aG9kcy9zZW5kQnVsa0Fubm90YXRpb25zJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICB1bmRvQW5ub3RhdGlvbixcbiAgY2xlYXJXaGl0ZWJvYXJkLFxuICBzZW5kQW5ub3RhdGlvbixcbiAgc2VuZEJ1bGtBbm5vdGF0aW9ucyxcbn0pO1xuIiwiaW1wb3J0IEFubm90YXRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uLCB7IFZhbGlkYXRpb25TdGF0ZXMgfSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcblxuZnVuY3Rpb24gYW5ub3RhdGlvbnMoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIEFubm90YXRpb25zIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIEFubm90YXRpb25zLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIExvZ2dlci5kZWJ1ZygnUHVibGlzaGluZyBBbm5vdGF0aW9ucycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgcmV0dXJuIEFubm90YXRpb25zLmZpbmQoeyBtZWV0aW5nSWQgfSk7XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2goLi4uYXJncykge1xuICBjb25zdCBib3VuZEFubm90YXRpb25zID0gYW5ub3RhdGlvbnMuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kQW5ub3RhdGlvbnMoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCdhbm5vdGF0aW9ucycsIHB1Ymxpc2gpO1xuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQW5ub3RhdGlvbnNTdHJlYW1lcihtZWV0aW5nSWQpIHtcbiAgTG9nZ2VyLmluZm8oYFJlbW92aW5nIEFubm90YXRpb25zIHN0cmVhbWVyIG9iamVjdCBmb3IgbWVldGluZyAke21lZXRpbmdJZH1gKTtcbiAgZGVsZXRlIE1ldGVvci5TdHJlYW1lckNlbnRyYWwuaW5zdGFuY2VzW2Bhbm5vdGF0aW9ucy0ke21lZXRpbmdJZH1gXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFubm90YXRpb25zU3RyZWFtZXIobWVldGluZ0lkKSB7XG4gIGNvbnN0IHN0cmVhbWVyID0gbmV3IE1ldGVvci5TdHJlYW1lcihgYW5ub3RhdGlvbnMtJHttZWV0aW5nSWR9YCwgeyByZXRyYW5zbWl0OiBmYWxzZSB9KTtcblxuICBzdHJlYW1lci5hbGxvd1JlYWQoZnVuY3Rpb24gYWxsb3dSZWFkKCkge1xuICAgIGlmICghdGhpcy51c2VySWQpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiB0aGlzLnVzZXJJZCAmJiB0aGlzLnVzZXJJZC5pbmNsdWRlcyhtZWV0aW5nSWQpO1xuICB9KTtcblxuICBzdHJlYW1lci5hbGxvd1dyaXRlKGZ1bmN0aW9uIGFsbG93V3JpdGUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0KG1lZXRpbmdJZCkge1xuICByZXR1cm4gTWV0ZW9yLlN0cmVhbWVyQ2VudHJhbC5pbnN0YW5jZXNbYGFubm90YXRpb25zLSR7bWVldGluZ0lkfWBdO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5jb25zdCBBTk5PVEFUSU9OX1RZUEVfVEVYVCA9ICd0ZXh0JztcbmNvbnN0IEFOTk9UQVRJT05fVFlQRV9QRU5DSUwgPSAncGVuY2lsJztcblxuLy8gbGluZSwgdHJpYW5nbGUsIGVsbGlwc2UsIHJlY3RhbmdsZVxuZnVuY3Rpb24gaGFuZGxlQ29tbW9uQW5ub3RhdGlvbihtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgdXNlcklkLCBhbm5vdGF0aW9uKSB7XG4gIGNvbnN0IHtcbiAgICBpZCwgc3RhdHVzLCBhbm5vdGF0aW9uVHlwZSwgYW5ub3RhdGlvbkluZm8sIHdiSWQsIHBvc2l0aW9uLFxuICB9ID0gYW5ub3RhdGlvbjtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgaWQsXG4gICAgdXNlcklkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIHdoaXRlYm9hcmRJZCxcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIGlkLFxuICAgICAgc3RhdHVzLFxuICAgICAgYW5ub3RhdGlvblR5cGUsXG4gICAgICBhbm5vdGF0aW9uSW5mbyxcbiAgICAgIHdiSWQsXG4gICAgfSxcbiAgICAkc2V0T25JbnNlcnQ6IHtcbiAgICAgIHBvc2l0aW9uLFxuICAgIH0sXG4gICAgJGluYzogeyB2ZXJzaW9uOiAxIH0sXG4gIH07XG5cbiAgcmV0dXJuIHsgc2VsZWN0b3IsIG1vZGlmaWVyIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVRleHRVcGRhdGUobWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHVzZXJJZCwgYW5ub3RhdGlvbikge1xuICBjb25zdCB7XG4gICAgaWQsIHN0YXR1cywgYW5ub3RhdGlvblR5cGUsIGFubm90YXRpb25JbmZvLCB3YklkLCBwb3NpdGlvbixcbiAgfSA9IGFubm90YXRpb247XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIGlkLFxuICAgIHVzZXJJZCxcbiAgfTtcblxuICBhbm5vdGF0aW9uSW5mby50ZXh0ID0gYW5ub3RhdGlvbkluZm8udGV4dC5yZXBsYWNlKC9bXFxyXS9nLCAnXFxuJyk7XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgd2hpdGVib2FyZElkLFxuICAgICAgbWVldGluZ0lkLFxuICAgICAgaWQsXG4gICAgICBzdGF0dXMsXG4gICAgICBhbm5vdGF0aW9uVHlwZSxcbiAgICAgIGFubm90YXRpb25JbmZvLFxuICAgICAgd2JJZCxcbiAgICB9LFxuICAgICRzZXRPbkluc2VydDoge1xuICAgICAgcG9zaXRpb24sXG4gICAgfSxcbiAgICAkaW5jOiB7IHZlcnNpb246IDEgfSxcbiAgfTtcblxuICByZXR1cm4geyBzZWxlY3RvciwgbW9kaWZpZXIgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUGVuY2lsVXBkYXRlKG1lZXRpbmdJZCwgd2hpdGVib2FyZElkLCB1c2VySWQsIGFubm90YXRpb24pIHtcbiAgY29uc3QgRFJBV19TVEFSVCA9ICdEUkFXX1NUQVJUJztcbiAgY29uc3QgRFJBV19VUERBVEUgPSAnRFJBV19VUERBVEUnO1xuICBjb25zdCBEUkFXX0VORCA9ICdEUkFXX0VORCc7XG5cbiAgY29uc3Qge1xuICAgIGlkLCBzdGF0dXMsIGFubm90YXRpb25UeXBlLCBhbm5vdGF0aW9uSW5mbywgd2JJZCwgcG9zaXRpb24sXG4gIH0gPSBhbm5vdGF0aW9uO1xuXG4gIGNvbnN0IGJhc2VTZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgaWQsXG4gICAgdXNlcklkLFxuICAgIHdoaXRlYm9hcmRJZCxcbiAgfTtcblxuICBsZXQgYmFzZU1vZGlmaWVyO1xuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgRFJBV19TVEFSVDpcbiAgICAgIC8vIG9uIHN0YXJ0IHdlIHNwbGl0IHRoZSBwb2ludHNcblxuICAgICAgLy8gY3JlYXRlIHRoZSAncGVuY2lsX2Jhc2UnXG4gICAgICAvLyBUT0RPOiBmaW5kIGFuZCByZW1vdmVkIHVudXNlZCBwcm9wcyAoY2h1bmtzLCB2ZXJzaW9uLCBldGMpXG4gICAgICBiYXNlTW9kaWZpZXIgPSB7XG4gICAgICAgICRzZXQ6IHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgbWVldGluZ0lkLFxuICAgICAgICAgIHdoaXRlYm9hcmRJZCxcbiAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgYW5ub3RhdGlvblR5cGUsXG4gICAgICAgICAgYW5ub3RhdGlvbkluZm8sXG4gICAgICAgICAgd2JJZCxcbiAgICAgICAgICB2ZXJzaW9uOiAxLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgRFJBV19VUERBVEU6XG4gICAgICBiYXNlTW9kaWZpZXIgPSB7XG4gICAgICAgICRwdXNoOiB7XG4gICAgICAgICAgJ2Fubm90YXRpb25JbmZvLnBvaW50cyc6IHsgJGVhY2g6IGFubm90YXRpb25JbmZvLnBvaW50cyB9LFxuICAgICAgICB9LFxuICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgc3RhdHVzLFxuICAgICAgICB9LFxuICAgICAgICAkaW5jOiB7IHZlcnNpb246IDEgfSxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIERSQVdfRU5EOlxuICAgICAgLy8gVXBkYXRpbmcgdGhlIG1haW4gcGVuY2lsIG9iamVjdCB3aXRoIHRoZSBmaW5hbCBpbmZvXG4gICAgICBiYXNlTW9kaWZpZXIgPSB7XG4gICAgICAgICRzZXQ6IHtcbiAgICAgICAgICB3aGl0ZWJvYXJkSWQsXG4gICAgICAgICAgbWVldGluZ0lkLFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICBhbm5vdGF0aW9uVHlwZSxcbiAgICAgICAgICBhbm5vdGF0aW9uSW5mbyxcbiAgICAgICAgICB3YklkLFxuICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICB9LFxuICAgICAgICAkaW5jOiB7IHZlcnNpb246IDEgfSxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4geyBzZWxlY3RvcjogYmFzZVNlbGVjdG9yLCBtb2RpZmllcjogYmFzZU1vZGlmaWVyIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZEFubm90YXRpb24obWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHVzZXJJZCwgYW5ub3RhdGlvbikge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHdoaXRlYm9hcmRJZCwgU3RyaW5nKTtcbiAgY2hlY2soYW5ub3RhdGlvbiwgT2JqZWN0KTtcblxuICBzd2l0Y2ggKGFubm90YXRpb24uYW5ub3RhdGlvblR5cGUpIHtcbiAgICBjYXNlIEFOTk9UQVRJT05fVFlQRV9URVhUOlxuICAgICAgcmV0dXJuIGhhbmRsZVRleHRVcGRhdGUobWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHVzZXJJZCwgYW5ub3RhdGlvbik7XG4gICAgY2FzZSBBTk5PVEFUSU9OX1RZUEVfUEVOQ0lMOlxuICAgICAgcmV0dXJuIGhhbmRsZVBlbmNpbFVwZGF0ZShtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgdXNlcklkLCBhbm5vdGF0aW9uKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGhhbmRsZUNvbW1vbkFubm90YXRpb24obWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHVzZXJJZCwgYW5ub3RhdGlvbik7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBBbm5vdGF0aW9ucyA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCdhbm5vdGF0aW9ucycpO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIC8vIHR5cGVzIG9mIHF1ZXJpZXMgZm9yIHRoZSBhbm5vdGF0aW9ucyAgKFRvdGFsKTpcbiAgLy8gMS4gbWVldGluZ0lkLCBpZCwgdXNlcklkICAgICAgICAgICAgICAgKCA4IClcbiAgLy8gMi4gbWVldGluZ0lkLCBpZCwgdXNlcklkLCB3aGl0ZWJvYXJkSWQgKCAxIClcbiAgLy8gMy4gbWVldGluZ0lkICAgICAgICAgICAgICAgICAgICAgICAgICAgKCAxIClcbiAgLy8gNC4gbWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQgICAgICAgICAgICAgKCAxIClcbiAgLy8gNS4gbWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIGlkICAgICAgICAgKCAxIClcbiAgLy8gNi4gbWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQsIHVzZXJJZCAgICAgKCAxIClcbiAgLy8gVGhlc2UgMiBpbmRleGVzIHNlZW0gdG8gY292ZXIgYWxsIG9mIHRoZSBjYXNlc1xuXG4gIEFubm90YXRpb25zLl9lbnN1cmVJbmRleCh7IGlkOiAxIH0pO1xuICBBbm5vdGF0aW9ucy5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEsIHdoaXRlYm9hcmRJZDogMSwgdXNlcklkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBbm5vdGF0aW9ucztcbiIsImltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uIGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IENsaWVudENvbm5lY3Rpb25zIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL0NsaWVudENvbm5lY3Rpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJBdXRoVG9rZW5WYWxpZGF0aW9uKG1lZXRpbmdJZCkge1xuICByZXR1cm4gQXV0aFRva2VuVmFsaWRhdGlvbi5yZW1vdmUoeyBtZWV0aW5nSWQgfSwgKGVyciwgbnVtKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgTG9nZ2VyLmluZm8oYEVycm9yIHdoZW4gcmVtb3ZpbmcgYXV0aC10b2tlbi12YWxpZGF0aW9uIGZvciBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH1cblxuICAgIGlmICghcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1JPTEUgfHwgcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1JPTEUgPT09ICdmcm9udGVuZCcpIHtcbiAgICAgIENsaWVudENvbm5lY3Rpb25zLnJlbW92ZU1lZXRpbmcobWVldGluZ0lkKTtcbiAgICB9XG4gICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgQXV0aFRva2VuVmFsaWRhdGlvbiAoJHttZWV0aW5nSWR9KWApO1xuICB9KTtcbn1cbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uIGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cHNlcnRWYWxpZGF0aW9uU3RhdGUobWVldGluZ0lkLCB1c2VySWQsIHZhbGlkYXRpb25TdGF0dXMsIGNvbm5lY3Rpb25JZCwgcmVhc29uID0gbnVsbCkge1xuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsIHVzZXJJZCwgY29ubmVjdGlvbklkLFxuICB9O1xuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICB1c2VySWQsXG4gICAgICBjb25uZWN0aW9uSWQsXG4gICAgICB2YWxpZGF0aW9uU3RhdHVzLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgIHJlYXNvbixcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gQXV0aFRva2VuVmFsaWRhdGlvbi51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwc2VydGVkICR7SlNPTi5zdHJpbmdpZnkoc2VsZWN0b3IpfSAke3ZhbGlkYXRpb25TdGF0dXN9IGluIEF1dGhUb2tlblZhbGlkYXRpb25gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgQ291bGQgbm90IHVwc2VydCB0byBjb2xsZWN0aW9uIEF1dGhUb2tlblZhbGlkYXRpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgJy4vcHVibGlzaGVycyc7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uIGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5mdW5jdGlvbiBhdXRoVG9rZW5WYWxpZGF0aW9uKHsgbWVldGluZ0lkLCB1c2VySWQgfSkge1xuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICB9O1xuXG4gIExvZ2dlci5kZWJ1ZyhgUHVibGlzaGluZyBhdXRoLXRva2VuLXZhbGlkYXRpb24gZm9yICR7bWVldGluZ0lkfSAke3VzZXJJZH1gKTtcblxuICByZXR1cm4gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kKHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kQXV0aFRva2VuVmFsaWRhdGlvbiA9IGF1dGhUb2tlblZhbGlkYXRpb24uYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kQXV0aFRva2VuVmFsaWRhdGlvbiguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ2F1dGgtdG9rZW4tdmFsaWRhdGlvbicsIHB1Ymxpc2gpO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5cbmNvbnN0IEF1dGhUb2tlblZhbGlkYXRpb24gPSBuZXcgTW9uZ28uQ29sbGVjdGlvbignYXV0aC10b2tlbi12YWxpZGF0aW9uJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgQXV0aFRva2VuVmFsaWRhdGlvbi5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEsIHVzZXJJZDogMSB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IFZhbGlkYXRpb25TdGF0ZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgTk9UX1ZBTElEQVRFRDogMSxcbiAgVkFMSURBVElORzogMixcbiAgVkFMSURBVEVEOiAzLFxuICBJTlZBTElEOiA0LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF1dGhUb2tlblZhbGlkYXRpb247XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgY2xlYXJCcmVha291dHMgZnJvbSAnLi4vbW9kaWZpZXJzL2NsZWFyQnJlYWtvdXRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlQnJlYWtvdXRDbG9zZWQoeyBib2R5IH0pIHtcbiAgY29uc3QgeyBicmVha291dElkIH0gPSBib2R5O1xuICBjaGVjayhicmVha291dElkLCBTdHJpbmcpO1xuXG4gIHJldHVybiBjbGVhckJyZWFrb3V0cyhicmVha291dElkKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBCcmVha291dHMgZnJvbSAnL2ltcG9ydHMvYXBpL2JyZWFrb3V0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrb3V0Sm9pblVSTCh7IGJvZHkgfSkge1xuICBjb25zdCB7XG4gICAgcmVkaXJlY3RUb0h0bWw1Sm9pblVSTCxcbiAgICB1c2VySWQsXG4gICAgYnJlYWtvdXRJZCxcbiAgfSA9IGJvZHk7XG5cbiAgY2hlY2socmVkaXJlY3RUb0h0bWw1Sm9pblVSTCwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBicmVha291dElkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRwdXNoOiB7XG4gICAgICB1c2Vyczoge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHJlZGlyZWN0VG9IdG1sNUpvaW5VUkwsXG4gICAgICAgIGluc2VydGVkVGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGluc2VydGVkSWQsIG51bWJlckFmZmVjdGVkIH0gPSBCcmVha291dHMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIGJyZWFrb3V0IGlkPSR7YnJlYWtvdXRJZH1gKTtcbiAgICB9IGVsc2UgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBzZXJ0ZWQgYnJlYWtvdXQgaWQ9JHticmVha291dElkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBZGRpbmcgYnJlYWtvdXQgdG8gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBCcmVha291dHMgZnJvbSAnL2ltcG9ydHMvYXBpL2JyZWFrb3V0cyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgZmxhdCBmcm9tICdmbGF0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlQnJlYWtvdXRSb29tU3RhcnRlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIC8vIDAgc2Vjb25kcyBkZWZhdWx0IGJyZWFrb3V0IHRpbWUsIGZvcmNlcyB1c2Ugb2YgcmVhbCBleHBpcmF0aW9uIHRpbWVcbiAgY29uc3QgREVGQVVMVF9USU1FX1JFTUFJTklORyA9IDA7XG5cbiAgY29uc3Qge1xuICAgIHBhcmVudE1lZXRpbmdJZCxcbiAgICBicmVha291dCxcbiAgfSA9IGJvZHk7XG5cbiAgY29uc3QgeyBicmVha291dElkIH0gPSBicmVha291dDtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgYnJlYWtvdXRJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICB1c2VyczogW10sXG4gICAgICAgIGpvaW5lZFVzZXJzOiBbXSxcbiAgICAgIH0sXG4gICAgICB7IHRpbWVSZW1haW5pbmc6IERFRkFVTFRfVElNRV9SRU1BSU5JTkcgfSxcbiAgICAgIHsgcGFyZW50TWVldGluZ0lkIH0sXG4gICAgICBmbGF0KGJyZWFrb3V0KSxcbiAgICApLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gQnJlYWtvdXRzLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbygnVXBkYXRlZCB0aW1lUmVtYWluaW5nIGFuZCBleHRlcm5hbE1lZXRpbmdJZCAnXG4gICAgICAgICsgYGZvciBicmVha291dCBpZD0ke2JyZWFrb3V0SWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYHVwZGF0aW5nIGJyZWFrb3V0OiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IEJyZWFrb3V0cyBmcm9tICcvaW1wb3J0cy9hcGkvYnJlYWtvdXRzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gam9pbmVkVXNlcnNDaGFuZ2VkKHsgYm9keSB9KSB7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG5cbiAgY29uc3Qge1xuICAgIHBhcmVudElkLFxuICAgIGJyZWFrb3V0SWQsXG4gICAgdXNlcnMsXG4gIH0gPSBib2R5O1xuXG4gIGNoZWNrKHBhcmVudElkLCBTdHJpbmcpO1xuICBjaGVjayhicmVha291dElkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VycywgQXJyYXkpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIHBhcmVudE1lZXRpbmdJZDogcGFyZW50SWQsXG4gICAgYnJlYWtvdXRJZCxcbiAgfTtcblxuICBjb25zdCB1c2Vyc01hcHBlZCA9IHVzZXJzLm1hcCh1c2VyID0+ICh7IHVzZXJJZDogdXNlci5pZCwgbmFtZTogdXNlci5uYW1lIH0pKTtcbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgam9pbmVkVXNlcnM6IHVzZXJzTWFwcGVkLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IEJyZWFrb3V0cy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwZGF0ZWQgam9pbmVkIHVzZXJzIGluIGJyZWFrb3V0IGlkPSR7YnJlYWtvdXRJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgdXBkYXRpbmcgam9pbmVkIHVzZXJzIGluIGJyZWFrb3V0OiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEJyZWFrb3V0cyBmcm9tICcvaW1wb3J0cy9hcGkvYnJlYWtvdXRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlVXBkYXRlVGltZVJlbWFpbmluZyh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHtcbiAgICB0aW1lUmVtYWluaW5nLFxuICB9ID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHRpbWVSZW1haW5pbmcsIE51bWJlcik7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgcGFyZW50TWVldGluZ0lkOiBtZWV0aW5nSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgdGltZVJlbWFpbmluZyxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgbXVsdGk6IHRydWUsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IEJyZWFrb3V0cy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyLCBvcHRpb25zKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwZGF0ZWQgYnJlYWtvdXQgdGltZSByZW1haW5pbmcgZm9yIGJyZWFrb3V0cyB3aGVyZSBwYXJlbnRNZWV0aW5nSWQ9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFVwZGF0aW5nIGJyZWFrb3V0czogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha291dFJvb20ocm9vbXMsIGR1cmF0aW9uSW5NaW51dGVzLCByZWNvcmQgPSBmYWxzZSkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBCUkVBS09VVF9MSU0gPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLmFwcC5icmVha291dHMuYnJlYWtvdXRSb29tTGltaXQ7XG4gIGNvbnN0IE1JTl9CUkVBS09VVF9ST09NUyA9IDI7XG4gIGNvbnN0IE1BWF9CUkVBS09VVF9ST09NUyA9IEJSRUFLT1VUX0xJTSA+IE1JTl9CUkVBS09VVF9ST09NUyA/IEJSRUFLT1VUX0xJTSA6IE1JTl9CUkVBS09VVF9ST09NUztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdDcmVhdGVCcmVha291dFJvb21zQ21kTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgaWYgKHJvb21zLmxlbmd0aCA+IE1BWF9CUkVBS09VVF9ST09NUykge1xuICAgICAgTG9nZ2VyLmluZm8oYEF0dGVtcHQgdG8gY3JlYXRlIGJyZWFrb3V0IHJvb21zIHdpdGggaW52YWxpZCBudW1iZXIgb2Ygcm9vbXMgaW4gbWVldGluZyBpZD0ke21lZXRpbmdJZH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHJlY29yZCxcbiAgICAgIGR1cmF0aW9uSW5NaW51dGVzLFxuICAgICAgcm9vbXMsXG4gICAgICBtZWV0aW5nSWQsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBjcmVhdGVCcmVha291dFJvb20gJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbmRBbGxCcmVha291dHMoKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnRW5kQWxsQnJlYWtvdXRSb29tc01zZyc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcblxuICAgIHJldHVybiBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIG51bGwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgZW5kQWxsQnJlYWtvdXRzICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWVzdEpvaW5VUkwoeyBicmVha291dElkLCB1c2VySWQ6IHVzZXJJZFRvSW52aXRlIH0pIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdSZXF1ZXN0QnJlYWtvdXRKb2luVVJMUmVxTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgdXNlcklkID0gdXNlcklkVG9JbnZpdGUgfHwgcmVxdWVzdGVyVXNlcklkO1xuXG4gICAgcmV0dXJuIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShcbiAgICAgIENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLFxuICAgICAge1xuICAgICAgICBtZWV0aW5nSWQsXG4gICAgICAgIGJyZWFrb3V0SWQsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgIH0sXG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHJlcXVlc3RKb2luVVJMICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQnJlYWtvdXRzIGZyb20gJy9pbXBvcnRzL2FwaS9icmVha291dHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhckJyZWFrb3V0cyhicmVha291dElkKSB7XG4gIGlmIChicmVha291dElkKSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgICBicmVha291dElkLFxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBCcmVha291dHMucmVtb3ZlKHNlbGVjdG9yKTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIEJyZWFrb3V0cyAoJHticmVha291dElkfSlgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgQnJlYWtvdXRzICgke2JyZWFrb3V0SWR9KWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBCcmVha291dHMucmVtb3ZlKHt9KTtcbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBCcmVha291dHMgKGFsbCknKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcignRXJyb3Igb24gY2xlYXJpbmcgQnJlYWtvdXRzIChhbGwpJyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IGhhbmRsZUJyZWFrb3V0Sm9pblVSTCBmcm9tICcuL2hhbmRsZXJzL2JyZWFrb3V0Sm9pblVSTCc7XG5pbXBvcnQgaGFuZGxlQnJlYWtvdXRTdGFydGVkIGZyb20gJy4vaGFuZGxlcnMvYnJlYWtvdXRTdGFydGVkJztcbmltcG9ydCBoYW5kbGVVcGRhdGVUaW1lUmVtYWluaW5nIGZyb20gJy4vaGFuZGxlcnMvdXBkYXRlVGltZVJlbWFpbmluZyc7XG5pbXBvcnQgaGFuZGxlQnJlYWtvdXRDbG9zZWQgZnJvbSAnLi9oYW5kbGVycy9icmVha291dENsb3NlZCc7XG5pbXBvcnQgam9pbmVkVXNlcnNDaGFuZ2VkIGZyb20gJy4vaGFuZGxlcnMvam9pbmVkVXNlcnNDaGFuZ2VkJztcblxuUmVkaXNQdWJTdWIub24oJ0JyZWFrb3V0Um9vbVN0YXJ0ZWRFdnRNc2cnLCBoYW5kbGVCcmVha291dFN0YXJ0ZWQpO1xuUmVkaXNQdWJTdWIub24oJ0JyZWFrb3V0Um9vbUpvaW5VUkxFdnRNc2cnLCBoYW5kbGVCcmVha291dEpvaW5VUkwpO1xuUmVkaXNQdWJTdWIub24oJ1JlcXVlc3RCcmVha291dEpvaW5VUkxSZXNwTXNnJywgaGFuZGxlQnJlYWtvdXRKb2luVVJMKTtcblJlZGlzUHViU3ViLm9uKCdCcmVha291dFJvb21zVGltZVJlbWFpbmluZ1VwZGF0ZUV2dE1zZycsIGhhbmRsZVVwZGF0ZVRpbWVSZW1haW5pbmcpO1xuUmVkaXNQdWJTdWIub24oJ0JyZWFrb3V0Um9vbUVuZGVkRXZ0TXNnJywgaGFuZGxlQnJlYWtvdXRDbG9zZWQpO1xuUmVkaXNQdWJTdWIub24oJ1VwZGF0ZUJyZWFrb3V0VXNlcnNFdnRNc2cnLCBqb2luZWRVc2Vyc0NoYW5nZWQpO1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgY3JlYXRlQnJlYWtvdXRSb29tIGZyb20gJy9pbXBvcnRzL2FwaS9icmVha291dHMvc2VydmVyL21ldGhvZHMvY3JlYXRlQnJlYWtvdXQnO1xuaW1wb3J0IHJlcXVlc3RKb2luVVJMIGZyb20gJy4vbWV0aG9kcy9yZXF1ZXN0Sm9pblVSTCc7XG5pbXBvcnQgZW5kQWxsQnJlYWtvdXRzIGZyb20gJy4vbWV0aG9kcy9lbmRBbGxCcmVha291dHMnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHJlcXVlc3RKb2luVVJMLFxuICBjcmVhdGVCcmVha291dFJvb20sXG4gIGVuZEFsbEJyZWFrb3V0cyxcbn0pO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgQnJlYWtvdXRzIGZyb20gJy9pbXBvcnRzL2FwaS9icmVha291dHMnO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmNvbnN0IFJPTEVfTU9ERVJBVE9SID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy51c2VyLnJvbGVfbW9kZXJhdG9yO1xuXG5mdW5jdGlvbiBicmVha291dHMocm9sZSkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBCcmVha291dHMgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gQnJlYWtvdXRzLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBjb25zdCBVc2VyID0gVXNlcnMuZmluZE9uZSh7IHVzZXJJZCwgbWVldGluZ0lkIH0sIHsgZmllbGRzOiB7IHJvbGU6IDEgfSB9KTtcbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIEJyZWFrb3V0cycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgaWYgKCEhVXNlciAmJiBVc2VyLnJvbGUgPT09IFJPTEVfTU9ERVJBVE9SKSB7XG4gICAgY29uc3QgcHJlc2VudGVyU2VsZWN0b3IgPSB7XG4gICAgICAkb3I6IFtcbiAgICAgICAgeyBwYXJlbnRNZWV0aW5nSWQ6IG1lZXRpbmdJZCB9LFxuICAgICAgICB7IGJyZWFrb3V0SWQ6IG1lZXRpbmdJZCB9LFxuICAgICAgXSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJyZWFrb3V0cy5maW5kKHByZXNlbnRlclNlbGVjdG9yKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgICRvcjogW1xuICAgICAge1xuICAgICAgICBwYXJlbnRNZWV0aW5nSWQ6IG1lZXRpbmdJZCxcbiAgICAgICAgZnJlZUpvaW46IHRydWUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXJlbnRNZWV0aW5nSWQ6IG1lZXRpbmdJZCxcbiAgICAgICAgJ3VzZXJzLnVzZXJJZCc6IHVzZXJJZCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJyZWFrb3V0SWQ6IG1lZXRpbmdJZCxcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcblxuICByZXR1cm4gQnJlYWtvdXRzLmZpbmQoc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRCcmVha291dHMgPSBicmVha291dHMuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kQnJlYWtvdXRzKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgnYnJlYWtvdXRzJywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgQnJlYWtvdXRzID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ2JyZWFrb3V0cycpO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIC8vIHR5cGVzIG9mIHF1ZXJpZXMgZm9yIHRoZSBicmVha291dHM6XG4gIC8vIDEuIGJyZWFrb3V0SWQgKCBoYW5kbGVKb2luVXJsLCByb29tU3RhcnRlZCwgY2xlYXJCcmVha291dHMgKVxuICAvLyAyLiBwYXJlbnRNZWV0aW5nSWQgKCB1cGRhdGVUaW1lUmVtYWluaW5nIClcblxuICBCcmVha291dHMuX2Vuc3VyZUluZGV4KHsgYnJlYWtvdXRJZDogMSB9KTtcbiAgQnJlYWtvdXRzLl9lbnN1cmVJbmRleCh7IHBhcmVudE1lZXRpbmdJZDogMSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJlYWtvdXRzO1xuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IGZldGNoUmVhZE9ubHlQYWRJZCBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvZmV0Y2hSZWFkT25seVBhZElkJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUGFkQ3JlYXRlKHsgYm9keSB9KSB7XG4gIGNvbnN0IHsgcGFkIH0gPSBib2R5O1xuICBjb25zdCB7IGlkIH0gPSBwYWQ7XG5cbiAgY2hlY2soaWQsIFN0cmluZyk7XG5cbiAgZmV0Y2hSZWFkT25seVBhZElkKGlkKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB7IGdldERhdGFGcm9tQ2hhbmdlc2V0IH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB1cGRhdGVQYWQgZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tb2RpZmllcnMvdXBkYXRlUGFkJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUGFkVXBkYXRlKHsgYm9keSB9KSB7XG4gIGNvbnN0IHsgcGFkLCByZXZzLCBjaGFuZ2VzZXQgfSA9IGJvZHk7XG4gIGNvbnN0IHsgaWQgfSA9IHBhZDtcblxuICBjaGVjayhpZCwgU3RyaW5nKTtcbiAgY2hlY2soY2hhbmdlc2V0LCBTdHJpbmcpO1xuICBjaGVjayhyZXZzLCBOdW1iZXIpO1xuXG4gIGNvbnN0IGRhdGEgPSBnZXREYXRhRnJvbUNoYW5nZXNldChjaGFuZ2VzZXQpO1xuXG4gIGlmIChkYXRhICE9PSAnJykge1xuICAgIHVwZGF0ZVBhZChpZCwgZGF0YSwgcmV2cyk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkQ2FwdGlvbnNQYWRzKG1lZXRpbmdJZCwgcGFkSWRzKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnQWRkQ2FwdGlvbnNQYWRzU3lzTXNnJztcblxuICB0cnkge1xuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhwYWRJZHMsIFtTdHJpbmddKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBwYWRJZHMsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsICdub2RlSlNhcHAnLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIGFkZENhcHRpb25zUGFkcyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBDYXB0aW9ucyBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFBhZChwYWRJZCwgcmVhZE9ubHlJZCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ0FkZFBhZFN5c01zZyc7XG5cbiAgdHJ5IHtcbiAgICBjaGVjayhwYWRJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZWFkT25seUlkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGFkID0gQ2FwdGlvbnMuZmluZE9uZSh7IHBhZElkIH0pO1xuXG4gICAgaWYgKCFwYWQpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgQ291bGQgbm90IGZpbmQgY2xvc2VkIGNhcHRpb25zIHBhZCAke3BhZElkfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgbWVldGluZ0lkIH0gPSBwYWQ7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgcGFkSWQsXG4gICAgICByZWFkT25seUlkLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCAnbm9kZUpTYXBwJywgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBhZGRQYWQgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQ2FwdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zJztcbmltcG9ydCB7IENBUFRJT05TX1RPS0VOIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGFwcGVuZFRleHRVUkwgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9ldGhlcnBhZCc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwZW5kVGV4dCh0ZXh0LCBsb2NhbGUpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh0ZXh0LCBTdHJpbmcpO1xuICAgIGNoZWNrKGxvY2FsZSwgU3RyaW5nKTtcblxuICAgIGNvbnN0IGNhcHRpb25zID0gQ2FwdGlvbnMuZmluZE9uZSh7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICBwYWRJZDogeyAkcmVnZXg6IGAke0NBUFRJT05TX1RPS0VOfSR7bG9jYWxlfSRgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIWNhcHRpb25zKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYENvdWxkIG5vdCBmaW5kIGNhcHRpb25zJyBwYWQgZm9yIG1lZXRpbmdJZD0ke21lZXRpbmdJZH0gbG9jYWxlPSR7bG9jYWxlfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcGFkSWQgfSA9IGNhcHRpb25zO1xuXG4gICAgYXhpb3Moe1xuICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgIHVybDogYXBwZW5kVGV4dFVSTChwYWRJZCwgdGV4dCksXG4gICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHJlc3BvbnNlO1xuICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIExvZ2dlci5lcnJvcihgQ291bGQgbm90IGFwcGVuZCBjYXB0aW9ucyBmb3IgcGFkSWQ9JHtwYWRJZH1gKTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IExvZ2dlci5lcnJvcihgQ291bGQgbm90IGFwcGVuZCBjYXB0aW9ucyBmb3IgcGFkSWQ9JHtwYWRJZH06ICR7ZXJyb3J9YCkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgYXBwZW5kVGV4dCAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHtcbiAgZ2VuZXJhdGVQYWRJZCxcbiAgaXNFbmFibGVkLFxuICBnZXRMb2NhbGVzVVJMLFxufSBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHsgd2l0aEluc3RhY2VJZCB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2V0aGVycGFkJztcbmltcG9ydCBhZGRDYXB0aW9uIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZENhcHRpb24nO1xuaW1wb3J0IGFkZENhcHRpb25zUGFkcyBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvYWRkQ2FwdGlvbnNQYWRzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNhcHRpb25zKG1lZXRpbmdJZCwgaW5zdGFuY2VJZCkge1xuICAvLyBBdm9pZCBjYXB0aW9ucyBjcmVhdGlvbiBpZiB0aGlzIGZlYXR1cmUgaXMgZGlzYWJsZWRcbiAgaWYgKCFpc0VuYWJsZWQoKSkge1xuICAgIExvZ2dlci53YXJuKCdDbG9zZWQgY2FwdGlvbnMgYXJlIGRpc2FibGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2soaW5zdGFuY2VJZCwgTnVtYmVyKTtcblxuICAgIGF4aW9zKHtcbiAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICB1cmw6IGdldExvY2FsZXNVUkwoKSxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVzcG9uc2U7XG4gICAgICBpZiAoc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgTG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgZ2V0IGxvY2FsZXMgaW5mbyBmb3IgJHttZWV0aW5nSWR9ICR7c3RhdHVzfWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwYWRJZHMgPSBbXTtcbiAgICAgIGNvbnN0IGxvY2FsZXMgPSByZXNwb25zZS5kYXRhO1xuICAgICAgbG9jYWxlcy5mb3JFYWNoKChsb2NhbGUpID0+IHtcbiAgICAgICAgY29uc3QgcGFkSWQgPSB3aXRoSW5zdGFjZUlkKGluc3RhbmNlSWQsIGdlbmVyYXRlUGFkSWQobWVldGluZ0lkLCBsb2NhbGUubG9jYWxlKSk7XG4gICAgICAgIGFkZENhcHRpb24obWVldGluZ0lkLCBwYWRJZCwgbG9jYWxlKTtcbiAgICAgICAgcGFkSWRzLnB1c2gocGFkSWQpO1xuICAgICAgfSk7XG4gICAgICBhZGRDYXB0aW9uc1BhZHMobWVldGluZ0lkLCBwYWRJZHMpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4gTG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgY3JlYXRlIGNhcHRpb25zIGZvciAke21lZXRpbmdJZH06ICR7ZXJyb3J9YCkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgY3JlYXRlQ2FwdGlvbnMgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgQ2FwdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5jb25zdCBnZXRJbmRleCA9IChkYXRhLCBsZW5ndGgpID0+IGxlbmd0aCAtIGRhdGEubGVuZ3RoO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZGl0Q2FwdGlvbnMocGFkSWQsIGRhdGEpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdFZGl0Q2FwdGlvbkhpc3RvcnlQdWJNc2cnO1xuXG4gIHRyeSB7XG4gICAgY2hlY2socGFkSWQsIFN0cmluZyk7XG4gICAgY2hlY2soZGF0YSwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBhZCA9IENhcHRpb25zLmZpbmRPbmUoeyBwYWRJZCB9KTtcblxuICAgIGlmICghcGFkKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVkaXRpbmcgY2FwdGlvbnMgaGlzdG9yeTogJHtwYWRJZH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICBvd25lcklkLFxuICAgICAgbG9jYWxlLFxuICAgICAgbGVuZ3RoLFxuICAgIH0gPSBwYWQ7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2sob3duZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhsb2NhbGUsIHsgbG9jYWxlOiBTdHJpbmcsIG5hbWU6IFN0cmluZyB9KTtcbiAgICBjaGVjayhsZW5ndGgsIE51bWJlcik7XG5cbiAgICBjb25zdCBpbmRleCA9IGdldEluZGV4KGRhdGEsIGxlbmd0aCk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgc3RhcnRJbmRleDogaW5kZXgsXG4gICAgICBsb2NhbGVDb2RlOiBsb2NhbGUubG9jYWxlLFxuICAgICAgbG9jYWxlOiBsb2NhbGUubmFtZSxcbiAgICAgIGVuZEluZGV4OiBpbmRleCxcbiAgICAgIHRleHQ6IGRhdGEsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIG93bmVySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgZWRpdENhcHRpb25zICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBnZXRSZWFkT25seUlkVVJMIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvZXRoZXJwYWQnO1xuaW1wb3J0IHsgZ2V0RGF0YUZyb21SZXNwb25zZSB9IGZyb20gJy9pbXBvcnRzL2FwaS9ub3RlL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB1cGRhdGVSZWFkT25seVBhZElkIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbW9kaWZpZXJzL3VwZGF0ZVJlYWRPbmx5UGFkSWQnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmV0Y2hSZWFkT25seVBhZElkKHBhZElkKSB7XG4gIHRyeSB7XG4gICAgY2hlY2socGFkSWQsIFN0cmluZyk7XG5cbiAgICBheGlvcyh7XG4gICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgdXJsOiBnZXRSZWFkT25seUlkVVJMKHBhZElkKSxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVzcG9uc2U7XG4gICAgICBpZiAoc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgTG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgZ2V0IGNsb3NlZCBjYXB0aW9ucyByZWFkT25seUlEIGZvciAke3BhZElkfSAke3N0YXR1c31gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVhZE9ubHlQYWRJZCA9IGdldERhdGFGcm9tUmVzcG9uc2UocmVzcG9uc2UuZGF0YSwgJ3JlYWRPbmx5SUQnKTtcbiAgICAgIGlmIChyZWFkT25seVBhZElkKSB7XG4gICAgICAgIHVwZGF0ZVJlYWRPbmx5UGFkSWQocGFkSWQsIHJlYWRPbmx5UGFkSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgZ2V0IHBhZCByZWFkT25seUlEIGZvciAke3BhZElkfWApO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKChlcnJvcikgPT4gTG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgZ2V0IHBhZCByZWFkT25seUlEIGZvciAke3BhZElkfTogJHtlcnJvcn1gKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBmZXRjaFJlYWRPbmx5UGFkSWQgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBDYXB0aW9ucyBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMnO1xuaW1wb3J0IHVwZGF0ZU93bmVySWQgZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tb2RpZmllcnMvdXBkYXRlT3duZXJJZCc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IENBUFRJT05TX1RPS0VOIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFrZU93bmVyc2hpcChsb2NhbGUpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobG9jYWxlLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGFkID0gQ2FwdGlvbnMuZmluZE9uZSh7IG1lZXRpbmdJZCwgcGFkSWQ6IHsgJHJlZ2V4OiBgJHtDQVBUSU9OU19UT0tFTn0ke2xvY2FsZX0kYCB9IH0pO1xuXG4gICAgaWYgKHBhZCkge1xuICAgICAgdXBkYXRlT3duZXJJZChtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGFkLnBhZElkKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB0YWtlT3duZXJzaGlwICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IENhcHRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlT3duZXIobWVldGluZ0lkLCB1c2VySWQsIHBhZElkKSB7IC8vIFRPRE9cbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdVcGRhdGVDYXB0aW9uT3duZXJQdWJNc2cnO1xuXG4gIHRyeSB7XG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhwYWRJZCwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBhZCA9IENhcHRpb25zLmZpbmRPbmUoeyBtZWV0aW5nSWQsIHBhZElkIH0pO1xuXG4gICAgaWYgKCFwYWQpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRWRpdGluZyBjYXB0aW9ucyBvd25lcjogJHtwYWRJZH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IGxvY2FsZSB9ID0gcGFkO1xuXG4gICAgY2hlY2sobG9jYWxlLCB7IGxvY2FsZTogU3RyaW5nLCBuYW1lOiBTdHJpbmcgfSk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgb3duZXJJZDogdXNlcklkLFxuICAgICAgbG9jYWxlOiBsb2NhbGUubmFtZSxcbiAgICAgIGxvY2FsZUNvZGU6IGxvY2FsZS5sb2NhbGUsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB1cGRhdGVPd25lciAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IENhcHRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZENhcHRpb24obWVldGluZ0lkLCBwYWRJZCwgbG9jYWxlKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socGFkSWQsIFN0cmluZyk7XG4gIGNoZWNrKGxvY2FsZSwge1xuICAgIGxvY2FsZTogU3RyaW5nLFxuICAgIG5hbWU6IFN0cmluZyxcbiAgfSk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHBhZElkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICBwYWRJZCxcbiAgICBsb2NhbGUsXG4gICAgb3duZXJJZDogJycsXG4gICAgcmVhZE9ubHlQYWRJZDogJycsXG4gICAgZGF0YTogJycsXG4gICAgcmV2czogMCxcbiAgICBsZW5ndGg6IDAsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGluc2VydGVkSWQsIG51bWJlckFmZmVjdGVkIH0gPSBDYXB0aW9ucy51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChpbnNlcnRlZElkKSB7XG4gICAgICBMb2dnZXIudmVyYm9zZSgnQ2FwdGlvbnM6IGFkZGVkIGxvY2FsZScsIHsgbG9jYWxlOiBsb2NhbGUubG9jYWxlLCBtZWV0aW5nSWQgfSk7XG4gICAgfSBlbHNlIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLnZlcmJvc2UoJ0NhcHRpb25zOiB1cHNlcnRlZCBsb2NhbGUnLCB7IGxvY2FsZTogbG9jYWxlLmxvY2FsZSwgbWVldGluZ0lkIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBZGRpbmcgY2FwdGlvbiB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IENhcHRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyQ2FwdGlvbnMobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBDYXB0aW9ucy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBDYXB0aW9ucyAoJHttZWV0aW5nSWR9KWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhcmluZyBjYXB0aW9ucyAoJHttZWV0aW5nSWR9KS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IENhcHRpb25zLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBDYXB0aW9ucyAoYWxsKScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhcmluZyBjYXB0aW9ucyAoYWxsKS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgQ2FwdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB1cGRhdGVPd25lciBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvdXBkYXRlT3duZXInO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVPd25lcklkKG1lZXRpbmdJZCwgdXNlcklkLCBwYWRJZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2socGFkSWQsIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHBhZElkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIG93bmVySWQ6IHVzZXJJZCxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBDYXB0aW9ucy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyLCB7IG11bHRpOiB0cnVlIH0pO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICB1cGRhdGVPd25lcihtZWV0aW5nSWQsIHVzZXJJZCwgcGFkSWQpO1xuICAgICAgTG9nZ2VyLnZlcmJvc2UoJ0NhcHRpb25zOiB1cGRhdGVkIGNhcHRpb24nLCB7IHBhZElkLCBvd25lcklkOiB1c2VySWQgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoJ0NhcHRpb25zOiBlcnJvciB3aGlsZSB1cGRhdGluZyBwYWQnLCB7IGVyciB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IENhcHRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgZWRpdENhcHRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbWV0aG9kcy9lZGl0Q2FwdGlvbnMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVQYWQocGFkSWQsIGRhdGEsIHJldnMpIHtcbiAgY2hlY2socGFkSWQsIFN0cmluZyk7XG4gIGNoZWNrKGRhdGEsIFN0cmluZyk7XG4gIGNoZWNrKHJldnMsIE51bWJlcik7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgcGFkSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgZGF0YSxcbiAgICAgIHJldnMsXG4gICAgfSxcbiAgICAkaW5jOiB7XG4gICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IENhcHRpb25zLnVwZGF0ZShzZWxlY3RvciwgbW9kaWZpZXIsIHsgbXVsdGk6IHRydWUgfSk7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIGVkaXRDYXB0aW9ucyhwYWRJZCwgZGF0YSwgcmV2cyk7XG4gICAgICBMb2dnZXIudmVyYm9zZSgnQ2FwdGlvbnM6IHVwZGF0ZWQgcGFkJywgeyBwYWRJZCwgcmV2cyB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgVXBkYXRpbmcgY2FwdGlvbnMgcGFkOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IENhcHRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgYWRkUGFkIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucy9zZXJ2ZXIvbWV0aG9kcy9hZGRQYWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVSZWFkT25seVBhZElkKHBhZElkLCByZWFkT25seVBhZElkKSB7XG4gIGNoZWNrKHBhZElkLCBTdHJpbmcpO1xuICBjaGVjayhyZWFkT25seVBhZElkLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIHBhZElkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIHJlYWRPbmx5UGFkSWQsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gQ2FwdGlvbnMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllciwgeyBtdWx0aTogdHJ1ZSB9KTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgYWRkUGFkKHBhZElkLCByZWFkT25seVBhZElkKTtcbiAgICAgIExvZ2dlci52ZXJib3NlKCdDYXB0aW9uczogYWRkZWQgcmVhZE9ubHlQYWRJZCcsIHsgcGFkSWQsIHJlYWRPbmx5UGFkSWQgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoJ0NhcHRpb25zOiBlcnJvciB3aGVuIGFkZGluZyByZWFkT25seVBhZElkJywgeyBlcnIgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBwcm9jZXNzRm9yQ2FwdGlvbnNQYWRPbmx5IH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBoYW5kbGVQYWRDcmVhdGUgZnJvbSAnLi9oYW5kbGVycy9wYWRDcmVhdGUnO1xuaW1wb3J0IGhhbmRsZVBhZFVwZGF0ZSBmcm9tICcuL2hhbmRsZXJzL3BhZFVwZGF0ZSc7XG5cblJlZGlzUHViU3ViLm9uKCdQYWRDcmVhdGVTeXNNc2cnLCBwcm9jZXNzRm9yQ2FwdGlvbnNQYWRPbmx5KGhhbmRsZVBhZENyZWF0ZSkpO1xuUmVkaXNQdWJTdWIub24oJ1BhZFVwZGF0ZVN5c01zZycsIHByb2Nlc3NGb3JDYXB0aW9uc1BhZE9ubHkoaGFuZGxlUGFkVXBkYXRlKSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGhhc2hTSEExIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvZXRoZXJwYWQnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5jb25zdCBFVEhFUlBBRCA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLmV0aGVycGFkO1xuY29uc3QgQ0FQVElPTlNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5jYXB0aW9ucztcbmNvbnN0IEJBU0VOQU1FID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5hcHAuYmFzZW5hbWU7XG5jb25zdCBBUFAgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5hcHA7XG5jb25zdCBJTlNUQU5DRV9JRCA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMuYXBwLmluc3RhbmNlSWQ7XG5jb25zdCBMT0NBTEVTX1VSTCA9IGBodHRwOi8vJHtBUFAuaG9zdH06JHtwcm9jZXNzLmVudi5QT1JUfSR7QkFTRU5BTUV9JHtJTlNUQU5DRV9JRH0ke0FQUC5sb2NhbGVzVXJsfWA7XG5jb25zdCBDQVBUSU9OU19UT0tFTiA9ICdfY2NfJztcbmNvbnN0IFRPS0VOID0gJyQnO1xuXG4vLyBDYXB0aW9ucyBwYWRJZCBzaG91bGQgbG9vayBsaWtlOiB7cHJlZml4fV9jY197bG9jYWxlfVxuY29uc3QgZ2VuZXJhdGVQYWRJZCA9IChtZWV0aW5nSWQsIGxvY2FsZSkgPT4gYCR7aGFzaFNIQTEobWVldGluZ0lkICsgbG9jYWxlICsgRVRIRVJQQUQuYXBpa2V5KX0ke0NBUFRJT05TX1RPS0VOfSR7bG9jYWxlfWA7XG5cbmNvbnN0IGlzQ2FwdGlvbnNQYWQgPSAocGFkSWQpID0+IHtcbiAgY29uc3Qgc3BsaXRQYWRJZCA9IHBhZElkLnNwbGl0KENBUFRJT05TX1RPS0VOKTtcbiAgcmV0dXJuIHNwbGl0UGFkSWQubGVuZ3RoID09PSAyO1xufTtcblxuY29uc3QgZ2V0RGF0YUZyb21DaGFuZ2VzZXQgPSAoY2hhbmdlc2V0KSA9PiB7XG4gIGNvbnN0IHNwbGl0Q2hhbmdlc2V0ID0gY2hhbmdlc2V0LnNwbGl0KFRPS0VOKTtcbiAgaWYgKHNwbGl0Q2hhbmdlc2V0Lmxlbmd0aCA+IDEpIHtcbiAgICBzcGxpdENoYW5nZXNldC5zaGlmdCgpO1xuICAgIHJldHVybiBzcGxpdENoYW5nZXNldC5qb2luKFRPS0VOKTtcbiAgfVxuICByZXR1cm4gJyc7XG59O1xuXG5jb25zdCBpc0VuYWJsZWQgPSAoKSA9PiBDQVBUSU9OU19DT05GSUcuZW5hYmxlZDtcblxuY29uc3QgZ2V0TG9jYWxlc1VSTCA9ICgpID0+IExPQ0FMRVNfVVJMO1xuXG5jb25zdCBwcm9jZXNzRm9yQ2FwdGlvbnNQYWRPbmx5ID0gZm4gPT4gKG1lc3NhZ2UsIC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgeyBib2R5IH0gPSBtZXNzYWdlO1xuICBjb25zdCB7IHBhZCB9ID0gYm9keTtcbiAgY29uc3QgeyBpZCB9ID0gcGFkO1xuXG4gIGNoZWNrKGlkLCBTdHJpbmcpO1xuXG4gIGlmIChpc0NhcHRpb25zUGFkKGlkKSkgcmV0dXJuIGZuKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICByZXR1cm4gKCkgPT4geyB9O1xufTtcblxuZXhwb3J0IHtcbiAgQ0FQVElPTlNfVE9LRU4sXG4gIGdlbmVyYXRlUGFkSWQsXG4gIHByb2Nlc3NGb3JDYXB0aW9uc1BhZE9ubHksXG4gIGlzRW5hYmxlZCxcbiAgZ2V0TG9jYWxlc1VSTCxcbiAgZ2V0RGF0YUZyb21DaGFuZ2VzZXQsXG59O1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgdGFrZU93bmVyc2hpcCBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvdGFrZU93bmVyc2hpcCc7XG5pbXBvcnQgYXBwZW5kVGV4dCBmcm9tICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyL21ldGhvZHMvYXBwZW5kVGV4dCc7XG5cbk1ldGVvci5tZXRob2RzKHtcbiAgdGFrZU93bmVyc2hpcCxcbiAgYXBwZW5kVGV4dCxcbn0pO1xuIiwiaW1wb3J0IENhcHRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9jYXB0aW9ucyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uLCB7IFZhbGlkYXRpb25TdGF0ZXMgfSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcblxuZnVuY3Rpb24gY2FwdGlvbnMoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIENhcHRpb25zIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIENhcHRpb25zLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgQ2FwdGlvbnMnLCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVkQnk6IHVzZXJJZCB9KTtcblxuICByZXR1cm4gQ2FwdGlvbnMuZmluZCh7IG1lZXRpbmdJZCB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kQ2FwdGlvbnMgPSBjYXB0aW9ucy5iaW5kKHRoaXMpO1xuICByZXR1cm4gYm91bmRDYXB0aW9ucyguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ2NhcHRpb25zJywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgQ2FwdGlvbnMgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbignY2FwdGlvbnMnKTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBDYXB0aW9ucy5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEsIHBhZElkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDYXB0aW9ucztcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB1cGRhdGVDb25uZWN0aW9uU3RhdHVzIGZyb20gJy9pbXBvcnRzL2FwaS9jb25uZWN0aW9uLXN0YXR1cy9zZXJ2ZXIvbW9kaWZpZXJzL3VwZGF0ZUNvbm5lY3Rpb25TdGF0dXMnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5cbmNvbnN0IFNUQVRTID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5zdGF0cztcblxuY29uc3QgbG9nQ29ubmVjdGlvblN0YXR1cyA9IChtZWV0aW5nSWQsIHVzZXJJZCwgc3RhdHVzLCB0eXBlLCB2YWx1ZSkgPT4ge1xuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgICBMb2dnZXIuaW5mbyhgQ29ubmVjdGlvbiBzdGF0dXMgdXBkYXRlZDogbWVldGluZ0lkPSR7bWVldGluZ0lkfSB1c2VySWQ9JHt1c2VySWR9IHN0YXR1cz0ke3N0YXR1c30gdHlwZT0ke3R5cGV9YCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgIC8vIFNraXBcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Rhbmdlcic6XG4gICAgY2FzZSAnY3JpdGljYWwnOlxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2F1ZGlvJzoge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGppdHRlcixcbiAgICAgICAgICAgIGxvc3MsXG4gICAgICAgICAgfSA9IHZhbHVlO1xuICAgICAgICAgIExvZ2dlci5pbmZvKGBDb25uZWN0aW9uIHN0YXR1cyB1cGRhdGVkOiBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9IHVzZXJJZD0ke3VzZXJJZH0gc3RhdHVzPSR7c3RhdHVzfSB0eXBlPSR7dHlwZX0gaml0dGVyPSR7aml0dGVyfSBsb3NzPSR7bG9zc31gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdzb2NrZXQnOiB7XG4gICAgICAgICAgY29uc3QgeyBydHQgfSA9IHZhbHVlO1xuICAgICAgICAgIExvZ2dlci5pbmZvKGBDb25uZWN0aW9uIHN0YXR1cyB1cGRhdGVkOiBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9IHVzZXJJZD0ke3VzZXJJZH0gc3RhdHVzPSR7c3RhdHVzfSB0eXBlPSR7dHlwZX0gcnR0PSR7cnR0fWApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDb25uZWN0aW9uU3RhdHVzKHN0YXR1cywgdHlwZSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjaGVjayhzdGF0dXMsIFN0cmluZyk7XG4gICAgY2hlY2sodHlwZSwgU3RyaW5nKTtcbiAgICBjaGVjayh2YWx1ZSwgT2JqZWN0KTtcblxuICAgIGlmICghdGhpcy51c2VySWQpIHJldHVybjtcblxuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgaWYgKFNUQVRTLmxvZykgbG9nQ29ubmVjdGlvblN0YXR1cyhtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgc3RhdHVzLCB0eXBlLCB2YWx1ZSk7XG5cbiAgICAvLyBBdm9pZCBzdG9yaW5nIHJlY292ZXJpZXNcbiAgICBpZiAoc3RhdHVzICE9PSAnbm9ybWFsJykge1xuICAgICAgdXBkYXRlQ29ubmVjdGlvblN0YXR1cyhtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgc3RhdHVzKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBhZGRDb25uZWN0aW9uU3RhdHVzICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCIvLyBSb3VuZC10cmlwIHRpbWUgaGVscGVyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2b2lkQ29ubmVjdGlvbigpIHtcbiAgcmV0dXJuIDA7XG59XG4iLCJpbXBvcnQgQ29ubmVjdGlvblN0YXR1cyBmcm9tICcvaW1wb3J0cy9hcGkvY29ubmVjdGlvbi1zdGF0dXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhckNvbm5lY3Rpb25TdGF0dXMobWVldGluZ0lkKSB7XG4gIGNvbnN0IHNlbGVjdG9yID0ge307XG5cbiAgaWYgKG1lZXRpbmdJZCkge1xuICAgIHNlbGVjdG9yLm1lZXRpbmdJZCA9IG1lZXRpbmdJZDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBDb25uZWN0aW9uU3RhdHVzLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIGlmIChtZWV0aW5nSWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYFJlbW92ZWQgQ29ubmVjdGlvblN0YXR1cyAoJHttZWV0aW5nSWR9KWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oJ1JlbW92ZWQgQ29ubmVjdGlvblN0YXR1cyAoYWxsKScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBMb2dnZXIud2FybignUmVtb3ZpbmcgQ29ubmVjdGlvblN0YXR1cyBub25hZmZlY3RlZCcpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBSZW1vdmluZyBDb25uZWN0aW9uU3RhdHVzOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IENvbm5lY3Rpb25TdGF0dXMgZnJvbSAnL2ltcG9ydHMvYXBpL2Nvbm5lY3Rpb24tc3RhdHVzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQ29ubmVjdGlvblN0YXR1cyhtZWV0aW5nSWQsIHVzZXJJZCwgbGV2ZWwpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG5cbiAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHVzZXJJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICAgIGxldmVsLFxuICAgIHRpbWVzdGFtcCxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbnVtYmVyQWZmZWN0ZWQgfSA9IENvbm5lY3Rpb25TdGF0dXMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci52ZXJib3NlKGBVcGRhdGVkIGNvbm5lY3Rpb24gc3RhdHVzIG1lZXRpbmdJZD0ke21lZXRpbmdJZH0gdXNlcklkPSR7dXNlcklkfSBsZXZlbD0ke2xldmVsfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBVcGRhdGluZyBjb25uZWN0aW9uIHN0YXR1cyBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9IHVzZXJJZD0ke3VzZXJJZH06ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgJy4vbWV0aG9kcyc7XG5pbXBvcnQgJy4vcHVibGlzaGVycyc7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBhZGRDb25uZWN0aW9uU3RhdHVzIGZyb20gJy4vbWV0aG9kcy9hZGRDb25uZWN0aW9uU3RhdHVzJztcbmltcG9ydCB2b2lkQ29ubmVjdGlvbiBmcm9tICcuL21ldGhvZHMvdm9pZENvbm5lY3Rpb24nO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIGFkZENvbm5lY3Rpb25TdGF0dXMsXG4gIHZvaWRDb25uZWN0aW9uLFxufSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBDb25uZWN0aW9uU3RhdHVzIGZyb20gJy9pbXBvcnRzL2FwaS9jb25uZWN0aW9uLXN0YXR1cyc7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmZ1bmN0aW9uIGNvbm5lY3Rpb25TdGF0dXMoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIENvbm5lY3Rpb25TdGF0dXMgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gQ29ubmVjdGlvblN0YXR1cy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcblxuICBMb2dnZXIuaW5mbyhgUHVibGlzaGluZyBjb25uZWN0aW9uIHN0YXR1cyBmb3IgJHttZWV0aW5nSWR9ICR7dXNlcklkfWApO1xuXG4gIHJldHVybiBDb25uZWN0aW9uU3RhdHVzLmZpbmQoeyBtZWV0aW5nSWQgfSk7XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2goLi4uYXJncykge1xuICBjb25zdCBib3VuZE5vdGUgPSBjb25uZWN0aW9uU3RhdHVzLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZE5vdGUoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCdjb25uZWN0aW9uLXN0YXR1cycsIHB1Ymxpc2gpO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5cbmNvbnN0IENvbm5lY3Rpb25TdGF0dXMgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbignY29ubmVjdGlvbi1zdGF0dXMnKTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBDb25uZWN0aW9uU3RhdHVzLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSwgdXNlcklkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0aW9uU3RhdHVzO1xuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IEN1cnNvclN0cmVhbWVyIGZyb20gJy9pbXBvcnRzL2FwaS9jdXJzb3Ivc2VydmVyL3N0cmVhbWVyJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IENVUlNPUl9QUk9DQ0VTU19JTlRFUlZBTCA9IDMwO1xuXG5jb25zdCBjdXJzb3JRdWV1ZSA9IHt9O1xuXG5jb25zdCBwcm9jY2VzcyA9IF8udGhyb3R0bGUoKCkgPT4ge1xuICB0cnkge1xuICAgIE9iamVjdC5rZXlzKGN1cnNvclF1ZXVlKS5mb3JFYWNoKChtZWV0aW5nSWQpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGN1cnNvcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgdXNlcklkIGluIGN1cnNvclF1ZXVlW21lZXRpbmdJZF0pe1xuICAgICAgICAgIGN1cnNvclF1ZXVlW21lZXRpbmdJZF1bdXNlcklkXS51c2VySWQgPSB1c2VySWQ7XG4gICAgICAgICAgY3Vyc29ycy5wdXNoKGN1cnNvclF1ZXVlW21lZXRpbmdJZF1bdXNlcklkXSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGN1cnNvclF1ZXVlW21lZXRpbmdJZF07XG4gICAgICAgIEN1cnNvclN0cmVhbWVyKG1lZXRpbmdJZCkuZW1pdCgnbWVzc2FnZScsIHsgbWVldGluZ0lkLCBjdXJzb3JzIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciB3aGlsZSB0cnlpbmcgdG8gc2VuZCBjdXJzb3Igc3RyZWFtZXIgZGF0YSBmb3IgbWVldGluZyAke21lZXRpbmdJZH0uICR7ZXJyb3J9YCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFcnJvciB3aGlsZSBwcm9jZXNzaW5nIGN1cnNvciBxdWV1ZS4gJHtlcnJvcn1gKTtcbiAgfVxufSwgQ1VSU09SX1BST0NDRVNTX0lOVEVSVkFMKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlQ3Vyc29yVXBkYXRlKHsgaGVhZGVyLCBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHVzZXJJZCB9ID0gaGVhZGVyO1xuICBjaGVjayhib2R5LCBPYmplY3QpO1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuXG4gIGlmICghY3Vyc29yUXVldWVbbWVldGluZ0lkXSkge1xuICAgIGN1cnNvclF1ZXVlW21lZXRpbmdJZF0gPSB7fTtcbiAgfVxuXG4gIC8vIG92ZXJ3cml0ZSBzaW5jZSB3ZSBkb250IGNhcmUgYWJvdXQgdGhlIG90aGVyIHBvc2l0aW9uc1xuICBjdXJzb3JRdWV1ZVttZWV0aW5nSWRdW3VzZXJJZF0gPSBib2R5O1xuXG4gIHByb2NjZXNzKCk7XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHB1Ymxpc2hDdXJzb3JVcGRhdGUobWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdTZW5kQ3Vyc29yUG9zaXRpb25QdWJNc2cnO1xuXG4gIHJldHVybiBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVDdXJzb3JVcGRhdGUgZnJvbSAnLi9oYW5kbGVycy9jdXJzb3JVcGRhdGUnO1xuXG5SZWRpc1B1YlN1Yi5vbignU2VuZEN1cnNvclBvc2l0aW9uRXZ0TXNnJywgaGFuZGxlQ3Vyc29yVXBkYXRlKTtcbiIsImltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHB1Ymxpc2hDdXJzb3JVcGRhdGUgZnJvbSAnLi9tZXRob2RzL3B1Ymxpc2hDdXJzb3JVcGRhdGUnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHB1Ymxpc2hDdXJzb3JVcGRhdGUsXG59KTtcbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHB1Ymxpc2hDdXJzb3JVcGRhdGUgZnJvbSAnLi9tZXRob2RzL3B1Ymxpc2hDdXJzb3JVcGRhdGUnO1xuXG5jb25zdCB7IHN0cmVhbWVyTG9nIH0gPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5zZXJ2ZXJMb2c7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDdXJzb3JTdHJlYW1lcihtZWV0aW5nSWQpIHtcbiAgTG9nZ2VyLmluZm8oYFJlbW92aW5nIEN1cnNvciBzdHJlYW1lciBvYmplY3QgZm9yIG1lZXRpbmcgJHttZWV0aW5nSWR9YCk7XG4gIGRlbGV0ZSBNZXRlb3IuU3RyZWFtZXJDZW50cmFsLmluc3RhbmNlc1tgY3Vyc29yLSR7bWVldGluZ0lkfWBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ3Vyc29yU3RyZWFtZXIobWVldGluZ0lkKSB7XG4gIGNvbnN0IHN0cmVhbWVyID0gbmV3IE1ldGVvci5TdHJlYW1lcihgY3Vyc29yLSR7bWVldGluZ0lkfWAsIHsgcmV0cmFuc21pdDogZmFsc2UgfSk7XG4gIGlmIChzdHJlYW1lckxvZykge1xuICAgIExvZ2dlci5kZWJ1ZygnQ3Vyc29yIHN0cmVhbWVyIGNyZWF0ZWQnLCB7IG1lZXRpbmdJZCB9KTtcbiAgfVxuXG4gIHN0cmVhbWVyLmFsbG93UmVhZChmdW5jdGlvbiBhbGxvd1JlYWQoKSB7XG4gICAgaWYgKHN0cmVhbWVyTG9nKSB7XG4gICAgICBMb2dnZXIuZGVidWcoJ0N1cnNvciBzdHJlYW1lciBjYWxsZWQgYWxsb3dSZWFkJywgeyB1c2VySWQ6IHRoaXMudXNlcklkLCBtZWV0aW5nSWQgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVzZXJJZCAmJiB0aGlzLnVzZXJJZC5pbmNsdWRlcyhtZWV0aW5nSWQpO1xuICB9KTtcblxuICBzdHJlYW1lci5hbGxvd1dyaXRlKGZ1bmN0aW9uIGFsbG93V3JpdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcklkICYmIHRoaXMudXNlcklkLmluY2x1ZGVzKG1lZXRpbmdJZCk7XG4gIH0pO1xuXG4gIHN0cmVhbWVyLm9uKCdwdWJsaXNoJywgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICBjb25zdCB7IHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcbiAgICBwdWJsaXNoQ3Vyc29yVXBkYXRlKG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBtZXNzYWdlKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldChtZWV0aW5nSWQpIHtcbiAgcmV0dXJuIE1ldGVvci5TdHJlYW1lckNlbnRyYWwuaW5zdGFuY2VzW2BjdXJzb3ItJHttZWV0aW5nSWR9YF07XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVTdGFydEV4dGVybmFsVmlkZW8oeyBoZWFkZXIsIGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgdXNlcklkIH0gPSBoZWFkZXI7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuXG4gIGNvbnN0IGV4dGVybmFsVmlkZW9VcmwgPSBib2R5LmV4dGVybmFsVmlkZW9Vcmw7XG4gIGNvbnN0IHVzZXIgPSBVc2Vycy5maW5kT25lKHsgbWVldGluZ0lkOiBtZWV0aW5nSWQsIHVzZXJJZDogdXNlcklkIH0pXG5cbiAgaWYgKHVzZXIgJiYgdXNlci5wcmVzZW50ZXIpIHtcbiAgICB0cnkge1xuICAgICAgTWVldGluZ3MudXBkYXRlKHsgbWVldGluZ0lkIH0sIHsgJHNldDogeyBleHRlcm5hbFZpZGVvVXJsIH0gfSk7XG4gICAgICBMb2dnZXIuaW5mbyhgVXNlciBpZD0ke3VzZXJJZH0gc2hhcmluZyBhbiBleHRlcm5hbCB2aWRlbzogJHtleHRlcm5hbFZpZGVvVXJsfSBmb3IgbWVldGluZyAke21lZXRpbmdJZH1gKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gc2V0dGluZyBzaGFyZWQgZXh0ZXJuYWwgdmlkZW8gc3RhcnQgaW4gTWVldGluZ3MgY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlU3RvcEV4dGVybmFsVmlkZW8oeyBoZWFkZXIsIGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgdXNlcklkIH0gPSBoZWFkZXI7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuXG4gIHRyeSB7XG4gICAgTG9nZ2VyLmluZm8oYEV4dGVybmFsIHZpZGVvIHN0b3Agc2hhcmluZyB3YXMgaW5pdGlhdGVkIGJ5Olske3VzZXJJZH1dIGZvciBtZWV0aW5nICR7bWVldGluZ0lkfWApO1xuICAgIE1lZXRpbmdzLnVwZGF0ZSh7IG1lZXRpbmdJZCB9LCB7ICRzZXQ6IHsgZXh0ZXJuYWxWaWRlb1VybDogbnVsbCB9IH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIHNldHRpbmcgc2hhcmVkIGV4dGVybmFsIHZpZGVvIHN0b3AgaW4gTWVldGluZ3MgY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgRXh0ZXJuYWxWaWRlb1N0cmVhbWVyIGZyb20gJy9pbXBvcnRzL2FwaS9leHRlcm5hbC12aWRlb3Mvc2VydmVyL3N0cmVhbWVyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlVXBkYXRlRXh0ZXJuYWxWaWRlbyh7IGhlYWRlciwgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3QgeyB1c2VySWQgfSA9IGhlYWRlcjtcbiAgY2hlY2soYm9keSwgT2JqZWN0KTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG5cbiAgY29uc3QgdXNlciA9IFVzZXJzLmZpbmRPbmUoeyBtZWV0aW5nSWQ6IG1lZXRpbmdJZCwgdXNlcklkOiB1c2VySWQgfSlcblxuICBpZiAodXNlciAmJiB1c2VyLnByZXNlbnRlcikge1xuICAgIHRyeSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBkYXRlRXh0ZXJuYWxWaWRlb0V2dE1zZyByZWNlaXZlZCBmb3IgdXNlciAke3VzZXJJZH0gYW5kIG1lZXRpbmcgJHttZWV0aW5nSWR9IGV2ZW50OiR7Ym9keS5zdGF0dXN9YCk7XG4gICAgICBFeHRlcm5hbFZpZGVvU3RyZWFtZXIobWVldGluZ0lkKS5lbWl0KGJvZHkuc3RhdHVzLCB7IC4uLmJvZHksIG1lZXRpbmdJZDogbWVldGluZ0lkLCB1c2VySWQ6IHVzZXJJZCB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gc2V0dGluZyBzaGFyZWQgZXh0ZXJuYWwgdmlkZW8gdXBkYXRlIGluIE1lZXRpbmdzIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICAgIH1cblxuICB9XG5cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbWl0RXh0ZXJuYWxWaWRlb0V2ZW50KG9wdGlvbnMpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdVcGRhdGVFeHRlcm5hbFZpZGVvUHViTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgeyBzdGF0dXMsIHBsYXllclN0YXR1cyB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IHVzZXIgPSBVc2Vycy5maW5kT25lKHsgbWVldGluZ0lkLCB1c2VySWQ6IHJlcXVlc3RlclVzZXJJZCB9KTtcblxuICAgIGlmICh1c2VyICYmIHVzZXIucHJlc2VudGVyKSB7XG4gICAgICBjaGVjayhzdGF0dXMsIFN0cmluZyk7XG4gICAgICBjaGVjayhwbGF5ZXJTdGF0dXMsIHtcbiAgICAgICAgcmF0ZTogTWF0Y2guTWF5YmUoTnVtYmVyKSxcbiAgICAgICAgdGltZTogTWF0Y2guTWF5YmUoTnVtYmVyKSxcbiAgICAgICAgc3RhdGU6IE1hdGNoLk1heWJlKEJvb2xlYW4pLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJhdGUgPSBwbGF5ZXJTdGF0dXMucmF0ZSB8fCAwO1xuICAgICAgY29uc3QgdGltZSA9IHBsYXllclN0YXR1cy50aW1lIHx8IDA7XG4gICAgICBjb25zdCBzdGF0ZSA9IHBsYXllclN0YXR1cy5zdGF0ZSB8fCAwO1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgc3RhdHVzLCByYXRlLCB0aW1lLCBzdGF0ZSxcbiAgICAgIH07XG5cbiAgICAgIExvZ2dlci5kZWJ1ZyhgVXNlciBpZD0ke3JlcXVlc3RlclVzZXJJZH0gc2VuZGluZyAke0VWRU5UX05BTUV9IGV2ZW50OiR7c3RhdGV9IGZvciBtZWV0aW5nICR7bWVldGluZ0lkfWApO1xuICAgICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBlbWl0RXh0ZXJuYWxWaWRlb0V2ZW50ICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0V4dGVybmFsVmlkZW8ob3B0aW9ucykge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1N0YXJ0RXh0ZXJuYWxWaWRlb1B1Yk1zZyc7XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZDogdXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuICBjb25zdCB7IGV4dGVybmFsVmlkZW9VcmwgfSA9IG9wdGlvbnM7XG5cbiAgdHJ5IHtcbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGV4dGVybmFsVmlkZW9VcmwsIFN0cmluZyk7XG5cbiAgICBjb25zdCB1c2VyID0gVXNlcnMuZmluZE9uZSh7IG1lZXRpbmdJZCwgdXNlcklkIH0sIHsgcHJlc2VudGVyOiAxIH0pO1xuXG4gICAgaWYgKHVzZXIgJiYgdXNlci5wcmVzZW50ZXIpIHtcbiAgICAgIGNoZWNrKGV4dGVybmFsVmlkZW9VcmwsIFN0cmluZyk7XG4gICAgICBjb25zdCBwYXlsb2FkID0geyBleHRlcm5hbFZpZGVvVXJsIH07XG4gICAgICBMb2dnZXIuZGVidWcoYFVzZXIgaWQ9JHt1c2VySWR9IHNlbmRpbmcgJHtFVkVOVF9OQU1FfSB1cmw6JHtleHRlcm5hbFZpZGVvVXJsfSBmb3IgbWVldGluZyAke21lZXRpbmdJZH1gKTtcbiAgICAgIHJldHVybiBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCB1c2VySWQsIHBheWxvYWQpO1xuICAgIH1cbiAgICBMb2dnZXIuZXJyb3IoYE9ubHkgcHJlc2VudGVycyBhcmUgYWxsb3dlZCB0byBzdGFydCBleHRlcm5hbCB2aWRlbyBmb3IgYSBtZWV0aW5nLiBtZWV0aW5nPSR7bWVldGluZ0lkfSB1c2VySWQ9JHt1c2VySWR9YCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBzaGFyaW5nIGFuIGV4dGVybmFsIHZpZGVvOiAke2V4dGVybmFsVmlkZW9Vcmx9ICR7ZXJyb3J9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IHN0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW9TeXN0ZW1DYWxsIGZyb20gJy9pbXBvcnRzL2FwaS9leHRlcm5hbC12aWRlb3Mvc2VydmVyL21ldGhvZHMvc3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlb1N5c3RlbUNhbGwnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW8oKSB7XG4gIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgdHJ5IHtcbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgdXNlciA9IFVzZXJzLmZpbmRPbmUoeyBtZWV0aW5nSWQsIHVzZXJJZDogcmVxdWVzdGVyVXNlcklkIH0pO1xuXG4gICAgaWYgKHVzZXIgJiYgdXNlci5wcmVzZW50ZXIpIHtcbiAgICAgIC8vIHByb2NlZWQgYW5kIHB1Ymxpc2ggdGhlIGV2ZW50XG4gICAgICBzdG9wV2F0Y2hpbmdFeHRlcm5hbFZpZGVvU3lzdGVtQ2FsbCh7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIHN0b3Agc2hhcmluZyBhbiBleHRlcm5hbCB2aWRlbyBmb3IgbWVldGluZz0ke21lZXRpbmdJZH0gJHtlcnJvcn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IE1lZXRpbmdzIGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdG9wV2F0Y2hpbmdFeHRlcm5hbFZpZGVvU3lzdGVtQ2FsbCh7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0pIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdTdG9wRXh0ZXJuYWxWaWRlb1B1Yk1zZyc7XG5cbiAgdHJ5IHtcbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgb25nb2luZyB2aWRlbyBzaGFyZWRcbiAgICBjb25zdCBtZWV0aW5nID0gTWVldGluZ3MuZmluZE9uZSh7IG1lZXRpbmdJZCB9KTtcbiAgICBpZiAoIW1lZXRpbmcgfHwgbWVldGluZy5leHRlcm5hbFZpZGVvVXJsID09PSBudWxsKSByZXR1cm47XG5cbiAgICBMb2dnZXIuaW5mbygnRXh0ZXJuYWxWaWRlbzo6c3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlbyB3YXMgdHJpZ2dlcmVkICcsIHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0geyB9O1xuICAgIHJldHVybiBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gc3RvcCBzaGFyaW5nIGFuIGV4dGVybmFsIHZpZGVvIGZvciBtZWV0aW5nPSR7bWVldGluZ0lkfSAke2Vycm9yfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IGhhbmRsZVN0YXJ0RXh0ZXJuYWxWaWRlbyBmcm9tICcuL2hhbmRsZXJzL3N0YXJ0RXh0ZXJuYWxWaWRlbyc7XG5pbXBvcnQgaGFuZGxlU3RvcEV4dGVybmFsVmlkZW8gZnJvbSAnLi9oYW5kbGVycy9zdG9wRXh0ZXJuYWxWaWRlbyc7XG5pbXBvcnQgaGFuZGxlVXBkYXRlRXh0ZXJuYWxWaWRlbyBmcm9tICcuL2hhbmRsZXJzL3VwZGF0ZUV4dGVybmFsVmlkZW8nO1xuXG5SZWRpc1B1YlN1Yi5vbignU3RhcnRFeHRlcm5hbFZpZGVvRXZ0TXNnJywgaGFuZGxlU3RhcnRFeHRlcm5hbFZpZGVvKTtcblJlZGlzUHViU3ViLm9uKCdTdG9wRXh0ZXJuYWxWaWRlb0V2dE1zZycsIGhhbmRsZVN0b3BFeHRlcm5hbFZpZGVvKTtcblJlZGlzUHViU3ViLm9uKCdVcGRhdGVFeHRlcm5hbFZpZGVvRXZ0TXNnJywgaGFuZGxlVXBkYXRlRXh0ZXJuYWxWaWRlbyk7XG4iLCJpbXBvcnQgJy4vbWV0aG9kcyc7XG5pbXBvcnQgJy4vZXZlbnRIYW5kbGVycyc7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBzdGFydFdhdGNoaW5nRXh0ZXJuYWxWaWRlbyBmcm9tICcuL21ldGhvZHMvc3RhcnRXYXRjaGluZ0V4dGVybmFsVmlkZW8nO1xuaW1wb3J0IHN0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW8gZnJvbSAnLi9tZXRob2RzL3N0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW8nO1xuaW1wb3J0IGVtaXRFeHRlcm5hbFZpZGVvRXZlbnQgZnJvbSAnLi9tZXRob2RzL2VtaXRFeHRlcm5hbFZpZGVvRXZlbnQnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHN0YXJ0V2F0Y2hpbmdFeHRlcm5hbFZpZGVvLFxuICBzdG9wV2F0Y2hpbmdFeHRlcm5hbFZpZGVvLFxuICBlbWl0RXh0ZXJuYWxWaWRlb0V2ZW50LFxufSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcclxuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xyXG5cclxuY29uc3QgYWxsb3dSZWNlbnRNZXNzYWdlcyA9IChldmVudE5hbWUsIG1lc3NhZ2UpID0+IHtcclxuXHJcbiAgY29uc3Qge1xyXG4gICAgdXNlcklkLFxyXG4gICAgbWVldGluZ0lkLFxyXG4gICAgdGltZSxcclxuICAgIHJhdGUsXHJcbiAgICBzdGF0ZSxcclxuICB9ID0gbWVzc2FnZTtcclxuXHJcbiAgTG9nZ2VyLmRlYnVnKGBFeHRlcm5hbFZpZGVvIFN0cmVhbWVyIGF1dGggYWxsb3dlZCB1c2VySWQ6ICR7dXNlcklkfSwgbWVldGluZ0lkOiAke21lZXRpbmdJZH0sIGV2ZW50OiAke2V2ZW50TmFtZX0sIHRpbWU6ICR7dGltZX0gcmF0ZTogJHtyYXRlfSwgc3RhdGU6ICR7c3RhdGV9YCk7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRXh0ZXJuYWxWaWRlb1N0cmVhbWVyKG1lZXRpbmdJZCkge1xyXG4gIGNvbnN0IHN0cmVhbU5hbWUgPSBgZXh0ZXJuYWwtdmlkZW9zLSR7bWVldGluZ0lkfWA7XHJcblxyXG4gIGlmIChNZXRlb3IuU3RyZWFtZXJDZW50cmFsLmluc3RhbmNlc1tzdHJlYW1OYW1lXSkge1xyXG4gICAgTG9nZ2VyLmluZm8oYERlc3Ryb3lpbmcgRXh0ZXJuYWwgVmlkZW8gc3RyZWFtZXIgb2JqZWN0IGZvciAke3N0cmVhbU5hbWV9YCk7XHJcbiAgICBkZWxldGUgTWV0ZW9yLlN0cmVhbWVyQ2VudHJhbC5pbnN0YW5jZXNbc3RyZWFtTmFtZV07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkRXh0ZXJuYWxWaWRlb1N0cmVhbWVyKG1lZXRpbmdJZCkge1xyXG5cclxuICBjb25zdCBzdHJlYW1OYW1lID0gYGV4dGVybmFsLXZpZGVvcy0ke21lZXRpbmdJZH1gO1xyXG4gIGlmICghTWV0ZW9yLlN0cmVhbWVyQ2VudHJhbC5pbnN0YW5jZXNbc3RyZWFtTmFtZV0pIHtcclxuXHJcbiAgICBjb25zdCBzdHJlYW1lciA9IG5ldyBNZXRlb3IuU3RyZWFtZXIoc3RyZWFtTmFtZSk7XHJcbiAgICBzdHJlYW1lci5hbGxvd1JlYWQoJ2FsbCcpO1xyXG4gICAgc3RyZWFtZXIuYWxsb3dXcml0ZSgnbm9uZScpO1xyXG4gICAgc3RyZWFtZXIuYWxsb3dFbWl0KGFsbG93UmVjZW50TWVzc2FnZXMpO1xyXG4gICAgTG9nZ2VyLmluZm8oYENyZWF0ZWQgRXh0ZXJuYWwgVmlkZW8gc3RyZWFtZXIgZm9yICR7c3RyZWFtTmFtZX1gKTtcclxuICB9IGVsc2Uge1xyXG4gICAgTG9nZ2VyLmRlYnVnKGBFeHRlcm5hbCBWaWRlbyBzdHJlYW1lciBpcyBhbHJlYWR5IGNyZWF0ZWQgZm9yICR7c3RyZWFtTmFtZX1gKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldChtZWV0aW5nSWQpIHtcclxuICBjb25zdCBzdHJlYW1OYW1lID0gYGV4dGVybmFsLXZpZGVvcy0ke21lZXRpbmdJZH1gO1xyXG4gIHJldHVybiBNZXRlb3IuU3RyZWFtZXJDZW50cmFsLmluc3RhbmNlc1tzdHJlYW1OYW1lXTtcclxufVxyXG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgYWRkR3JvdXBDaGF0IGZyb20gJy4uL21vZGlmaWVycy9hZGRHcm91cENoYXQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVHcm91cENoYXRDcmVhdGVkKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhib2R5LCBPYmplY3QpO1xuXG4gIGFkZEdyb3VwQ2hhdChtZWV0aW5nSWQsIGJvZHkpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IGFkZEdyb3VwQ2hhdCBmcm9tICcuLi9tb2RpZmllcnMvYWRkR3JvdXBDaGF0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlR3JvdXBDaGF0RGVzdHJveWVkKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhib2R5LCBPYmplY3QpO1xuXG4gIGFkZEdyb3VwQ2hhdChtZWV0aW5nSWQsIGJvZHkpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IGFkZEdyb3VwQ2hhdCBmcm9tICcuLi9tb2RpZmllcnMvYWRkR3JvdXBDaGF0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlR3JvdXBDaGF0cyh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgY2hhdHMgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhjaGF0cywgQXJyYXkpO1xuXG4gIGNoYXRzLmZvckVhY2goY2hhdCA9PiBhZGRHcm91cENoYXQobWVldGluZ0lkLCBjaGF0KSk7XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBDSEFUX0FDQ0VTU19QUklWQVRFIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdyb3VwQ2hhdChyZWNlaXZlcikge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ0NyZWF0ZUdyb3VwQ2hhdFJlcU1zZyc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZWNlaXZlciwgT2JqZWN0KTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBjb3JyZWxhdGlvbklkOiBgJHtyZXF1ZXN0ZXJVc2VySWR9LSR7RGF0ZS5ub3coKX1gLFxuICAgICAgbXNnOiBbXSxcbiAgICAgIHVzZXJzOiBbcmVjZWl2ZXIudXNlcklkXSxcbiAgICAgIGFjY2VzczogQ0hBVF9BQ0NFU1NfUFJJVkFURSxcbiAgICAgIG5hbWU6IHJlY2VpdmVyLm5hbWUsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBjcmVhdGVHcm91cENoYXQgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXN0cm95R3JvdXBDaGF0KCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBldmVudE5hbWUgPSAnRGVzdHJveUdyb3VwQ2hhdFJlcU1zZyc7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgLy8gVE9ETzogSW1wbGVtZW50IHRoaXMgdG9nZXRoZXIgd2l0aCAjNDk4OFxuICAgICAgLy8gY2hhdHM6IEFycmF5W1N0cmluZ10sXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBldmVudE5hbWUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIGNyZWF0ZUdyb3VwQ2hhdCAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IGZsYXQgZnJvbSAnZmxhdCc7XG5pbXBvcnQgeyBNYXRjaCwgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEdyb3VwQ2hhdCBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZEdyb3VwQ2hhdChtZWV0aW5nSWQsIGNoYXQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhjaGF0LCB7XG4gICAgaWQ6IE1hdGNoLk1heWJlKFN0cmluZyksXG4gICAgY2hhdElkOiBNYXRjaC5NYXliZShTdHJpbmcpLFxuICAgIGNvcnJlbGF0aW9uSWQ6IE1hdGNoLk1heWJlKFN0cmluZyksXG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGFjY2VzczogU3RyaW5nLFxuICAgIGNyZWF0ZWRCeTogT2JqZWN0LFxuICAgIHVzZXJzOiBBcnJheSxcbiAgICBtc2c6IE1hdGNoLk1heWJlKEFycmF5KSxcbiAgfSk7XG5cbiAgY29uc3QgY2hhdERvY3VtZW50ID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICBjaGF0SWQ6IGNoYXQuY2hhdElkIHx8IGNoYXQuaWQsXG4gICAgbmFtZTogY2hhdC5uYW1lLFxuICAgIGFjY2VzczogY2hhdC5hY2Nlc3MsXG4gICAgdXNlcnM6IGNoYXQudXNlcnMubWFwKHUgPT4gdS5pZCksXG4gICAgcGFydGljaXBhbnRzOiBjaGF0LnVzZXJzLFxuICAgIGNyZWF0ZWRCeTogY2hhdC5jcmVhdGVkQnkuaWQsXG4gIH07XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgY2hhdElkOiBjaGF0RG9jdW1lbnQuY2hhdElkLFxuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiBmbGF0KGNoYXREb2N1bWVudCwgeyBzYWZlOiB0cnVlIH0pLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkIH0gPSBHcm91cENoYXQudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIGdyb3VwLWNoYXQgbmFtZT0ke2NoYXQubmFtZX0gbWVldGluZ0lkPSR7bWVldGluZ0lkfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBzZXJ0ZWQgZ3JvdXAtY2hhdCBuYW1lPSR7Y2hhdC5uYW1lfSBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFkZGluZyBncm91cC1jaGF0IHRvIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgR3JvdXBDaGF0IGZyb20gJy9pbXBvcnRzL2FwaS9ncm91cC1jaGF0JztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBjbGVhckdyb3VwQ2hhdE1zZyBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyL21vZGlmaWVycy9jbGVhckdyb3VwQ2hhdE1zZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyR3JvdXBDaGF0KG1lZXRpbmdJZCkge1xuICB0cnkge1xuICAgIGNsZWFyR3JvdXBDaGF0TXNnKG1lZXRpbmdJZCk7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBHcm91cENoYXQucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBHcm91cENoYXQgKCR7bWVldGluZ0lkfSlgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgR3JvdXBDaGF0ICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVHcm91cENoYXRzIGZyb20gJy4vaGFuZGxlcnMvZ3JvdXBDaGF0cyc7XG5pbXBvcnQgaGFuZGxlR3JvdXBDaGF0Q3JlYXRlZCBmcm9tICcuL2hhbmRsZXJzL2dyb3VwQ2hhdENyZWF0ZWQnO1xuaW1wb3J0IGhhbmRsZUdyb3VwQ2hhdERlc3Ryb3llZCBmcm9tICcuL2hhbmRsZXJzL2dyb3VwQ2hhdERlc3Ryb3llZCc7XG5pbXBvcnQgeyBwcm9jZXNzRm9ySFRNTDVTZXJ2ZXJPbmx5IH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5cblJlZGlzUHViU3ViLm9uKCdHZXRHcm91cENoYXRzUmVzcE1zZycsIHByb2Nlc3NGb3JIVE1MNVNlcnZlck9ubHkoaGFuZGxlR3JvdXBDaGF0cykpO1xuUmVkaXNQdWJTdWIub24oJ0dyb3VwQ2hhdENyZWF0ZWRFdnRNc2cnLCBoYW5kbGVHcm91cENoYXRDcmVhdGVkKTtcblJlZGlzUHViU3ViLm9uKCdHcm91cENoYXREZXN0cm95ZWRFdnRNc2cnLCBoYW5kbGVHcm91cENoYXREZXN0cm95ZWQpO1xuUmVkaXNQdWJTdWIub24oJ1N5bmNHZXRHcm91cENoYXRzUmVzcE1zZycsIGhhbmRsZUdyb3VwQ2hhdHMpO1xuIiwiaW1wb3J0ICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyJztcbmltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IGNyZWF0ZUdyb3VwQ2hhdCBmcm9tICcuL21ldGhvZHMvY3JlYXRlR3JvdXBDaGF0JztcbmltcG9ydCBkZXN0cm95R3JvdXBDaGF0IGZyb20gJy4vbWV0aG9kcy9kZXN0cm95R3JvdXBDaGF0JztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICBjcmVhdGVHcm91cENoYXQsXG4gIGRlc3Ryb3lHcm91cENoYXQsXG59KTtcbiIsImltcG9ydCBHcm91cENoYXQgZnJvbSAnL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5cbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uLCB7IFZhbGlkYXRpb25TdGF0ZXMgfSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcblxuZnVuY3Rpb24gZ3JvdXBDaGF0KCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBHcm91cENoYXQgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gR3JvdXBDaGF0LmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIGNvbnN0IENIQVRfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5jaGF0O1xuICBjb25zdCBQVUJMSUNfQ0hBVF9UWVBFID0gQ0hBVF9DT05GSUcudHlwZV9wdWJsaWM7XG5cbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIGdyb3VwLWNoYXQnLCB7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xuXG4gIHJldHVybiBHcm91cENoYXQuZmluZCh7XG4gICAgJG9yOiBbXG4gICAgICB7IG1lZXRpbmdJZCwgYWNjZXNzOiBQVUJMSUNfQ0hBVF9UWVBFIH0sXG4gICAgICB7IG1lZXRpbmdJZCwgdXNlcnM6IHsgJGFsbDogW3VzZXJJZF0gfSB9LFxuICAgIF0sXG5cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2goLi4uYXJncykge1xuICBjb25zdCBib3VuZEdyb3VwQ2hhdCA9IGdyb3VwQ2hhdC5iaW5kKHRoaXMpO1xuICByZXR1cm4gYm91bmRHcm91cENoYXQoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCdncm91cC1jaGF0JywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgR3JvdXBDaGF0ID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ2dyb3VwLWNoYXQnKTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBHcm91cENoYXQuX2Vuc3VyZUluZGV4KHtcbiAgICBtZWV0aW5nSWQ6IDEsIGNoYXRJZDogMSwgYWNjZXNzOiAxLCB1c2VyczogMSxcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyb3VwQ2hhdDtcblxuY29uc3QgQ0hBVF9BQ0NFU1MgPSB7XG4gIFBVQkxJQzogJ1BVQkxJQ19BQ0NFU1MnLFxuICBQUklWQVRFOiAnUFJJVkFURV9BQ0NFU1MnLFxufTtcblxuZXhwb3J0IGNvbnN0IENIQVRfQUNDRVNTX1BVQkxJQyA9IENIQVRfQUNDRVNTLlBVQkxJQztcbmV4cG9ydCBjb25zdCBDSEFUX0FDQ0VTU19QUklWQVRFID0gQ0hBVF9BQ0NFU1MuUFJJVkFURTtcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBjbGVhckdyb3VwQ2hhdE1zZyBmcm9tICcuLi9tb2RpZmllcnMvY2xlYXJHcm91cENoYXRNc2cnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhclB1YmxpY0NoYXRIaXN0b3J5KHsgaGVhZGVyLCBib2R5IH0pIHtcbiAgY29uc3QgeyBtZWV0aW5nSWQgfSA9IGhlYWRlcjtcbiAgY29uc3QgeyBjaGF0SWQgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhjaGF0SWQsIFN0cmluZyk7XG5cbiAgcmV0dXJuIGNsZWFyR3JvdXBDaGF0TXNnKG1lZXRpbmdJZCwgY2hhdElkKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgYWRkR3JvdXBDaGF0TXNnIGZyb20gJy4uL21vZGlmaWVycy9hZGRHcm91cENoYXRNc2cnO1xuaW1wb3J0IGFkZEJ1bGtHcm91cENoYXRNc2dzIGZyb20gJy4uL21vZGlmaWVycy9hZGRCdWxrR3JvdXBDaGF0TXNncyc7XG5cbmNvbnN0IHsgYnVmZmVyQ2hhdEluc2VydHNNcyB9ID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5jaGF0O1xuXG5jb25zdCBtc2dCdWZmZXIgPSBbXTtcblxuY29uc3QgYnVsa0ZuID0gXy50aHJvdHRsZShhZGRCdWxrR3JvdXBDaGF0TXNncywgYnVmZmVyQ2hhdEluc2VydHNNcyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUdyb3VwQ2hhdE1zZ0Jyb2FkY2FzdCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgY2hhdElkLCBtc2cgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhjaGF0SWQsIFN0cmluZyk7XG4gIGNoZWNrKG1zZywgT2JqZWN0KTtcblxuICBpZiAoYnVmZmVyQ2hhdEluc2VydHNNcykge1xuICAgIG1zZ0J1ZmZlci5wdXNoKHsgbWVldGluZ0lkLCBjaGF0SWQsIG1zZyB9KTtcbiAgICBidWxrRm4obXNnQnVmZmVyKTtcbiAgfSBlbHNlIHtcbiAgICBhZGRHcm91cENoYXRNc2cobWVldGluZ0lkLCBjaGF0SWQsIG1zZyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGNoLCBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgc3luY01lZXRpbmdDaGF0TXNncyBmcm9tICcuLi9tb2RpZmllcnMvc3luY01lZXRpbmdDaGF0TXNncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVN5bmNHcm91cENoYXQoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IGNoYXRJZCwgbXNncyB9ID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKGNoYXRJZCwgU3RyaW5nKTtcbiAgY2hlY2sobXNncywgTWF0Y2guTWF5YmUoQXJyYXkpKTtcblxuICBzeW5jTWVldGluZ0NoYXRNc2dzKG1lZXRpbmdJZCwgY2hhdElkLCBtc2dzKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBzdGFydFR5cGluZyBmcm9tICcuLi9tb2RpZmllcnMvc3RhcnRUeXBpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVVc2VyVHlwaW5nKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3QgeyBjaGF0SWQsIHVzZXJJZCB9ID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2soY2hhdElkLCBTdHJpbmcpO1xuXG4gIHN0YXJ0VHlwaW5nKG1lZXRpbmdJZCwgdXNlcklkLCBjaGF0SWQpO1xufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgR3JvdXBDaGF0IGZyb20gJy9pbXBvcnRzL2FwaS9ncm91cC1jaGF0JztcbmltcG9ydCB7IEdyb3VwQ2hhdE1zZyB9IGZyb20gJy9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZyc7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5jb25zdCBDSEFUX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMuY2hhdDtcbmNvbnN0IFBVQkxJQ19DSEFUX1RZUEUgPSBDSEFUX0NPTkZJRy50eXBlX3B1YmxpYztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hhdE1lc3NhZ2VCZWZvcmVKb2luQ291bnRlcigpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcblxuICAgIGNvbnN0IGdyb3VwQ2hhdHMgPSBHcm91cENoYXQuZmluZCh7XG4gICAgICAkb3I6IFtcbiAgICAgICAgeyBtZWV0aW5nSWQsIGFjY2VzczogUFVCTElDX0NIQVRfVFlQRSB9LFxuICAgICAgICB7IG1lZXRpbmdJZCwgdXNlcnM6IHsgJGFsbDogW3JlcXVlc3RlclVzZXJJZF0gfSB9LFxuICAgICAgXSxcbiAgICB9KS5mZXRjaCgpO1xuXG4gICAgY29uc3QgVXNlciA9IFVzZXJzLmZpbmRPbmUoeyB1c2VySWQ6IHJlcXVlc3RlclVzZXJJZCwgbWVldGluZ0lkIH0pO1xuXG4gICAgY29uc3QgY2hhdElkV2l0aENvdW50ZXIgPSBncm91cENoYXRzLm1hcCgoZ3JvdXBDaGF0KSA9PiB7XG4gICAgICBjb25zdCBtc2dDb3VudCA9IEdyb3VwQ2hhdE1zZy5maW5kKHtcbiAgICAgICAgbWVldGluZ0lkLFxuICAgICAgICBjaGF0SWQ6IGdyb3VwQ2hhdC5jaGF0SWQsXG4gICAgICAgIHRpbWVzdGFtcDogeyAkbHQ6IFVzZXIuYXV0aFRva2VuVmFsaWRhdGVkVGltZSB9LFxuICAgICAgfSkuY291bnQoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoYXRJZDogZ3JvdXBDaGF0LmNoYXRJZCxcbiAgICAgICAgY291bnQ6IG1zZ0NvdW50LFxuICAgICAgfTtcbiAgICB9KS5maWx0ZXIoKGNoYXQpID0+IGNoYXQuY291bnQpO1xuICAgIHJldHVybiBjaGF0SWRXaXRoQ291bnRlcjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIGNoYXRNZXNzYWdlQmVmb3JlSm9pbkNvdW50ZXIgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhclB1YmxpY0NoYXRIaXN0b3J5KCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ0NsZWFyUHVibGljQ2hhdEhpc3RvcnlQdWJNc2cnO1xuICBjb25zdCBDSEFUX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMuY2hhdDtcbiAgY29uc3QgUFVCTElDX0dST1VQX0NIQVRfSUQgPSBDSEFUX0NPTkZJRy5wdWJsaWNfZ3JvdXBfaWQ7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBjaGF0SWQ6IFBVQkxJQ19HUk9VUF9DSEFUX0lELFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgY2xlYXJQdWJsaWNDaGF0SGlzdG9yeSAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBHcm91cENoYXRNc2cgfSBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cnO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuY29uc3QgQ0hBVF9DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLmNoYXQ7XG5jb25zdCBJVEVOU19QRVJfUEFHRSA9IENIQVRfQ09ORklHLml0ZW1zUGVyUGFnZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmV0Y2hNZXNzYWdlUGVyUGFnZShjaGF0SWQsIHBhZ2UpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhjaGF0SWQsIFN0cmluZyk7XG4gICAgY2hlY2socGFnZSwgTnVtYmVyKTtcblxuICAgIGNvbnN0IFVzZXIgPSBVc2Vycy5maW5kT25lKHsgdXNlcklkOiByZXF1ZXN0ZXJVc2VySWQsIG1lZXRpbmdJZCB9KTtcblxuICAgIGNvbnN0IG1lc3NhZ2VzID0gR3JvdXBDaGF0TXNnLmZpbmQoXG4gICAgICB7IGNoYXRJZCwgbWVldGluZ0lkLCB0aW1lc3RhbXA6IHsgJGx0OiBVc2VyLmF1dGhUb2tlblZhbGlkYXRlZFRpbWUgfSB9LFxuICAgICAge1xuICAgICAgICBzb3J0OiB7IHRpbWVzdGFtcDogMSB9LFxuICAgICAgICBza2lwOiBwYWdlID4gMCA/ICgocGFnZSAtIDEpICogSVRFTlNfUEVSX1BBR0UpIDogMCxcbiAgICAgICAgbGltaXQ6IElURU5TX1BFUl9QQUdFLFxuICAgICAgfSxcbiAgICApXG4gICAgICAuZmV0Y2goKTtcbiAgICByZXR1cm4gbWVzc2FnZXM7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBmZXRjaE1lc3NhZ2VQZXJQYWdlICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgUmVnZXhXZWJVcmwgZnJvbSAnL2ltcG9ydHMvdXRpbHMvcmVnZXgtd2VidXJsJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5jb25zdCBIVE1MX1NBRkVfTUFQID0ge1xuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7Jyxcbn07XG5cbmNvbnN0IHBhcnNlTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gIGxldCBwYXJzZWRNZXNzYWdlID0gbWVzc2FnZSB8fCAnJztcbiAgcGFyc2VkTWVzc2FnZSA9IHBhcnNlZE1lc3NhZ2UudHJpbSgpO1xuXG4gIC8vIFJlcGxhY2UgPGJyLz4gd2l0aCBcXG5cXHJcbiAgcGFyc2VkTWVzc2FnZSA9IHBhcnNlZE1lc3NhZ2UucmVwbGFjZSgvPGJyXFxzKltcXFxcL10/Pi9naSwgJ1xcblxccicpO1xuXG4gIC8vIFNhbml0aXplLiBTZWU6IGh0dHA6Ly9zaGViYW5nLmJyYW5kb25taW50ZXJuLmNvbS9mb29scHJvb2YtaHRtbC1lc2NhcGluZy1pbi1qYXZhc2NyaXB0L1xuICBwYXJzZWRNZXNzYWdlID0gcGFyc2VkTWVzc2FnZS5yZXBsYWNlKC9bPD4nXCJdL2csIChjKSA9PiBIVE1MX1NBRkVfTUFQW2NdKTtcblxuICAvLyBSZXBsYWNlIGZsYXNoIGxpbmtzIHRvIGZsYXNoIHZhbGlkIG9uZXNcbiAgcGFyc2VkTWVzc2FnZSA9IHBhcnNlZE1lc3NhZ2UucmVwbGFjZShSZWdleFdlYlVybCwgXCI8YSBocmVmPSdldmVudDokJic+PHU+JCY8L3U+PC9hPlwiKTtcblxuICByZXR1cm4gcGFyc2VkTWVzc2FnZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlbmRHcm91cENoYXRNc2coY2hhdElkLCBtZXNzYWdlKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnU2VuZEdyb3VwQ2hhdE1lc3NhZ2VNc2cnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soY2hhdElkLCBTdHJpbmcpO1xuICAgIGNoZWNrKG1lc3NhZ2UsIE9iamVjdCk7XG5cbiAgICBjb25zdCBwYXJzZWRNZXNzYWdlID0gcGFyc2VNZXNzYWdlKG1lc3NhZ2UubWVzc2FnZSk7XG5cbiAgICBtZXNzYWdlLm1lc3NhZ2UgPSBwYXJzZWRNZXNzYWdlO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIG1zZzogbWVzc2FnZSxcbiAgICAgIGNoYXRJZCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHNlbmRHcm91cENoYXRNc2cgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydFVzZXJUeXBpbmcoY2hhdElkKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnVXNlclR5cGluZ1B1Yk1zZyc7XG4gIGNvbnN0IENIQVRfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5jaGF0O1xuICBjb25zdCBQVUJMSUNfR1JPVVBfQ0hBVF9JRCA9IENIQVRfQ09ORklHLnB1YmxpY19ncm91cF9pZDtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGNoYXRJZCwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBjaGF0SWQ6IGNoYXRJZCB8fCBQVUJMSUNfR1JPVVBfQ0hBVF9JRCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHN0YXJ0VXNlclR5cGluZyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVXNlcnNUeXBpbmcgfSBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cnO1xuaW1wb3J0IHN0b3BUeXBpbmcgZnJvbSAnLi4vbW9kaWZpZXJzL3N0b3BUeXBpbmcnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0b3BVc2VyVHlwaW5nKCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgdXNlclR5cGluZyA9IFVzZXJzVHlwaW5nLmZpbmRPbmUoe1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgfSk7XG5cbiAgICBpZiAodXNlclR5cGluZyAmJiBtZWV0aW5nSWQgJiYgcmVxdWVzdGVyVXNlcklkKSB7XG4gICAgICBzdG9wVHlwaW5nKG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCB0cnVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBzdG9wVXNlclR5cGluZyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR3JvdXBDaGF0TXNnIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2dyb3VwLWNoYXQtbXNnJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBmbGF0IGZyb20gJ2ZsYXQnO1xuaW1wb3J0IHsgcGFyc2VNZXNzYWdlIH0gZnJvbSAnLi9hZGRHcm91cENoYXRNc2cnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBhZGRCdWxrR3JvdXBDaGF0TXNncyhtc2dzKSB7XG4gIGlmICghbXNncy5sZW5ndGgpIHJldHVybjtcblxuICBjb25zdCBtYXBwZWRNc2dzID0gbXNnc1xuICAgIC5tYXAoKHsgY2hhdElkLCBtZWV0aW5nSWQsIG1zZyB9KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHNlbmRlcixcbiAgICAgICAgY29sb3IsXG4gICAgICAgIC4uLnJlc3RNc2dcbiAgICAgIH0gPSBtc2c7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9pZDogbmV3IE1vbmdvLk9iamVjdElEKCkuX3N0cixcbiAgICAgICAgLi4ucmVzdE1zZyxcbiAgICAgICAgbWVldGluZ0lkLFxuICAgICAgICBjaGF0SWQsXG4gICAgICAgIG1lc3NhZ2U6IHBhcnNlTWVzc2FnZShtc2cubWVzc2FnZSksXG4gICAgICAgIHNlbmRlcjogc2VuZGVyLmlkLFxuICAgICAgfTtcbiAgICB9KVxuICAgIC5tYXAoZWwgPT4gZmxhdChlbCwgeyBzYWZlOiB0cnVlIH0pKTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgaW5zZXJ0ZWRDb3VudCB9ID0gYXdhaXQgR3JvdXBDaGF0TXNnLnJhd0NvbGxlY3Rpb24oKS5pbnNlcnRNYW55KG1hcHBlZE1zZ3MpO1xuICAgIG1zZ3MubGVuZ3RoID0gMDtcblxuICAgIGlmIChpbnNlcnRlZENvdW50KSB7XG4gICAgICBMb2dnZXIuaW5mbyhgSW5zZXJ0ZWQgJHtpbnNlcnRlZENvdW50fSBtZXNzYWdlc2ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBidWxrIGluc2VydC4gJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGNoLCBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBHcm91cENoYXRNc2cgfSBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cnO1xuaW1wb3J0IHsgQlJFQUtfTElORSB9IGZyb20gJy9pbXBvcnRzL3V0aWxzL2xpbmVFbmRpbmdzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVzc2FnZShtZXNzYWdlKSB7XG4gIGxldCBwYXJzZWRNZXNzYWdlID0gbWVzc2FnZSB8fCAnJztcblxuICAvLyBSZXBsYWNlIFxcciBhbmQgXFxuIHRvIDxici8+XG4gIHBhcnNlZE1lc3NhZ2UgPSBwYXJzZWRNZXNzYWdlLnJlcGxhY2UoLyhbXj5cXHJcXG5dPykoXFxyXFxufFxcblxccnxcXHJ8XFxuKS9nLCBgJDEke0JSRUFLX0xJTkV9JDJgKTtcblxuICAvLyBSZXBsYWNlIGZsYXNoIGxpbmtzIHRvIGh0bWwgdmFsaWQgb25lc1xuICBwYXJzZWRNZXNzYWdlID0gcGFyc2VkTWVzc2FnZS5zcGxpdCgnPGEgaHJlZj1cXCdldmVudDonKS5qb2luKCc8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVxcJycpO1xuICBwYXJzZWRNZXNzYWdlID0gcGFyc2VkTWVzc2FnZS5zcGxpdCgnPGEgaHJlZj1cImV2ZW50OicpLmpvaW4oJzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCInKTtcblxuICByZXR1cm4gcGFyc2VkTWVzc2FnZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkR3JvdXBDaGF0TXNnKG1lZXRpbmdJZCwgY2hhdElkLCBtc2cpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhjaGF0SWQsIFN0cmluZyk7XG4gIGNoZWNrKG1zZywge1xuICAgIGlkOiBNYXRjaC5NYXliZShTdHJpbmcpLFxuICAgIHRpbWVzdGFtcDogTnVtYmVyLFxuICAgIHNlbmRlcjogT2JqZWN0LFxuICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgbWVzc2FnZTogU3RyaW5nLFxuICAgIGNvcnJlbGF0aW9uSWQ6IE1hdGNoLk1heWJlKFN0cmluZyksXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBzZW5kZXIsXG4gICAgLi4ucmVzdE1zZ1xuICB9ID0gbXNnO1xuXG4gIGNvbnN0IG1zZ0RvY3VtZW50ID0ge1xuICAgIC4uLnJlc3RNc2csXG4gICAgc2VuZGVyOiBzZW5kZXIuaWQsXG4gICAgbWVldGluZ0lkLFxuICAgIGNoYXRJZCxcbiAgICBtZXNzYWdlOiBwYXJzZU1lc3NhZ2UobXNnLm1lc3NhZ2UpLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgaW5zZXJ0ZWRJZCA9IEdyb3VwQ2hhdE1zZy5pbnNlcnQobXNnRG9jdW1lbnQpO1xuXG4gICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBBZGRlZCBncm91cC1jaGF0LW1zZyBtc2dJZD0ke21zZy5pZH0gY2hhdElkPSR7Y2hhdElkfSBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGFkZGluZyBncm91cC1jaGF0LW1zZyB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0Y2gsIGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IEdyb3VwQ2hhdE1zZyB9IGZyb20gJy9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZyc7XG5pbXBvcnQgeyBCUkVBS19MSU5FIH0gZnJvbSAnL2ltcG9ydHMvdXRpbHMvbGluZUVuZGluZ3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgbGV0IHBhcnNlZE1lc3NhZ2UgPSBtZXNzYWdlIHx8ICcnO1xuXG4gIC8vIFJlcGxhY2UgXFxyIGFuZCBcXG4gdG8gPGJyLz5cbiAgcGFyc2VkTWVzc2FnZSA9IHBhcnNlZE1lc3NhZ2UucmVwbGFjZSgvKFtePlxcclxcbl0/KShcXHJcXG58XFxuXFxyfFxccnxcXG4pL2csIGAkMSR7QlJFQUtfTElORX0kMmApO1xuXG4gIC8vIFJlcGxhY2UgZmxhc2ggbGlua3MgdG8gaHRtbCB2YWxpZCBvbmVzXG4gIHBhcnNlZE1lc3NhZ2UgPSBwYXJzZWRNZXNzYWdlLnNwbGl0KCc8YSBocmVmPVxcJ2V2ZW50OicpLmpvaW4oJzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XFwnJyk7XG4gIHBhcnNlZE1lc3NhZ2UgPSBwYXJzZWRNZXNzYWdlLnNwbGl0KCc8YSBocmVmPVwiZXZlbnQ6Jykuam9pbignPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIicpO1xuXG4gIHJldHVybiBwYXJzZWRNZXNzYWdlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTeXN0ZW1Nc2cobWVldGluZ0lkLCBjaGF0SWQsIG1zZykge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKGNoYXRJZCwgU3RyaW5nKTtcbiAgY2hlY2sobXNnLCB7XG4gICAgaWQ6IE1hdGNoLk1heWJlKFN0cmluZyksXG4gICAgdGltZXN0YW1wOiBOdW1iZXIsXG4gICAgc2VuZGVyOiBPYmplY3QsXG4gICAgbWVzc2FnZTogU3RyaW5nLFxuICAgIGV4dHJhOiBPYmplY3QsXG4gICAgY29ycmVsYXRpb25JZDogTWF0Y2guTWF5YmUoU3RyaW5nKSxcbiAgfSk7XG4gIGNvbnN0IG1zZ0RvY3VtZW50ID0ge1xuICAgIC4uLm1zZyxcbiAgICBzZW5kZXI6IG1zZy5zZW5kZXIuaWQsXG4gICAgbWVldGluZ0lkLFxuICAgIGNoYXRJZCxcbiAgICBtZXNzYWdlOiBwYXJzZU1lc3NhZ2UobXNnLm1lc3NhZ2UpLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgaW5zZXJ0ZWRJZCA9IEdyb3VwQ2hhdE1zZy5pbnNlcnQobXNnRG9jdW1lbnQpO1xuXG4gICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBBZGRlZCBzeXN0ZW0tbXNnIG1zZ0lkPSR7bXNnLmlkfSBjaGF0SWQ9JHtjaGF0SWR9IG1lZXRpbmdJZD0ke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gYWRkaW5nIHN5c3RlbS1tc2cgdG8gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyb3VwQ2hhdE1zZyB9IGZyb20gJy9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgYWRkR3JvdXBDaGF0TXNnIGZyb20gJy9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZEdyb3VwQ2hhdE1zZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyR3JvdXBDaGF0TXNnKG1lZXRpbmdJZCwgY2hhdElkKSB7XG4gIGNvbnN0IENIQVRfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5jaGF0O1xuICBjb25zdCBQVUJMSUNfQ0hBVF9TWVNURU1fSUQgPSBDSEFUX0NPTkZJRy5zeXN0ZW1fdXNlcmlkO1xuICBjb25zdCBQVUJMSUNfR1JPVVBfQ0hBVF9JRCA9IENIQVRfQ09ORklHLnB1YmxpY19ncm91cF9pZDtcbiAgY29uc3QgQ0hBVF9DTEVBUl9NRVNTQUdFID0gQ0hBVF9DT05GSUcuc3lzdGVtX21lc3NhZ2VzX2tleXMuY2hhdF9jbGVhcjtcbiAgY29uc3QgU1lTVEVNX0NIQVRfVFlQRSA9IENIQVRfQ09ORklHLnR5cGVfc3lzdGVtO1xuXG4gIGlmIChjaGF0SWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBHcm91cENoYXRNc2cucmVtb3ZlKHsgbWVldGluZ0lkLCBjaGF0SWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBHcm91cENoYXRNc2cgKCR7bWVldGluZ0lkfSwgJHtjaGF0SWR9KWApO1xuICAgICAgICBjb25zdCBjbGVhck1zZyA9IHtcbiAgICAgICAgICBpZDogYCR7U1lTVEVNX0NIQVRfVFlQRX0tJHtDSEFUX0NMRUFSX01FU1NBR0V9YCxcbiAgICAgICAgICBjb2xvcjogJzAnLFxuICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICBjb3JyZWxhdGlvbklkOiBgJHtQVUJMSUNfQ0hBVF9TWVNURU1fSUR9LSR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgIHNlbmRlcjoge1xuICAgICAgICAgICAgaWQ6IFBVQkxJQ19DSEFUX1NZU1RFTV9JRCxcbiAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWVzc2FnZTogQ0hBVF9DTEVBUl9NRVNTQUdFLFxuICAgICAgICB9O1xuICAgICAgICBhZGRHcm91cENoYXRNc2cobWVldGluZ0lkLCBQVUJMSUNfR1JPVVBfQ0hBVF9JRCwgY2xlYXJNc2cpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhcmluZyBHcm91cENoYXQgKCR7bWVldGluZ0lkfSwgJHtjaGF0SWR9KS4gJHtlcnJ9YCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG1lZXRpbmdJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IEdyb3VwQ2hhdE1zZy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBHcm91cENoYXRNc2cgKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgR3JvdXBDaGF0TXNnICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gR3JvdXBDaGF0TXNnLnJlbW92ZSh7IGNoYXRJZDogeyAkZXE6IFBVQkxJQ19HUk9VUF9DSEFUX0lEIH0gfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBHcm91cENoYXRNc2cgKGFsbCknKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgR3JvdXBDaGF0TXNnIChhbGwpLiAke2Vycn1gKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IHsgVXNlcnNUeXBpbmcgfSBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cnO1xuaW1wb3J0IHN0b3BUeXBpbmcgZnJvbSAnLi9zdG9wVHlwaW5nJztcblxuY29uc3QgVFlQSU5HX1RJTUVPVVQgPSA1MDAwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydFR5cGluZyhtZWV0aW5nSWQsIHVzZXJJZCwgY2hhdElkKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB1c2VySWQsXG4gIH07XG5cbiAgY29uc3QgdXNlciA9IFVzZXJzLmZpbmRPbmUoc2VsZWN0b3IsIHsgZmllbGRzOiB7IG5hbWU6IDEsIHJvbGU6IDEgfSB9KTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICBpc1R5cGluZ1RvOiBjaGF0SWQsXG4gICAgcm9sZTogdXNlci5yb2xlLFxuICAgIHRpbWU6IChuZXcgRGF0ZSgpKSxcbiAgfTtcblxuICBjb25zdCB0eXBpbmdVc2VyID0gVXNlcnNUeXBpbmcuZmluZE9uZShzZWxlY3Rvciwge1xuICAgIGZpZWxkczoge1xuICAgICAgdGltZTogMSxcbiAgICB9LFxuICB9KTtcblxuICBpZiAodHlwaW5nVXNlcikge1xuICAgIGlmIChtb2RpZmllci50aW1lIC0gdHlwaW5nVXNlci50aW1lIDw9IFRZUElOR19USU1FT1VUIC0gMTAwKSByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHsgbnVtYmVyQWZmZWN0ZWQgfSA9IFVzZXJzVHlwaW5nLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuZGVidWcoJ1R5cGluZyBpbmRpY2F0b3IgdXBkYXRlJywgeyB1c2VySWQsIGNoYXRJZCB9KTtcbiAgICAgIE1ldGVvci5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3RvcFR5cGluZyhtZWV0aW5nSWQsIHVzZXJJZCk7XG4gICAgICB9LCBUWVBJTkdfVElNRU9VVCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFR5cGluZyBpbmRpY2F0b3IgdXBkYXRlIGVycm9yOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgVXNlcnNUeXBpbmcgfSBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdG9wVHlwaW5nKG1lZXRpbmdJZCwgdXNlcklkLCBzZW5kTXNnSW5pdGlhdGVkID0gZmFsc2UpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKHNlbmRNc2dJbml0aWF0ZWQsIEJvb2xlYW4pO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB1c2VySWQsXG4gIH07XG5cbiAgY29uc3QgdXNlciA9IFVzZXJzVHlwaW5nLmZpbmRPbmUoc2VsZWN0b3IpO1xuICBjb25zdCBzdGlsbFR5cGluZyA9ICFzZW5kTXNnSW5pdGlhdGVkICYmIHVzZXIgJiYgKG5ldyBEYXRlKCkpIC0gdXNlci50aW1lIDwgMzAwMDtcbiAgaWYgKHN0aWxsVHlwaW5nKSByZXR1cm47XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFVzZXJzVHlwaW5nLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5kZWJ1ZygnU3RvcHBlZCB0eXBpbmcgaW5kaWNhdG9yJywgeyB1c2VySWQgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFN0b3AgdXNlcj0ke3VzZXJJZH0gdHlwaW5nIGluZGljYXRvciBlcnJvcjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGNoLCBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgZmxhdCBmcm9tICdmbGF0JztcbmltcG9ydCB7IEdyb3VwQ2hhdE1zZyB9IGZyb20gJy9pbXBvcnRzL2FwaS9ncm91cC1jaGF0LW1zZyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBwYXJzZU1lc3NhZ2UgfSBmcm9tICcuL2FkZEdyb3VwQ2hhdE1zZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bmNNZWV0aW5nQ2hhdE1zZ3MobWVldGluZ0lkLCBjaGF0SWQsIG1zZ3MpIHtcbiAgaWYgKCFtc2dzLmxlbmd0aCkgcmV0dXJuO1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2soY2hhdElkLCBTdHJpbmcpO1xuICBjaGVjayhtc2dzLCBNYXRjaC5NYXliZShBcnJheSkpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgYnVsa09wZXJhdGlvbnMgPSBHcm91cENoYXRNc2cucmF3Q29sbGVjdGlvbigpLmluaXRpYWxpemVPcmRlcmVkQnVsa09wKCk7XG5cbiAgICBtc2dzXG4gICAgICAuZm9yRWFjaCgobXNnKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgLi4ucmVzdE1zZ1xuICAgICAgICB9ID0gbXNnO1xuXG4gICAgICAgIGNvbnN0IG1zZ1RvU3luYyA9IHtcbiAgICAgICAgICAuLi5yZXN0TXNnLFxuICAgICAgICAgIG1lZXRpbmdJZCxcbiAgICAgICAgICBjaGF0SWQsXG4gICAgICAgICAgbWVzc2FnZTogcGFyc2VNZXNzYWdlKG1zZy5tZXNzYWdlKSxcbiAgICAgICAgICBzZW5kZXI6IHNlbmRlci5pZCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtb2RpZmllciA9IGZsYXQobXNnVG9TeW5jLCB7IHNhZmU6IHRydWUgfSk7XG5cbiAgICAgICAgYnVsa09wZXJhdGlvbnNcbiAgICAgICAgICAuZmluZCh7IGNoYXRJZCwgbWVldGluZ0lkLCBpZDogbXNnLmlkIH0pXG4gICAgICAgICAgLnVwc2VydCgpXG4gICAgICAgICAgLnVwZGF0ZU9uZSh7XG4gICAgICAgICAgICAkc2V0T25JbnNlcnQ6IHsgX2lkOiBuZXcgTW9uZ28uT2JqZWN0SUQoKS5fc3RyIH0sXG4gICAgICAgICAgICAkc2V0OiB7IC4uLm1vZGlmaWVyIH0sXG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIGJ1bGtPcGVyYXRpb25zLmV4ZWN1dGUoKTtcblxuICAgIExvZ2dlci5pbmZvKCdDaGF0IG1lc3NhZ2VzIHN5bmNocm9uaXplZCcsIHsgY2hhdElkLCBtZWV0aW5nSWQgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gc3luYyBjaGF0IG1lc3NhZ2VzOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVHcm91cENoYXRNc2dCcm9hZGNhc3QgZnJvbSAnLi9oYW5kbGVycy9ncm91cENoYXRNc2dCcm9hZGNhc3QnO1xuaW1wb3J0IGhhbmRsZUNsZWFyUHVibGljR3JvdXBDaGF0IGZyb20gJy4vaGFuZGxlcnMvY2xlYXJQdWJsaWNHcm91cENoYXQnO1xuaW1wb3J0IGhhbmRsZVVzZXJUeXBpbmcgZnJvbSAnLi9oYW5kbGVycy91c2VyVHlwaW5nJztcbmltcG9ydCBoYW5kbGVTeW5jR3JvdXBDaGF0TXNnIGZyb20gJy4vaGFuZGxlcnMvc3luY0dyb3Vwc0NoYXQnO1xuaW1wb3J0IHsgcHJvY2Vzc0ZvckhUTUw1U2VydmVyT25seSB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5SZWRpc1B1YlN1Yi5vbignR2V0R3JvdXBDaGF0TXNnc1Jlc3BNc2cnLCBwcm9jZXNzRm9ySFRNTDVTZXJ2ZXJPbmx5KGhhbmRsZVN5bmNHcm91cENoYXRNc2cpKTtcblJlZGlzUHViU3ViLm9uKCdHcm91cENoYXRNZXNzYWdlQnJvYWRjYXN0RXZ0TXNnJywgaGFuZGxlR3JvdXBDaGF0TXNnQnJvYWRjYXN0KTtcblJlZGlzUHViU3ViLm9uKCdDbGVhclB1YmxpY0NoYXRIaXN0b3J5RXZ0TXNnJywgaGFuZGxlQ2xlYXJQdWJsaWNHcm91cENoYXQpO1xuUmVkaXNQdWJTdWIub24oJ1N5bmNHZXRHcm91cENoYXRNc2dzUmVzcE1zZycsIGhhbmRsZVN5bmNHcm91cENoYXRNc2cpO1xuUmVkaXNQdWJTdWIub24oJ1VzZXJUeXBpbmdFdnRNc2cnLCBoYW5kbGVVc2VyVHlwaW5nKTtcbiIsImltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHNlbmRHcm91cENoYXRNc2cgZnJvbSAnLi9tZXRob2RzL3NlbmRHcm91cENoYXRNc2cnO1xuaW1wb3J0IGNsZWFyUHVibGljQ2hhdEhpc3RvcnkgZnJvbSAnLi9tZXRob2RzL2NsZWFyUHVibGljQ2hhdEhpc3RvcnknO1xuaW1wb3J0IHN0YXJ0VXNlclR5cGluZyBmcm9tICcuL21ldGhvZHMvc3RhcnRVc2VyVHlwaW5nJztcbmltcG9ydCBzdG9wVXNlclR5cGluZyBmcm9tICcuL21ldGhvZHMvc3RvcFVzZXJUeXBpbmcnO1xuaW1wb3J0IGNoYXRNZXNzYWdlQmVmb3JlSm9pbkNvdW50ZXIgZnJvbSAnLi9tZXRob2RzL2NoYXRNZXNzYWdlQmVmb3JlSm9pbkNvdW50ZXInO1xuaW1wb3J0IGZldGNoTWVzc2FnZVBlclBhZ2UgZnJvbSAnLi9tZXRob2RzL2ZldGNoTWVzc2FnZVBlclBhZ2UnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIGZldGNoTWVzc2FnZVBlclBhZ2UsXG4gIGNoYXRNZXNzYWdlQmVmb3JlSm9pbkNvdW50ZXIsXG4gIHNlbmRHcm91cENoYXRNc2csXG4gIGNsZWFyUHVibGljQ2hhdEhpc3RvcnksXG4gIHN0YXJ0VXNlclR5cGluZyxcbiAgc3RvcFVzZXJUeXBpbmcsXG59KTtcbiIsImltcG9ydCB7IEdyb3VwQ2hhdE1zZywgVXNlcnNUeXBpbmcgfSBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cnO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5mdW5jdGlvbiBncm91cENoYXRNc2coY2hhdHNJZHMpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgR3JvdXBDaGF0TXNnIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIEdyb3VwQ2hhdE1zZy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBjb25zdCBDSEFUX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMuY2hhdDtcbiAgY29uc3QgUFVCTElDX0dST1VQX0NIQVRfSUQgPSBDSEFUX0NPTkZJRy5wdWJsaWNfZ3JvdXBfaWQ7XG5cbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIGdyb3VwLWNoYXQtbXNnJywgeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcblxuICBjb25zdCBVc2VyID0gVXNlcnMuZmluZE9uZSh7IHVzZXJJZCwgbWVldGluZ0lkIH0pO1xuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICB0aW1lc3RhbXA6IHsgJGd0ZTogVXNlci5hdXRoVG9rZW5WYWxpZGF0ZWRUaW1lIH0sXG4gICAgJG9yOiBbXG4gICAgICB7IG1lZXRpbmdJZCwgY2hhdElkOiB7ICRlcTogUFVCTElDX0dST1VQX0NIQVRfSUQgfSB9LFxuICAgICAgeyBjaGF0SWQ6IHsgJGluOiBjaGF0c0lkcyB9IH0sXG4gICAgXSxcbiAgfTtcbiAgcmV0dXJuIEdyb3VwQ2hhdE1zZy5maW5kKHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kR3JvdXBDaGF0ID0gZ3JvdXBDaGF0TXNnLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZEdyb3VwQ2hhdCguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ2dyb3VwLWNoYXQtbXNnJywgcHVibGlzaCk7XG5cbmZ1bmN0aW9uIHVzZXJzVHlwaW5nKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyB1c2Vycy10eXBpbmcgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gVXNlcnNUeXBpbmcuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCB7IG1lZXRpbmdJZCwgdXNlcklkIH0gPSB0b2tlblZhbGlkYXRpb247XG5cbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIHVzZXJzLXR5cGluZycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgcmV0dXJuIFVzZXJzVHlwaW5nLmZpbmQoeyBtZWV0aW5nSWQgfSk7XG59XG5cbmZ1bmN0aW9uIHB1YmlzaFVzZXJzVHlwaW5nKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRVc2Vyc1R5cGluZyA9IHVzZXJzVHlwaW5nLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFVzZXJzVHlwaW5nKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgndXNlcnMtdHlwaW5nJywgcHViaXNoVXNlcnNUeXBpbmcpO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5cbmNvbnN0IEdyb3VwQ2hhdE1zZyA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCdncm91cC1jaGF0LW1zZycpO1xuY29uc3QgVXNlcnNUeXBpbmcgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbigndXNlcnMtdHlwaW5nJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgR3JvdXBDaGF0TXNnLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSwgY2hhdElkOiAxIH0pO1xuICBVc2Vyc1R5cGluZy5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEsIGlzVHlwaW5nVG86IDEgfSk7XG59XG5cbmV4cG9ydCB7IEdyb3VwQ2hhdE1zZywgVXNlcnNUeXBpbmcgfTtcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBzZXRHdWVzdFN0YXR1cyBmcm9tICcuLi9tb2RpZmllcnMvc2V0R3Vlc3RTdGF0dXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVHdWVzdEFwcHJvdmVkKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3QgeyBhcHByb3ZlZEJ5LCBndWVzdHMgfSA9IGJvZHk7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2soYXBwcm92ZWRCeSwgU3RyaW5nKTtcbiAgY2hlY2soZ3Vlc3RzLCBBcnJheSk7XG5cbiAgcmV0dXJuIGd1ZXN0cy5mb3JFYWNoKGd1ZXN0ID0+IHNldEd1ZXN0U3RhdHVzKG1lZXRpbmdJZCwgZ3Vlc3QuZ3Vlc3QsIGd1ZXN0LnN0YXR1cywgYXBwcm92ZWRCeSkpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHJlbW92ZUd1ZXN0IGZyb20gJy4uL21vZGlmaWVycy9yZW1vdmVHdWVzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUd1ZXN0V2FpdGluZ0xlZnQoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHVzZXJJZCB9ID0gYm9keTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG5cbiAgcmV0dXJuIHJlbW92ZUd1ZXN0KG1lZXRpbmdJZCwgdXNlcklkKTtcbn1cbiIsImltcG9ydCBzdHJpbmdIYXNoIGZyb20gJ3N0cmluZy1oYXNoJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBHdWVzdFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycy8nO1xuXG5jb25zdCBDT0xPUl9MSVNUID0gW1xuICAnIzdiMWZhMicsICcjNmExYjlhJywgJyM0YTE0OGMnLCAnIzVlMzViMScsICcjNTEyZGE4JywgJyM0NTI3YTAnLFxuICAnIzMxMWI5MicsICcjMzk0OWFiJywgJyMzMDNmOWYnLCAnIzI4MzU5MycsICcjMWEyMzdlJywgJyMxOTc2ZDInLCAnIzE1NjVjMCcsXG4gICcjMGQ0N2ExJywgJyMwMjc3YmQnLCAnIzAxNTc5YicsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVHdWVzdHNXYWl0aW5nRm9yQXBwcm92YWwoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IGd1ZXN0cyB9ID0gYm9keTtcbiAgY2hlY2soZ3Vlc3RzLCBBcnJheSk7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcblxuICByZXR1cm4gZ3Vlc3RzLm1hcCgoZ3Vlc3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBpbnNlcnRlZElkLCBudW1iZXJBZmZlY3RlZCB9ID0gR3Vlc3RVc2Vycy51cHNlcnQoe1xuICAgICAgICBtZWV0aW5nSWQsXG4gICAgICAgIGludElkOiBndWVzdC5pbnRJZCxcbiAgICAgIH0sIHtcbiAgICAgICAgYXBwcm92ZWQ6IGZhbHNlLFxuICAgICAgICBkZW5pZWQ6IGZhbHNlLFxuICAgICAgICAuLi5ndWVzdCxcbiAgICAgICAgbWVldGluZ0lkLFxuICAgICAgICBsb2dpblRpbWU6IGd1ZXN0LnJlZ2lzdGVyZWRPbixcbiAgICAgICAgY29sb3I6IENPTE9SX0xJU1Rbc3RyaW5nSGFzaChndWVzdC5pbnRJZCkgJSBDT0xPUl9MSVNULmxlbmd0aF0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIGd1ZXN0IHVzZXIgbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICAgIH0gZWxzZSBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYFVwc2VydGVkIGd1ZXN0IHVzZXIgbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgQWRkaW5nIGd1ZXN0IHVzZXIgdG8gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5jb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbmNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbmNvbnN0IEVWRU5UX05BTUUgPSAnR3Vlc3RzV2FpdGluZ0FwcHJvdmVkTXNnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWxsb3dQZW5kaW5nVXNlcnMoZ3Vlc3RzLCBzdGF0dXMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhndWVzdHMsIEFycmF5KTtcbiAgICBjb25zdCBtYXBwZWRHdWVzdHMgPSBndWVzdHMubWFwKChndWVzdCkgPT4gKHsgc3RhdHVzLCBndWVzdDogZ3Vlc3QuaW50SWQgfSkpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIGFwcHJvdmVkQnk6IHJlcXVlc3RlclVzZXJJZCxcbiAgICAgIGd1ZXN0czogbWFwcGVkR3Vlc3RzLFxuICAgIH07XG5cbiAgICBMb2dnZXIuaW5mbyhgVXNlcj0ke3JlcXVlc3RlclVzZXJJZH0gJHtzdGF0dXN9IGd1ZXN0cyAke0pTT04uc3RyaW5naWZ5KG1hcHBlZEd1ZXN0cyl9YCk7XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgYWxsb3dQZW5kaW5nVXNlcnMgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5jb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbmNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbmNvbnN0IEVWRU5UX05BTUUgPSAnU2V0R3Vlc3RQb2xpY3lDbWRNc2cnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaGFuZ2VHdWVzdFBvbGljeShwb2xpY3lSdWxlKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2socG9saWN5UnVsZSwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBzZXRCeTogcmVxdWVzdGVyVXNlcklkLFxuICAgICAgcG9saWN5OiBwb2xpY3lSdWxlLFxuICAgIH07XG5cbiAgICBMb2dnZXIuaW5mbyhgVXNlcj0ke3JlcXVlc3RlclVzZXJJZH0gY2hhbmdlIGd1ZXN0IHBvbGljeSB0byAke3BvbGljeVJ1bGV9YCk7XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgY2hhbmdlR3Vlc3RQb2xpY3kgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5jb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbmNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbmNvbnN0IEVWRU5UX05BTUUgPSAnU2V0R3Vlc3RMb2JieU1lc3NhZ2VDbWRNc2cnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRHdWVzdExvYmJ5TWVzc2FnZShtZXNzYWdlKSB7XG4gIHRyeSB7XG4gICAgY2hlY2sobWVzc2FnZSwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHsgbWVzc2FnZSB9O1xuXG4gICAgTG9nZ2VyLmluZm8oYFVzZXI9JHtyZXF1ZXN0ZXJVc2VySWR9IHNldCBndWVzdCBsb2JieSBtZXNzYWdlIHRvICR7bWVzc2FnZX1gKTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBzZXRHdWVzdExvYmJ5TWVzc2FnZSAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IEd1ZXN0VXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJHdWVzdFVzZXJzKG1lZXRpbmdJZCkge1xuICBpZiAobWVldGluZ0lkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gR3Vlc3RVc2Vycy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBHdWVzdFVzZXJzIGluICgke21lZXRpbmdJZH0pYCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgRXJyb3Igb24gY2xlYXJpbmcgR3Vlc3RVc2VycyBpbiAoJHttZWV0aW5nSWR9KS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IEd1ZXN0VXNlcnMucmVtb3ZlKHt9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKCdDbGVhcmVkIEd1ZXN0VXNlcnMgaW4gYWxsIG1lZXRpbmdzJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIEd1ZXN0VXNlcnMgaW4gYWxsIG1lZXRpbmdzLiAke2Vycn1gKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBHdWVzdFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUd1ZXN0KG1lZXRpbmdJZCwgaW50SWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhpbnRJZCwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgaW50SWQsXG4gIH07XG5cbiAgY29uc3QgY2IgPSAoZXJyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIExvZ2dlci5lcnJvcihgUmVtb3ZpbmcgZ3Vlc3QgdXNlciBmcm9tIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICAgIH1cblxuICAgIHJldHVybiBMb2dnZXIuaW5mbyhgUmVtb3ZlZCBndWVzdCB1c2VyIGlkPSR7aW50SWR9IG1lZXRpbmdJZD0ke21lZXRpbmdJZH1gKTtcbiAgfTtcblxuICByZXR1cm4gR3Vlc3RVc2Vycy5yZW1vdmUoc2VsZWN0b3IsIGNiKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBHdWVzdFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmNvbnN0IEdVRVNUX1NUQVRVU19BTExPVyA9ICdBTExPVyc7XG5jb25zdCBHVUVTVF9TVEFUVVNfREVOWSA9ICdERU5ZJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEd1ZXN0U3RhdHVzKG1lZXRpbmdJZCwgaW50SWQsIHN0YXR1cywgYXBwcm92ZWRCeSA9IG51bGwpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhpbnRJZCwgU3RyaW5nKTtcbiAgY2hlY2soc3RhdHVzLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICBpbnRJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBhcHByb3ZlZDogc3RhdHVzID09PSBHVUVTVF9TVEFUVVNfQUxMT1csXG4gICAgICBkZW5pZWQ6IHN0YXR1cyA9PT0gR1VFU1RfU1RBVFVTX0RFTlksXG4gICAgICBhcHByb3ZlZEJ5LFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IEd1ZXN0VXNlcnMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBVcGRhdGVkIHN0YXR1cz0ke3N0YXR1c30gdXNlcj0ke2ludElkfSBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBVcGRhdGluZyBzdGF0dXM9JHtzdGF0dXN9IHVzZXI9JHtpbnRJZH06ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0ZvckhUTUw1U2VydmVyT25seSB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IGhhbmRsZUd1ZXN0QXBwcm92ZWQgZnJvbSAnLi9oYW5kbGVycy9ndWVzdEFwcHJvdmVkJztcbmltcG9ydCBoYW5kbGVHdWVzdHNXYWl0aW5nRm9yQXBwcm92YWwgZnJvbSAnLi9oYW5kbGVycy9ndWVzdHNXYWl0aW5nRm9yQXBwcm92YWwnO1xuaW1wb3J0IGhhbmRsZUd1ZXN0V2FpdGluZ0xlZnQgZnJvbSAnLi9oYW5kbGVycy9ndWVzdFdhaXRpbmdMZWZ0JztcblxuUmVkaXNQdWJTdWIub24oJ0d1ZXN0V2FpdGluZ0xlZnRFdnRNc2cnLCBoYW5kbGVHdWVzdFdhaXRpbmdMZWZ0KTtcblJlZGlzUHViU3ViLm9uKCdHdWVzdHNXYWl0aW5nRm9yQXBwcm92YWxFdnRNc2cnLCBwcm9jZXNzRm9ySFRNTDVTZXJ2ZXJPbmx5KGhhbmRsZUd1ZXN0c1dhaXRpbmdGb3JBcHByb3ZhbCkpO1xuUmVkaXNQdWJTdWIub24oJ0d1ZXN0c1dhaXRpbmdBcHByb3ZlZEV2dE1zZycsIHByb2Nlc3NGb3JIVE1MNVNlcnZlck9ubHkoaGFuZGxlR3Vlc3RBcHByb3ZlZCkpO1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgYWxsb3dQZW5kaW5nVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9tZXRob2RzL2FsbG93UGVuZGluZ1VzZXJzJztcbmltcG9ydCBjaGFuZ2VHdWVzdFBvbGljeSBmcm9tICcvaW1wb3J0cy9hcGkvZ3Vlc3QtdXNlcnMvc2VydmVyL21ldGhvZHMvY2hhbmdlR3Vlc3RQb2xpY3knO1xuaW1wb3J0IHNldEd1ZXN0TG9iYnlNZXNzYWdlIGZyb20gJy9pbXBvcnRzL2FwaS9ndWVzdC11c2Vycy9zZXJ2ZXIvbWV0aG9kcy9zZXRHdWVzdExvYmJ5TWVzc2FnZSc7XG5cbk1ldGVvci5tZXRob2RzKHtcbiAgYWxsb3dQZW5kaW5nVXNlcnMsXG4gIGNoYW5nZUd1ZXN0UG9saWN5LFxuICBzZXRHdWVzdExvYmJ5TWVzc2FnZSxcbn0pO1xuIiwiaW1wb3J0IEd1ZXN0VXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzLyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uLCB7IFZhbGlkYXRpb25TdGF0ZXMgfSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcblxuZnVuY3Rpb24gZ3Vlc3RVc2VycygpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgR3Vlc3RVc2VycyB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBHdWVzdFVzZXJzLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIExvZ2dlci5kZWJ1ZyhgUHVibGlzaGluZyBHdWVzdFVzZXJzIGZvciAke21lZXRpbmdJZH0gJHt1c2VySWR9YCk7XG5cbiAgcmV0dXJuIEd1ZXN0VXNlcnMuZmluZCh7IG1lZXRpbmdJZCB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kU2xpZGVzID0gZ3Vlc3RVc2Vycy5iaW5kKHRoaXMpO1xuICByZXR1cm4gYm91bmRTbGlkZXMoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCdndWVzdFVzZXInLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1vbmdvIH0gZnJvbSAnbWV0ZW9yL21vbmdvJztcblxuY29uc3QgR3Vlc3RVc2VycyA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCdndWVzdFVzZXJzJyk7XG5cbmV4cG9ydCBkZWZhdWx0IEd1ZXN0VXNlcnM7XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvY2FsU2V0dGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzJztcbmltcG9ydCBzZXRDaGFuZ2VkTG9jYWxTZXR0aW5ncyBmcm9tICcuLi9tb2RpZmllcnMvc2V0Q2hhbmdlZExvY2FsU2V0dGluZ3MnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZXJDaGFuZ2VkTG9jYWxTZXR0aW5ncyhzZXR0aW5ncykge1xuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBpZiAoIW1lZXRpbmdJZCB8fCAhcmVxdWVzdGVyVXNlcklkKSByZXR1cm47XG5cbiAgICBjaGVjayhzZXR0aW5ncywgT2JqZWN0KTtcbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgdXNlckxvY2FsU2V0dGluZ3MgPSBMb2NhbFNldHRpbmdzXG4gICAgICAuZmluZE9uZSh7IG1lZXRpbmdJZCwgdXNlcklkOiByZXF1ZXN0ZXJVc2VySWQgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpZWxkczogeyBzZXR0aW5nczogMSB9LFxuICAgICAgICB9KTtcblxuICAgIGlmICghdXNlckxvY2FsU2V0dGluZ3MgfHwgIV8uaXNFcXVhbCh1c2VyTG9jYWxTZXR0aW5ncy5zZXR0aW5ncywgc2V0dGluZ3MpKSB7XG4gICAgICBzZXRDaGFuZ2VkTG9jYWxTZXR0aW5ncyhtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgc2V0dGluZ3MpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHVzZXJDaGFuZ2VkTG9jYWxTZXR0aW5ncyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvY2FsU2V0dGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJMb2NhbFNldHRpbmdzKG1lZXRpbmdJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gTG9jYWxTZXR0aW5ncy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIExvY2FsIFNldHRpbmdzICgke21lZXRpbmdJZH0pYCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIExvY2FsIFNldHRpbmdzICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvY2FsU2V0dGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0Q2hhbmdlZExvY2FsU2V0dGluZ3MobWVldGluZ0lkLCB1c2VySWQsIHNldHRpbmdzKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICBjaGVjayhzZXR0aW5ncywgT2JqZWN0KTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIHNldHRpbmdzLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG51bUNoYW5nZWQgfSA9IExvY2FsU2V0dGluZ3MudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtQ2hhbmdlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwZGF0ZWQgc2V0dGluZ3MgZm9yIHVzZXIgJHt1c2VySWR9IG9uIG1lZXRpbmcgJHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIHVwZGF0ZSBzZXR0aW5ncy4gJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHVzZXJDaGFuZ2VkTG9jYWxTZXR0aW5ncyBmcm9tICcuL21ldGhvZHMvdXNlckNoYW5nZWRMb2NhbFNldHRpbmdzJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICB1c2VyQ2hhbmdlZExvY2FsU2V0dGluZ3MsXG59KTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IExvY2FsU2V0dGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uLCB7IFZhbGlkYXRpb25TdGF0ZXMgfSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcblxuZnVuY3Rpb24gbG9jYWxTZXR0aW5ncygpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgTG9jYWxTZXR0aW5ncyB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBMb2NhbFNldHRpbmdzLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIExvZ2dlci5kZWJ1ZygnUHVibGlzaGluZyBsb2NhbCBzZXR0aW5ncycsIHsgdXNlcklkIH0pO1xuXG4gIHJldHVybiBMb2NhbFNldHRpbmdzLmZpbmQoeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kTG9jYWxTZXR0aW5ncyA9IGxvY2FsU2V0dGluZ3MuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kTG9jYWxTZXR0aW5ncyguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ2xvY2FsLXNldHRpbmdzJywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgTG9jYWxTZXR0aW5ncyA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCdsb2NhbC1zZXR0aW5ncycpO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIExvY2FsU2V0dGluZ3MuX2Vuc3VyZUluZGV4KHtcbiAgICBtZWV0aW5nSWQ6IDEsIHVzZXJJZDogMSxcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvY2FsU2V0dGluZ3M7XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh0eXBlLCBsb2dEZXNjcmlwdGlvbiwgbG9nQ29kZSA9ICd3YXNfbm90X3Byb3ZpZGVkJywgZXh0cmFJbmZvID0ge30sIHVzZXJJbmZvID0ge30pIHtcbiAgY29uc3QgY29ubmVjdGlvbklkID0gdGhpcy5jb25uZWN0aW9uLmlkO1xuICBjb25zdCBsb2dDb250ZW50cyA9IHtcbiAgICBsb2dDb2RlLFxuICAgIGxvZ0Rlc2NyaXB0aW9uLFxuICAgIGNvbm5lY3Rpb25JZCxcbiAgICBleHRyYUluZm8sXG4gICAgdXNlckluZm8sXG4gIH07XG5cbiAgLy8gSWYgSSBkb24ndCBwYXNzIG1lc3NhZ2UsIGxvZ3Mgd2lsbCBzdGFydCB3aXRoIGB1bmRlZmluZWRgXG4gIExvZ2dlci5sb2coeyBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShsb2dDb250ZW50cyksIGxldmVsOiB0eXBlIH0pO1xufVxuIiwiaW1wb3J0ICcuL21ldGhvZHMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgbG9nQ2xpZW50IGZyb20gJy4vbWV0aG9kcy9sb2dDbGllbnQnO1xuXG5NZXRlb3IubWV0aG9kcyh7IGxvZ0NsaWVudCB9KTtcbiIsImltcG9ydCBoYW5kbGVNZWV0aW5nQ3JlYXRpb24gZnJvbSAnLi9tZWV0aW5nQ3JlYXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVHZXRBbGxNZWV0aW5ncyh7IGJvZHkgfSkge1xuICByZXR1cm4gaGFuZGxlTWVldGluZ0NyZWF0aW9uKHsgYm9keSB9KTtcbn1cbiIsImltcG9ydCBzZXRHdWVzdExvYmJ5TWVzc2FnZSBmcm9tICcuLi9tb2RpZmllcnMvc2V0R3Vlc3RMb2JieU1lc3NhZ2UnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVHdWVzdExvYmJ5TWVzc2FnZUNoYW5nZWQoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IG1lc3NhZ2UgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhtZXNzYWdlLCBTdHJpbmcpO1xuXG4gIHJldHVybiBzZXRHdWVzdExvYmJ5TWVzc2FnZShtZWV0aW5nSWQsIG1lc3NhZ2UpO1xufVxuIiwiaW1wb3J0IHNldEd1ZXN0UG9saWN5IGZyb20gJy4uL21vZGlmaWVycy9zZXRHdWVzdFBvbGljeSc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUd1ZXN0UG9saWN5Q2hhbmdlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgcG9saWN5IH0gPSBib2R5O1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socG9saWN5LCBTdHJpbmcpO1xuXG5cbiAgcmV0dXJuIHNldEd1ZXN0UG9saWN5KG1lZXRpbmdJZCwgcG9saWN5KTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBhZGRNZWV0aW5nIGZyb20gJy4uL21vZGlmaWVycy9hZGRNZWV0aW5nJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlTWVldGluZ0NyZWF0aW9uKHsgYm9keSB9KSB7XG4gIGNvbnN0IG1lZXRpbmcgPSBib2R5LnByb3BzO1xuICBjb25zdCBkdXJhdGlvbkluU2Vjb2RzID0gKG1lZXRpbmcuZHVyYXRpb25Qcm9wcy5kdXJhdGlvbiAqIDYwKTtcbiAgbWVldGluZy5kdXJhdGlvblByb3BzLnRpbWVSZW1haW5pbmcgPSBkdXJhdGlvbkluU2Vjb2RzO1xuICBjaGVjayhtZWV0aW5nLCBPYmplY3QpO1xuXG4gIHJldHVybiBhZGRNZWV0aW5nKG1lZXRpbmcpO1xufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuaW1wb3J0IHsgcmVtb3ZlQW5ub3RhdGlvbnNTdHJlYW1lciB9IGZyb20gJy9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXIvc3RyZWFtZXInO1xuaW1wb3J0IHsgcmVtb3ZlQ3Vyc29yU3RyZWFtZXIgfSBmcm9tICcvaW1wb3J0cy9hcGkvY3Vyc29yL3NlcnZlci9zdHJlYW1lcic7XG5pbXBvcnQgeyByZW1vdmVFeHRlcm5hbFZpZGVvU3RyZWFtZXIgfSBmcm9tICcvaW1wb3J0cy9hcGkvZXh0ZXJuYWwtdmlkZW9zL3NlcnZlci9zdHJlYW1lcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZU1lZXRpbmdEZXN0cnVjdGlvbih7IGJvZHkgfSkge1xuICBjaGVjayhib2R5LCBPYmplY3QpO1xuICBjb25zdCB7IG1lZXRpbmdJZCB9ID0gYm9keTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuXG4gIGlmICghcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1JPTEUgfHwgcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1JPTEUgPT09ICdmcm9udGVuZCcpIHtcbiAgICByZW1vdmVBbm5vdGF0aW9uc1N0cmVhbWVyKG1lZXRpbmdJZCk7XG4gICAgcmVtb3ZlQ3Vyc29yU3RyZWFtZXIobWVldGluZ0lkKTtcbiAgICByZW1vdmVFeHRlcm5hbFZpZGVvU3RyZWFtZXIobWVldGluZ0lkKTtcbiAgfVxuXG4gIHJldHVybiBSZWRpc1B1YlN1Yi5kZXN0cm95TWVldGluZ1F1ZXVlKG1lZXRpbmdJZCk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgbWVldGluZ0hhc0VuZGVkIGZyb20gJy4uL21vZGlmaWVycy9tZWV0aW5nSGFzRW5kZWQnO1xuaW1wb3J0IE1lZXRpbmdzIGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgQnJlYWtvdXRzIGZyb20gJy9pbXBvcnRzL2FwaS9icmVha291dHMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVNZWV0aW5nRW5kKHsgaGVhZGVyLCBib2R5IH0pIHtcbiAgY2hlY2soYm9keSwgT2JqZWN0KTtcbiAgY29uc3QgeyBtZWV0aW5nSWQgfSA9IGJvZHk7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcblxuICBjaGVjayhoZWFkZXIsIE9iamVjdCk7XG4gIGNvbnN0IHsgdXNlcklkIH0gPSBoZWFkZXI7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcblxuICBjb25zdCBjYiA9IChlcnIsIG51bSwgbWVldGluZ1R5cGUpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYCR7bWVldGluZ1R5cGV9IGVuZGluZyBlcnJvcjogJHtlcnJ9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChudW0pIHtcbiAgICAgIE1ldGVvci5zZXRUaW1lb3V0KCgpID0+IHsgbWVldGluZ0hhc0VuZGVkKG1lZXRpbmdJZCk7IH0sIDEwMDAwKTtcbiAgICB9XG4gIH07XG5cbiAgTWVldGluZ3MudXBkYXRlKHsgbWVldGluZ0lkIH0sXG4gICAgeyAkc2V0OiB7IG1lZXRpbmdFbmRlZDogdHJ1ZSwgbWVldGluZ0VuZGVkQnk6IHVzZXJJZCB9IH0sXG4gICAgKGVyciwgbnVtKSA9PiB7IGNiKGVyciwgbnVtLCAnTWVldGluZycpOyB9KTtcblxuICBCcmVha291dHMudXBkYXRlKHsgcGFyZW50TWVldGluZ0lkOiBtZWV0aW5nSWQgfSxcbiAgICB7ICRzZXQ6IHsgbWVldGluZ0VuZGVkOiB0cnVlIH0gfSxcbiAgICAoZXJyLCBudW0pID0+IHsgY2IoZXJyLCBudW0sICdCcmVha291dCcpOyB9KTtcbn1cbiIsImltcG9ydCBjaGFuZ2VMb2NrU2V0dGluZ3MgZnJvbSAnLi4vbW9kaWZpZXJzL2NoYW5nZUxvY2tTZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUxvY2tTZXR0aW5nc0luTWVldGluZyh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoYW5nZUxvY2tTZXR0aW5ncyhtZWV0aW5nSWQsIGJvZHkpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHsgUmVjb3JkTWVldGluZ3MgfSBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVSZWNvcmRpbmdTdGF0dXNDaGFuZ2UoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHJlY29yZGluZyB9ID0gYm9keTtcbiAgY2hlY2socmVjb3JkaW5nLCBCb29sZWFuKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDogeyByZWNvcmRpbmcgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbnVtYmVyQWZmZWN0ZWQgfSA9IFJlY29yZE1lZXRpbmdzLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ2hhbmdlZCBtZWV0aW5nIHJlY29yZCBzdGF0dXMgaWQ9JHttZWV0aW5nSWR9IHJlY29yZGluZz0ke3JlY29yZGluZ31gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgQ2hhbmdpbmcgcmVjb3JkIHN0YXR1czogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB7IFJlY29yZE1lZXRpbmdzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUmVjb3JkaW5nVGltZXJDaGFuZ2UoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHRpbWUgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuXG4gIGNoZWNrKGJvZHksIHtcbiAgICB0aW1lOiBOdW1iZXIsXG4gIH0pO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7IHRpbWUgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIFJlY29yZE1lZXRpbmdzLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYENoYW5naW5nIHJlY29yZGluZyB0aW1lOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHVwZGF0ZVJhbmRvbVZpZXdlciBmcm9tICcuLi9tb2RpZmllcnMvdXBkYXRlUmFuZG9tVmlld2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZG9tbHlTZWxlY3RlZFVzZXIoeyBoZWFkZXIsIGJvZHkgfSkge1xuICBjb25zdCB7IHVzZXJJZHMsIGNob2ljZSwgcmVxdWVzdGVkQnkgfSA9IGJvZHk7XG4gIGNvbnN0IHsgbWVldGluZ0lkIH0gPSBoZWFkZXI7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhyZXF1ZXN0ZWRCeSwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkcywgQXJyYXkpO1xuICBjaGVjayhjaG9pY2UsIE51bWJlcik7XG5cbiAgdXBkYXRlUmFuZG9tVmlld2VyKG1lZXRpbmdJZCwgdXNlcklkcywgY2hvaWNlLCByZXF1ZXN0ZWRCeSk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgeyBNZWV0aW5nVGltZVJlbWFpbmluZyB9IGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVRpbWVSZW1haW5pbmdVcGRhdGUoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgY2hlY2soYm9keSwge1xuICAgIHRpbWVMZWZ0SW5TZWM6IE51bWJlcixcbiAgfSk7XG4gIGNvbnN0IHsgdGltZUxlZnRJblNlYyB9ID0gYm9keTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgdGltZVJlbWFpbmluZzogdGltZUxlZnRJblNlYyxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgTWVldGluZ1RpbWVSZW1haW5pbmcudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgQ2hhbmdpbmcgcmVjb3JkaW5nIHRpbWU6ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgY2hhbmdlVXNlckxvY2sgZnJvbSAnLi4vbW9kaWZpZXJzL2NoYW5nZVVzZXJMb2NrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlTG9ja1NldHRpbmdzSW5NZWV0aW5nKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY2hhbmdlVXNlckxvY2sobWVldGluZ0lkLCBib2R5KTtcbn1cbiIsImltcG9ydCBjaGFuZ2VXZWJjYW1Pbmx5TW9kZXJhdG9yIGZyb20gJy4uL21vZGlmaWVycy93ZWJjYW1Pbmx5TW9kZXJhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV2ViY2FtT25seU1vZGVyYXRvcih7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoYW5nZVdlYmNhbU9ubHlNb2RlcmF0b3IobWVldGluZ0lkLCBib2R5KTtcbn1cbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyUmFuZG9tbHlTZWxlY3RlZFVzZXIoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICB9O1xuXG4gICAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIHJhbmRvbWx5U2VsZWN0ZWRVc2VyOiBbXSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHsgaW5zZXJ0ZWRJZCB9ID0gTWVldGluZ3MudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG4gICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIHJhbmRvbWx5IHNlbGVjdGVkIHVzZXIgZnJvbSBtZWV0aW5nPSR7bWVldGluZ0lkfSBieSBpZD0ke3JlcXVlc3RlclVzZXJJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBjbGVhclJhbmRvbWx5U2VsZWN0ZWRVc2VyICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW5kTWVldGluZygpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdMb2dvdXRBbmRFbmRNZWV0aW5nQ21kTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHVzZXJJZDogcmVxdWVzdGVyVXNlcklkLFxuICAgIH07XG4gICAgTG9nZ2VyLndhcm4oYE1lZXRpbmcgJyR7bWVldGluZ0lkfScgaXMgZGVzdHJveWVkIGJ5ICcke3JlcXVlc3RlclVzZXJJZH0nYCk7XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgZW5kTWVldGluZyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvZ2dsZUxvY2tTZXR0aW5ncyhsb2NrU2V0dGluZ3NQcm9wcykge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ0NoYW5nZUxvY2tTZXR0aW5nc0luTWVldGluZ0NtZE1zZyc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhsb2NrU2V0dGluZ3NQcm9wcywge1xuICAgICAgZGlzYWJsZUNhbTogQm9vbGVhbixcbiAgICAgIGRpc2FibGVNaWM6IEJvb2xlYW4sXG4gICAgICBkaXNhYmxlUHJpdmF0ZUNoYXQ6IEJvb2xlYW4sXG4gICAgICBkaXNhYmxlUHVibGljQ2hhdDogQm9vbGVhbixcbiAgICAgIGRpc2FibGVOb3RlOiBCb29sZWFuLFxuICAgICAgaGlkZVVzZXJMaXN0OiBCb29sZWFuLFxuICAgICAgbG9ja2VkTGF5b3V0OiBCb29sZWFuLFxuICAgICAgbG9ja09uSm9pbjogQm9vbGVhbixcbiAgICAgIGxvY2tPbkpvaW5Db25maWd1cmFibGU6IEJvb2xlYW4sXG4gICAgICBzZXRCeTogTWF0Y2guTWF5YmUoU3RyaW5nKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGRpc2FibGVDYW0sXG4gICAgICBkaXNhYmxlTWljLFxuICAgICAgZGlzYWJsZVByaXZhdGVDaGF0OiBkaXNhYmxlUHJpdkNoYXQsXG4gICAgICBkaXNhYmxlUHVibGljQ2hhdDogZGlzYWJsZVB1YkNoYXQsXG4gICAgICBkaXNhYmxlTm90ZSxcbiAgICAgIGhpZGVVc2VyTGlzdCxcbiAgICAgIGxvY2tlZExheW91dCxcbiAgICAgIGxvY2tPbkpvaW4sXG4gICAgICBsb2NrT25Kb2luQ29uZmlndXJhYmxlLFxuICAgIH0gPSBsb2NrU2V0dGluZ3NQcm9wcztcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBkaXNhYmxlQ2FtLFxuICAgICAgZGlzYWJsZU1pYyxcbiAgICAgIGRpc2FibGVQcml2Q2hhdCxcbiAgICAgIGRpc2FibGVQdWJDaGF0LFxuICAgICAgZGlzYWJsZU5vdGUsXG4gICAgICBoaWRlVXNlckxpc3QsXG4gICAgICBsb2NrZWRMYXlvdXQsXG4gICAgICBsb2NrT25Kb2luLFxuICAgICAgbG9ja09uSm9pbkNvbmZpZ3VyYWJsZSxcbiAgICAgIHNldEJ5OiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB0b2dnbGVMb2NrU2V0dGluZ3MgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IFJlY29yZE1lZXRpbmdzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvZ2dsZVJlY29yZGluZygpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgUk9MRV9NT0RFUkFUT1IgPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLnVzZXIucm9sZV9tb2RlcmF0b3I7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnU2V0UmVjb3JkaW5nU3RhdHVzQ21kTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgbGV0IG1lZXRpbmdSZWNvcmRlZDtcbiAgICBsZXQgYWxsb3dlZFRvUmVjb3JkO1xuXG4gICAgY29uc3QgcmVjb3JkT2JqZWN0ID0gUmVjb3JkTWVldGluZ3MuZmluZE9uZSh7IG1lZXRpbmdJZCB9KTtcblxuICAgIGlmIChyZWNvcmRPYmplY3QgIT0gbnVsbCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBhbGxvd1N0YXJ0U3RvcFJlY29yZGluZyxcbiAgICAgICAgcmVjb3JkaW5nLFxuICAgICAgICByZWNvcmQsXG4gICAgICB9ID0gcmVjb3JkT2JqZWN0O1xuXG4gICAgICBtZWV0aW5nUmVjb3JkZWQgPSByZWNvcmRpbmc7XG4gICAgICBhbGxvd2VkVG9SZWNvcmQgPSByZWNvcmQgJiYgYWxsb3dTdGFydFN0b3BSZWNvcmRpbmc7IC8vIFRPRE8tLSByZW1vdmUgc29tZSBkYXlcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgcmVjb3JkaW5nOiAhbWVldGluZ1JlY29yZGVkLFxuICAgICAgc2V0Qnk6IHJlcXVlc3RlclVzZXJJZCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICB1c2VySWQ6IHJlcXVlc3RlclVzZXJJZCxcbiAgICB9O1xuICAgIGNvbnN0IHVzZXIgPSBVc2Vycy5maW5kT25lKHNlbGVjdG9yKTtcblxuICAgIGlmIChhbGxvd2VkVG9SZWNvcmQgJiYgISF1c2VyICYmIHVzZXIucm9sZSA9PT0gUk9MRV9NT0RFUkFUT1IpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBTZXR0aW5nIHRoZSByZWNvcmQgcGFyYW1ldGVyIHRvICR7IW1lZXRpbmdSZWNvcmRlZH0gZm9yICR7bWVldGluZ0lkfSBieSAke3JlcXVlc3RlclVzZXJJZH1gKTtcbiAgICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgdG9nZ2xlUmVjb3JkaW5nICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b2dnbGVXZWJjYW1zT25seUZvck1vZGVyYXRvcih3ZWJjYW1zT25seUZvck1vZGVyYXRvcikge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1VwZGF0ZVdlYmNhbXNPbmx5Rm9yTW9kZXJhdG9yQ21kTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHdlYmNhbXNPbmx5Rm9yTW9kZXJhdG9yLCBCb29sZWFuKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICB3ZWJjYW1zT25seUZvck1vZGVyYXRvcixcbiAgICAgIHNldEJ5OiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB0b2dnbGVXZWJjYW1zT25seUZvck1vZGVyYXRvciAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZmVyVXNlcihmcm9tTWVldGluZ0lkLCB0b01lZXRpbmdJZCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1RyYW5zZmVyVXNlclRvTWVldGluZ1JlcXVlc3RNc2cnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgZnJvbU1lZXRpbmdJZCxcbiAgICAgIHRvTWVldGluZ0lkLFxuICAgICAgdXNlcklkOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgfTtcblxuICAgIExvZ2dlci52ZXJib3NlKCdVc2VyIHdhcyB0cmFuc2ZlcnJlZCBmcm9tIG9uZSBtZXRpbmcgdG8gYW5vdGhlcicsIHsgcmVxdWVzdGVyVXNlcklkLCBmcm9tTWVldGluZ0lkLCB0b01lZXRpbmdJZCB9KTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB0cmFuc2ZlclVzZXIgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBmbGF0IGZyb20gJ2ZsYXQnO1xuaW1wb3J0IHtcbiAgY2hlY2ssXG4gIE1hdGNoLFxufSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFNhbml0aXplSFRNTCBmcm9tICdzYW5pdGl6ZS1odG1sJztcbmltcG9ydCBNZWV0aW5ncywgeyBSZWNvcmRNZWV0aW5ncyB9IGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBpbml0UGFkcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2V0aGVycGFkJztcbmltcG9ydCB7IGFkZEFubm90YXRpb25zU3RyZWFtZXIgfSBmcm9tICcvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL3N0cmVhbWVyJztcbmltcG9ydCB7IGFkZEN1cnNvclN0cmVhbWVyIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2N1cnNvci9zZXJ2ZXIvc3RyZWFtZXInO1xuaW1wb3J0IHsgYWRkRXh0ZXJuYWxWaWRlb1N0cmVhbWVyIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2V4dGVybmFsLXZpZGVvcy9zZXJ2ZXIvc3RyZWFtZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNZWV0aW5nKG1lZXRpbmcpIHtcbiAgY29uc3QgbWVldGluZ0lkID0gbWVldGluZy5tZWV0aW5nUHJvcC5pbnRJZDtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKG1lZXRpbmcsIHtcbiAgICBicmVha291dFByb3BzOiB7XG4gICAgICBzZXF1ZW5jZTogTnVtYmVyLFxuICAgICAgZnJlZUpvaW46IEJvb2xlYW4sXG4gICAgICBicmVha291dFJvb21zOiBBcnJheSxcbiAgICAgIHBhcmVudElkOiBTdHJpbmcsXG4gICAgICBlbmFibGVkOiBCb29sZWFuLFxuICAgICAgcmVjb3JkOiBCb29sZWFuLFxuICAgICAgcHJpdmF0ZUNoYXRFbmFibGVkOiBCb29sZWFuLFxuICAgIH0sXG4gICAgbWVldGluZ1Byb3A6IHtcbiAgICAgIGludElkOiBTdHJpbmcsXG4gICAgICBleHRJZDogU3RyaW5nLFxuICAgICAgaXNCcmVha291dDogQm9vbGVhbixcbiAgICAgIG5hbWU6IFN0cmluZyxcbiAgICB9LFxuICAgIHVzZXJzUHJvcDoge1xuICAgICAgd2ViY2Ftc09ubHlGb3JNb2RlcmF0b3I6IEJvb2xlYW4sXG4gICAgICBndWVzdFBvbGljeTogU3RyaW5nLFxuICAgICAgYXV0aGVudGljYXRlZEd1ZXN0OiBCb29sZWFuLFxuICAgICAgbWF4VXNlcnM6IE51bWJlcixcbiAgICAgIGFsbG93TW9kc1RvVW5tdXRlVXNlcnM6IEJvb2xlYW4sXG4gICAgfSxcbiAgICBkdXJhdGlvblByb3BzOiB7XG4gICAgICBjcmVhdGVkVGltZTogTnVtYmVyLFxuICAgICAgZHVyYXRpb246IE51bWJlcixcbiAgICAgIGNyZWF0ZWREYXRlOiBTdHJpbmcsXG4gICAgICBtZWV0aW5nRXhwaXJlSWZOb1VzZXJKb2luZWRJbk1pbnV0ZXM6IE51bWJlcixcbiAgICAgIG1lZXRpbmdFeHBpcmVXaGVuTGFzdFVzZXJMZWZ0SW5NaW51dGVzOiBOdW1iZXIsXG4gICAgICB1c2VySW5hY3Rpdml0eUluc3BlY3RUaW1lckluTWludXRlczogTnVtYmVyLFxuICAgICAgdXNlckluYWN0aXZpdHlUaHJlc2hvbGRJbk1pbnV0ZXM6IE51bWJlcixcbiAgICAgIHVzZXJBY3Rpdml0eVNpZ25SZXNwb25zZURlbGF5SW5NaW51dGVzOiBOdW1iZXIsXG4gICAgICBlbmRXaGVuTm9Nb2RlcmF0b3I6IEJvb2xlYW4sXG4gICAgICBlbmRXaGVuTm9Nb2RlcmF0b3JEZWxheUluTWludXRlczogTnVtYmVyLFxuICAgICAgdGltZVJlbWFpbmluZzogTnVtYmVyLFxuICAgIH0sXG4gICAgd2VsY29tZVByb3A6IHtcbiAgICAgIHdlbGNvbWVNc2c6IFN0cmluZyxcbiAgICAgIG1vZE9ubHlNZXNzYWdlOiBTdHJpbmcsXG4gICAgICB3ZWxjb21lTXNnVGVtcGxhdGU6IFN0cmluZyxcbiAgICB9LFxuICAgIHJlY29yZFByb3A6IE1hdGNoLk9iamVjdEluY2x1ZGluZyh7XG4gICAgICBhbGxvd1N0YXJ0U3RvcFJlY29yZGluZzogQm9vbGVhbixcbiAgICAgIGF1dG9TdGFydFJlY29yZGluZzogQm9vbGVhbixcbiAgICAgIHJlY29yZDogQm9vbGVhbixcbiAgICB9KSxcbiAgICBwYXNzd29yZDoge1xuICAgICAgdmlld2VyUGFzczogU3RyaW5nLFxuICAgICAgbW9kZXJhdG9yUGFzczogU3RyaW5nLFxuICAgIH0sXG4gICAgdm9pY2VQcm9wOiB7XG4gICAgICB2b2ljZUNvbmY6IFN0cmluZyxcbiAgICAgIGRpYWxOdW1iZXI6IFN0cmluZyxcbiAgICAgIHRlbFZvaWNlOiBTdHJpbmcsXG4gICAgICBtdXRlT25TdGFydDogQm9vbGVhbixcbiAgICB9LFxuICAgIHNjcmVlbnNoYXJlUHJvcHM6IHtcbiAgICAgIHJlZDVTY3JlZW5zaGFyZUlwOiBTdHJpbmcsXG4gICAgICByZWQ1U2NyZWVuc2hhcmVBcHA6IFN0cmluZyxcbiAgICAgIHNjcmVlbnNoYXJlQ29uZjogU3RyaW5nLFxuICAgIH0sXG4gICAgbWV0YWRhdGFQcm9wOiBPYmplY3QsXG4gICAgbG9ja1NldHRpbmdzUHJvcHM6IHtcbiAgICAgIGRpc2FibGVDYW06IEJvb2xlYW4sXG4gICAgICBkaXNhYmxlTWljOiBCb29sZWFuLFxuICAgICAgZGlzYWJsZVByaXZhdGVDaGF0OiBCb29sZWFuLFxuICAgICAgZGlzYWJsZVB1YmxpY0NoYXQ6IEJvb2xlYW4sXG4gICAgICBkaXNhYmxlTm90ZTogQm9vbGVhbixcbiAgICAgIGhpZGVVc2VyTGlzdDogQm9vbGVhbixcbiAgICAgIGxvY2tPbkpvaW46IEJvb2xlYW4sXG4gICAgICBsb2NrT25Kb2luQ29uZmlndXJhYmxlOiBCb29sZWFuLFxuICAgICAgbG9ja2VkTGF5b3V0OiBCb29sZWFuLFxuICAgIH0sXG4gICAgc3lzdGVtUHJvcHM6IHtcbiAgICAgIGh0bWw1SW5zdGFuY2VJZDogTnVtYmVyLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICByZWNvcmRQcm9wLFxuICAgIC4uLnJlc3RQcm9wc1xuICB9ID0gbWVldGluZztcblxuICBjb25zdCBuZXdNZWV0aW5nID0gcmVzdFByb3BzO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBuZXdNZWV0aW5nLmxvY2tTZXR0aW5nc1Byb3BzID0gT2JqZWN0LmFzc2lnbihtZWV0aW5nLmxvY2tTZXR0aW5nc1Byb3BzLCB7IHNldEJ5OiAndGVtcCcgfSk7XG5cbiAgY29uc3QgbWVldGluZ0VuZGVkID0gZmFsc2U7XG5cbiAgbGV0IHsgd2VsY29tZU1zZyB9ID0gbmV3TWVldGluZy53ZWxjb21lUHJvcDtcblxuICBjb25zdCBzYW5pdGl6ZVRleHRJbkNoYXQgPSBvcmlnaW5hbCA9PiBTYW5pdGl6ZUhUTUwob3JpZ2luYWwsIHtcbiAgICBhbGxvd2VkVGFnczogWydhJywgJ2InLCAnYnInLCAnaScsICdpbWcnLCAnbGknLCAnc21hbGwnLCAnc3BhbicsICdzdHJvbmcnLCAndScsICd1bCddLFxuICAgIGFsbG93ZWRBdHRyaWJ1dGVzOiB7XG4gICAgICBhOiBbJ2hyZWYnLCAnbmFtZScsICd0YXJnZXQnXSxcbiAgICAgIGltZzogWydzcmMnLCAnd2lkdGgnLCAnaGVpZ2h0J10sXG4gICAgfSxcbiAgICBhbGxvd2VkU2NoZW1lczogWydodHRwcyddLFxuICB9KTtcblxuICBjb25zdCBzYW5pdGl6ZWRXZWxjb21lVGV4dCA9IHNhbml0aXplVGV4dEluQ2hhdCh3ZWxjb21lTXNnKTtcbiAgd2VsY29tZU1zZyA9IHNhbml0aXplZFdlbGNvbWVUZXh0LnJlcGxhY2UoXG4gICAgJ2hyZWY9XCJldmVudDonLFxuICAgICdocmVmPVwiJyxcbiAgKTtcblxuICBjb25zdCBpbnNlcnRCbGFua1RhcmdldCA9IChzLCBpKSA9PiBgJHtzLnN1YnN0cigwLCBpKX0gdGFyZ2V0PVwiX2JsYW5rXCIke3Muc3Vic3RyKGkpfWA7XG4gIGNvbnN0IGxpbmtXaXRob3V0VGFyZ2V0ID0gbmV3IFJlZ0V4cCgnPGEgaHJlZj1cIiguKj8pXCI+JywgJ2cnKTtcbiAgbGlua1dpdGhvdXRUYXJnZXQudGVzdCh3ZWxjb21lTXNnKTtcblxuICBpZiAobGlua1dpdGhvdXRUYXJnZXQubGFzdEluZGV4ID4gMCkge1xuICAgIHdlbGNvbWVNc2cgPSBpbnNlcnRCbGFua1RhcmdldChcbiAgICAgIHdlbGNvbWVNc2csXG4gICAgICBsaW5rV2l0aG91dFRhcmdldC5sYXN0SW5kZXggLSAxLFxuICAgICk7XG4gIH1cblxuICBuZXdNZWV0aW5nLndlbGNvbWVQcm9wLndlbGNvbWVNc2cgPSB3ZWxjb21lTXNnO1xuXG4gIC8vIG5vdGU6IGFzIG9mIEp1bHkgMjAyMCBgbW9kT25seU1lc3NhZ2VgIGlzIG5vdCBwdWJsaXNoZWQgdG8gdGhlIGNsaWVudCBzaWRlLlxuICAvLyBXZSBhcmUgc2FuaXRpemluZyB0aGlzIGRhdGEgc2ltcGx5IHRvIHByZXZlbnQgZnV0dXJlIHBvdGVudGlhbCB1c2FnZVxuICAvLyBBdCB0aGUgbW9tZW50IGBtb2RPbmx5TWVzc2FnZWAgaXMgb2J0YWluZWQgZnJvbSBjbGllbnQgc2lkZSBhcyBhIHJlc3BvbnNlIHRvIEVudGVyIEFQSVxuICBuZXdNZWV0aW5nLndlbGNvbWVQcm9wLm1vZE9ubHlNZXNzYWdlID0gc2FuaXRpemVUZXh0SW5DaGF0KG5ld01lZXRpbmcud2VsY29tZVByb3AubW9kT25seU1lc3NhZ2UpO1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgbWVldGluZ0VuZGVkLFxuICAgICAgcHVibGlzaGVkUG9sbDogZmFsc2UsXG4gICAgICBndWVzdExvYmJ5TWVzc2FnZTogJycsXG4gICAgICByYW5kb21seVNlbGVjdGVkVXNlcjogW10sXG4gICAgfSwgZmxhdChuZXdNZWV0aW5nLCB7XG4gICAgICBzYWZlOiB0cnVlLFxuICAgIH0pKSxcbiAgfTtcblxuICBpZiAoIXByb2Nlc3MuZW52LkJCQl9IVE1MNV9ST0xFIHx8IHByb2Nlc3MuZW52LkJCQl9IVE1MNV9ST0xFID09PSAnZnJvbnRlbmQnKSB7XG4gICAgYWRkQW5ub3RhdGlvbnNTdHJlYW1lcihtZWV0aW5nSWQpO1xuICAgIGFkZEN1cnNvclN0cmVhbWVyKG1lZXRpbmdJZCk7XG4gICAgYWRkRXh0ZXJuYWxWaWRlb1N0cmVhbWVyKG1lZXRpbmdJZCk7XG5cbiAgICAvLyB3ZSBkb24ndCB3YW50IHRvIGZ1bGx5IHByb2Nlc3MgdGhlIGNyZWF0ZSBtZWV0aW5nIG1lc3NhZ2UgaW4gZnJvbnRlbmQgc2luY2UgaXQgY2FuIGxlYWQgdG8gZHVwbGljYXRpb24gb2YgbWVldGluZ3MgaW4gbW9uZ28uXG4gICAgaWYgKHByb2Nlc3MuZW52LkJCQl9IVE1MNV9ST0xFID09PSAnZnJvbnRlbmQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGluc2VydGVkSWQsIG51bWJlckFmZmVjdGVkIH0gPSBSZWNvcmRNZWV0aW5ncy51cHNlcnQoc2VsZWN0b3IsIHsgbWVldGluZ0lkLCAuLi5yZWNvcmRQcm9wIH0pO1xuXG4gICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBBZGRlZCByZWNvcmQgcHJvcCBpZD0ke21lZXRpbmdJZH1gKTtcbiAgICB9IGVsc2UgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBzZXJ0ZWQgcmVjb3JkIHByb3AgaWQ9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFkZGluZyByZWNvcmQgcHJvcCB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkLCBudW1iZXJBZmZlY3RlZCB9ID0gTWVldGluZ3MudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIG1lZXRpbmcgaWQ9JHttZWV0aW5nSWR9YCk7XG5cbiAgICAgIGNvbnN0IHsgaHRtbDVJbnN0YW5jZUlkIH0gPSBtZWV0aW5nLnN5c3RlbVByb3BzO1xuICAgICAgaW5pdFBhZHMobWVldGluZ0lkLCBodG1sNUluc3RhbmNlSWQpO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBVcHNlcnRlZCBtZWV0aW5nIGlkPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBZGRpbmcgbWVldGluZyB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IE1lZXRpbmdzIGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYW5nZUxvY2tTZXR0aW5ncyhtZWV0aW5nSWQsIHBheWxvYWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwYXlsb2FkLCB7XG4gICAgZGlzYWJsZUNhbTogQm9vbGVhbixcbiAgICBkaXNhYmxlTWljOiBCb29sZWFuLFxuICAgIGRpc2FibGVQcml2Q2hhdDogQm9vbGVhbixcbiAgICBkaXNhYmxlUHViQ2hhdDogQm9vbGVhbixcbiAgICBkaXNhYmxlTm90ZTogQm9vbGVhbixcbiAgICBoaWRlVXNlckxpc3Q6IEJvb2xlYW4sXG4gICAgbG9ja2VkTGF5b3V0OiBCb29sZWFuLFxuICAgIGxvY2tPbkpvaW46IEJvb2xlYW4sXG4gICAgbG9ja09uSm9pbkNvbmZpZ3VyYWJsZTogQm9vbGVhbixcbiAgICBzZXRCeTogTWF0Y2guTWF5YmUoU3RyaW5nKSxcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGRpc2FibGVDYW0sXG4gICAgZGlzYWJsZU1pYyxcbiAgICBkaXNhYmxlUHJpdkNoYXQsXG4gICAgZGlzYWJsZVB1YkNoYXQsXG4gICAgZGlzYWJsZU5vdGUsXG4gICAgaGlkZVVzZXJMaXN0LFxuICAgIGxvY2tlZExheW91dCxcbiAgICBsb2NrT25Kb2luLFxuICAgIGxvY2tPbkpvaW5Db25maWd1cmFibGUsXG4gICAgc2V0QnksXG4gIH0gPSBwYXlsb2FkO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBsb2NrU2V0dGluZ3NQcm9wczoge1xuICAgICAgICBkaXNhYmxlQ2FtLFxuICAgICAgICBkaXNhYmxlTWljLFxuICAgICAgICBkaXNhYmxlUHJpdmF0ZUNoYXQ6IGRpc2FibGVQcml2Q2hhdCxcbiAgICAgICAgZGlzYWJsZVB1YmxpY0NoYXQ6IGRpc2FibGVQdWJDaGF0LFxuICAgICAgICBkaXNhYmxlTm90ZSxcbiAgICAgICAgaGlkZVVzZXJMaXN0LFxuICAgICAgICBsb2NrZWRMYXlvdXQsXG4gICAgICAgIGxvY2tPbkpvaW4sXG4gICAgICAgIGxvY2tPbkpvaW5Db25maWd1cmFibGUsXG4gICAgICAgIHNldEJ5LFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG51bWJlckFmZmVjdGVkIH0gPSBNZWV0aW5ncy51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYENoYW5nZWQgbWVldGluZz17JHttZWV0aW5nSWR9fSB1cGRhdGVkIGxvY2sgc2V0dGluZ3NgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmluZm8oYG1lZXRpbmc9eyR7bWVldGluZ0lkfX0gbG9jayBzZXR0aW5ncyB3ZXJlIG5vdCB1cGRhdGVkYCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYENoYW5naW5nIG1lZXRpbmc9eyR7bWVldGluZ0lkfX0gbG9jayBzZXR0aW5nczogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaGFuZ2VVc2VyTG9jayhtZWV0aW5nSWQsIHBheWxvYWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwYXlsb2FkLCB7XG4gICAgdXNlcklkOiBTdHJpbmcsXG4gICAgbG9ja2VkOiBCb29sZWFuLFxuICAgIGxvY2tlZEJ5OiBTdHJpbmcsXG4gIH0pO1xuXG4gIGNvbnN0IHsgdXNlcklkLCBsb2NrZWQsIGxvY2tlZEJ5IH0gPSBwYXlsb2FkO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB1c2VySWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgbG9ja2VkLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG51bWJlckFmZmVjdGVkIH0gPSBVc2Vycy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVzZXIncyB1c2VySWQ9JHt1c2VySWR9IGxvY2sgc3RhdHVzIHdhcyBjaGFuZ2VkIHRvOiAke2xvY2tlZH0gYnkgdXNlciB1c2VySWQ9JHtsb2NrZWRCeX1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmluZm8oYFVzZXIncyB1c2VySWQ9JHt1c2VySWR9IGxvY2sgc3RhdHVzIHdhc24ndCB1cGRhdGVkYCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYENoYW5naW5nIHVzZXIgbG9jayBzZXR0aW5nOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWVldGluZ1RpbWVSZW1haW5pbmcgfSBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhck1lZXRpbmdUaW1lUmVtYWluaW5nKG1lZXRpbmdJZCkge1xuICBpZiAobWVldGluZ0lkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gTWVldGluZ1RpbWVSZW1haW5pbmcucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgTWVldGluZ1RpbWVSZW1haW5pbmcgaW4gKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBFcnJvciBvbiBjbGVhcmluZyBNZWV0aW5nVGltZVJlbWFpbmluZyBpbiAoJHttZWV0aW5nSWR9KS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IE1lZXRpbmdUaW1lUmVtYWluaW5nLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBNZWV0aW5nVGltZVJlbWFpbmluZyBpbiBhbGwgbWVldGluZ3MnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgTWVldGluZ1RpbWVSZW1haW5pbmcgaW4gYWxsIG1lZXRpbmdzLiAke2Vycn1gKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFJlY29yZE1lZXRpbmdzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVldGluZ0hhc0VuZGVkKG1lZXRpbmdJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gUmVjb3JkTWVldGluZ3MucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCByZWNvcmQgcHJvcCBmcm9tIG1lZXRpbmcgd2l0aCBpZCAke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgcmVjb3JkIHByb3AgZnJvbSBtZWV0aW5nIHdpdGggaWQgJHttZWV0aW5nSWR9LiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IE1lZXRpbmdzIGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmltcG9ydCB7IHJlbW92ZUFubm90YXRpb25zU3RyZWFtZXIgfSBmcm9tICcvaW1wb3J0cy9hcGkvYW5ub3RhdGlvbnMvc2VydmVyL3N0cmVhbWVyJztcbmltcG9ydCB7IHJlbW92ZUN1cnNvclN0cmVhbWVyIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2N1cnNvci9zZXJ2ZXIvc3RyZWFtZXInO1xuaW1wb3J0IHsgcmVtb3ZlRXh0ZXJuYWxWaWRlb1N0cmVhbWVyIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2V4dGVybmFsLXZpZGVvcy9zZXJ2ZXIvc3RyZWFtZXInO1xuXG5pbXBvcnQgY2xlYXJVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL21vZGlmaWVycy9jbGVhclVzZXJzJztcbmltcG9ydCBjbGVhclVzZXJzU2V0dGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzLXNldHRpbmdzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJVc2Vyc1NldHRpbmdzJztcbmltcG9ydCBjbGVhckdyb3VwQ2hhdCBmcm9tICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyR3JvdXBDaGF0JztcbmltcG9ydCBjbGVhckd1ZXN0VXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL2d1ZXN0LXVzZXJzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJHdWVzdFVzZXJzJztcbmltcG9ydCBjbGVhckJyZWFrb3V0cyBmcm9tICcvaW1wb3J0cy9hcGkvYnJlYWtvdXRzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJCcmVha291dHMnO1xuaW1wb3J0IGNsZWFyQW5ub3RhdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zL3NlcnZlci9tb2RpZmllcnMvY2xlYXJBbm5vdGF0aW9ucyc7XG5pbXBvcnQgY2xlYXJTbGlkZXMgZnJvbSAnL2ltcG9ydHMvYXBpL3NsaWRlcy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyU2xpZGVzJztcbmltcG9ydCBjbGVhclBvbGxzIGZyb20gJy9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyUG9sbHMnO1xuaW1wb3J0IGNsZWFyQ2FwdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tb2RpZmllcnMvY2xlYXJDYXB0aW9ucyc7XG5pbXBvcnQgY2xlYXJQcmVzZW50YXRpb25Qb2RzIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyUHJlc2VudGF0aW9uUG9kcyc7XG5pbXBvcnQgY2xlYXJWb2ljZVVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS92b2ljZS11c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyVm9pY2VVc2Vycyc7XG5pbXBvcnQgY2xlYXJVc2VySW5mbyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMtaW5mb3Mvc2VydmVyL21vZGlmaWVycy9jbGVhclVzZXJJbmZvJztcbmltcG9ydCBjbGVhckNvbm5lY3Rpb25TdGF0dXMgZnJvbSAnL2ltcG9ydHMvYXBpL2Nvbm5lY3Rpb24tc3RhdHVzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJDb25uZWN0aW9uU3RhdHVzJztcbmltcG9ydCBjbGVhclNjcmVlbnNoYXJlIGZyb20gJy9pbXBvcnRzL2FwaS9zY3JlZW5zaGFyZS9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyU2NyZWVuc2hhcmUnO1xuaW1wb3J0IGNsZWFyTm90ZSBmcm9tICcvaW1wb3J0cy9hcGkvbm90ZS9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyTm90ZSc7XG5pbXBvcnQgY2xlYXJOZXR3b3JrSW5mb3JtYXRpb24gZnJvbSAnL2ltcG9ydHMvYXBpL25ldHdvcmstaW5mb3JtYXRpb24vc2VydmVyL21vZGlmaWVycy9jbGVhck5ldHdvcmtJbmZvcm1hdGlvbic7XG5pbXBvcnQgY2xlYXJNZWV0aW5nVGltZVJlbWFpbmluZyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyL21vZGlmaWVycy9jbGVhck1lZXRpbmdUaW1lUmVtYWluaW5nJztcbmltcG9ydCBjbGVhckxvY2FsU2V0dGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzL3NlcnZlci9tb2RpZmllcnMvY2xlYXJMb2NhbFNldHRpbmdzJztcbmltcG9ydCBjbGVhclJlY29yZE1lZXRpbmcgZnJvbSAnLi9jbGVhclJlY29yZE1lZXRpbmcnO1xuaW1wb3J0IGNsZWFyVm9pY2VDYWxsU3RhdGVzIGZyb20gJy9pbXBvcnRzL2FwaS92b2ljZS1jYWxsLXN0YXRlcy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyVm9pY2VDYWxsU3RhdGVzJztcbmltcG9ydCBjbGVhclZpZGVvU3RyZWFtcyBmcm9tICcvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyVmlkZW9TdHJlYW1zJztcbmltcG9ydCBjbGVhckF1dGhUb2tlblZhbGlkYXRpb24gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbi9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyQXV0aFRva2VuVmFsaWRhdGlvbic7XG5pbXBvcnQgY2xlYXJVc2Vyc1BlcnNpc3RlbnREYXRhIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1wZXJzaXN0ZW50LWRhdGEvc2VydmVyL21vZGlmaWVycy9jbGVhclVzZXJzUGVyc2lzdGVudERhdGEnO1xuXG5pbXBvcnQgY2xlYXJXaGl0ZWJvYXJkTXVsdGlVc2VyIGZyb20gJy9pbXBvcnRzL2FwaS93aGl0ZWJvYXJkLW11bHRpLXVzZXIvc2VydmVyL21vZGlmaWVycy9jbGVhcldoaXRlYm9hcmRNdWx0aVVzZXInO1xuaW1wb3J0IE1ldHJpY3MgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbWV0cmljcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lZXRpbmdIYXNFbmRlZChtZWV0aW5nSWQpIHtcbiAgaWYgKCFwcm9jZXNzLmVudi5CQkJfSFRNTDVfUk9MRSB8fCBwcm9jZXNzLmVudi5CQkJfSFRNTDVfUk9MRSA9PT0gJ2Zyb250ZW5kJykge1xuICAgIHJlbW92ZUFubm90YXRpb25zU3RyZWFtZXIobWVldGluZ0lkKTtcbiAgICByZW1vdmVDdXJzb3JTdHJlYW1lcihtZWV0aW5nSWQpO1xuICAgIHJlbW92ZUV4dGVybmFsVmlkZW9TdHJlYW1lcihtZWV0aW5nSWQpO1xuICB9XG5cbiAgcmV0dXJuIE1lZXRpbmdzLnJlbW92ZSh7IG1lZXRpbmdJZCB9LCAoKSA9PiB7XG4gICAgY2xlYXJDYXB0aW9ucyhtZWV0aW5nSWQpO1xuICAgIGNsZWFyR3JvdXBDaGF0KG1lZXRpbmdJZCk7XG4gICAgY2xlYXJHdWVzdFVzZXJzKG1lZXRpbmdJZCk7XG4gICAgY2xlYXJQcmVzZW50YXRpb25Qb2RzKG1lZXRpbmdJZCk7XG4gICAgY2xlYXJCcmVha291dHMobWVldGluZ0lkKTtcbiAgICBjbGVhclBvbGxzKG1lZXRpbmdJZCk7XG4gICAgY2xlYXJBbm5vdGF0aW9ucyhtZWV0aW5nSWQpO1xuICAgIGNsZWFyU2xpZGVzKG1lZXRpbmdJZCk7XG4gICAgY2xlYXJVc2VycyhtZWV0aW5nSWQpO1xuICAgIGNsZWFyVXNlcnNTZXR0aW5ncyhtZWV0aW5nSWQpO1xuICAgIGNsZWFyVm9pY2VVc2VycyhtZWV0aW5nSWQpO1xuICAgIGNsZWFyVXNlckluZm8obWVldGluZ0lkKTtcbiAgICBjbGVhckNvbm5lY3Rpb25TdGF0dXMobWVldGluZ0lkKTtcbiAgICBjbGVhck5vdGUobWVldGluZ0lkKTtcbiAgICBjbGVhck5ldHdvcmtJbmZvcm1hdGlvbihtZWV0aW5nSWQpO1xuICAgIGNsZWFyTG9jYWxTZXR0aW5ncyhtZWV0aW5nSWQpO1xuICAgIGNsZWFyTWVldGluZ1RpbWVSZW1haW5pbmcobWVldGluZ0lkKTtcbiAgICBjbGVhclJlY29yZE1lZXRpbmcobWVldGluZ0lkKTtcbiAgICBjbGVhclZvaWNlQ2FsbFN0YXRlcyhtZWV0aW5nSWQpO1xuICAgIGNsZWFyVmlkZW9TdHJlYW1zKG1lZXRpbmdJZCk7XG4gICAgY2xlYXJBdXRoVG9rZW5WYWxpZGF0aW9uKG1lZXRpbmdJZCk7XG4gICAgY2xlYXJXaGl0ZWJvYXJkTXVsdGlVc2VyKG1lZXRpbmdJZCk7XG4gICAgY2xlYXJTY3JlZW5zaGFyZShtZWV0aW5nSWQpO1xuICAgIGNsZWFyVXNlcnNQZXJzaXN0ZW50RGF0YShtZWV0aW5nSWQpO1xuICAgIE1ldHJpY3MucmVtb3ZlTWVldGluZyhtZWV0aW5nSWQpO1xuXG4gICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgTWVldGluZ3Mgd2l0aCBpZCAke21lZXRpbmdJZH1gKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0R3Vlc3RMb2JieU1lc3NhZ2UobWVldGluZ0lkLCBndWVzdExvYmJ5TWVzc2FnZSkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKGd1ZXN0TG9iYnlNZXNzYWdlLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBndWVzdExvYmJ5TWVzc2FnZSxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gTWVldGluZ3MudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci52ZXJib3NlKGBTZXQgZ3Vlc3QgbG9iYnkgbWVzc2FnZSBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9IGd1ZXN0TG9iYnlNZXNzYWdlPSR7Z3Vlc3RMb2JieU1lc3NhZ2V9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFNldHRpbmcgZ3Vlc3QgbG9iYnkgbWVzc2FnZTogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRHdWVzdFBvbGljeShtZWV0aW5nSWQsIGd1ZXN0UG9saWN5KSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2soZ3Vlc3RQb2xpY3ksIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgICd1c2Vyc1Byb3AuZ3Vlc3RQb2xpY3knOiBndWVzdFBvbGljeSxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gTWVldGluZ3MudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci52ZXJib3NlKGBTZXQgZ3Vlc3QgcG9saWN5IG1lZXRpbmdJZD0ke21lZXRpbmdJZH0gZ3Vlc3RQb2xpY3k9JHtndWVzdFBvbGljeX1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgU2V0dGluZyBndWVzdCBwb2xpY3k6ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UHVibGlzaGVkUG9sbChtZWV0aW5nSWQsIGlzUHVibGlzaGVkKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2soaXNQdWJsaXNoZWQsIEJvb2xlYW4pO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBwdWJsaXNoZWRQb2xsOiBpc1B1Ymxpc2hlZCxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gTWVldGluZ3MudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBTZXQgcHVibGlzaGVkUG9sbD0ke2lzUHVibGlzaGVkfSBpbiBtZWVpdGluZ0lkPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBTZXR0aW5nIHB1Ymxpc2hlZFBvbGw9JHtpc1B1Ymxpc2hlZH0gZm9yIG1lZXRpbmdJZD0ke21lZXRpbmdJZH1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IE1lZXRpbmdzIGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVJhbmRvbVVzZXIobWVldGluZ0lkLCB1c2VySWRzLCBjaG9pY2UsIHJlcXVlc3RlcklkKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkcywgQXJyYXkpO1xuICBjaGVjayhjaG9pY2UsIE51bWJlcik7XG4gIGNoZWNrKHJlcXVlc3RlcklkLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBjb25zdCB1c2VyTGlzdCA9IFtdO1xuICBpZiAoY2hvaWNlIDwgMCkgeyAvLyBubyB2aWV3ZXJcbiAgICB1c2VyTGlzdC5wdXNoKFtyZXF1ZXN0ZXJJZCwwXSk7XG4gIH0gZWxzZSBpZiAodXNlcklkcy5sZW5ndGggPT0gMSkge1xuICAgIHVzZXJMaXN0LnB1c2goW3VzZXJJZHNbMF0sMF0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGludGVydmFscyA9IFswLCAyMDAsIDQ1MCwgNzUwLCAxMTAwLCAxNTAwXTtcbiAgICB3aGlsZSAoaW50ZXJ2YWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXJJZHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdXNlcklkcy5sZW5ndGggKV07XG4gICAgICBpZiAodXNlckxpc3QubGVuZ3RoICE9IDAgJiYgdXNlckxpc3RbdXNlckxpc3QubGVuZ3RoLTFdWzBdID09IHVzZXJJZCkgey8vIHByZXZlbnQgc2FtZSB2aWV3ZXIgZnJvbSBiZWluZyBzZWxlY3RlZCBzZXF1ZW50aWFsbHlcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB1c2VyTGlzdC5wdXNoKFt1c2VySWQsIGludGVydmFscy5zaGlmdCgpXSk7XG4gICAgfVxuICAgIHVzZXJMaXN0W3VzZXJMaXN0Lmxlbmd0aC0xXVswXSA9IHVzZXJJZHNbY2hvaWNlXTsgLy8gbGFzdCBvbmUgc2hvdWxkIGJlIGNob3NlbiBpbiBha2thLWFwcFxuICB9XG5cbiAgaWYgKHVzZXJJZHMubGVuZ3RoID09IDIpIHtcbiAgICAvLyBJIGRvbid0IGxpa2UgdGhpcy4uIFdoZW4gdGhlIHVzZXJMaXN0IGlzIHNhbWUgYXMgcHJldmlvdXMgb25lLCB3ZSBuZWVkIHRvIGNoYW5nZSBpdCBhIGJpdCB0byBtYWtlIHN1cmUgdGhhdCBjbGllbnRzIGRvZXMgbm90IHNraXAgdGhlIGNoYW5nZSBpbiBNb25nb0RCXG4gICAgY29uc3QgcHJldmlvdXNNZWV0aW5nID0gTWVldGluZ3MuZmluZE9uZShzZWxlY3RvciwgeyBmaWVsZHM6IHtyYW5kb21seVNlbGVjdGVkVXNlcjoxfX0pO1xuICAgIGlmIChwcmV2aW91c01lZXRpbmcucmFuZG9tbHlTZWxlY3RlZFVzZXIubGVuZ3RoICE9IDAgJiYgdXNlckxpc3RbMF1bMF0gPT0gcHJldmlvdXNNZWV0aW5nLnJhbmRvbWx5U2VsZWN0ZWRVc2VyWzBdWzBdKSB7XG4gICAgICB1c2VyTGlzdFswXVswXSA9IHVzZXJMaXN0WzFdWzBdO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIHJhbmRvbWx5U2VsZWN0ZWRVc2VyOiB1c2VyTGlzdCxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkIH0gPSBNZWV0aW5ncy51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFNldCByYW5kb21seSBzZWxlY3RlZCB1c2VySWQgYW5kIGludGVydmFsID0gJHt1c2VyTGlzdH0gYnkgcmVxdWVzdGVySWQ9JHtyZXF1ZXN0ZXJJZH0gaW4gbWVlaXRpbmdJZD0ke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgU2V0dGluZyByYW5kb21seSBzZWxlY3RlZCB1c2VySWQgYW5kIGludGVydmFsID0gJHt1c2VyTGlzdH0gYnkgcmVxdWVzdGVySWQ9JHtyZXF1ZXN0ZXJJZH0gaW4gbWVldGluZ0lkPSR7bWVldGluZ0lkfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hhbmdlV2ViY2FtT25seU1vZGVyYXRvcihtZWV0aW5nSWQsIHBheWxvYWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwYXlsb2FkLCB7XG4gICAgd2ViY2Ftc09ubHlGb3JNb2RlcmF0b3I6IEJvb2xlYW4sXG4gICAgc2V0Qnk6IFN0cmluZyxcbiAgfSk7XG4gIGNvbnN0IHsgd2ViY2Ftc09ubHlGb3JNb2RlcmF0b3IgfSA9IHBheWxvYWQ7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgICd1c2Vyc1Byb3Aud2ViY2Ftc09ubHlGb3JNb2RlcmF0b3InOiB3ZWJjYW1zT25seUZvck1vZGVyYXRvcixcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gTWVldGluZ3MudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBDaGFuZ2VkIG1lZXRpbmc9eyR7bWVldGluZ0lkfX0gdXBkYXRlZCB3ZWJjYW0gT25seSBmb3IgTW9kZXJhdG9yYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIExvZ2dlci5pbmZvKGBtZWV0aW5nPXske21lZXRpbmdJZH19IHdlYmNhbSBPbmx5IGZvciBNb2RlcmF0b3Igd2VyZSBub3QgdXBkYXRlZGApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBDaGFuZ3dpbmcgbWVldGluZz17JHttZWV0aW5nSWR9fSB3ZWJjYW0gT25seSBmb3IgTW9kZXJhdG9yOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVNZWV0aW5nQ3JlYXRpb24gZnJvbSAnLi9oYW5kbGVycy9tZWV0aW5nQ3JlYXRpb24nO1xuaW1wb3J0IGhhbmRsZUdldEFsbE1lZXRpbmdzIGZyb20gJy4vaGFuZGxlcnMvZ2V0QWxsTWVldGluZ3MnO1xuaW1wb3J0IGhhbmRsZU1lZXRpbmdFbmQgZnJvbSAnLi9oYW5kbGVycy9tZWV0aW5nRW5kJztcbmltcG9ydCBoYW5kbGVNZWV0aW5nRGVzdHJ1Y3Rpb24gZnJvbSAnLi9oYW5kbGVycy9tZWV0aW5nRGVzdHJ1Y3Rpb24nO1xuaW1wb3J0IGhhbmRsZU1lZXRpbmdMb2Nrc0NoYW5nZSBmcm9tICcuL2hhbmRsZXJzL21lZXRpbmdMb2NrQ2hhbmdlJztcbmltcG9ydCBoYW5kbGVHdWVzdFBvbGljeUNoYW5nZWQgZnJvbSAnLi9oYW5kbGVycy9ndWVzdFBvbGljeUNoYW5nZWQnO1xuaW1wb3J0IGhhbmRsZUd1ZXN0TG9iYnlNZXNzYWdlQ2hhbmdlZCBmcm9tICcuL2hhbmRsZXJzL2d1ZXN0TG9iYnlNZXNzYWdlQ2hhbmdlZCc7XG5pbXBvcnQgaGFuZGxlVXNlckxvY2tDaGFuZ2UgZnJvbSAnLi9oYW5kbGVycy91c2VyTG9ja0NoYW5nZSc7XG5pbXBvcnQgaGFuZGxlUmVjb3JkaW5nU3RhdHVzQ2hhbmdlIGZyb20gJy4vaGFuZGxlcnMvcmVjb3JkaW5nU3RhdHVzQ2hhbmdlJztcbmltcG9ydCBoYW5kbGVSZWNvcmRpbmdUaW1lckNoYW5nZSBmcm9tICcuL2hhbmRsZXJzL3JlY29yZGluZ1RpbWVyQ2hhbmdlJztcbmltcG9ydCBoYW5kbGVUaW1lUmVtYWluaW5nVXBkYXRlIGZyb20gJy4vaGFuZGxlcnMvdGltZVJlbWFpbmluZ1VwZGF0ZSc7XG5pbXBvcnQgaGFuZGxlQ2hhbmdlV2ViY2FtT25seU1vZGVyYXRvciBmcm9tICcuL2hhbmRsZXJzL3dlYmNhbU9ubHlNb2RlcmF0b3InO1xuaW1wb3J0IGhhbmRsZVNlbGVjdFJhbmRvbVZpZXdlciBmcm9tICcuL2hhbmRsZXJzL3NlbGVjdFJhbmRvbVZpZXdlcic7XG5cblJlZGlzUHViU3ViLm9uKCdNZWV0aW5nQ3JlYXRlZEV2dE1zZycsIGhhbmRsZU1lZXRpbmdDcmVhdGlvbik7XG5SZWRpc1B1YlN1Yi5vbignU3luY0dldE1lZXRpbmdJbmZvUmVzcE1zZycsIGhhbmRsZUdldEFsbE1lZXRpbmdzKTtcblJlZGlzUHViU3ViLm9uKCdNZWV0aW5nRW5kaW5nRXZ0TXNnJywgaGFuZGxlTWVldGluZ0VuZCk7XG5SZWRpc1B1YlN1Yi5vbignTWVldGluZ0Rlc3Ryb3llZEV2dE1zZycsIGhhbmRsZU1lZXRpbmdEZXN0cnVjdGlvbik7XG5SZWRpc1B1YlN1Yi5vbignTG9ja1NldHRpbmdzSW5NZWV0aW5nQ2hhbmdlZEV2dE1zZycsIGhhbmRsZU1lZXRpbmdMb2Nrc0NoYW5nZSk7XG5SZWRpc1B1YlN1Yi5vbignVXNlckxvY2tlZEluTWVldGluZ0V2dE1zZycsIGhhbmRsZVVzZXJMb2NrQ2hhbmdlKTtcblJlZGlzUHViU3ViLm9uKCdSZWNvcmRpbmdTdGF0dXNDaGFuZ2VkRXZ0TXNnJywgaGFuZGxlUmVjb3JkaW5nU3RhdHVzQ2hhbmdlKTtcblJlZGlzUHViU3ViLm9uKCdVcGRhdGVSZWNvcmRpbmdUaW1lckV2dE1zZycsIGhhbmRsZVJlY29yZGluZ1RpbWVyQ2hhbmdlKTtcblJlZGlzUHViU3ViLm9uKCdXZWJjYW1zT25seUZvck1vZGVyYXRvckNoYW5nZWRFdnRNc2cnLCBoYW5kbGVDaGFuZ2VXZWJjYW1Pbmx5TW9kZXJhdG9yKTtcblJlZGlzUHViU3ViLm9uKCdHZXRMb2NrU2V0dGluZ3NSZXNwTXNnJywgaGFuZGxlTWVldGluZ0xvY2tzQ2hhbmdlKTtcblJlZGlzUHViU3ViLm9uKCdHdWVzdFBvbGljeUNoYW5nZWRFdnRNc2cnLCBoYW5kbGVHdWVzdFBvbGljeUNoYW5nZWQpO1xuUmVkaXNQdWJTdWIub24oJ0d1ZXN0TG9iYnlNZXNzYWdlQ2hhbmdlZEV2dE1zZycsIGhhbmRsZUd1ZXN0TG9iYnlNZXNzYWdlQ2hhbmdlZCk7XG5SZWRpc1B1YlN1Yi5vbignTWVldGluZ1RpbWVSZW1haW5pbmdVcGRhdGVFdnRNc2cnLCBoYW5kbGVUaW1lUmVtYWluaW5nVXBkYXRlKTtcblJlZGlzUHViU3ViLm9uKCdTZWxlY3RSYW5kb21WaWV3ZXJSZXNwTXNnJywgaGFuZGxlU2VsZWN0UmFuZG9tVmlld2VyKTtcbiIsImltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IGVuZE1lZXRpbmcgZnJvbSAnLi9tZXRob2RzL2VuZE1lZXRpbmcnO1xuaW1wb3J0IHRvZ2dsZVJlY29yZGluZyBmcm9tICcuL21ldGhvZHMvdG9nZ2xlUmVjb3JkaW5nJztcbmltcG9ydCB0cmFuc2ZlclVzZXIgZnJvbSAnLi9tZXRob2RzL3RyYW5zZmVyVXNlcic7XG5pbXBvcnQgdG9nZ2xlTG9ja1NldHRpbmdzIGZyb20gJy4vbWV0aG9kcy90b2dnbGVMb2NrU2V0dGluZ3MnO1xuaW1wb3J0IHRvZ2dsZVdlYmNhbXNPbmx5Rm9yTW9kZXJhdG9yIGZyb20gJy4vbWV0aG9kcy90b2dnbGVXZWJjYW1zT25seUZvck1vZGVyYXRvcic7XG5pbXBvcnQgY2xlYXJSYW5kb21seVNlbGVjdGVkVXNlciBmcm9tICcuL21ldGhvZHMvY2xlYXJSYW5kb21seVNlbGVjdGVkVXNlcic7XG5cbk1ldGVvci5tZXRob2RzKHtcbiAgZW5kTWVldGluZyxcbiAgdG9nZ2xlUmVjb3JkaW5nLFxuICB0b2dnbGVMb2NrU2V0dGluZ3MsXG4gIHRyYW5zZmVyVXNlcixcbiAgdG9nZ2xlV2ViY2Ftc09ubHlGb3JNb2RlcmF0b3IsXG4gIGNsZWFyUmFuZG9tbHlTZWxlY3RlZFVzZXIsXG59KTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IE1lZXRpbmdzLCB7IFJlY29yZE1lZXRpbmdzLCBNZWV0aW5nVGltZVJlbWFpbmluZyB9IGZyb20gJy9pbXBvcnRzL2FwaS9tZWV0aW5ncyc7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBBdXRoVG9rZW5WYWxpZGF0aW9uLCB7IFZhbGlkYXRpb25TdGF0ZXMgfSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcblxuY29uc3QgUk9MRV9NT0RFUkFUT1IgPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLnVzZXIucm9sZV9tb2RlcmF0b3I7XG5cbmZ1bmN0aW9uIG1lZXRpbmdzKHJvbGUpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgTWVldGluZ3Mgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gTWVldGluZ3MuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCB7IG1lZXRpbmdJZCwgdXNlcklkIH0gPSB0b2tlblZhbGlkYXRpb247XG5cbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIG1lZXRpbmcnLCB7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgICRvcjogW1xuICAgICAgeyBtZWV0aW5nSWQgfSxcbiAgICBdLFxuICB9O1xuXG4gIGNvbnN0IFVzZXIgPSBVc2Vycy5maW5kT25lKHsgdXNlcklkLCBtZWV0aW5nSWQgfSwgeyBmaWVsZHM6IHsgcm9sZTogMSB9IH0pO1xuICBpZiAoISFVc2VyICYmIFVzZXIucm9sZSA9PT0gUk9MRV9NT0RFUkFUT1IpIHtcbiAgICBzZWxlY3Rvci4kb3IucHVzaCh7XG4gICAgICAnbWVldGluZ1Byb3AuaXNCcmVha291dCc6IHRydWUsXG4gICAgICAnYnJlYWtvdXRQcm9wcy5wYXJlbnRJZCc6IG1lZXRpbmdJZCxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgZmllbGRzOiB7XG4gICAgICBwYXNzd29yZDogZmFsc2UsXG4gICAgICAnd2VsY29tZVByb3AubW9kT25seU1lc3NhZ2UnOiBmYWxzZSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBNZWV0aW5ncy5maW5kKHNlbGVjdG9yLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kTWVldGluZ3MgPSBtZWV0aW5ncy5iaW5kKHRoaXMpO1xuICByZXR1cm4gYm91bmRNZWV0aW5ncyguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ21lZXRpbmdzJywgcHVibGlzaCk7XG5cbmZ1bmN0aW9uIHJlY29yZE1lZXRpbmdzKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBSZWNvcmRNZWV0aW5ncyB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBSZWNvcmRNZWV0aW5ncy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBMb2dnZXIuZGVidWcoYFB1Ymxpc2hpbmcgUmVjb3JkTWVldGluZ3MgZm9yICR7bWVldGluZ0lkfSAke3VzZXJJZH1gKTtcblxuICByZXR1cm4gUmVjb3JkTWVldGluZ3MuZmluZCh7IG1lZXRpbmdJZCB9KTtcbn1cbmZ1bmN0aW9uIHJlY29yZFB1Ymxpc2goLi4uYXJncykge1xuICBjb25zdCBib3VuZFJlY29yZE1lZXRpbmdzID0gcmVjb3JkTWVldGluZ3MuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kUmVjb3JkTWVldGluZ3MoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCdyZWNvcmQtbWVldGluZ3MnLCByZWNvcmRQdWJsaXNoKTtcblxuZnVuY3Rpb24gbWVldGluZ1RpbWVSZW1haW5pbmcoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIE1lZXRpbmdUaW1lUmVtYWluaW5nIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIE1lZXRpbmdUaW1lUmVtYWluaW5nLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuICBMb2dnZXIuZGVidWcoYFB1Ymxpc2hpbmcgTWVldGluZ1RpbWVSZW1haW5pbmcgZm9yICR7bWVldGluZ0lkfSAke3VzZXJJZH1gKTtcblxuICByZXR1cm4gTWVldGluZ1RpbWVSZW1haW5pbmcuZmluZCh7IG1lZXRpbmdJZCB9KTtcbn1cbmZ1bmN0aW9uIHRpbWVSZW1haW5pbmdQdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmR0aW1lUmVtYWluaW5nID0gbWVldGluZ1RpbWVSZW1haW5pbmcuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kdGltZVJlbWFpbmluZyguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ21lZXRpbmctdGltZS1yZW1haW5pbmcnLCB0aW1lUmVtYWluaW5nUHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgTWVldGluZ3MgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbignbWVldGluZ3MnKTtcbmNvbnN0IFJlY29yZE1lZXRpbmdzID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3JlY29yZC1tZWV0aW5ncycpO1xuY29uc3QgTWVldGluZ1RpbWVSZW1haW5pbmcgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbignbWVldGluZy10aW1lLXJlbWFpbmluZycpO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIC8vIHR5cGVzIG9mIHF1ZXJpZXMgZm9yIHRoZSBtZWV0aW5nczpcbiAgLy8gMS4gbWVldGluZ0lkXG5cbiAgTWVldGluZ3MuX2Vuc3VyZUluZGV4KHsgbWVldGluZ0lkOiAxIH0pO1xuICBSZWNvcmRNZWV0aW5ncy5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEgfSk7XG4gIE1lZXRpbmdUaW1lUmVtYWluaW5nLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSB9KTtcbn1cblxuZXhwb3J0IHtcbiAgUmVjb3JkTWVldGluZ3MsXG4gIE1lZXRpbmdUaW1lUmVtYWluaW5nLFxufTtcbmV4cG9ydCBkZWZhdWx0IE1lZXRpbmdzO1xuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IE5ldHdvcmtJbmZvcm1hdGlvbiBmcm9tICcvaW1wb3J0cy9hcGkvbmV0d29yay1pbmZvcm1hdGlvbic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlckluc3RhYmlsaXR5RGV0ZWN0ZWQoc2VuZGVyKSB7XG4gIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQ6IHJlY2VpdmVyIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socmVjZWl2ZXIsIFN0cmluZyk7XG4gIGNoZWNrKHNlbmRlciwgU3RyaW5nKTtcblxuICBjb25zdCBwYXlsb2FkID0ge1xuICAgIHRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgIG1lZXRpbmdJZCxcbiAgICByZWNlaXZlcixcbiAgICBzZW5kZXIsXG4gIH07XG5cbiAgTG9nZ2VyLmRlYnVnKCdSZWNlaXZlciByZXBvcnRlZCBhIG5ldHdvcmsgaW5zdGFiaWxpdHknLCB7IHJlY2VpdmVyLCBtZWV0aW5nSWQgfSk7XG5cbiAgcmV0dXJuIE5ldHdvcmtJbmZvcm1hdGlvbi5pbnNlcnQocGF5bG9hZCk7XG59XG4iLCJpbXBvcnQgTmV0d29ya0luZm9ybWF0aW9uIGZyb20gJy9pbXBvcnRzL2FwaS9uZXR3b3JrLWluZm9ybWF0aW9uJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJOZXR3b3JrSW5mb3JtYXRpb24obWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBOZXR3b3JrSW5mb3JtYXRpb24ucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgTmV0d29yayBJbmZvcm1hdGlvbiAoJHttZWV0aW5nSWR9KWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhcmluZyBOZXR3b3JrIEluZm9ybWF0aW9uICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gTmV0d29ya0luZm9ybWF0aW9uLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBOZXR3b3JrIEluZm9ybWF0aW9uIChhbGwpJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIE5ldHdvcmsgSW5mb3JtYXRpb24gKGFsbCkuICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcic7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB1c2VySW5zdGFiaWxpdHlEZXRlY3RlZCBmcm9tICcuL21ldGhvZHMvdXNlckluc3RhYmlsaXR5RGV0ZWN0ZWQnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHVzZXJJbnN0YWJpbGl0eURldGVjdGVkLFxufSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBOZXR3b3JrSW5mb3JtYXRpb24gZnJvbSAnL2ltcG9ydHMvYXBpL25ldHdvcmstaW5mb3JtYXRpb24nO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5cbmZ1bmN0aW9uIG5ldHdvcmtJbmZvcm1hdGlvbigpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgTmV0d29ya0luZm9ybWF0aW9uIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIE5ldHdvcmtJbmZvcm1hdGlvbi5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBMb2dnZXIuZGVidWcoYFB1Ymxpc2hpbmcgTmV0d29ya0luZm9ybWF0aW9uIGZvciAke21lZXRpbmdJZH0gJHt1c2VySWR9YCk7XG4gIHJldHVybiBOZXR3b3JrSW5mb3JtYXRpb24uZmluZCh7XG4gICAgbWVldGluZ0lkLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kTmV0d29ya0luZm9ybWF0aW9uID0gbmV0d29ya0luZm9ybWF0aW9uLmJpbmQodGhpcyk7XG5cbiAgcmV0dXJuIGJvdW5kTmV0d29ya0luZm9ybWF0aW9uKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgnbmV0d29yay1pbmZvcm1hdGlvbicsIHB1Ymxpc2gpO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5cbmNvbnN0IE5ldHdvcmtJbmZvcm1hdGlvbiA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCduZXR3b3JrLWluZm9ybWF0aW9uJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgTmV0d29ya0luZm9ybWF0aW9uLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmV0d29ya0luZm9ybWF0aW9uO1xuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHVwZGF0ZU5vdGUgZnJvbSAnL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL21vZGlmaWVycy91cGRhdGVOb3RlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUGFkVXBkYXRlKHsgYm9keSB9KSB7XG4gIGNvbnN0IHsgcGFkLCByZXZzIH0gPSBib2R5O1xuICBjb25zdCB7IGlkIH0gPSBwYWQ7XG5cbiAgY2hlY2soaWQsIFN0cmluZyk7XG4gIGNoZWNrKHJldnMsIE51bWJlcik7XG5cbiAgdXBkYXRlTm90ZShpZCwgcmV2cyk7XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFBhZChtZWV0aW5nSWQsIHBhZElkLCByZWFkT25seUlkKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnQWRkUGFkU3lzTXNnJztcblxuICB0cnkge1xuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhwYWRJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZWFkT25seUlkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHBhZElkLFxuICAgICAgcmVhZE9ubHlJZCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgJ25vZGVKU2FwcCcsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgYWRkUGFkICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQge1xuICBjcmVhdGVQYWRVUkwsXG4gIGdldFJlYWRPbmx5SWRVUkwsXG4gIHdpdGhJbnN0YWNlSWQsXG59IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2V0aGVycGFkJztcbmltcG9ydCB7XG4gIGdlbmVyYXRlUGFkSWQsXG4gIGlzRW5hYmxlZCxcbiAgZ2V0RGF0YUZyb21SZXNwb25zZSxcbn0gZnJvbSAnL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IGFkZE5vdGUgZnJvbSAnL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL21vZGlmaWVycy9hZGROb3RlJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU5vdGUobWVldGluZ0lkLCBpbnN0YW5jZUlkKSB7XG4gIHRyeSB7XG4gICAgLy8gQXZvaWQgbm90ZSBjcmVhdGlvbiBpZiB0aGlzIGZlYXR1cmUgaXMgZGlzYWJsZWRcbiAgICBpZiAoIWlzRW5hYmxlZCgpKSB7XG4gICAgICBMb2dnZXIud2FybignU2hhcmVkIG5vdGVzIGFyZSBkaXNhYmxlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhpbnN0YW5jZUlkLCBOdW1iZXIpO1xuXG4gICAgY29uc3Qgbm90ZUlkID0gd2l0aEluc3RhY2VJZChpbnN0YW5jZUlkLCBnZW5lcmF0ZVBhZElkKG1lZXRpbmdJZCkpO1xuXG4gICAgY29uc3QgY3JlYXRlVVJMID0gY3JlYXRlUGFkVVJMKG5vdGVJZCk7XG5cbiAgICBheGlvcyh7XG4gICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgdXJsOiBjcmVhdGVVUkwsXG4gICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICB9KS50aGVuKChyZXNwb25zZU91dGVyKSA9PiB7XG4gICAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVzcG9uc2VPdXRlcjtcbiAgICAgIGlmIChzdGF0dXMgIT09IDIwMCkge1xuICAgICAgICBMb2dnZXIuZXJyb3IoYENvdWxkIG5vdCBnZXQgbm90ZSBpbmZvIGZvciAke21lZXRpbmdJZH0gJHtzdGF0dXN9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlYWRPbmx5VVJMID0gZ2V0UmVhZE9ubHlJZFVSTChub3RlSWQpO1xuICAgICAgYXhpb3Moe1xuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICB1cmw6IHJlYWRPbmx5VVJMLFxuICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlYWRPbmx5Tm90ZUlkID0gZ2V0RGF0YUZyb21SZXNwb25zZShyZXNwb25zZS5kYXRhLCAncmVhZE9ubHlJRCcpO1xuICAgICAgICBpZiAocmVhZE9ubHlOb3RlSWQpIHtcbiAgICAgICAgICBhZGROb3RlKG1lZXRpbmdJZCwgbm90ZUlkLCByZWFkT25seU5vdGVJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgTG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgZ2V0IG5vdGUgcmVhZE9ubHlJRCBmb3IgJHttZWV0aW5nSWR9YCk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4gTG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgZ2V0IG5vdGUgcmVhZE9ubHlJRCBmb3IgJHttZWV0aW5nSWR9OiAke2Vycm9yfWApKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IExvZ2dlci5lcnJvcihgQ291bGQgbm90IGNyZWF0ZSBub3RlIGZvciAke21lZXRpbmdJZH06ICR7ZXJyb3J9YCkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgY3JlYXRlTm90ZSAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IE5vdGUgZnJvbSAnL2ltcG9ydHMvYXBpL25vdGUnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IGFkZFBhZCBmcm9tICcvaW1wb3J0cy9hcGkvbm90ZS9zZXJ2ZXIvbWV0aG9kcy9hZGRQYWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGROb3RlKG1lZXRpbmdJZCwgbm90ZUlkLCByZWFkT25seU5vdGVJZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKG5vdGVJZCwgU3RyaW5nKTtcbiAgY2hlY2socmVhZE9ubHlOb3RlSWQsIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIG5vdGVJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgbm90ZUlkLFxuICAgIHJlYWRPbmx5Tm90ZUlkLFxuICAgIHJldnM6IDAsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGluc2VydGVkSWQgfSA9IE5vdGUudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgYWRkUGFkKG1lZXRpbmdJZCwgbm90ZUlkLCByZWFkT25seU5vdGVJZCk7XG4gICAgICBMb2dnZXIuaW5mbyhgQWRkZWQgbm90ZSBpZD0ke25vdGVJZH0gcmVhZE9ubHlJZD0ke3JlYWRPbmx5Tm90ZUlkfSBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBzZXJ0ZWQgbm90ZSBpZD0ke25vdGVJZH0gcmVhZE9ubHlJZD0ke3JlYWRPbmx5Tm90ZUlkfSBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBZGRpbmcgbm90ZSB0byB0aGUgY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBOb3RlIGZyb20gJy9pbXBvcnRzL2FwaS9ub3RlJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJOb3RlKG1lZXRpbmdJZCkge1xuICBpZiAobWVldGluZ0lkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gTm90ZS5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBOb3RlICgke21lZXRpbmdJZH0pYCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIE5vdGUgKCR7bWVldGluZ0lkfSkuICR7ZXJyfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBOb3RlLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBOb3RlIChhbGwpJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIE5vdGUgKGFsbCkuICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IE5vdGUgZnJvbSAnL2ltcG9ydHMvYXBpL25vdGUnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVOb3RlKG5vdGVJZCwgcmV2cykge1xuICBjaGVjayhub3RlSWQsIFN0cmluZyk7XG4gIGNoZWNrKHJldnMsIE51bWJlcik7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbm90ZUlkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIHJldnMsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gTm90ZS51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyLCB7IG11bHRpOiB0cnVlIH0pO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIudmVyYm9zZSgnTm90ZXM6IHVwZGF0ZSBub3RlIHBhZCcsIHsgcGFkOiBub3RlSWQsIHJldnMgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoJ05vdGVzOiBlcnJvciB3aGVuIHVwZGF0aW5nIG5vdGUgcGFkJywgeyBlcnIgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBwcm9jZXNzRm9yTm90ZVBhZE9ubHkgfSBmcm9tICcvaW1wb3J0cy9hcGkvbm90ZS9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgaGFuZGxlUGFkVXBkYXRlIGZyb20gJy4vaGFuZGxlcnMvcGFkVXBkYXRlJztcblxuUmVkaXNQdWJTdWIub24oJ1BhZFVwZGF0ZVN5c01zZycsIHByb2Nlc3NGb3JOb3RlUGFkT25seShoYW5kbGVQYWRVcGRhdGUpKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgaGFzaFNIQTEgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9ldGhlcnBhZCc7XG5cbmNvbnN0IEVUSEVSUEFEID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUuZXRoZXJwYWQ7XG5jb25zdCBOT1RFX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMubm90ZTtcbmNvbnN0IFRPS0VOID0gJ18nO1xuXG5jb25zdCBpc0VuYWJsZWQgPSAoKSA9PiBOT1RFX0NPTkZJRy5lbmFibGVkO1xuXG5jb25zdCBnZXREYXRhRnJvbVJlc3BvbnNlID0gKGRhdGEsIGtleSkgPT4ge1xuICBpZiAoZGF0YSkge1xuICAgIGNvbnN0IGlubmVyRGF0YSA9IGRhdGEuZGF0YTtcbiAgICBpZiAoaW5uZXJEYXRhICYmIGlubmVyRGF0YVtrZXldKSB7XG4gICAgICByZXR1cm4gaW5uZXJEYXRhW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgaXNOb3RlUGFkID0gcGFkSWQgPT4gcGFkSWQuc2VhcmNoKFRPS0VOKTtcblxuY29uc3QgcHJvY2Vzc0Zvck5vdGVQYWRPbmx5ID0gZm4gPT4gKG1lc3NhZ2UsIC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgeyBib2R5IH0gPSBtZXNzYWdlO1xuICBjb25zdCB7IHBhZCB9ID0gYm9keTtcbiAgY29uc3QgeyBpZCB9ID0gcGFkO1xuXG4gIGNoZWNrKGlkLCBTdHJpbmcpO1xuXG4gIGlmIChpc05vdGVQYWQoaWQpKSByZXR1cm4gZm4obWVzc2FnZSwgLi4uYXJncyk7XG4gIHJldHVybiAoKSA9PiB7IH07XG59O1xuXG5jb25zdCBnZW5lcmF0ZVBhZElkID0gbWVldGluZ0lkID0+IGhhc2hTSEExKG1lZXRpbmdJZCArIEVUSEVSUEFELmFwaWtleSk7XG5cbmV4cG9ydCB7XG4gIGdlbmVyYXRlUGFkSWQsXG4gIGlzRW5hYmxlZCxcbiAgZ2V0RGF0YUZyb21SZXNwb25zZSxcbiAgcHJvY2Vzc0Zvck5vdGVQYWRPbmx5LFxufTtcbiIsImltcG9ydCAnLi9wdWJsaXNoZXJzJztcbmltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IE5vdGUgZnJvbSAnL2ltcG9ydHMvYXBpL25vdGUnO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5mdW5jdGlvbiBub3RlKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBOb3RlIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIE5vdGUuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCB7IG1lZXRpbmdJZCwgdXNlcklkIH0gPSB0b2tlblZhbGlkYXRpb247XG5cbiAgTG9nZ2VyLmluZm8oYFB1Ymxpc2hpbmcgTm90ZSBmb3IgJHttZWV0aW5nSWR9ICR7dXNlcklkfWApO1xuXG4gIHJldHVybiBOb3RlLmZpbmQoeyBtZWV0aW5nSWQgfSk7XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2goLi4uYXJncykge1xuICBjb25zdCBib3VuZE5vdGUgPSBub3RlLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZE5vdGUoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCdub3RlJywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgTm90ZSA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCdub3RlJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgTm90ZS5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEsIG5vdGVJZDogMSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90ZTtcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBzZXRQdWJsaXNoZWRQb2xsIGZyb20gJy4uLy4uLy4uL21lZXRpbmdzL3NlcnZlci9tb2RpZmllcnMvc2V0UHVibGlzaGVkUG9sbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvbGxQdWJsaXNoZWQoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHBvbGxJZCB9ID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvbGxJZCwgU3RyaW5nKTtcblxuICBzZXRQdWJsaXNoZWRQb2xsKG1lZXRpbmdJZCwgdHJ1ZSk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgYWRkUG9sbCBmcm9tICcuLi9tb2RpZmllcnMvYWRkUG9sbCc7XG5pbXBvcnQgc2V0UHVibGlzaGVkUG9sbCBmcm9tICcuLi8uLi8uLi9tZWV0aW5ncy9zZXJ2ZXIvbW9kaWZpZXJzL3NldFB1Ymxpc2hlZFBvbGwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwb2xsU3RhcnRlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHtcbiAgICB1c2VySWQsIHBvbGwsIHBvbGxUeXBlLCBxdWVzdGlvbixcbiAgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvbGwsIE9iamVjdCk7XG4gIGNoZWNrKHBvbGxUeXBlLCBTdHJpbmcpO1xuICBjaGVjayhxdWVzdGlvbiwgU3RyaW5nKTtcblxuICBzZXRQdWJsaXNoZWRQb2xsKG1lZXRpbmdJZCwgZmFsc2UpO1xuXG4gIHJldHVybiBhZGRQb2xsKG1lZXRpbmdJZCwgdXNlcklkLCBwb2xsLCBwb2xsVHlwZSwgcXVlc3Rpb24pO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHJlbW92ZVBvbGwgZnJvbSAnLi4vbW9kaWZpZXJzL3JlbW92ZVBvbGwnO1xuaW1wb3J0IGNsZWFyUG9sbHMgZnJvbSAnLi4vbW9kaWZpZXJzL2NsZWFyUG9sbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwb2xsU3RvcHBlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgcG9sbCB9ID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgaWYgKHBvbGwpIHtcbiAgICBjb25zdCB7IHBvbGxJZCB9ID0gcG9sbDtcblxuICAgIGNoZWNrKHBvbGxJZCwgU3RyaW5nKTtcblxuICAgIHJldHVybiByZW1vdmVQb2xsKG1lZXRpbmdJZCwgcG9sbElkKTtcbiAgfVxuXG4gIHJldHVybiBjbGVhclBvbGxzKG1lZXRpbmdJZCk7XG59XG4iLCJpbXBvcnQgYWRkU3lzdGVtTXNnIGZyb20gJy4uLy4uLy4uL2dyb3VwLWNoYXQtbXNnL3NlcnZlci9tb2RpZmllcnMvYWRkU3lzdGVtTXNnJztcbmltcG9ydCBQb2xscyBmcm9tICcvaW1wb3J0cy9hcGkvcG9sbHMnO1xuaW1wb3J0IHJlbW92ZVBvbGwgZnJvbSAnLi4vbW9kaWZpZXJzL3JlbW92ZVBvbGwnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZW5kUG9sbENoYXRNc2coeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHBvbGwgfSA9IGJvZHk7XG5cbiAgY29uc3QgQ0hBVF9DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLmNoYXQ7XG4gIGNvbnN0IFBVQkxJQ19HUk9VUF9DSEFUX0lEID0gQ0hBVF9DT05GSUcucHVibGljX2dyb3VwX2lkO1xuICBjb25zdCBQVUJMSUNfQ0hBVF9TWVNURU1fSUQgPSBDSEFUX0NPTkZJRy5zeXN0ZW1fdXNlcmlkO1xuICBjb25zdCBDSEFUX1BPTExfUkVTVUxUU19NRVNTQUdFID0gQ0hBVF9DT05GSUcuc3lzdGVtX21lc3NhZ2VzX2tleXMuY2hhdF9wb2xsX3Jlc3VsdDtcbiAgY29uc3QgU1lTVEVNX0NIQVRfVFlQRSA9IENIQVRfQ09ORklHLnR5cGVfc3lzdGVtO1xuXG4gIGNvbnN0IHBvbGxEYXRhID0gUG9sbHMuZmluZE9uZSh7IG1lZXRpbmdJZCB9KTtcblxuICBpZiAoIXBvbGxEYXRhKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBdHRlbXB0ZWQgdG8gc2VuZCBjaGF0IG1lc3NhZ2Ugb2YgaW5leGlzdGluZyBwb2xsIGZvciBtZWV0aW5nSWQ6ICR7bWVldGluZ0lkfWApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHBvbGxSZXN1bHREYXRhID0gcG9sbDtcbiAgcG9sbFJlc3VsdERhdGEucG9sbFR5cGUgPSBwb2xsRGF0YS5wb2xsVHlwZTtcbiAgY29uc3QgZXh0cmEgPSB7XG4gICAgdHlwZTogJ3BvbGwnLFxuICAgIHBvbGxSZXN1bHREYXRhLFxuICB9O1xuXG4gIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgaWQ6IGAke1NZU1RFTV9DSEFUX1RZUEV9LSR7Q0hBVF9QT0xMX1JFU1VMVFNfTUVTU0FHRX1gLFxuICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICBjb3JyZWxhdGlvbklkOiBgJHtQVUJMSUNfQ0hBVF9TWVNURU1fSUR9LSR7RGF0ZS5ub3coKX1gLFxuICAgIHNlbmRlcjoge1xuICAgICAgaWQ6IFBVQkxJQ19DSEFUX1NZU1RFTV9JRCxcbiAgICAgIG5hbWU6ICcnLFxuICAgIH0sXG4gICAgbWVzc2FnZTogJycsXG4gICAgZXh0cmEsXG4gIH07XG5cbiAgcmVtb3ZlUG9sbChtZWV0aW5nSWQsIHBvbGxEYXRhLmlkKTtcbiAgcmV0dXJuIGFkZFN5c3RlbU1zZyhtZWV0aW5nSWQsIFBVQkxJQ19HUk9VUF9DSEFUX0lELCBwYXlsb2FkKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBQb2xscyBmcm9tICcvaW1wb3J0cy9hcGkvcG9sbHMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VyUmVzcG9uZGVkKHsgYm9keSB9KSB7XG4gIGNvbnN0IHsgcG9sbElkLCB1c2VySWQsIGFuc3dlcklkIH0gPSBib2R5O1xuXG4gIGNoZWNrKHBvbGxJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICBjaGVjayhhbnN3ZXJJZCwgTnVtYmVyKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBpZDogcG9sbElkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRwdWxsOiB7XG4gICAgICB1c2VyczogdXNlcklkLFxuICAgIH0sXG4gICAgJHB1c2g6IHtcbiAgICAgIHJlc3BvbnNlczogeyB1c2VySWQsIGFuc3dlcklkIH0sXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gUG9sbHMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBVcGRhdGluZyBQb2xsIHJlc3BvbnNlICh1c2VySWQ6ICR7dXNlcklkfSwgcmVzcG9uc2U6ICR7YW5zd2VySWR9LCBwb2xsSWQ6ICR7cG9sbElkfSlgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgVXBkYXRpbmcgUG9sbCByZXNwb25zZXM6ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUG9sbHMgZnJvbSAnL2ltcG9ydHMvYXBpL3BvbGxzJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZXJUeXBlZFJlc3BvbnNlKHsgaGVhZGVyLCBib2R5IH0pIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdSZXNwb25kVG9Qb2xsUmVxTXNnJztcblxuICBjb25zdCB7IHBvbGxJZCwgdXNlcklkLCBhbnN3ZXIgfSA9IGJvZHk7XG4gIGNvbnN0IHsgbWVldGluZ0lkIH0gPSBoZWFkZXI7XG5cbiAgY2hlY2socG9sbElkLCBTdHJpbmcpO1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2soYW5zd2VyLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHBvbGwgPSBQb2xscy5maW5kT25lKHsgbWVldGluZ0lkLCBpZDogcG9sbElkIH0pO1xuXG4gIGxldCBhbnN3ZXJJZCA9IDA7XG4gIHBvbGwuYW5zd2Vycy5mb3JFYWNoKChhKSA9PiB7XG4gICAgY29uc3QgeyBpZCwga2V5IH0gPSBhO1xuICAgIGlmIChrZXkgPT09IGFuc3dlcikgYW5zd2VySWQgPSBpZDtcbiAgfSk7XG5cbiAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICByZXF1ZXN0ZXJJZDogdXNlcklkLFxuICAgIHBvbGxJZCxcbiAgICBxdWVzdGlvbklkOiAwLFxuICAgIGFuc3dlcklkLFxuICB9O1xuXG4gIHJldHVybiBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCB1c2VySWQsIHBheWxvYWQpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHVwZGF0ZVZvdGVzIGZyb20gJy4uL21vZGlmaWVycy91cGRhdGVWb3Rlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZXJWb3RlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgcG9sbCB9ID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvbGwsIHtcbiAgICBpZDogU3RyaW5nLFxuICAgIHF1ZXN0aW9uVHlwZTogU3RyaW5nLFxuICAgIHF1ZXN0aW9uVGV4dDogU3RyaW5nLFxuICAgIGFuc3dlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6IE51bWJlcixcbiAgICAgICAga2V5OiBTdHJpbmcsXG4gICAgICAgIG51bVZvdGVzOiBOdW1iZXIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbnVtUmVzcG9uZGVudHM6IE51bWJlcixcbiAgICBudW1SZXNwb25kZXJzOiBOdW1iZXIsXG4gIH0pO1xuXG4gIHJldHVybiB1cGRhdGVWb3Rlcyhwb2xsLCBtZWV0aW5nSWQpO1xufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBQb2xscyBmcm9tICcvaW1wb3J0cy9hcGkvcG9sbHMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHB1Ymxpc2hQb2xsKCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1Nob3dQb2xsUmVzdWx0UmVxTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcG9sbCA9IFBvbGxzLmZpbmRPbmUoeyBtZWV0aW5nSWQgfSk7IC8vIFRPRE8tLXNlbmQgcG9sbGlkIGZyb20gY2xpZW50XG4gICAgaWYgKCFwb2xsKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEF0dGVtcHRlZCB0byBwdWJsaXNoIGluZXhpc3RpbmcgcG9sbCBmb3IgbWVldGluZ0lkOiAke21lZXRpbmdJZH1gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoXG4gICAgICBDSEFOTkVMLFxuICAgICAgRVZFTlRfTkFNRSxcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHJlcXVlc3RlclVzZXJJZCxcbiAgICAgICh7IHJlcXVlc3RlcklkOiByZXF1ZXN0ZXJVc2VySWQsIHBvbGxJZDogcG9sbC5pZCB9KSxcbiAgICApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgcHVibGlzaFBvbGwgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUG9sbHMgZnJvbSAnL2ltcG9ydHMvYXBpL3BvbGxzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwdWJsaXNoVHlwZWRWb3RlKGlkLCBwb2xsQW5zd2VyKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IE1BWF9JTlBVVF9DSEFSUyA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMucG9sbC5tYXhUeXBlZEFuc3dlckxlbmd0aDtcbiAgbGV0IEVWRU5UX05BTUUgPSAnUmVzcG9uZFRvVHlwZWRQb2xsUmVxTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHBvbGxBbnN3ZXIsIFN0cmluZyk7XG4gICAgY2hlY2soaWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBhY3RpdmVQb2xsID0gUG9sbHMuZmluZE9uZSh7IG1lZXRpbmdJZCwgaWQgfSwge1xuICAgICAgZmllbGRzOiB7XG4gICAgICAgIGFuc3dlcnM6IDEsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgbGV0IGV4aXN0aW5nQW5zSWQgPSBudWxsO1xuICAgIGFjdGl2ZVBvbGwuYW5zd2Vycy5mb3JFYWNoKChhKSA9PiB7XG4gICAgICBpZiAoYS5rZXkgPT09IHBvbGxBbnN3ZXIpIGV4aXN0aW5nQW5zSWQgPSBhLmlkO1xuICAgIH0pO1xuXG4gICAgaWYgKGV4aXN0aW5nQW5zSWQgIT09IG51bGwpIHtcbiAgICAgIGNoZWNrKGV4aXN0aW5nQW5zSWQsIE51bWJlcik7XG4gICAgICBFVkVOVF9OQU1FID0gJ1Jlc3BvbmRUb1BvbGxSZXFNc2cnO1xuXG4gICAgICByZXR1cm4gUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKFxuICAgICAgICBDSEFOTkVMLFxuICAgICAgICBFVkVOVF9OQU1FLFxuICAgICAgICBtZWV0aW5nSWQsXG4gICAgICAgIHJlcXVlc3RlclVzZXJJZCxcbiAgICAgICAge1xuICAgICAgICAgIHJlcXVlc3RlcklkOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgICAgICAgcG9sbElkOiBpZCxcbiAgICAgICAgICBxdWVzdGlvbklkOiAwLFxuICAgICAgICAgIGFuc3dlcklkOiBleGlzdGluZ0Fuc0lkLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgcmVxdWVzdGVySWQ6IHJlcXVlc3RlclVzZXJJZCxcbiAgICAgIHBvbGxJZDogaWQsXG4gICAgICBxdWVzdGlvbklkOiAwLFxuICAgICAgYW5zd2VyOiBwb2xsQW5zd2VyLnN1YnN0cmluZygwLCBNQVhfSU5QVVRfQ0hBUlMpLFxuICAgIH07XG5cbiAgICByZXR1cm4gUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHB1Ymxpc2hUeXBlZFZvdGUgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUG9sbHMgZnJvbSAnL2ltcG9ydHMvYXBpL3BvbGxzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwdWJsaXNoVm90ZShwb2xsSWQsIHBvbGxBbnN3ZXJJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ1Jlc3BvbmRUb1BvbGxSZXFNc2cnO1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHBvbGxBbnN3ZXJJZCwgTnVtYmVyKTtcbiAgICBjaGVjayhwb2xsSWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBhbGxvd2VkVG9Wb3RlID0gUG9sbHMuZmluZE9uZSh7XG4gICAgICBpZDogcG9sbElkLFxuICAgICAgdXNlcnM6IHsgJGluOiBbcmVxdWVzdGVyVXNlcklkXSB9LFxuICAgICAgbWVldGluZ0lkLFxuICAgIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB1c2VyczogMSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIWFsbG93ZWRUb1ZvdGUpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBQb2xsIFVzZXI9eyR7cmVxdWVzdGVyVXNlcklkfX0gaGFzIGFscmVhZHkgdm90ZWQgaW4gUG9sbElkPXske3BvbGxJZH19YCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICAgIHVzZXJzOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgICBtZWV0aW5nSWQsXG4gICAgICAnYW5zd2Vycy5pZCc6IHBvbGxBbnN3ZXJJZCxcbiAgICB9O1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHJlcXVlc3RlcklkOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgICBwb2xsSWQsXG4gICAgICBxdWVzdGlvbklkOiAwLFxuICAgICAgYW5zd2VySWQ6IHBvbGxBbnN3ZXJJZCxcbiAgICB9O1xuXG4gICAgLypcbiAgICAgV2Uga2VlcCBhbiBhcnJheSBvZiBwZW9wbGUgd2hvIHdlcmUgaW4gdGhlIG1lZXRpbmcgYXQgdGhlIHRpbWUgdGhlIHBvbGxcbiAgICAgd2FzIHN0YXJ0ZWQuIFRoZSBwb2xsIGlzIHB1Ymxpc2hlZCB0byB0aGVtIG9ubHkuXG4gICAgIE9uY2UgdGhleSB2b3RlIC0gdGhlaXIgSUQgaXMgcmVtb3ZlZCBhbmQgdGhleSBjYW5ub3Qgc2VlIHRoZSBwb2xsIGFueW1vcmVcbiAgICAqL1xuICAgIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICAgJHB1bGw6IHtcbiAgICAgICAgdXNlcnM6IHJlcXVlc3RlclVzZXJJZCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gUG9sbHMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBSZW1vdmVkIHJlc3BvbmRlZCB1c2VyPSR7cmVxdWVzdGVyVXNlcklkfSBmcm9tIHBvbGwgKG1lZXRpbmdJZDogJHttZWV0aW5nSWR9LCBwb2xsSWQ6ICR7cG9sbElkfSEpYCk7XG5cbiAgICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgcHVibGlzaFZvdGUgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRQb2xsKHBvbGxUeXBlcywgcG9sbFR5cGUsIHBvbGxJZCwgcXVlc3Rpb24sIGFuc3dlcnMpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgbGV0IEVWRU5UX05BTUUgPSAnU3RhcnRQb2xsUmVxTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHBvbGxJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhwb2xsVHlwZSwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICByZXF1ZXN0ZXJJZDogcmVxdWVzdGVyVXNlcklkLFxuICAgICAgcG9sbElkOiBgJHtwb2xsSWR9LyR7bmV3IERhdGUoKS5nZXRUaW1lKCl9YCxcbiAgICAgIHBvbGxUeXBlLFxuICAgICAgcXVlc3Rpb24sXG4gICAgfTtcblxuICAgIGlmIChwb2xsVHlwZSA9PT0gcG9sbFR5cGVzLkN1c3RvbSkge1xuICAgICAgRVZFTlRfTkFNRSA9ICdTdGFydEN1c3RvbVBvbGxSZXFNc2cnO1xuICAgICAgY2hlY2soYW5zd2VycywgQXJyYXkpO1xuICAgICAgcGF5bG9hZC5hbnN3ZXJzID0gYW5zd2VycztcbiAgICB9XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2Qgc3RhcnRQb2xsICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0b3BQb2xsKCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1N0b3BQb2xsUmVxTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQ6IHJlcXVlc3RlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlcklkLCBTdHJpbmcpO1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVySWQsICh7IHJlcXVlc3RlcklkIH0pKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHN0b3BQb2xsICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBQb2xscyBmcm9tICcvaW1wb3J0cy9hcGkvcG9sbHMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IGZsYXQgZnJvbSAnZmxhdCc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFBvbGwobWVldGluZ0lkLCByZXF1ZXN0ZXJJZCwgcG9sbCwgcG9sbFR5cGUsIHF1ZXN0aW9uID0gJycpIHtcbiAgY2hlY2socmVxdWVzdGVySWQsIFN0cmluZyk7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socG9sbCwge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgYW5zd2VyczogW1xuICAgICAge1xuICAgICAgICBpZDogTnVtYmVyLFxuICAgICAgICBrZXk6IFN0cmluZyxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgdXNlclNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB1c2VySWQ6IHsgJG5lOiByZXF1ZXN0ZXJJZCB9LFxuICAgIGNsaWVudFR5cGU6IHsgJG5lOiAnZGlhbC1pbi11c2VyJyB9LFxuICB9O1xuXG4gIGNvbnN0IHVzZXJJZHMgPSBVc2Vycy5maW5kKHVzZXJTZWxlY3RvciwgeyBmaWVsZHM6IHsgdXNlcklkOiAxIH0gfSlcbiAgICAuZmV0Y2goKVxuICAgIC5tYXAodXNlciA9PiB1c2VyLnVzZXJJZCk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHJlcXVlc3RlcjogcmVxdWVzdGVySWQsXG4gICAgaWQ6IHBvbGwuaWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSBPYmplY3QuYXNzaWduKFxuICAgIHsgbWVldGluZ0lkIH0sXG4gICAgeyByZXF1ZXN0ZXI6IHJlcXVlc3RlcklkIH0sXG4gICAgeyB1c2VyczogdXNlcklkcyB9LFxuICAgIHsgcXVlc3Rpb24sIHBvbGxUeXBlIH0sXG4gICAgZmxhdChwb2xsLCB7IHNhZmU6IHRydWUgfSksXG4gICk7XG5cblxuICB0cnkge1xuICAgIGNvbnN0IHsgaW5zZXJ0ZWRJZCB9ID0gUG9sbHMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIFBvbGwgaWQ9JHtwb2xsLmlkfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBzZXJ0ZWQgUG9sbCBpZD0ke3BvbGwuaWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFkZGluZyBQb2xsIHRvIGNvbGxlY3Rpb246ICR7cG9sbC5pZH1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvbGxzIGZyb20gJy9pbXBvcnRzL2FwaS9wb2xscyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyUG9sbHMobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBQb2xscy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBQb2xscyAoJHttZWV0aW5nSWR9KWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmluZm8oYEVycm9yIG9uIGNsZWFyaW5nIFBvbGxzICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gUG9sbHMucmVtb3ZlKHt9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKCdDbGVhcmVkIFBvbGxzIChhbGwpJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgRXJyb3Igb24gY2xlYXJpbmcgUG9sbHMgKGFsbCkuICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFBvbGxzIGZyb20gJy9pbXBvcnRzL2FwaS9wb2xscyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZVBvbGwobWVldGluZ0lkLCBpZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKGlkLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICBpZCxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gUG9sbHMucmVtb3ZlKHNlbGVjdG9yKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFJlbW92ZWQgUG9sbCBpZD0ke2lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBSZW1vdmluZyBQb2xsIGZyb20gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBQb2xscyBmcm9tICcvaW1wb3J0cy9hcGkvcG9sbHMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IGZsYXQgZnJvbSAnZmxhdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVZvdGVzKHBvbGwsIG1lZXRpbmdJZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvbGwsIE9iamVjdCk7XG5cbiAgY29uc3Qge1xuICAgIGlkLFxuICAgIGFuc3dlcnMsXG4gICAgbnVtUmVzcG9uZGVycyxcbiAgICBudW1SZXNwb25kZW50cyxcbiAgfSA9IHBvbGw7XG5cbiAgY2hlY2soaWQsIFN0cmluZyk7XG4gIGNoZWNrKGFuc3dlcnMsIEFycmF5KTtcblxuICBjaGVjayhudW1SZXNwb25kZXJzLCBOdW1iZXIpO1xuICBjaGVjayhudW1SZXNwb25kZW50cywgTnVtYmVyKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgaWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDogZmxhdChwb2xsLCB7IHNhZmU6IHRydWUgfSksXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFBvbGxzLnVwZGF0ZShzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBkYXRpbmcgUG9sbHMgY29sbGVjdGlvbiAobWVldGluZ0lkOiAke21lZXRpbmdJZH0sIHBvbGxJZDogJHtpZH0hKWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBVcGRhdGluZyBQb2xscyBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVQb2xsU3RhcnRlZCBmcm9tICcuL2hhbmRsZXJzL3BvbGxTdGFydGVkJztcbmltcG9ydCBoYW5kbGVQb2xsU3RvcHBlZCBmcm9tICcuL2hhbmRsZXJzL3BvbGxTdG9wcGVkJztcbmltcG9ydCBoYW5kbGVQb2xsUHVibGlzaGVkIGZyb20gJy4vaGFuZGxlcnMvcG9sbFB1Ymxpc2hlZCc7XG5pbXBvcnQgaGFuZGxlU2VuZFN5c3RlbUNoYXRGb3JQdWJsaXNoZWRQb2xsIGZyb20gJy4vaGFuZGxlcnMvc2VuZFBvbGxDaGF0TXNnJztcbmltcG9ydCBoYW5kbGVVc2VyVm90ZWQgZnJvbSAnLi9oYW5kbGVycy91c2VyVm90ZWQnO1xuaW1wb3J0IGhhbmRsZVVzZXJSZXNwb25kZWQgZnJvbSAnLi9oYW5kbGVycy91c2VyUmVzcG9uZGVkJztcbmltcG9ydCBoYW5kbGVVc2VyVHlwZWRSZXNwb25zZSBmcm9tICcuL2hhbmRsZXJzL3VzZXJUeXBlZFJlc3BvbnNlJztcblxuUmVkaXNQdWJTdWIub24oJ1BvbGxTaG93UmVzdWx0RXZ0TXNnJywgaGFuZGxlUG9sbFB1Ymxpc2hlZCk7XG5SZWRpc1B1YlN1Yi5vbignUG9sbFNob3dSZXN1bHRFdnRNc2cnLCBoYW5kbGVTZW5kU3lzdGVtQ2hhdEZvclB1Ymxpc2hlZFBvbGwpO1xuUmVkaXNQdWJTdWIub24oJ1BvbGxTdGFydGVkRXZ0TXNnJywgaGFuZGxlUG9sbFN0YXJ0ZWQpO1xuUmVkaXNQdWJTdWIub24oJ1BvbGxTdG9wcGVkRXZ0TXNnJywgaGFuZGxlUG9sbFN0b3BwZWQpO1xuUmVkaXNQdWJTdWIub24oJ1BvbGxVcGRhdGVkRXZ0TXNnJywgaGFuZGxlVXNlclZvdGVkKTtcblJlZGlzUHViU3ViLm9uKCdVc2VyUmVzcG9uZGVkVG9Qb2xsUmVzcE1zZycsIGhhbmRsZVVzZXJSZXNwb25kZWQpO1xuUmVkaXNQdWJTdWIub24oJ1VzZXJSZXNwb25kZWRUb1R5cGVkUG9sbFJlc3BNc2cnLCBoYW5kbGVVc2VyVHlwZWRSZXNwb25zZSk7XG4iLCJpbXBvcnQgJy4vZXZlbnRIYW5kbGVycyc7XG5pbXBvcnQgJy4vbWV0aG9kcyc7XG5pbXBvcnQgJy4vcHVibGlzaGVycyc7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBwdWJsaXNoVHlwZWRWb3RlIGZyb20gJy4vbWV0aG9kcy9wdWJsaXNoVHlwZWRWb3RlJztcbmltcG9ydCBwdWJsaXNoVm90ZSBmcm9tICcuL21ldGhvZHMvcHVibGlzaFZvdGUnO1xuaW1wb3J0IHB1Ymxpc2hQb2xsIGZyb20gJy4vbWV0aG9kcy9wdWJsaXNoUG9sbCc7XG5pbXBvcnQgc3RhcnRQb2xsIGZyb20gJy4vbWV0aG9kcy9zdGFydFBvbGwnO1xuaW1wb3J0IHN0b3BQb2xsIGZyb20gJy4vbWV0aG9kcy9zdG9wUG9sbCc7XG5cbk1ldGVvci5tZXRob2RzKHtcbiAgcHVibGlzaFZvdGUsXG4gIHB1Ymxpc2hUeXBlZFZvdGUsXG4gIHB1Ymxpc2hQb2xsLFxuICBzdGFydFBvbGwsXG4gIHN0b3BQb2xsLFxufSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBQb2xscyBmcm9tICcvaW1wb3J0cy9hcGkvcG9sbHMnO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5mdW5jdGlvbiBjdXJyZW50UG9sbCgpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgUG9sbHMgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gUG9sbHMuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCB7IG1lZXRpbmdJZCwgdXNlcklkIH0gPSB0b2tlblZhbGlkYXRpb247XG5cbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIFBvbGxzJywgeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gIH07XG5cbiAgcmV0dXJuIFBvbGxzLmZpbmQoc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoQ3VycmVudFBvbGwoLi4uYXJncykge1xuICBjb25zdCBib3VuZFBvbGxzID0gY3VycmVudFBvbGwuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kUG9sbHMoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCdjdXJyZW50LXBvbGwnLCBwdWJsaXNoQ3VycmVudFBvbGwpO1xuXG5mdW5jdGlvbiBwb2xscygpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgUG9sbHMgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gUG9sbHMuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGZpZWxkczoge1xuICAgICAgJ2Fuc3dlcnMubnVtVm90ZXMnOiAwLFxuICAgICAgcmVzcG9uc2VzOiAwLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIExvZ2dlci5kZWJ1ZygnUHVibGlzaGluZyBwb2xscycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHVzZXJzOiB1c2VySWQsXG4gIH07XG5cbiAgcmV0dXJuIFBvbGxzLmZpbmQoc2VsZWN0b3IsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRQb2xscyA9IHBvbGxzLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFBvbGxzKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgncG9sbHMnLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBQb2xscyA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCdwb2xscycpO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIC8vIFdlIGNhbiBoYXZlIGp1c3Qgb25lIGFjdGl2ZSBwb2xsIHBlciBtZWV0aW5nXG4gIC8vIG1ha2VzIG5vIHNlbnNlIHRvIGluZGV4IGl0IGJ5IGFueXRoaW5nIG90aGVyIHRoYW4gbWVldGluZ0lkXG5cbiAgUG9sbHMuX2Vuc3VyZUluZGV4KHsgbWVldGluZ0lkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb2xscztcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBhZGRQcmVzZW50YXRpb25Qb2QgZnJvbSAnLi4vbW9kaWZpZXJzL2FkZFByZXNlbnRhdGlvblBvZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUNyZWF0ZU5ld1ByZXNlbnRhdGlvblBvZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoZWNrKGJvZHksIHtcbiAgICBjdXJyZW50UHJlc2VudGVySWQ6IFN0cmluZyxcbiAgICBwb2RJZDogU3RyaW5nLFxuICB9KTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHsgY3VycmVudFByZXNlbnRlcklkLCBwb2RJZCB9ID0gYm9keTtcblxuICBjb25zdCBwb2QgPSB7XG4gICAgY3VycmVudFByZXNlbnRlcklkLFxuICAgIHBvZElkLFxuICB9O1xuXG4gIGFkZFByZXNlbnRhdGlvblBvZChtZWV0aW5nSWQsIHBvZCk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgcmVtb3ZlUHJlc2VudGF0aW9uUG9kIGZyb20gJy4uL21vZGlmaWVycy9yZW1vdmVQcmVzZW50YXRpb25Qb2QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVSZW1vdmVQcmVzZW50YXRpb25Qb2QoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjaGVjayhib2R5LCBPYmplY3QpO1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgY29uc3QgeyBwb2RJZCB9ID0gYm9keTtcblxuICBjaGVjayhwb2RJZCwgU3RyaW5nKTtcblxuICByZW1vdmVQcmVzZW50YXRpb25Qb2QobWVldGluZ0lkLCBwb2RJZCk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgc2V0UHJlc2VudGVySW5Qb2QgZnJvbSAnLi4vbW9kaWZpZXJzL3NldFByZXNlbnRlckluUG9kJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlU2V0UHJlc2VudGVySW5Qb2QoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjaGVjayhib2R5LCBPYmplY3QpO1xuXG4gIGNvbnN0IHsgcG9kSWQsIG5leHRQcmVzZW50ZXJJZCB9ID0gYm9keTtcblxuICBjaGVjayhwb2RJZCwgU3RyaW5nKTtcbiAgY2hlY2sobmV4dFByZXNlbnRlcklkLCBTdHJpbmcpO1xuXG4gIHNldFByZXNlbnRlckluUG9kKG1lZXRpbmdJZCwgcG9kSWQsIG5leHRQcmVzZW50ZXJJZCk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUHJlc2VudGF0aW9uUG9kcyBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXBvZHMnO1xuaW1wb3J0IHJlbW92ZVByZXNlbnRhdGlvblBvZCBmcm9tICcuLi9tb2RpZmllcnMvcmVtb3ZlUHJlc2VudGF0aW9uUG9kJztcbmltcG9ydCBhZGRQcmVzZW50YXRpb25Qb2QgZnJvbSAnLi4vbW9kaWZpZXJzL2FkZFByZXNlbnRhdGlvblBvZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVN5bmNHZXRQcmVzZW50YXRpb25Qb2RzKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY2hlY2soYm9keSwgT2JqZWN0KTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHsgcG9kcyB9ID0gYm9keTtcbiAgY2hlY2socG9kcywgQXJyYXkpO1xuXG4gIGNvbnN0IHByZXNlbnRhdGlvblBvZElkcyA9IHBvZHMubWFwKHBvZCA9PiBwb2QuaWQpO1xuXG4gIGNvbnN0IHByZXNlbnRhdGlvblBvZHNUb1JlbW92ZSA9IFByZXNlbnRhdGlvblBvZHMuZmluZCh7XG4gICAgbWVldGluZ0lkLFxuICAgIHBvZElkOiB7ICRuaW46IHByZXNlbnRhdGlvblBvZElkcyB9LFxuICB9LCB7IGZpZWxkczogeyBwb2RJZDogMSB9IH0pLmZldGNoKCk7XG5cbiAgcHJlc2VudGF0aW9uUG9kc1RvUmVtb3ZlLmZvckVhY2gocCA9PiByZW1vdmVQcmVzZW50YXRpb25Qb2QobWVldGluZ0lkLCBwLnBvZElkKSk7XG5cbiAgcG9kcy5mb3JFYWNoKChwb2QpID0+IHtcbiAgICAvLyAncG9kSWQnIGFuZCAnY3VycmVudFByZXNlbnRlcklkJyBmb3Igc29tZSByZWFzb24gY2FsbGVkICdpZCcgYW5kICdjdXJyZW50UHJlc2VudGVyJ1xuICAgIC8vIGluIHRoaXMgbWVzc2FnZVxuICAgIGNvbnN0IHtcbiAgICAgIGlkOiBwb2RJZCxcbiAgICAgIGN1cnJlbnRQcmVzZW50ZXI6IGN1cnJlbnRQcmVzZW50ZXJJZCxcbiAgICAgIHByZXNlbnRhdGlvbnMsXG4gICAgfSA9IHBvZDtcbiAgICBhZGRQcmVzZW50YXRpb25Qb2QobWVldGluZ0lkLCB7IHBvZElkLCBjdXJyZW50UHJlc2VudGVySWQgfSwgcHJlc2VudGF0aW9ucyk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHsgTWF0Y2gsIGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBQcmVzZW50YXRpb25Qb2RzIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgYWRkUHJlc2VudGF0aW9uIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zL3NlcnZlci9tb2RpZmllcnMvYWRkUHJlc2VudGF0aW9uJztcblxuLy8gJ3ByZXNlbnRhdGlvbnMnIGlzIHBhc3NlZCBkb3duIGhlcmUgd2hlbiB3ZSByZWNlaXZlIGEgU3luYyBtZXNzYWdlXG4vLyBhbmQgaXQncyBub3QgdXNlZCB3aGVuIHdlIGp1c3QgY3JlYXRlIGEgbmV3IHByZXNlbnRhdGlvbiBwb2RcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFByZXNlbnRhdGlvblBvZChtZWV0aW5nSWQsIHBvZCwgcHJlc2VudGF0aW9ucyA9IHVuZGVmaW5lZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHByZXNlbnRhdGlvbnMsIE1hdGNoLk1heWJlKEFycmF5KSk7XG4gIGNoZWNrKHBvZCwge1xuICAgIGN1cnJlbnRQcmVzZW50ZXJJZDogU3RyaW5nLFxuICAgIHBvZElkOiBTdHJpbmcsXG4gIH0pO1xuXG4gIGNvbnN0IHsgY3VycmVudFByZXNlbnRlcklkLCBwb2RJZCB9ID0gcG9kO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICBwb2RJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcG9kSWQsXG4gICAgY3VycmVudFByZXNlbnRlcklkLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkIH0gPSBQcmVzZW50YXRpb25Qb2RzLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgLy8gaWYgaXQncyBhIFN5bmMgbWVzc2FnZSAtIGNvbnRpbnVlIGFkZGluZyB0aGUgYXR0YWNoZWQgcHJlc2VudGF0aW9uc1xuICAgIGlmIChwcmVzZW50YXRpb25zKSB7XG4gICAgICBwcmVzZW50YXRpb25zLmZvckVhY2gocHJlc2VudGF0aW9uID0+IGFkZFByZXNlbnRhdGlvbihtZWV0aW5nSWQsIHBvZElkLCBwcmVzZW50YXRpb24pKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIHByZXNlbnRhdGlvbiBwb2QgaWQ9JHtwb2RJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwc2VydGVkIHByZXNlbnRhdGlvbiBwb2QgaWQ9JHtwb2RJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgQWRkaW5nIHByZXNlbnRhdGlvbiBwb2QgdG8gdGhlIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUHJlc2VudGF0aW9uUG9kcyBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXBvZHMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IGNsZWFyUHJlc2VudGF0aW9ucyBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyUHJlc2VudGF0aW9ucyc7XG5pbXBvcnQgY2xlYXJQcmVzZW50YXRpb25VcGxvYWRUb2tlbiBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbi9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyUHJlc2VudGF0aW9uVXBsb2FkVG9rZW4nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhclByZXNlbnRhdGlvblBvZHMobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBQcmVzZW50YXRpb25Qb2RzLnJlbW92ZSh7IG1lZXRpbmdJZCB9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIGNsZWFyUHJlc2VudGF0aW9ucyhtZWV0aW5nSWQpO1xuICAgICAgICBjbGVhclByZXNlbnRhdGlvblVwbG9hZFRva2VuKG1lZXRpbmdJZCk7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIFByZXNlbnRhdGlvbnMgUG9kcyAoJHttZWV0aW5nSWR9KWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhcmluZyBQcmVzZW50YXRpb25zIFBvZHMgKCR7bWVldGluZ0lkfSkuICR7ZXJyfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBQcmVzZW50YXRpb25Qb2RzLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBjbGVhclByZXNlbnRhdGlvbnMoKTtcbiAgICAgICAgY2xlYXJQcmVzZW50YXRpb25VcGxvYWRUb2tlbigpO1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBQcmVzZW50YXRpb25zIFBvZHMgKGFsbCknKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgUHJlc2VudGF0aW9ucyBQb2RzIChhbGwpLiAke2Vycn1gKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBQcmVzZW50YXRpb25Qb2RzIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgY2xlYXJQcmVzZW50YXRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zL3NlcnZlci9tb2RpZmllcnMvY2xlYXJQcmVzZW50YXRpb25zJztcbmltcG9ydCBjbGVhclByZXNlbnRhdGlvblVwbG9hZFRva2VuIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tdXBsb2FkLXRva2VuL3NlcnZlci9tb2RpZmllcnMvY2xlYXJQcmVzZW50YXRpb25VcGxvYWRUb2tlbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZVByZXNlbnRhdGlvblBvZChtZWV0aW5nSWQsIHBvZElkKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHBvZElkLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBQcmVzZW50YXRpb25Qb2RzLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQgJiYgcG9kSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBSZW1vdmVkIHByZXNlbnRhdGlvbiBwb2QgaWQ9JHtwb2RJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICAgIGNsZWFyUHJlc2VudGF0aW9ucyhtZWV0aW5nSWQsIHBvZElkKTtcbiAgICAgIGNsZWFyUHJlc2VudGF0aW9uVXBsb2FkVG9rZW4obWVldGluZ0lkLCBwb2RJZCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIHJlbW92aW5nIHByZXNlbnRhdGlvbiBwb2QgZnJvbSBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFByZXNlbnRhdGlvblBvZHMgZnJvbSAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi1wb2RzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UHJlc2VudGVySW5Qb2QobWVldGluZ0lkLCBwb2RJZCwgbmV4dFByZXNlbnRlcklkKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG4gIGNoZWNrKG5leHRQcmVzZW50ZXJJZCwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcG9kSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgY3VycmVudFByZXNlbnRlcklkOiBuZXh0UHJlc2VudGVySWQsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbnVtYmVyQWZmZWN0ZWQgfSA9IFByZXNlbnRhdGlvblBvZHMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBTZXQgYSBuZXcgcHJlc2VudGVyIGluIHBvZCBpZD0ke3BvZElkfSBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBTZXR0aW5nIGEgcHJlc2VudGVyIGluIHBvZDogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgaGFuZGxlQ3JlYXRlTmV3UHJlc2VudGF0aW9uUG9kIGZyb20gJy4vaGFuZGxlcnMvY3JlYXRlTmV3UHJlc2VudGF0aW9uUG9kJztcbmltcG9ydCBoYW5kbGVSZW1vdmVQcmVzZW50YXRpb25Qb2QgZnJvbSAnLi9oYW5kbGVycy9yZW1vdmVQcmVzZW50YXRpb25Qb2QnO1xuaW1wb3J0IGhhbmRsZVN5bmNHZXRQcmVzZW50YXRpb25Qb2RzIGZyb20gJy4vaGFuZGxlcnMvc3luY0dldFByZXNlbnRhdGlvblBvZHMnO1xuaW1wb3J0IGhhbmRsZVNldFByZXNlbnRlckluUG9kIGZyb20gJy4vaGFuZGxlcnMvc2V0UHJlc2VudGVySW5Qb2QnO1xuXG5SZWRpc1B1YlN1Yi5vbignQ3JlYXRlTmV3UHJlc2VudGF0aW9uUG9kRXZ0TXNnJywgaGFuZGxlQ3JlYXRlTmV3UHJlc2VudGF0aW9uUG9kKTtcblJlZGlzUHViU3ViLm9uKCdSZW1vdmVQcmVzZW50YXRpb25Qb2RFdnRNc2cnLCBoYW5kbGVSZW1vdmVQcmVzZW50YXRpb25Qb2QpO1xuUmVkaXNQdWJTdWIub24oJ1NldFByZXNlbnRlckluUG9kUmVzcE1zZycsIGhhbmRsZVNldFByZXNlbnRlckluUG9kKTtcblJlZGlzUHViU3ViLm9uKCdTeW5jR2V0UHJlc2VudGF0aW9uUG9kc1Jlc3BNc2cnLCBoYW5kbGVTeW5jR2V0UHJlc2VudGF0aW9uUG9kcyk7XG4iLCJpbXBvcnQgJy4vZXZlbnRIYW5kbGVycyc7XG5pbXBvcnQgJy4vbWV0aG9kcyc7XG5pbXBvcnQgJy4vcHVibGlzaGVycyc7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBQcmVzZW50YXRpb25Qb2RzIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tcG9kcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmZ1bmN0aW9uIHByZXNlbnRhdGlvblBvZHMoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIFByZXNlbnRhdGlvblBvZHMgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gUHJlc2VudGF0aW9uUG9kcy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIHByZXNlbnRhdGlvbi1wb2RzJywgeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcblxuICByZXR1cm4gUHJlc2VudGF0aW9uUG9kcy5maW5kKHsgbWVldGluZ0lkIH0pO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRQcmVzZW50YXRpb25Qb2RzID0gcHJlc2VudGF0aW9uUG9kcy5iaW5kKHRoaXMpO1xuICByZXR1cm4gYm91bmRQcmVzZW50YXRpb25Qb2RzKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgncHJlc2VudGF0aW9uLXBvZHMnLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBQcmVzZW50YXRpb25Qb2RzID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3ByZXNlbnRhdGlvbi1wb2RzJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgLy8gdHlwZXMgb2YgcXVlcmllcyBmb3IgdGhlIHByZXNlbnRhdGlvbiBwb2RzOlxuICAvLyAxLiBtZWV0aW5nSWQsIHBvZElkICAoIDQgKVxuXG4gIFByZXNlbnRhdGlvblBvZHMuX2Vuc3VyZUluZGV4KHsgbWVldGluZ0lkOiAxLCBwb2RJZDogMSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJlc2VudGF0aW9uUG9kcztcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBQcmVzZW50YXRpb25VcGxvYWRUb2tlbiBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVByZXNlbnRhdGlvblVwbG9hZFRva2VuRmFpbCh7IGJvZHksIGhlYWRlciB9LCBtZWV0aW5nSWQpIHtcbiAgY2hlY2soYm9keSwgT2JqZWN0KTtcblxuICBjb25zdCB7IHVzZXJJZCB9ID0gaGVhZGVyO1xuICBjb25zdCB7IHBvZElkLCBmaWxlbmFtZSB9ID0gYm9keTtcblxuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvZElkLCBTdHJpbmcpO1xuICBjaGVjayhmaWxlbmFtZSwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICAgIHBvZElkLFxuICAgIGZpbGVuYW1lLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gUHJlc2VudGF0aW9uVXBsb2FkVG9rZW4udXBzZXJ0KHNlbGVjdG9yLCB7IGZhaWxlZDogdHJ1ZSwgYXV0aHpUb2tlbjogbnVsbCB9KTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFJlbW92aW5nIHByZXNlbnRhdGlvblRva2VuIGZpbGVuYW1lPSR7ZmlsZW5hbWV9IHBvZElkPSR7cG9kSWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFJlbW92aW5nIHByZXNlbnRhdGlvblRva2VuIGZyb20gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBQcmVzZW50YXRpb25VcGxvYWRUb2tlbiBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVByZXNlbnRhdGlvblVwbG9hZFRva2VuUGFzcyh7IGJvZHksIGhlYWRlciB9LCBtZWV0aW5nSWQpIHtcbiAgY2hlY2soYm9keSwgT2JqZWN0KTtcblxuICBjb25zdCB7IHVzZXJJZCB9ID0gaGVhZGVyO1xuICBjb25zdCB7IHBvZElkLCBhdXRoelRva2VuLCBmaWxlbmFtZSB9ID0gYm9keTtcblxuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvZElkLCBTdHJpbmcpO1xuICBjaGVjayhhdXRoelRva2VuLCBTdHJpbmcpO1xuICBjaGVjayhmaWxlbmFtZSwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcG9kSWQsXG4gICAgdXNlcklkLFxuICAgIGZpbGVuYW1lLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICBwb2RJZCxcbiAgICB1c2VySWQsXG4gICAgZmlsZW5hbWUsXG4gICAgYXV0aHpUb2tlbixcbiAgICBmYWlsZWQ6IGZhbHNlLFxuICAgIHVzZWQ6IGZhbHNlLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkIH0gPSBQcmVzZW50YXRpb25VcGxvYWRUb2tlbi51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChpbnNlcnRlZElkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgSW5zZXJ0aW5nIHByZXNlbnRhdGlvblRva2VuIGZpbGVuYW1lPSR7ZmlsZW5hbWV9IHBvZElkPSR7cG9kSWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEluc2VydGluZyBwcmVzZW50YXRpb25Ub2tlbiBmcm9tIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVlc3RQcmVzZW50YXRpb25VcGxvYWRUb2tlbihwb2RJZCwgZmlsZW5hbWUpIHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdQcmVzZW50YXRpb25VcGxvYWRUb2tlblJlcU1zZyc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhwb2RJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhmaWxlbmFtZSwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBwb2RJZCxcbiAgICAgIGZpbGVuYW1lLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgcmVxdWVzdFByZXNlbnRhdGlvblVwbG9hZFRva2VuICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUHJlc2VudGF0aW9uVXBsb2FkVG9rZW4gZnJvbSAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi11cGxvYWQtdG9rZW4nO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFVzZWRUb2tlbihhdXRoelRva2VuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soYXV0aHpUb2tlbiwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIHVzZWQ6IHRydWUsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFByZXNlbnRhdGlvblVwbG9hZFRva2VuLnVwZGF0ZSh7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICB1c2VySWQ6IHJlcXVlc3RlclVzZXJJZCxcbiAgICAgIGF1dGh6VG9rZW4sXG4gICAgfSwgcGF5bG9hZCk7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBUb2tlbjogJHthdXRoelRva2VufSBoYXMgYmVlbiBzZXQgYXMgdXNlZCBpbiBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHNldFVzZWRUb2tlbiAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFByZXNlbnRhdGlvblVwbG9hZFRva2VuIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tdXBsb2FkLXRva2VuJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJQcmVzZW50YXRpb25VcGxvYWRUb2tlbihtZWV0aW5nSWQsIHBvZElkKSB7XG4gIGlmIChtZWV0aW5nSWQgJiYgcG9kSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBQcmVzZW50YXRpb25VcGxvYWRUb2tlbi5yZW1vdmUoeyBtZWV0aW5nSWQsIHBvZElkIH0pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgUHJlc2VudGF0aW9ucyBVcGxvYWQgVG9rZW4gKCR7bWVldGluZ0lkfSwgJHtwb2RJZH0pYCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmluZm8oYEVycm9yIG9uIGNsZWFyaW5nIFByZXNlbnRhdGlvbnMgVXBsb2FkIFRva2VuICgke21lZXRpbmdJZH0sICR7cG9kSWR9KS4gJHtlcnJ9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1lZXRpbmdJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFByZXNlbnRhdGlvblVwbG9hZFRva2VuLnJlbW92ZSh7IG1lZXRpbmdJZCB9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIFByZXNlbnRhdGlvbnMgVXBsb2FkIFRva2VuICgke21lZXRpbmdJZH0pYCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgRXJyb3Igb24gY2xlYXJpbmcgUHJlc2VudGF0aW9ucyBVcGxvYWQgVG9rZW4gKCR7bWVldGluZ0lkfSkuICR7ZXJyfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgLy8gY2xlYXJpbmcgcHJlc2VudGF0aW9ucyBmb3IgdGhlIHdob2xlIHNlcnZlclxuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBQcmVzZW50YXRpb25VcGxvYWRUb2tlbi5yZW1vdmUoe30pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oJ0NsZWFyZWQgUHJlc2VudGF0aW9ucyBVcGxvYWQgVG9rZW4gKGFsbCknKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBFcnJvciBvbiBjbGVhcmluZyBQcmVzZW50YXRpb25zIFVwbG9hZCBUb2tlbiAoYWxsKS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0ZvckhUTUw1U2VydmVyT25seSB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5pbXBvcnQgaGFuZGxlUHJlc2VudGF0aW9uVXBsb2FkVG9rZW5QYXNzIGZyb20gJy4vaGFuZGxlcnMvcHJlc2VudGF0aW9uVXBsb2FkVG9rZW5QYXNzJztcbmltcG9ydCBoYW5kbGVQcmVzZW50YXRpb25VcGxvYWRUb2tlbkZhaWwgZnJvbSAnLi9oYW5kbGVycy9wcmVzZW50YXRpb25VcGxvYWRUb2tlbkZhaWwnO1xuXG5SZWRpc1B1YlN1Yi5vbignUHJlc2VudGF0aW9uVXBsb2FkVG9rZW5QYXNzUmVzcE1zZycsIHByb2Nlc3NGb3JIVE1MNVNlcnZlck9ubHkoaGFuZGxlUHJlc2VudGF0aW9uVXBsb2FkVG9rZW5QYXNzKSk7XG5SZWRpc1B1YlN1Yi5vbignUHJlc2VudGF0aW9uVXBsb2FkVG9rZW5GYWlsUmVzcE1zZycsIHByb2Nlc3NGb3JIVE1MNVNlcnZlck9ubHkoaGFuZGxlUHJlc2VudGF0aW9uVXBsb2FkVG9rZW5GYWlsKSk7XG4iLCJpbXBvcnQgJy4vZXZlbnRIYW5kbGVycyc7XG5pbXBvcnQgJy4vbWV0aG9kcyc7XG5pbXBvcnQgJy4vcHVibGlzaGVycyc7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCByZXF1ZXN0UHJlc2VudGF0aW9uVXBsb2FkVG9rZW4gZnJvbSAnLi9tZXRob2RzL3JlcXVlc3RQcmVzZW50YXRpb25VcGxvYWRUb2tlbic7XG5pbXBvcnQgc2V0VXNlZFRva2VuIGZyb20gJy4vbWV0aG9kcy9zZXRVc2VkVG9rZW4nO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHJlcXVlc3RQcmVzZW50YXRpb25VcGxvYWRUb2tlbixcbiAgc2V0VXNlZFRva2VuLFxufSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBQcmVzZW50YXRpb25VcGxvYWRUb2tlbiBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9uLXVwbG9hZC10b2tlbic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmZ1bmN0aW9uIHByZXNlbnRhdGlvblVwbG9hZFRva2VuKHBvZElkLCBmaWxlbmFtZSkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBQcmVzZW50YXRpb25VcGxvYWRUb2tlbiB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBQcmVzZW50YXRpb25VcGxvYWRUb2tlbi5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBjaGVjayhwb2RJZCwgU3RyaW5nKTtcbiAgY2hlY2soZmlsZW5hbWUsIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHBvZElkLFxuICAgIHVzZXJJZCxcbiAgICBmaWxlbmFtZSxcbiAgfTtcblxuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgUHJlc2VudGF0aW9uVXBsb2FkVG9rZW4nLCB7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xuXG4gIHJldHVybiBQcmVzZW50YXRpb25VcGxvYWRUb2tlbi5maW5kKHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kUHJlc2VudGF0aW9uVXBsb2FkVG9rZW4gPSBwcmVzZW50YXRpb25VcGxvYWRUb2tlbi5iaW5kKHRoaXMpO1xuICByZXR1cm4gYm91bmRQcmVzZW50YXRpb25VcGxvYWRUb2tlbiguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ3ByZXNlbnRhdGlvbi11cGxvYWQtdG9rZW4nLCBwdWJsaXNoKTtcbiIsImNvbnN0IFByZXNlbnRhdGlvblVwbG9hZFRva2VuID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3ByZXNlbnRhdGlvbi11cGxvYWQtdG9rZW4nKTtcblxuZXhwb3J0IGRlZmF1bHQgUHJlc2VudGF0aW9uVXBsb2FkVG9rZW47XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgYWRkUHJlc2VudGF0aW9uIGZyb20gJy4uL21vZGlmaWVycy9hZGRQcmVzZW50YXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVQcmVzZW50YXRpb25BZGRlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG5cbiAgY29uc3QgeyBwcmVzZW50YXRpb24sIHBvZElkIH0gPSBib2R5O1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG4gIGNoZWNrKHByZXNlbnRhdGlvbiwgT2JqZWN0KTtcblxuICByZXR1cm4gYWRkUHJlc2VudGF0aW9uKG1lZXRpbmdJZCwgcG9kSWQsIHByZXNlbnRhdGlvbik7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgUHJlc2VudGF0aW9ucyBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucyc7XG5cbi8vIGNvbnN0IE9GRklDRV9ET0NfQ09OVkVSU0lPTl9TVUNDRVNTX0tFWSA9ICdPRkZJQ0VfRE9DX0NPTlZFUlNJT05fU1VDQ0VTUyc7XG5jb25zdCBPRkZJQ0VfRE9DX0NPTlZFUlNJT05fRkFJTEVEX0tFWSA9ICdPRkZJQ0VfRE9DX0NPTlZFUlNJT05fRkFJTEVEJztcbmNvbnN0IE9GRklDRV9ET0NfQ09OVkVSU0lPTl9JTlZBTElEX0tFWSA9ICdPRkZJQ0VfRE9DX0NPTlZFUlNJT05fSU5WQUxJRCc7XG5jb25zdCBTVVBQT1JURURfRE9DVU1FTlRfS0VZID0gJ1NVUFBPUlRFRF9ET0NVTUVOVCc7XG5jb25zdCBVTlNVUFBPUlRFRF9ET0NVTUVOVF9LRVkgPSAnVU5TVVBQT1JURURfRE9DVU1FTlQnO1xuY29uc3QgUEFHRV9DT1VOVF9GQUlMRURfS0VZID0gJ1BBR0VfQ09VTlRfRkFJTEVEJztcbmNvbnN0IFBBR0VfQ09VTlRfRVhDRUVERURfS0VZID0gJ1BBR0VfQ09VTlRfRVhDRUVERUQnO1xuY29uc3QgUERGX0hBU19CSUdfUEFHRV9LRVkgPSAnUERGX0hBU19CSUdfUEFHRSc7XG5jb25zdCBHRU5FUkFURURfU0xJREVfS0VZID0gJ0dFTkVSQVRFRF9TTElERSc7XG5jb25zdCBGSUxFX1RPT19MQVJHRV9LRVkgPSAnRklMRV9UT09fTEFSR0UnO1xuLy8gY29uc3QgR0VORVJBVElOR19USFVNQk5BSUxfS0VZID0gJ0dFTkVSQVRJTkdfVEhVTUJOQUlMJztcbi8vIGNvbnN0IEdFTkVSQVRFRF9USFVNQk5BSUxfS0VZID0gJ0dFTkVSQVRFRF9USFVNQk5BSUwnO1xuLy8gY29uc3QgR0VORVJBVElOR19URVhURklMRVNfS0VZID0gJ0dFTkVSQVRJTkdfVEVYVEZJTEVTJztcbi8vIGNvbnN0IEdFTkVSQVRFRF9URVhURklMRVNfS0VZID0gJ0dFTkVSQVRFRF9URVhURklMRVMnO1xuLy8gY29uc3QgR0VORVJBVElOR19TVkdJTUFHRVNfS0VZID0gJ0dFTkVSQVRJTkdfU1ZHSU1BR0VTJztcbi8vIGNvbnN0IEdFTkVSQVRFRF9TVkdJTUFHRVNfS0VZID0gJ0dFTkVSQVRFRF9TVkdJTUFHRVMnO1xuLy8gY29uc3QgQ09OVkVSU0lPTl9DT01QTEVURURfS0VZID0gJ0NPTlZFUlNJT05fQ09NUExFVEVEJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUHJlc2VudGF0aW9uQ29udmVyc2lvblVwZGF0ZSh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG5cbiAgY29uc3Qge1xuICAgIHByZXNlbnRhdGlvbklkLCBwb2RJZCwgbWVzc2FnZUtleTogc3RhdHVzLCBwcmVzTmFtZTogcHJlc2VudGF0aW9uTmFtZSxcbiAgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwcmVzZW50YXRpb25JZCwgTWF0Y2guTWF5YmUoU3RyaW5nKSk7XG4gIGNoZWNrKHBvZElkLCBTdHJpbmcpO1xuICBjaGVjayhzdGF0dXMsIFN0cmluZyk7XG5cbiAgY29uc3Qgc3RhdHVzTW9kaWZpZXIgPSB7XG4gICAgJ2NvbnZlcnNpb24uc3RhdHVzJzogc3RhdHVzLFxuICAgICdjb252ZXJzaW9uLmVycm9yJzogZmFsc2UsXG4gICAgJ2NvbnZlcnNpb24uZG9uZSc6IGZhbHNlLFxuICB9O1xuXG4gIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSBTVVBQT1JURURfRE9DVU1FTlRfS0VZOlxuICAgICAgc3RhdHVzTW9kaWZpZXIuaWQgPSBwcmVzZW50YXRpb25JZDtcbiAgICAgIHN0YXR1c01vZGlmaWVyLm5hbWUgPSBwcmVzZW50YXRpb25OYW1lO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEZJTEVfVE9PX0xBUkdFX0tFWTpcbiAgICAgIHN0YXR1c01vZGlmaWVyWydjb252ZXJzaW9uLm1heEZpbGVTaXplJ10gPSBib2R5Lm1heEZpbGVTaXplO1xuICAgIGNhc2UgVU5TVVBQT1JURURfRE9DVU1FTlRfS0VZOlxuICAgIGNhc2UgT0ZGSUNFX0RPQ19DT05WRVJTSU9OX0ZBSUxFRF9LRVk6XG4gICAgY2FzZSBPRkZJQ0VfRE9DX0NPTlZFUlNJT05fSU5WQUxJRF9LRVk6XG4gICAgY2FzZSBQQUdFX0NPVU5UX0ZBSUxFRF9LRVk6XG4gICAgY2FzZSBQQUdFX0NPVU5UX0VYQ0VFREVEX0tFWTpcbiAgICAgIHN0YXR1c01vZGlmaWVyWydjb252ZXJzaW9uLm1heE51bWJlclBhZ2VzJ10gPSBib2R5Lm1heE51bWJlclBhZ2VzO1xuICAgIGNhc2UgUERGX0hBU19CSUdfUEFHRV9LRVk6XG4gICAgICBzdGF0dXNNb2RpZmllci5pZCA9IHByZXNlbnRhdGlvbklkID8/IGJvZHkucHJlc2VudGF0aW9uVG9rZW47XG4gICAgICBzdGF0dXNNb2RpZmllci5uYW1lID0gcHJlc2VudGF0aW9uTmFtZSA/PyBib2R5LnByZXNlbnRhdGlvbk5hbWU7XG4gICAgICBzdGF0dXNNb2RpZmllclsnY29udmVyc2lvbi5lcnJvciddID0gdHJ1ZTtcbiAgICAgIHN0YXR1c01vZGlmaWVyWydjb252ZXJzaW9uLmJpZ1BhZ2VTaXplJ10gPSBib2R5LmJpZ1BhZ2VTaXplO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBHRU5FUkFURURfU0xJREVfS0VZOlxuICAgICAgc3RhdHVzTW9kaWZpZXJbJ2NvbnZlcnNpb24ucGFnZXNDb21wbGV0ZWQnXSA9IGJvZHkucGFnZXNDb21wbGV0ZWQ7XG4gICAgICBzdGF0dXNNb2RpZmllclsnY29udmVyc2lvbi5udW1QYWdlcyddID0gYm9keS5udW1iZXJPZlBhZ2VzO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcG9kSWQsXG4gICAgaWQ6IHByZXNlbnRhdGlvbklkID8/IGJvZHkucHJlc2VudGF0aW9uVG9rZW4sXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDogT2JqZWN0LmFzc2lnbih7IG1lZXRpbmdJZCwgcG9kSWQgfSwgc3RhdHVzTW9kaWZpZXIpLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkIH0gPSBQcmVzZW50YXRpb25zLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBVcGRhdGVkIHByZXNlbnRhdGlvbiBjb252ZXJzaW9uIHN0YXR1cz0ke3N0YXR1c30gaWQ9JHtwcmVzZW50YXRpb25JZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmRlYnVnKCdVcHNlcnRlZCBwcmVzZW50YXRpb24gY29udmVyc2lvbicsIHsgc3RhdHVzLCBwcmVzZW50YXRpb25JZCwgbWVldGluZ0lkIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBVcGRhdGluZyBjb252ZXJzaW9uIHN0YXR1cyBwcmVzZW50YXRpb24gdG8gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBzZXRDdXJyZW50UHJlc2VudGF0aW9uIGZyb20gJy4uL21vZGlmaWVycy9zZXRDdXJyZW50UHJlc2VudGF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUHJlc2VudGF0aW9uQ3VycmVudFNldCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG5cbiAgY29uc3QgeyBwcmVzZW50YXRpb25JZCwgcG9kSWQgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwcmVzZW50YXRpb25JZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG5cbiAgcmV0dXJuIHNldEN1cnJlbnRQcmVzZW50YXRpb24obWVldGluZ0lkLCBwb2RJZCwgcHJlc2VudGF0aW9uSWQpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHNldFByZXNlbnRhdGlvbkRvd25sb2FkYWJsZSBmcm9tICcuLi9tb2RpZmllcnMvc2V0UHJlc2VudGF0aW9uRG93bmxvYWRhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUHJlc2VudGF0aW9uRG93bmxvYWRhYmxlU2V0KHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY2hlY2soYm9keSwgT2JqZWN0KTtcblxuICBjb25zdCB7IHByZXNlbnRhdGlvbklkLCBwb2RJZCwgZG93bmxvYWRhYmxlIH0gPSBib2R5O1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socHJlc2VudGF0aW9uSWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvZElkLCBTdHJpbmcpO1xuICBjaGVjayhkb3dubG9hZGFibGUsIEJvb2xlYW4pO1xuXG4gIHJldHVybiBzZXRQcmVzZW50YXRpb25Eb3dubG9hZGFibGUobWVldGluZ0lkLCBwb2RJZCwgcHJlc2VudGF0aW9uSWQsIGRvd25sb2FkYWJsZSk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmltcG9ydCByZW1vdmVQcmVzZW50YXRpb24gZnJvbSAnLi4vbW9kaWZpZXJzL3JlbW92ZVByZXNlbnRhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVByZXNlbnRhdGlvblJlbW92ZSh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgcG9kSWQsIHByZXNlbnRhdGlvbklkIH0gPSBib2R5O1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG4gIGNoZWNrKHByZXNlbnRhdGlvbklkLCBTdHJpbmcpO1xuXG4gIHJldHVybiByZW1vdmVQcmVzZW50YXRpb24obWVldGluZ0lkLCBwb2RJZCwgcHJlc2VudGF0aW9uSWQpO1xufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVQcmVzZW50YXRpb24ocHJlc2VudGF0aW9uSWQsIHBvZElkKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnUmVtb3ZlUHJlc2VudGF0aW9uUHViTXNnJztcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHByZXNlbnRhdGlvbklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHBvZElkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHByZXNlbnRhdGlvbklkLFxuICAgICAgcG9kSWQsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCByZW1vdmVQcmVzZW50YXRpb24gJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UHJlc2VudGF0aW9uKHByZXNlbnRhdGlvbklkLCBwb2RJZCkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1NldEN1cnJlbnRQcmVzZW50YXRpb25QdWJNc2cnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2socHJlc2VudGF0aW9uSWQsIFN0cmluZyk7XG4gICAgY2hlY2socG9kSWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgcHJlc2VudGF0aW9uSWQsXG4gICAgICBwb2RJZCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHNldFByZXNlbnRhdGlvbiAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRQcmVzZW50YXRpb25Eb3dubG9hZGFibGUocHJlc2VudGF0aW9uSWQsIGRvd25sb2FkYWJsZSkge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ1NldFByZXNlbnRhdGlvbkRvd25sb2FkYWJsZVB1Yk1zZyc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhkb3dubG9hZGFibGUsIEJvb2xlYW4pO1xuICAgIGNoZWNrKHByZXNlbnRhdGlvbklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHByZXNlbnRhdGlvbklkLFxuICAgICAgcG9kSWQ6ICdERUZBVUxUX1BSRVNFTlRBVElPTl9QT0QnLFxuICAgICAgZG93bmxvYWRhYmxlLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2Qgc2V0UHJlc2VudGF0aW9uRG93bmxvYWRhYmxlICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBIVFRQIH0gZnJvbSAnbWV0ZW9yL2h0dHAnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFByZXNlbnRhdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IGZsYXQgZnJvbSAnZmxhdCc7XG5pbXBvcnQgYWRkU2xpZGUgZnJvbSAnL2ltcG9ydHMvYXBpL3NsaWRlcy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZFNsaWRlJztcbmltcG9ydCBzZXRDdXJyZW50UHJlc2VudGF0aW9uIGZyb20gJy4vc2V0Q3VycmVudFByZXNlbnRhdGlvbic7XG5cbmNvbnN0IGdldFNsaWRlVGV4dCA9IGFzeW5jICh1cmwpID0+IHtcbiAgbGV0IGNvbnRlbnQgPSAnJztcbiAgdHJ5IHtcbiAgICBjb250ZW50ID0gYXdhaXQgSFRUUC5nZXQodXJsKS5jb250ZW50O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIExvZ2dlci5lcnJvcihgTm8gZmlsZSBmb3VuZC4gJHtlcnJvcn1gKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn07XG5cbmNvbnN0IGFkZFNsaWRlcyA9IChtZWV0aW5nSWQsIHBvZElkLCBwcmVzZW50YXRpb25JZCwgc2xpZGVzKSA9PiB7XG4gIHNsaWRlcy5mb3JFYWNoKGFzeW5jIChzbGlkZSkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBnZXRTbGlkZVRleHQoc2xpZGUudHh0VXJpKTtcblxuICAgIE9iamVjdC5hc3NpZ24oc2xpZGUsIHsgY29udGVudCB9KTtcblxuICAgIGFkZFNsaWRlKG1lZXRpbmdJZCwgcG9kSWQsIHByZXNlbnRhdGlvbklkLCBzbGlkZSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkUHJlc2VudGF0aW9uKG1lZXRpbmdJZCwgcG9kSWQsIHByZXNlbnRhdGlvbikge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHBvZElkLCBTdHJpbmcpO1xuICBjaGVjayhwcmVzZW50YXRpb24sIHtcbiAgICBpZDogU3RyaW5nLFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICBjdXJyZW50OiBCb29sZWFuLFxuICAgIHBhZ2VzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiBTdHJpbmcsXG4gICAgICAgIG51bTogTnVtYmVyLFxuICAgICAgICB0aHVtYlVyaTogU3RyaW5nLFxuICAgICAgICBzd2ZVcmk6IFN0cmluZyxcbiAgICAgICAgdHh0VXJpOiBTdHJpbmcsXG4gICAgICAgIHN2Z1VyaTogU3RyaW5nLFxuICAgICAgICBjdXJyZW50OiBCb29sZWFuLFxuICAgICAgICB4T2Zmc2V0OiBOdW1iZXIsXG4gICAgICAgIHlPZmZzZXQ6IE51bWJlcixcbiAgICAgICAgd2lkdGhSYXRpbzogTnVtYmVyLFxuICAgICAgICBoZWlnaHRSYXRpbzogTnVtYmVyLFxuICAgICAgfSxcbiAgICBdLFxuICAgIGRvd25sb2FkYWJsZTogQm9vbGVhbixcbiAgfSk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHBvZElkLFxuICAgIGlkOiBwcmVzZW50YXRpb24uaWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDogT2JqZWN0LmFzc2lnbih7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICBwb2RJZCxcbiAgICAgICdjb252ZXJzaW9uLmRvbmUnOiB0cnVlLFxuICAgICAgJ2NvbnZlcnNpb24uZXJyb3InOiBmYWxzZSxcbiAgICB9LCBmbGF0KHByZXNlbnRhdGlvbiwgeyBzYWZlOiB0cnVlIH0pKSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgaW5zZXJ0ZWRJZCB9ID0gUHJlc2VudGF0aW9ucy51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGFkZFNsaWRlcyhtZWV0aW5nSWQsIHBvZElkLCBwcmVzZW50YXRpb24uaWQsIHByZXNlbnRhdGlvbi5wYWdlcyk7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgaWYgKHByZXNlbnRhdGlvbi5jdXJyZW50KSB7XG4gICAgICAgIHNldEN1cnJlbnRQcmVzZW50YXRpb24obWVldGluZ0lkLCBwb2RJZCwgcHJlc2VudGF0aW9uLmlkKTtcbiAgICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIHByZXNlbnRhdGlvbiBpZD0ke3ByZXNlbnRhdGlvbi5pZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBVcHNlcnRlZCBwcmVzZW50YXRpb24gaWQ9JHtwcmVzZW50YXRpb24uaWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFkZGluZyBwcmVzZW50YXRpb24gdG8gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBQcmVzZW50YXRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJQcmVzZW50YXRpb25zKG1lZXRpbmdJZCwgcG9kSWQpIHtcbiAgLy8gY2xlYXJpbmcgcHJlc2VudGF0aW9ucyBmb3IgMSBwb2RcbiAgaWYgKG1lZXRpbmdJZCAmJiBwb2RJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFByZXNlbnRhdGlvbnMucmVtb3ZlKHsgbWVldGluZ0lkLCBwb2RJZCB9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIFByZXNlbnRhdGlvbnMgKCR7bWVldGluZ0lkfSwgJHtwb2RJZH0pYCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhbmluZyBQcmVzZW50YXRpb25zICgke21lZXRpbmdJZH0sICR7cG9kSWR9KS4gJHtlcnJ9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gY2xlYXJpbmcgcHJlc2VudGF0aW9ucyBmb3IgdGhlIHdob2xlIG1lZXRpbmdcbiAgaWYgKG1lZXRpbmdJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFByZXNlbnRhdGlvbnMucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgUHJlc2VudGF0aW9ucyAoJHttZWV0aW5nSWR9KWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhbmluZyBQcmVzZW50YXRpb25zICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gUHJlc2VudGF0aW9ucy5yZW1vdmUoe30pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oJ0NsZWFyZWQgUHJlc2VudGF0aW9ucyAoYWxsKScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhbmluZyBQcmVzZW50YXRpb25zIChhbGwpLiAke2Vycn1gKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBQcmVzZW50YXRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuaW1wb3J0IGNsZWFyU2xpZGVzUHJlc2VudGF0aW9uIGZyb20gJy9pbXBvcnRzL2FwaS9zbGlkZXMvc2VydmVyL21vZGlmaWVycy9jbGVhclNsaWRlc1ByZXNlbnRhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZVByZXNlbnRhdGlvbihtZWV0aW5nSWQsIHBvZElkLCBwcmVzZW50YXRpb25JZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHByZXNlbnRhdGlvbklkLCBTdHJpbmcpO1xuICBjaGVjayhwb2RJZCwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcG9kSWQsXG4gICAgaWQ6IHByZXNlbnRhdGlvbklkLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBQcmVzZW50YXRpb25zLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIGNsZWFyU2xpZGVzUHJlc2VudGF0aW9uKG1lZXRpbmdJZCwgcHJlc2VudGF0aW9uSWQpO1xuICAgICAgTG9nZ2VyLmluZm8oYFJlbW92ZWQgcHJlc2VudGF0aW9uIGlkPSR7cHJlc2VudGF0aW9uSWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFJlbW92aW5nIHByZXNlbnRhdGlvbiBmcm9tIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUHJlc2VudGF0aW9ucyBmcm9tICcvaW1wb3J0cy9hcGkvcHJlc2VudGF0aW9ucyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEN1cnJlbnRQcmVzZW50YXRpb24obWVldGluZ0lkLCBwb2RJZCwgcHJlc2VudGF0aW9uSWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwcmVzZW50YXRpb25JZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG5cbiAgY29uc3Qgb2xkQ3VycmVudCA9IHtcbiAgICBzZWxlY3Rvcjoge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgcG9kSWQsXG4gICAgICBjdXJyZW50OiB0cnVlLFxuICAgIH0sXG4gICAgbW9kaWZpZXI6IHtcbiAgICAgICRzZXQ6IHsgY3VycmVudDogZmFsc2UgfSxcbiAgICB9LFxuICAgIGNhbGxiYWNrOiAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIExvZ2dlci5lcnJvcihgVW5zZXR0aW5nIHRoZSBjdXJyZW50IHByZXNlbnRhdGlvbjogJHtlcnJ9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgTG9nZ2VyLmluZm8oJ1Vuc2V0dGVkIGFzIGN1cnJlbnQgcHJlc2VudGF0aW9uJyk7XG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBuZXdDdXJyZW50ID0ge1xuICAgIHNlbGVjdG9yOiB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICBwb2RJZCxcbiAgICAgIGlkOiBwcmVzZW50YXRpb25JZCxcbiAgICB9LFxuICAgIG1vZGlmaWVyOiB7XG4gICAgICAkc2V0OiB7IGN1cnJlbnQ6IHRydWUgfSxcbiAgICB9LFxuICAgIGNhbGxiYWNrOiAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIExvZ2dlci5lcnJvcihgU2V0dGluZyBhcyBjdXJyZW50IHByZXNlbnRhdGlvbiBpZD0ke3ByZXNlbnRhdGlvbklkfTogJHtlcnJ9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgTG9nZ2VyLmluZm8oYFNldHRlZCBhcyBjdXJyZW50IHByZXNlbnRhdGlvbiBpZD0ke3ByZXNlbnRhdGlvbklkfWApO1xuICAgIH0sXG4gIH07XG5cbiAgY29uc3Qgb2xkUHJlc2VudGF0aW9uID0gUHJlc2VudGF0aW9ucy5maW5kT25lKG9sZEN1cnJlbnQuc2VsZWN0b3IpO1xuICBjb25zdCBuZXdQcmVzZW50YXRpb24gPSBQcmVzZW50YXRpb25zLmZpbmRPbmUobmV3Q3VycmVudC5zZWxlY3Rvcik7XG5cbiAgLy8gUHJldmVudCBidWcgd2l0aCBwcmVzZW50YXRpb24gYmVpbmcgdW5zZXQsIHNhbWUgaGFwcGVucyBpbiB0aGUgc2xpZGVcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmlnYmx1ZWJ1dHRvbi9iaWdibHVlYnV0dG9uL3B1bGwvNDQzMVxuICBpZiAob2xkUHJlc2VudGF0aW9uICYmIG5ld1ByZXNlbnRhdGlvbiAmJiAob2xkUHJlc2VudGF0aW9uLl9pZCA9PT0gbmV3UHJlc2VudGF0aW9uLl9pZCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobmV3UHJlc2VudGF0aW9uKSB7XG4gICAgUHJlc2VudGF0aW9ucy51cGRhdGUobmV3UHJlc2VudGF0aW9uLl9pZCwgbmV3Q3VycmVudC5tb2RpZmllciwgbmV3Q3VycmVudC5jYWxsYmFjayk7XG4gIH1cblxuICBpZiAob2xkUHJlc2VudGF0aW9uKSB7XG4gICAgUHJlc2VudGF0aW9ucy51cGRhdGUob2xkUHJlc2VudGF0aW9uLl9pZCwgb2xkQ3VycmVudC5tb2RpZmllciwgb2xkQ3VycmVudC5jYWxsYmFjayk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBQcmVzZW50YXRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UHJlc2VudGF0aW9uRG93bmxvYWRhYmxlKG1lZXRpbmdJZCwgcG9kSWQsXG4gIHByZXNlbnRhdGlvbklkLCBkb3dubG9hZGFibGUpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwcmVzZW50YXRpb25JZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG4gIGNoZWNrKGRvd25sb2FkYWJsZSwgQm9vbGVhbik7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHBvZElkLFxuICAgIGlkOiBwcmVzZW50YXRpb25JZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBkb3dubG9hZGFibGUsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbnVtYmVyQWZmZWN0ZWQgfSA9IFByZXNlbnRhdGlvbnMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBTZXQgZG93bmxvYWRhYmxlIHN0YXR1cyBvbiBwcmVzZW50YXRpb24geyR7cHJlc2VudGF0aW9uSWR9IGluIG1lZXRpbmcgeyR7bWVldGluZ0lkfX1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgQ291bGQgbm90IHNldCBkb3dubG9hZGFibGUgb24gcHJlcyB7JHtwcmVzZW50YXRpb25JZH0gaW4gbWVldGluZyB7JHttZWV0aW5nSWR9fSAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVQcmVzZW50YXRpb25BZGRlZCBmcm9tICcuL2hhbmRsZXJzL3ByZXNlbnRhdGlvbkFkZGVkJztcbmltcG9ydCBoYW5kbGVQcmVzZW50YXRpb25SZW1vdmUgZnJvbSAnLi9oYW5kbGVycy9wcmVzZW50YXRpb25SZW1vdmUnO1xuaW1wb3J0IGhhbmRsZVByZXNlbnRhdGlvbkN1cnJlbnRTZXQgZnJvbSAnLi9oYW5kbGVycy9wcmVzZW50YXRpb25DdXJyZW50U2V0JztcbmltcG9ydCBoYW5kbGVQcmVzZW50YXRpb25Db252ZXJzaW9uVXBkYXRlIGZyb20gJy4vaGFuZGxlcnMvcHJlc2VudGF0aW9uQ29udmVyc2lvblVwZGF0ZSc7XG5pbXBvcnQgaGFuZGxlUHJlc2VudGF0aW9uRG93bmxvYWRhYmxlU2V0IGZyb20gJy4vaGFuZGxlcnMvcHJlc2VudGF0aW9uRG93bmxvYWRhYmxlU2V0JztcblxuUmVkaXNQdWJTdWIub24oJ1BkZkNvbnZlcnNpb25JbnZhbGlkRXJyb3JFdnRNc2cnLCBoYW5kbGVQcmVzZW50YXRpb25Db252ZXJzaW9uVXBkYXRlKTtcblJlZGlzUHViU3ViLm9uKCdQcmVzZW50YXRpb25QYWdlR2VuZXJhdGVkRXZ0TXNnJywgaGFuZGxlUHJlc2VudGF0aW9uQ29udmVyc2lvblVwZGF0ZSk7XG5SZWRpc1B1YlN1Yi5vbignUHJlc2VudGF0aW9uUGFnZUNvdW50RXJyb3JFdnRNc2cnLCBoYW5kbGVQcmVzZW50YXRpb25Db252ZXJzaW9uVXBkYXRlKTtcblJlZGlzUHViU3ViLm9uKCdQcmVzZW50YXRpb25Db252ZXJzaW9uVXBkYXRlRXZ0TXNnJywgaGFuZGxlUHJlc2VudGF0aW9uQ29udmVyc2lvblVwZGF0ZSk7XG5SZWRpc1B1YlN1Yi5vbignUHJlc2VudGF0aW9uVXBsb2FkZWRGaWxlVG9vTGFyZ2VFcnJvckV2dE1zZycsIGhhbmRsZVByZXNlbnRhdGlvbkNvbnZlcnNpb25VcGRhdGUpO1xuUmVkaXNQdWJTdWIub24oJ1ByZXNlbnRhdGlvbkNvbnZlcnNpb25Db21wbGV0ZWRFdnRNc2cnLCBoYW5kbGVQcmVzZW50YXRpb25BZGRlZCk7XG5SZWRpc1B1YlN1Yi5vbignUmVtb3ZlUHJlc2VudGF0aW9uRXZ0TXNnJywgaGFuZGxlUHJlc2VudGF0aW9uUmVtb3ZlKTtcblJlZGlzUHViU3ViLm9uKCdTZXRDdXJyZW50UHJlc2VudGF0aW9uRXZ0TXNnJywgaGFuZGxlUHJlc2VudGF0aW9uQ3VycmVudFNldCk7XG5SZWRpc1B1YlN1Yi5vbignU2V0UHJlc2VudGF0aW9uRG93bmxvYWRhYmxlRXZ0TXNnJywgaGFuZGxlUHJlc2VudGF0aW9uRG93bmxvYWRhYmxlU2V0KTtcbiIsImltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHJlbW92ZVByZXNlbnRhdGlvbiBmcm9tICcuL21ldGhvZHMvcmVtb3ZlUHJlc2VudGF0aW9uJztcbmltcG9ydCBzZXRQcmVzZW50YXRpb24gZnJvbSAnLi9tZXRob2RzL3NldFByZXNlbnRhdGlvbic7XG5pbXBvcnQgc2V0UHJlc2VudGF0aW9uRG93bmxvYWRhYmxlIGZyb20gJy4vbWV0aG9kcy9zZXRQcmVzZW50YXRpb25Eb3dubG9hZGFibGUnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHJlbW92ZVByZXNlbnRhdGlvbixcbiAgc2V0UHJlc2VudGF0aW9uLFxuICBzZXRQcmVzZW50YXRpb25Eb3dubG9hZGFibGUsXG59KTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IFByZXNlbnRhdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5mdW5jdGlvbiBwcmVzZW50YXRpb25zKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBQcmVzZW50YXRpb24gd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gUHJlc2VudGF0aW9ucy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgUHJlc2VudGF0aW9ucycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgcmV0dXJuIFByZXNlbnRhdGlvbnMuZmluZCh7IG1lZXRpbmdJZCB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kUHJlc2VudGF0aW9ucyA9IHByZXNlbnRhdGlvbnMuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kUHJlc2VudGF0aW9ucyguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ3ByZXNlbnRhdGlvbnMnLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBQcmVzZW50YXRpb25zID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3ByZXNlbnRhdGlvbnMnKTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAvLyB0eXBlcyBvZiBxdWVyaWVzIGZvciB0aGUgcHJlc2VudGF0aW9uczpcbiAgLy8gMS4gbWVldGluZ0lkLCBwb2RJZCwgaWQgICAgICAgICggMyApXG4gIC8vIDIuIG1lZXRpbmdJZCwgaWQgICAgICAgICAgICAgICAoIDEgKVxuICAvLyAzLiBtZWV0aW5nSWQsIGlkLCBjdXJyZW50ICAgICAgKCAyIClcbiAgLy8gNC4gbWVldGluZ0lkICAgICAgICAgICAgICAgICAgICggMSApXG5cbiAgUHJlc2VudGF0aW9ucy5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEsIHBvZElkOiAxLCBpZDogMSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJlc2VudGF0aW9ucztcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IGFkZFNjcmVlbnNoYXJlIGZyb20gJy4uL21vZGlmaWVycy9hZGRTY3JlZW5zaGFyZSc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgc3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlb1N5c3RlbUNhbGwgZnJvbSAnL2ltcG9ydHMvYXBpL2V4dGVybmFsLXZpZGVvcy9zZXJ2ZXIvbWV0aG9kcy9zdG9wV2F0Y2hpbmdFeHRlcm5hbFZpZGVvU3lzdGVtQ2FsbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVNjcmVlbnNoYXJlU3RhcnRlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2soYm9keSwgT2JqZWN0KTtcblxuICBjb25zdCBtZWV0aW5nID0gTWVldGluZ3MuZmluZE9uZSh7IG1lZXRpbmdJZCB9KTtcbiAgaWYgKG1lZXRpbmcgJiYgbWVldGluZy5leHRlcm5hbFZpZGVvVXJsKSB7XG4gICAgTG9nZ2VyLmluZm8oYFNjcmVlbnNoYXJlU3RhcnRlZDogVGhlcmUgaXMgZXh0ZXJuYWwgdmlkZW8gYmVpbmcgc2hhcmVkLiBTdG9wcGluZyBpdCBkdWUgdG8gcHJlc2VudGVyIGNoYW5nZSwgJHttZWV0aW5nLmV4dGVybmFsVmlkZW9Vcmx9YCk7XG4gICAgc3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlb1N5c3RlbUNhbGwoeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZDogJ3N5c3RlbS1zY3JlZW5zaGFyZS1zdGFydGluZycgfSk7XG4gIH1cbiAgcmV0dXJuIGFkZFNjcmVlbnNoYXJlKG1lZXRpbmdJZCwgYm9keSk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgY2xlYXJTY3JlZW5zaGFyZSBmcm9tICcuLi9tb2RpZmllcnMvY2xlYXJTY3JlZW5zaGFyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVNjcmVlbnNoYXJlU3RvcHBlZCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgc2NyZWVuc2hhcmVDb25mIH0gPSBib2R5O1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2soc2NyZWVuc2hhcmVDb25mLCBTdHJpbmcpO1xuXG4gIHJldHVybiBjbGVhclNjcmVlbnNoYXJlKG1lZXRpbmdJZCwgc2NyZWVuc2hhcmVDb25mKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBmbGF0IGZyb20gJ2ZsYXQnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFNjcmVlbnNoYXJlIGZyb20gJy9pbXBvcnRzL2FwaS9zY3JlZW5zaGFyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFNjcmVlbnNoYXJlKG1lZXRpbmdJZCwgYm9keSkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHNjcmVlbnNoYXJlOiBmbGF0KGJvZHkpLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG51bWJlckFmZmVjdGVkIH0gPSBTY3JlZW5zaGFyZS51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwc2VydGVkIHNjcmVlbnNoYXJlIGlkPSR7Ym9keS5zY3JlZW5zaGFyZUNvbmZ9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFkZGluZyBzY3JlZW5zaGFyZSB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFNjcmVlbnNoYXJlIGZyb20gJy9pbXBvcnRzL2FwaS9zY3JlZW5zaGFyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyU2NyZWVuc2hhcmUobWVldGluZ0lkLCBzY3JlZW5zaGFyZUNvbmYpIHtcbiAgdHJ5IHtcbiAgICBsZXQgbnVtYmVyQWZmZWN0ZWQ7XG5cbiAgICBpZiAobWVldGluZ0lkICYmIHNjcmVlbnNoYXJlQ29uZikge1xuICAgICAgbnVtYmVyQWZmZWN0ZWQgPSBTY3JlZW5zaGFyZS5yZW1vdmUoeyBtZWV0aW5nSWQsICdzY3JlZW5zaGFyZS5zY3JlZW5zaGFyZUNvbmYnOiBzY3JlZW5zaGFyZUNvbmYgfSk7XG4gICAgfSBlbHNlIGlmIChtZWV0aW5nSWQpIHtcbiAgICAgIG51bWJlckFmZmVjdGVkID0gU2NyZWVuc2hhcmUucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXJBZmZlY3RlZCA9IFNjcmVlbnNoYXJlLnJlbW92ZSh7fSk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgcmVtb3ZlZCBzY3JlZW5zaGFyZSBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9IGlkPSR7c2NyZWVuc2hhcmVDb25mfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGByZW1vdmluZyBzY3JlZW5zaGFyZSB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVTY3JlZW5zaGFyZVN0YXJ0ZWQgZnJvbSAnLi9oYW5kbGVycy9zY3JlZW5zaGFyZVN0YXJ0ZWQnO1xuaW1wb3J0IGhhbmRsZVNjcmVlbnNoYXJlU3RvcHBlZCBmcm9tICcuL2hhbmRsZXJzL3NjcmVlbnNoYXJlU3RvcHBlZCc7XG5cblJlZGlzUHViU3ViLm9uKCdTY3JlZW5zaGFyZVJ0bXBCcm9hZGNhc3RTdGFydGVkRXZ0TXNnJywgaGFuZGxlU2NyZWVuc2hhcmVTdGFydGVkKTtcblJlZGlzUHViU3ViLm9uKCdTY3JlZW5zaGFyZVJ0bXBCcm9hZGNhc3RTdG9wcGVkRXZ0TXNnJywgaGFuZGxlU2NyZWVuc2hhcmVTdG9wcGVkKTtcbiIsImltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5NZXRlb3IubWV0aG9kcyh7XG59KTtcbiIsImltcG9ydCBTY3JlZW5zaGFyZSBmcm9tICcvaW1wb3J0cy9hcGkvc2NyZWVuc2hhcmUnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmZ1bmN0aW9uIHNjcmVlbnNoYXJlKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBTY3JlZW5zaGFyZSB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBTY3JlZW5zaGFyZS5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgU2NyZWVuc2hhcmUnLCB7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xuXG4gIHJldHVybiBTY3JlZW5zaGFyZS5maW5kKHsgbWVldGluZ0lkIH0pO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRTY3JlZW5zaGFyZSA9IHNjcmVlbnNoYXJlLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFNjcmVlbnNoYXJlKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgnc2NyZWVuc2hhcmUnLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBTY3JlZW5zaGFyZSA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCdzY3JlZW5zaGFyZScpO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIC8vIHR5cGVzIG9mIHF1ZXJpZXMgZm9yIHRoZSBzY3JlZW5zaGFyZTpcbiAgLy8gMS4gbWVldGluZ0lkXG5cbiAgU2NyZWVuc2hhcmUuX2Vuc3VyZUluZGV4KHsgbWVldGluZ0lkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTY3JlZW5zaGFyZTtcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBjaGFuZ2VDdXJyZW50U2xpZGUgZnJvbSAnLi4vbW9kaWZpZXJzL2NoYW5nZUN1cnJlbnRTbGlkZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVNsaWRlQ2hhbmdlKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3QgeyBwYWdlSWQsIHByZXNlbnRhdGlvbklkLCBwb2RJZCB9ID0gYm9keTtcblxuICBjaGVjayhwYWdlSWQsIFN0cmluZyk7XG4gIGNoZWNrKHByZXNlbnRhdGlvbklkLCBTdHJpbmcpO1xuICBjaGVjayhwb2RJZCwgU3RyaW5nKTtcblxuICByZXR1cm4gY2hhbmdlQ3VycmVudFNsaWRlKG1lZXRpbmdJZCwgcG9kSWQsIHByZXNlbnRhdGlvbklkLCBwYWdlSWQpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHJlc2l6ZVNsaWRlIGZyb20gJy4uL21vZGlmaWVycy9yZXNpemVTbGlkZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVNsaWRlUmVzaXplKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhib2R5LCBPYmplY3QpO1xuXG4gIHJldHVybiByZXNpemVTbGlkZShtZWV0aW5nSWQsIGJvZHkpO1xufVxuIiwiaW1wb3J0IFByZXNlbnRhdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMnO1xuaW1wb3J0IHsgU2xpZGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL3NsaWRlcyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3dpdGNoU2xpZGUoc2xpZGVOdW1iZXIsIHBvZElkKSB7IC8vIFRPRE8tLSBzZW5kIHByZXNlbnRhdGlvbklkIGFuZCBTbGlkZUlkXG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnU2V0Q3VycmVudFBhZ2VQdWJNc2cnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soc2xpZGVOdW1iZXIsIE51bWJlcik7XG4gICAgY2hlY2socG9kSWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHBvZElkLFxuICAgICAgY3VycmVudDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgY29uc3QgUHJlc2VudGF0aW9uID0gUHJlc2VudGF0aW9ucy5maW5kT25lKHNlbGVjdG9yKTtcblxuICAgIGlmICghUHJlc2VudGF0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdwcmVzZW50YXRpb24tbm90LWZvdW5kJywgJ1lvdSBuZWVkIGEgcHJlc2VudGF0aW9uIHRvIGJlIGFibGUgdG8gc3dpdGNoIHNsaWRlcycpO1xuICAgIH1cblxuICAgIGNvbnN0IFNsaWRlID0gU2xpZGVzLmZpbmRPbmUoe1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgcG9kSWQsXG4gICAgICBwcmVzZW50YXRpb25JZDogUHJlc2VudGF0aW9uLmlkLFxuICAgICAgbnVtOiBzbGlkZU51bWJlcixcbiAgICB9KTtcblxuICAgIGlmICghU2xpZGUpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3NsaWRlLW5vdC1mb3VuZCcsIGBTbGlkZSBudW1iZXIgJHtzbGlkZU51bWJlcn0gbm90IGZvdW5kIGluIHRoZSBjdXJyZW50IHByZXNlbnRhdGlvbmApO1xuICAgIH1cblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBwb2RJZCxcbiAgICAgIHByZXNlbnRhdGlvbklkOiBQcmVzZW50YXRpb24uaWQsXG4gICAgICBwYWdlSWQ6IFNsaWRlLmlkLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2Qgc3dpdGNoU2xpZGUgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBQcmVzZW50YXRpb25zIGZyb20gJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb25zJztcbmltcG9ydCB7IFNsaWRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9zbGlkZXMnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHpvb21TbGlkZShzbGlkZU51bWJlciwgcG9kSWQsIHdpZHRoUmF0aW8sIGhlaWdodFJhdGlvLCB4LCB5KSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnUmVzaXplQW5kTW92ZVBhZ2VQdWJNc2cnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHBvZElkLFxuICAgICAgY3VycmVudDogdHJ1ZSxcbiAgICB9O1xuICAgIGNvbnN0IFByZXNlbnRhdGlvbiA9IFByZXNlbnRhdGlvbnMuZmluZE9uZShzZWxlY3Rvcik7XG5cbiAgICBpZiAoIVByZXNlbnRhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcigncHJlc2VudGF0aW9uLW5vdC1mb3VuZCcsICdZb3UgbmVlZCBhIHByZXNlbnRhdGlvbiB0byBiZSBhYmxlIHRvIHN3aXRjaCBzbGlkZXMnKTtcbiAgICB9XG5cbiAgICBjb25zdCBTbGlkZSA9IFNsaWRlcy5maW5kT25lKHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHBvZElkLFxuICAgICAgcHJlc2VudGF0aW9uSWQ6IFByZXNlbnRhdGlvbi5pZCxcbiAgICAgIG51bTogc2xpZGVOdW1iZXIsXG4gICAgfSk7XG5cbiAgICBpZiAoIVNsaWRlKSB7XG4gICAgICB0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdzbGlkZS1ub3QtZm91bmQnLCBgU2xpZGUgbnVtYmVyICR7c2xpZGVOdW1iZXJ9IG5vdCBmb3VuZCBpbiB0aGUgY3VycmVudCBwcmVzZW50YXRpb25gKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgcG9kSWQsXG4gICAgICBwcmVzZW50YXRpb25JZDogUHJlc2VudGF0aW9uLmlkLFxuICAgICAgcGFnZUlkOiBTbGlkZS5pZCxcbiAgICAgIHhPZmZzZXQ6IHgsXG4gICAgICB5T2Zmc2V0OiB5LFxuICAgICAgd2lkdGhSYXRpbyxcbiAgICAgIGhlaWdodFJhdGlvLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2Qgem9vbVNsaWRlICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgcHJvYmUgZnJvbSAncHJvYmUtaW1hZ2Utc2l6ZSc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBmbGF0IGZyb20gJ2ZsYXQnO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IFNsaWRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9zbGlkZXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgU1ZHLCBQTkcgfSBmcm9tICcvaW1wb3J0cy91dGlscy9taW1lVHlwZXMnO1xuaW1wb3J0IGNhbGN1bGF0ZVNsaWRlRGF0YSBmcm9tICcvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBhZGRTbGlkZVBvc2l0aW9ucyBmcm9tICcuL2FkZFNsaWRlUG9zaXRpb25zJztcblxuY29uc3QgbG9hZFNsaWRlc0Zyb21IdHRwQWx3YXlzID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUuYXBwLmxvYWRTbGlkZXNGcm9tSHR0cEFsd2F5cyB8fCBmYWxzZTtcblxuY29uc3QgcmVxdWVzdFdoaXRlYm9hcmRIaXN0b3J5ID0gKG1lZXRpbmdJZCwgc2xpZGVJZCkgPT4ge1xuICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICBjb25zdCBFVkVOVF9OQU1FID0gJ0dldFdoaXRlYm9hcmRBbm5vdGF0aW9uc1JlcU1zZyc7XG4gIGNvbnN0IFVTRVJfSUQgPSAnbm9kZUpTYXBwJztcblxuICBjb25zdCBwYXlsb2FkID0ge1xuICAgIHdoaXRlYm9hcmRJZDogc2xpZGVJZCxcbiAgfTtcblxuICByZXR1cm4gUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgVVNFUl9JRCwgcGF5bG9hZCk7XG59O1xuXG5jb25zdCBTVVBQT1JURURfVFlQRVMgPSBbU1ZHLCBQTkddO1xuXG5jb25zdCBmZXRjaEltYWdlU2l6ZXMgPSBpbWFnZVVyaSA9PiBwcm9iZShpbWFnZVVyaSlcbiAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgIGlmICghU1VQUE9SVEVEX1RZUEVTLmluY2x1ZGVzKHJlc3VsdC5taW1lKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignaW52YWxpZC1pbWFnZS10eXBlJywgYHJlY2VpdmVkICR7cmVzdWx0Lm1pbWV9IGV4cGVjdGluZyAke1NVUFBPUlRFRF9UWVBFUy5qb2luKCl9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiByZXN1bHQud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlc3VsdC5oZWlnaHQsXG4gICAgfTtcbiAgfSlcbiAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIHBhcnNpbmcgaW1hZ2Ugc2l6ZS4gJHtyZWFzb259LiB1cmk9JHtpbWFnZVVyaX1gKTtcbiAgICByZXR1cm4gcmVhc29uO1xuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU2xpZGUobWVldGluZ0lkLCBwb2RJZCwgcHJlc2VudGF0aW9uSWQsIHNsaWRlKSB7XG4gIGNoZWNrKHBvZElkLCBTdHJpbmcpO1xuICBjaGVjayhwcmVzZW50YXRpb25JZCwgU3RyaW5nKTtcblxuICBjaGVjayhzbGlkZSwge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgbnVtOiBOdW1iZXIsXG4gICAgdGh1bWJVcmk6IFN0cmluZyxcbiAgICBzd2ZVcmk6IFN0cmluZyxcbiAgICB0eHRVcmk6IFN0cmluZyxcbiAgICBzdmdVcmk6IFN0cmluZyxcbiAgICBjdXJyZW50OiBCb29sZWFuLFxuICAgIHhPZmZzZXQ6IE51bWJlcixcbiAgICB5T2Zmc2V0OiBOdW1iZXIsXG4gICAgd2lkdGhSYXRpbzogTnVtYmVyLFxuICAgIGhlaWdodFJhdGlvOiBOdW1iZXIsXG4gICAgY29udGVudDogU3RyaW5nLFxuICB9KTtcblxuICBjb25zdCB7XG4gICAgaWQ6IHNsaWRlSWQsXG4gICAgeE9mZnNldCxcbiAgICB5T2Zmc2V0LFxuICAgIHdpZHRoUmF0aW8sXG4gICAgaGVpZ2h0UmF0aW8sXG4gICAgLi4ucmVzdFNsaWRlXG4gIH0gPSBzbGlkZTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcG9kSWQsXG4gICAgcHJlc2VudGF0aW9uSWQsXG4gICAgaWQ6IHNsaWRlSWQsXG4gIH07XG5cbiAgY29uc3QgaW1hZ2VVcmkgPSBzbGlkZS5zdmdVcmkgfHwgc2xpZGUucG5nVXJpO1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IE9iamVjdC5hc3NpZ24oXG4gICAgICB7IG1lZXRpbmdJZCB9LFxuICAgICAgeyBwb2RJZCB9LFxuICAgICAgeyBwcmVzZW50YXRpb25JZCB9LFxuICAgICAgeyBpZDogc2xpZGVJZCB9LFxuICAgICAgeyBpbWFnZVVyaSB9LFxuICAgICAgZmxhdChyZXN0U2xpZGUpLFxuICAgICAgeyBzYWZlOiB0cnVlIH0sXG4gICAgKSxcbiAgfTtcblxuICBjb25zdCBpbWFnZVNpemVVcmkgPSAobG9hZFNsaWRlc0Zyb21IdHRwQWx3YXlzID8gaW1hZ2VVcmkucmVwbGFjZSgvXmh0dHBzL2ksICdodHRwJykgOiBpbWFnZVVyaSk7XG5cbiAgcmV0dXJuIGZldGNoSW1hZ2VTaXplcyhpbWFnZVNpemVVcmkpXG4gICAgLnRoZW4oKHsgd2lkdGgsIGhlaWdodCB9KSA9PiB7XG4gICAgICAvLyB0aGVyZSBpcyBhIHJhcmUgY2FzZSB3aGVuIGZvciBhIHZlcnkgbG9uZyBub3QtYWN0aXZlIG1lZXRpbmcgdGhlIHByZXNlbnRhdGlvblxuICAgICAgLy8gZmlsZXMganVzdCBkaXNhcHBlYXIgYW5kIHdpZHRoL2hlaWdodCBjYW4ndCBiZSByZXRyaWV2ZWRcbiAgICAgIGlmICh3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgICAgLy8gcHJlLWNhbGN1bGF0aW5nIHRoZSB3aWR0aCwgaGVpZ2h0LCBhbmQgdmllQm94IGNvb3JkaW5hdGVzIC8gZGltZW5zaW9uc1xuICAgICAgICAvLyB0byB1bmxvYWQgdGhlIGNsaWVudC1zaWRlXG4gICAgICAgIGNvbnN0IHNsaWRlRGF0YSA9IHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgeE9mZnNldCxcbiAgICAgICAgICB5T2Zmc2V0LFxuICAgICAgICAgIHdpZHRoUmF0aW8sXG4gICAgICAgICAgaGVpZ2h0UmF0aW8sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNsaWRlUG9zaXRpb24gPSBjYWxjdWxhdGVTbGlkZURhdGEoc2xpZGVEYXRhKTtcblxuICAgICAgICBhZGRTbGlkZVBvc2l0aW9ucyhtZWV0aW5nSWQsIHBvZElkLCBwcmVzZW50YXRpb25JZCwgc2xpZGVJZCwgc2xpZGVQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgaW5zZXJ0ZWRJZCwgbnVtYmVyQWZmZWN0ZWQgfSA9IFNsaWRlcy51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgICAgICByZXF1ZXN0V2hpdGVib2FyZEhpc3RvcnkobWVldGluZ0lkLCBzbGlkZUlkKTtcblxuICAgICAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgICAgIExvZ2dlci5pbmZvKGBBZGRlZCBzbGlkZSBpZD0ke3NsaWRlSWR9IHBvZD0ke3BvZElkfSBwcmVzZW50YXRpb249JHtwcmVzZW50YXRpb25JZH1gKTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICAgIExvZ2dlci5pbmZvKGBVcHNlcnRlZCBzbGlkZSBpZD0ke3NsaWRlSWR9IHBvZD0ke3BvZElkfSBwcmVzZW50YXRpb249JHtwcmVzZW50YXRpb25JZH1gKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gYWRkaW5nIHNsaWRlIHRvIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKHJlYXNvbiA9PiBMb2dnZXIuZXJyb3IoYEVycm9yIHBhcnNpbmcgaW1hZ2Ugc2l6ZS4gJHtyZWFzb259LiBzbGlkZT0ke3NsaWRlSWR9IHVyaT0ke2ltYWdlVXJpfWApKTtcbn1cbiIsImltcG9ydCB7IFNsaWRlUG9zaXRpb25zIH0gZnJvbSAnL2ltcG9ydHMvYXBpL3NsaWRlcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgZmxhdCBmcm9tICdmbGF0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU2xpZGVQb3NpdGlvbnMoXG4gIG1lZXRpbmdJZCxcbiAgcG9kSWQsXG4gIHByZXNlbnRhdGlvbklkLFxuICBzbGlkZUlkLFxuICBzbGlkZVBvc2l0aW9uLFxuKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2socG9kSWQsIFN0cmluZyk7XG4gIGNoZWNrKHByZXNlbnRhdGlvbklkLCBTdHJpbmcpO1xuICBjaGVjayhzbGlkZUlkLCBTdHJpbmcpO1xuXG4gIGNoZWNrKHNsaWRlUG9zaXRpb24sIHtcbiAgICB3aWR0aDogTnVtYmVyLFxuICAgIGhlaWdodDogTnVtYmVyLFxuICAgIHg6IE51bWJlcixcbiAgICB5OiBOdW1iZXIsXG4gICAgdmlld0JveFdpZHRoOiBOdW1iZXIsXG4gICAgdmlld0JveEhlaWdodDogTnVtYmVyLFxuICB9KTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcG9kSWQsXG4gICAgcHJlc2VudGF0aW9uSWQsXG4gICAgaWQ6IHNsaWRlSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDogT2JqZWN0LmFzc2lnbihcbiAgICAgIHsgbWVldGluZ0lkIH0sXG4gICAgICB7IHBvZElkIH0sXG4gICAgICB7IHByZXNlbnRhdGlvbklkIH0sXG4gICAgICB7IGlkOiBzbGlkZUlkIH0sXG4gICAgICBmbGF0KHNsaWRlUG9zaXRpb24pLFxuICAgICAgeyBzYWZlOiB0cnVlIH0sXG4gICAgKSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgaW5zZXJ0ZWRJZCB9ID0gU2xpZGVQb3NpdGlvbnMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIHNsaWRlIHBvc2l0aW9uIGlkPSR7c2xpZGVJZH0gcG9kPSR7cG9kSWR9IHByZXNlbnRhdGlvbj0ke3ByZXNlbnRhdGlvbklkfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBzZXJ0ZWQgc2xpZGUgcG9zaXRpb24gaWQ9JHtzbGlkZUlkfSBwb2Q9JHtwb2RJZH0gcHJlc2VudGF0aW9uPSR7cHJlc2VudGF0aW9uSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFkZGluZyBzbGlkZSBwb3NpdGlvbiB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHsgU2xpZGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL3NsaWRlcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYW5nZUN1cnJlbnRTbGlkZShtZWV0aW5nSWQsIHBvZElkLCBwcmVzZW50YXRpb25JZCwgc2xpZGVJZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHByZXNlbnRhdGlvbklkLCBTdHJpbmcpO1xuICBjaGVjayhzbGlkZUlkLCBTdHJpbmcpO1xuICBjaGVjayhwb2RJZCwgU3RyaW5nKTtcblxuICBjb25zdCBvbGRDdXJyZW50ID0ge1xuICAgIHNlbGVjdG9yOiB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICBwb2RJZCxcbiAgICAgIHByZXNlbnRhdGlvbklkLFxuICAgICAgY3VycmVudDogdHJ1ZSxcbiAgICB9LFxuICAgIG1vZGlmaWVyOiB7XG4gICAgICAkc2V0OiB7IGN1cnJlbnQ6IGZhbHNlIH0sXG4gICAgfSxcbiAgICBjYWxsYmFjazogKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBMb2dnZXIuZXJyb3IoYFVuc2V0dGluZyB0aGUgY3VycmVudCBzbGlkZTogJHtlcnJ9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgTG9nZ2VyLmluZm8oJ1Vuc2V0dGVkIHRoZSBjdXJyZW50IHNsaWRlJyk7XG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBuZXdDdXJyZW50ID0ge1xuICAgIHNlbGVjdG9yOiB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICBwb2RJZCxcbiAgICAgIHByZXNlbnRhdGlvbklkLFxuICAgICAgaWQ6IHNsaWRlSWQsXG4gICAgfSxcbiAgICBtb2RpZmllcjoge1xuICAgICAgJHNldDogeyBjdXJyZW50OiB0cnVlIH0sXG4gICAgfSxcbiAgICBjYWxsYmFjazogKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBMb2dnZXIuZXJyb3IoYFNldHRpbmcgYXMgY3VycmVudCBzbGlkZSBpZD0ke3NsaWRlSWR9OiAke2Vycn1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBMb2dnZXIuaW5mbyhgU2V0dGVkIGFzIGN1cnJlbnQgc2xpZGUgaWQ9JHtzbGlkZUlkfWApO1xuICAgIH0sXG4gIH07XG5cbiAgY29uc3Qgb2xkU2xpZGUgPSBTbGlkZXMuZmluZE9uZShvbGRDdXJyZW50LnNlbGVjdG9yKTtcbiAgY29uc3QgbmV3U2xpZGUgPSBTbGlkZXMuZmluZE9uZShuZXdDdXJyZW50LnNlbGVjdG9yKTtcblxuICAvLyBpZiB0aGUgb2xkQ3VycmVudCBhbmQgbmV3Q3VycmVudCBoYXZlIHRoZSBzYW1lIGlkc1xuICBpZiAob2xkU2xpZGUgJiYgbmV3U2xpZGUgJiYgKG9sZFNsaWRlLl9pZCA9PT0gbmV3U2xpZGUuX2lkKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuZXdTbGlkZSkge1xuICAgIFNsaWRlcy51cGRhdGUobmV3U2xpZGUuX2lkLCBuZXdDdXJyZW50Lm1vZGlmaWVyLCBuZXdDdXJyZW50LmNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChvbGRTbGlkZSkge1xuICAgIFNsaWRlcy51cGRhdGUob2xkU2xpZGUuX2lkLCBvbGRDdXJyZW50Lm1vZGlmaWVyLCBvbGRDdXJyZW50LmNhbGxiYWNrKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2xpZGVzLCBTbGlkZVBvc2l0aW9ucyB9IGZyb20gJy9pbXBvcnRzL2FwaS9zbGlkZXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhclNsaWRlcyhtZWV0aW5nSWQpIHtcbiAgaWYgKG1lZXRpbmdJZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZFNsaWRlUG9zaXRpb25zID0gU2xpZGVQb3NpdGlvbnMucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFNsaWRlcy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZFNsaWRlUG9zaXRpb25zKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIFNsaWRlUG9zaXRpb25zICgke21lZXRpbmdJZH0pYCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBTbGlkZXMgKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYW5pbmcgU2xpZGVzICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkU2xpZGVQb3NpdGlvbnMgPSBTbGlkZVBvc2l0aW9ucy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gU2xpZGVzLnJlbW92ZSh7IG1lZXRpbmdJZCB9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkU2xpZGVQb3NpdGlvbnMpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgU2xpZGVQb3NpdGlvbnMgKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKCdDbGVhcmVkIFNsaWRlcyAoYWxsKScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhbmluZyBTbGlkZXMgKGFsbCkuICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU2xpZGVzLCBTbGlkZVBvc2l0aW9ucyB9IGZyb20gJy9pbXBvcnRzL2FwaS9zbGlkZXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IGNsZWFyQW5ub3RhdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2Fubm90YXRpb25zL3NlcnZlci9tb2RpZmllcnMvY2xlYXJBbm5vdGF0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyU2xpZGVzUHJlc2VudGF0aW9uKG1lZXRpbmdJZCwgcHJlc2VudGF0aW9uSWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwcmVzZW50YXRpb25JZCwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgcHJlc2VudGF0aW9uSWQsXG4gIH07XG5cbiAgY29uc3Qgd2hpdGVib2FyZElkcyA9IFNsaWRlcy5maW5kKHNlbGVjdG9yLCB7IGZpZWxkczogeyBpZDogMSB9IH0pLm1hcChyb3cgPT4gcm93LmlkKTtcblxuICB0cnkge1xuICAgIFNsaWRlUG9zaXRpb25zLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFNsaWRlcy5yZW1vdmUoc2VsZWN0b3IpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICB3aGl0ZWJvYXJkSWRzLmZvckVhY2god2hpdGVib2FyZElkID0+IGNsZWFyQW5ub3RhdGlvbnMobWVldGluZ0lkLCB3aGl0ZWJvYXJkSWQpKTtcblxuICAgICAgTG9nZ2VyLmluZm8oYFJlbW92ZWQgU2xpZGVzIHdoZXJlIHByZXNlbnRhdGlvbklkPSR7cHJlc2VudGF0aW9uSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFJlbW92aW5nIFNsaWRlcyBmcm9tIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgeyBTbGlkZVBvc2l0aW9ucyB9IGZyb20gJy9pbXBvcnRzL2FwaS9zbGlkZXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IGNhbGN1bGF0ZVNsaWRlRGF0YSBmcm9tICcvaW1wb3J0cy9hcGkvc2xpZGVzL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzaXplU2xpZGUobWVldGluZ0lkLCBzbGlkZSkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgY29uc3Qge1xuICAgIHBvZElkLFxuICAgIHByZXNlbnRhdGlvbklkLFxuICAgIHBhZ2VJZCxcbiAgICB3aWR0aFJhdGlvLFxuICAgIGhlaWdodFJhdGlvLFxuICAgIHhPZmZzZXQsXG4gICAgeU9mZnNldCxcbiAgfSA9IHNsaWRlO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICBwb2RJZCxcbiAgICBwcmVzZW50YXRpb25JZCxcbiAgICBpZDogcGFnZUlkLFxuICB9O1xuXG4gIC8vIGZldGNoaW5nIHRoZSBjdXJyZW50IHNsaWRlIGRhdGFcbiAgLy8gYW5kIHByZS1jYWxjdWxhdGluZyB0aGUgd2lkdGgsIGhlaWdodCwgYW5kIHZpZUJveCBjb29yZGluYXRlcyAvIHNpemVzXG4gIC8vIHRvIHJlZHVjZSB0aGUgY2xpZW50LXNpZGUgbG9hZFxuICBjb25zdCBTbGlkZVBvc2l0aW9uID0gU2xpZGVQb3NpdGlvbnMuZmluZE9uZShzZWxlY3Rvcik7XG5cbiAgaWYgKFNsaWRlUG9zaXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICB9ID0gU2xpZGVQb3NpdGlvbjtcblxuICAgIGNvbnN0IHNsaWRlRGF0YSA9IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgeE9mZnNldCxcbiAgICAgIHlPZmZzZXQsXG4gICAgICB3aWR0aFJhdGlvLFxuICAgICAgaGVpZ2h0UmF0aW8sXG4gICAgfTtcbiAgICBjb25zdCBjYWxjdWxhdGVkRGF0YSA9IGNhbGN1bGF0ZVNsaWRlRGF0YShzbGlkZURhdGEpO1xuXG4gICAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgICAkc2V0OiBjYWxjdWxhdGVkRGF0YSxcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gU2xpZGVQb3NpdGlvbnMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuZGVidWcoYFJlc2l6ZWQgc2xpZGUgcG9zaXRpb25zIGlkPSR7cGFnZUlkfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYE5vIHNsaWRlIHBvc2l0aW9ucyBmb3VuZCB3aXRoIGlkPSR7cGFnZUlkfWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBSZXNpemluZyBzbGlkZSBwb3NpdGlvbnMgaWQ9JHtwYWdlSWR9OiAke2Vycn1gKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgaGFuZGxlU2xpZGVSZXNpemUgZnJvbSAnLi9oYW5kbGVycy9zbGlkZVJlc2l6ZSc7XG5pbXBvcnQgaGFuZGxlU2xpZGVDaGFuZ2UgZnJvbSAnLi9oYW5kbGVycy9zbGlkZUNoYW5nZSc7XG5cblJlZGlzUHViU3ViLm9uKCdSZXNpemVBbmRNb3ZlUGFnZUV2dE1zZycsIGhhbmRsZVNsaWRlUmVzaXplKTtcblJlZGlzUHViU3ViLm9uKCdTZXRDdXJyZW50UGFnZUV2dE1zZycsIGhhbmRsZVNsaWRlQ2hhbmdlKTtcbiIsIlxuY29uc3QgY2FsY3VsYXRlU2xpZGVEYXRhID0gKHNsaWRlRGF0YSkgPT4ge1xuICBjb25zdCB7XG4gICAgd2lkdGgsIGhlaWdodCwgeE9mZnNldCwgeU9mZnNldCwgd2lkdGhSYXRpbywgaGVpZ2h0UmF0aW8sXG4gIH0gPSBzbGlkZURhdGE7XG5cbiAgLy8gY2FsY3VsYXRpbmcgdmlld0JveCBhbmQgb2Zmc2V0cyBmb3IgdGhlIGN1cnJlbnQgcHJlc2VudGF0aW9uXG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHg6ICgoLXhPZmZzZXQgKiAyKSAqIHdpZHRoKSAvIDEwMCxcbiAgICB5OiAoKC15T2Zmc2V0ICogMikgKiBoZWlnaHQpIC8gMTAwLFxuICAgIHZpZXdCb3hXaWR0aDogKHdpZHRoICogd2lkdGhSYXRpbykgLyAxMDAsXG4gICAgdmlld0JveEhlaWdodDogKGhlaWdodCAqIGhlaWdodFJhdGlvKSAvIDEwMCxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNhbGN1bGF0ZVNsaWRlRGF0YTtcbiIsImltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHN3aXRjaFNsaWRlIGZyb20gJy4vbWV0aG9kcy9zd2l0Y2hTbGlkZSc7XG5pbXBvcnQgem9vbVNsaWRlIGZyb20gJy4vbWV0aG9kcy96b29tU2xpZGUnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHN3aXRjaFNsaWRlLFxuICB6b29tU2xpZGUsXG59KTtcbiIsImltcG9ydCB7IFNsaWRlcywgU2xpZGVQb3NpdGlvbnMgfSBmcm9tICcvaW1wb3J0cy9hcGkvc2xpZGVzJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5mdW5jdGlvbiBzbGlkZXMoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIFNsaWRlcyB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBTbGlkZXMuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCB7IG1lZXRpbmdJZCwgdXNlcklkIH0gPSB0b2tlblZhbGlkYXRpb247XG5cbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIFNsaWRlcycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgcmV0dXJuIFNsaWRlcy5maW5kKHsgbWVldGluZ0lkIH0pO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRTbGlkZXMgPSBzbGlkZXMuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kU2xpZGVzKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgnc2xpZGVzJywgcHVibGlzaCk7XG5cbmZ1bmN0aW9uIHNsaWRlUG9zaXRpb25zKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBTbGlkZVBvc2l0aW9ucyB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBTbGlkZVBvc2l0aW9ucy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgU2xpZGVQb3NpdGlvbnMnLCB7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xuXG4gIHJldHVybiBTbGlkZVBvc2l0aW9ucy5maW5kKHsgbWVldGluZ0lkIH0pO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoUG9zaXRpb25zKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRTbGlkZVBvc2l0aW9ucyA9IHNsaWRlUG9zaXRpb25zLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFNsaWRlUG9zaXRpb25zKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgnc2xpZGUtcG9zaXRpb25zJywgcHVibGlzaFBvc2l0aW9ucyk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgU2xpZGVzID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3NsaWRlcycpO1xuY29uc3QgU2xpZGVQb3NpdGlvbnMgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbignc2xpZGUtcG9zaXRpb25zJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgLy8gdHlwZXMgb2YgcXVlcmllcyBmb3IgdGhlIHNsaWRlczpcblxuICAvLyAxLiBtZWV0aW5nSWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCAxIClcbiAgLy8gMi4gbWVldGluZ0lkLCBwb2RJZCAgICAgICAgICAgICAgICAgICAgICAgICAgICggMSApXG4gIC8vIDMuIG1lZXRpbmdJZCwgcHJlc2VudGF0aW9uSWQgICAgICAgICAgICAgICAgICAoIDEgKVxuICAvLyAzLiBtZWV0aW5nSWQsIHByZXNlbnRhdGlvbklkLCBudW0gICAgICAgICAgICAgKCAxIClcbiAgLy8gNC4gbWVldGluZ0lkLCBwb2RJZCwgcHJlc2VudGF0aW9uSWQsIGlkICAgICAgICggMyApIC0gaW5jbC4gcmVzaXplU2xpZGUsIHdoaWNoIGNhbiBiZSBpbnRlbnNlXG4gIC8vIDUuIG1lZXRpbmdJZCwgcG9kSWQsIHByZXNlbnRhdGlvbklkLCBjdXJyZW50ICAoIDEgKVxuXG4gIFNsaWRlcy5fZW5zdXJlSW5kZXgoe1xuICAgIG1lZXRpbmdJZDogMSwgcG9kSWQ6IDEsIHByZXNlbnRhdGlvbklkOiAxLCBpZDogMSxcbiAgfSk7XG5cbiAgU2xpZGVQb3NpdGlvbnMuX2Vuc3VyZUluZGV4KHtcbiAgICBtZWV0aW5nSWQ6IDEsIHBvZElkOiAxLCBwcmVzZW50YXRpb25JZDogMSwgaWQ6IDEsXG4gIH0pO1xufVxuXG5leHBvcnQgeyBTbGlkZXMsIFNsaWRlUG9zaXRpb25zIH07XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgY2hhbmdlUm9sZSBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL21vZGlmaWVycy9jaGFuZ2VSb2xlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlUm9sZShwYXlsb2FkLCBtZWV0aW5nSWQpIHtcbiAgY2hlY2socGF5bG9hZC5ib2R5LCBPYmplY3QpO1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgY29uc3QgeyB1c2VySWQsIHJvbGUsIGNoYW5nZWRCeSB9ID0gcGF5bG9hZC5ib2R5O1xuXG4gIGNoYW5nZVJvbGUocm9sZSwgdXNlcklkLCBtZWV0aW5nSWQsIGNoYW5nZWRCeSk7XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlRW1vamlTdGF0dXMoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHVzZXJJZCwgZW1vamkgfSA9IGJvZHk7XG5cbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICBjaGVjayhlbW9qaSwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIGVtb2ppVGltZTogKG5ldyBEYXRlKCkpLmdldFRpbWUoKSxcbiAgICAgIGVtb2ppLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFVzZXJzLnVwZGF0ZShzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQXNzaWduZWQgdXNlciBlbW9qaSBzdGF0dXMgJHtlbW9qaX0gaWQ9JHt1c2VySWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFzc2lnbmluZyB1c2VyIGVtb2ppIHN0YXR1czogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IFByZXNlbnRhdGlvblBvZHMgZnJvbSAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi1wb2RzJztcbmltcG9ydCBjaGFuZ2VQcmVzZW50ZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tb2RpZmllcnMvY2hhbmdlUHJlc2VudGVyJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5cbmZ1bmN0aW9uIHNldFByZXNlbnRlckluUG9kUmVxTXNnKGNyZWRlbnRpYWxzKSB7IC8vIFRPRE8tLSBzd2l0Y2ggdG8gbWVldGluZ0lkLCBldGNcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgY29uc3QgRVZFTlRfTkFNRSA9ICdTZXRQcmVzZW50ZXJJblBvZFJlcU1zZyc7XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcHJlc2VudGVySWQgfSA9IGNyZWRlbnRpYWxzO1xuXG4gIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgcG9kSWQ6ICdERUZBVUxUX1BSRVNFTlRBVElPTl9QT0QnLFxuICAgIG5leHRQcmVzZW50ZXJJZDogcHJlc2VudGVySWQsXG4gIH07XG5cbiAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUHJlc2VudGVyQXNzaWduZWQoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHByZXNlbnRlcklkLCBhc3NpZ25lZEJ5IH0gPSBib2R5O1xuXG4gIGNoYW5nZVByZXNlbnRlcih0cnVlLCBwcmVzZW50ZXJJZCwgbWVldGluZ0lkLCBhc3NpZ25lZEJ5KTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkOiB7ICRuZTogcHJlc2VudGVySWQgfSxcbiAgICBwcmVzZW50ZXI6IHRydWUsXG4gIH07XG5cbiAgY29uc3QgcHJldlByZXNlbnRlciA9IFVzZXJzLmZpbmRPbmUoc2VsZWN0b3IpO1xuXG4gIC8vIG5vIHByZXZpb3VzIHByZXNlbnRlcnNcbiAgLy8gVGhlIGJlbG93IGNvZGUgaXMgcmVzcG9uc2libGUgZm9yIHNldCBNZWV0aW5nIHByZXNlbnRlciB0byBiZSBkZWZhdWx0IHBvZCBwcmVzZW50ZXIgYXMgd2VsbC5cbiAgLy8gSXQncyBiZWVuIGhhbmRsZWQgaGVyZSBiZWNhdXNlIHJpZ2h0IG5vdyBha2thLWFwcHMgZG9uJ3QgaGFuZGxlIGFsbCBjYXNlcyBzY2VuYXJpb3MuXG4gIGlmICghcHJldlByZXNlbnRlcikge1xuICAgIGNvbnN0IHNldFByZXNlbnRlclBheWxvYWQgPSB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICByZXF1ZXN0ZXJVc2VySWQ6IGFzc2lnbmVkQnksXG4gICAgICBwcmVzZW50ZXJJZCxcbiAgICB9O1xuXG4gICAgY29uc3QgZGVmYXVsdFBvZFNlbGVjdG9yID0ge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgcG9kSWQ6ICdERUZBVUxUX1BSRVNFTlRBVElPTl9QT0QnLFxuICAgIH07XG4gICAgY29uc3QgY3VycmVudERlZmF1bHRQb2RQcmVzZW50ZXIgPSBQcmVzZW50YXRpb25Qb2RzLmZpbmRPbmUoZGVmYXVsdFBvZFNlbGVjdG9yKTtcbiAgICBjb25zdCB7IGN1cnJlbnRQcmVzZW50ZXJJZCB9ID0gY3VycmVudERlZmF1bHRQb2RQcmVzZW50ZXI7XG5cbiAgICBpZiAoY3VycmVudFByZXNlbnRlcklkID09PSAnJykge1xuICAgICAgcmV0dXJuIHNldFByZXNlbnRlckluUG9kUmVxTXNnKHNldFByZXNlbnRlclBheWxvYWQpO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZFByZXNlbnRlciA9IFVzZXJzLmZpbmRPbmUoeyBtZWV0aW5nSWQsIHVzZXJJZDogY3VycmVudFByZXNlbnRlcklkIH0pO1xuXG4gICAgaWYgKG9sZFByZXNlbnRlcj8udXNlcklkICE9PSBjdXJyZW50UHJlc2VudGVySWQpIHtcbiAgICAgIHJldHVybiBzZXRQcmVzZW50ZXJJblBvZFJlcU1zZyhzZXRQcmVzZW50ZXJQYXlsb2FkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNoYW5nZVByZXNlbnRlcihmYWxzZSwgcHJldlByZXNlbnRlci51c2VySWQsIG1lZXRpbmdJZCwgYXNzaWduZWRCeSk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmltcG9ydCByZW1vdmVVc2VyIGZyb20gJy4uL21vZGlmaWVycy9yZW1vdmVVc2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlVXNlcih7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgaW50SWQgfSA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhpbnRJZCwgU3RyaW5nKTtcblxuICByZXR1cm4gcmVtb3ZlVXNlcihtZWV0aW5nSWQsIGludElkKTtcbn1cbiIsImltcG9ydCB1c2VyRWplY3RlZCBmcm9tICcuLi9tb2RpZmllcnMvdXNlckVqZWN0ZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVFamVjdGVkVXNlcih7IGhlYWRlciwgYm9keSB9KSB7XG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IGhlYWRlcjtcbiAgY29uc3QgeyByZWFzb25Db2RlIH0gPSBib2R5O1xuXG4gIHVzZXJFamVjdGVkKG1lZXRpbmdJZCwgdXNlcklkLCByZWFzb25Db2RlKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB1c2VySW5hY3Rpdml0eUluc3BlY3QgZnJvbSAnLi4vbW9kaWZpZXJzL3VzZXJJbmFjdGl2aXR5SW5zcGVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVVzZXJJbmFjdGl2aXR5SW5zcGVjdCh7IGhlYWRlciwgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3QgeyB1c2VySWQgfSA9IGhlYWRlcjtcbiAgY29uc3QgeyByZXNwb25zZURlbGF5IH0gPSBib2R5O1xuXG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2socmVzcG9uc2VEZWxheSwgTWF0Y2guSW50ZWdlcik7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcblxuXG4gIHVzZXJJbmFjdGl2aXR5SW5zcGVjdCh1c2VySWQsIHJlc3BvbnNlRGVsYXkpO1xufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VySm9pbihtZWV0aW5nSWQsIHVzZXJJZCwgYXV0aFRva2VuKSB7XG4gIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gIGNvbnN0IEVWRU5UX05BTUUgPSAnVXNlckpvaW5NZWV0aW5nUmVxTXNnJztcblxuICBjaGVjayhhdXRoVG9rZW4sIFN0cmluZyk7XG5cbiAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICB1c2VySWQsXG4gICAgYXV0aFRva2VuLFxuICAgIGNsaWVudFR5cGU6ICdIVE1MNScsXG4gIH07XG5cbiAgTG9nZ2VyLmluZm8oYFVzZXI9JyR7dXNlcklkfScgaXMgam9pbmluZyBtZWV0aW5nPScke21lZXRpbmdJZH0nIGF1dGhUb2tlbj0nJHthdXRoVG9rZW59J2ApO1xuXG4gIHJldHVybiBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCB1c2VySWQsIHBheWxvYWQpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5pbXBvcnQgYWRkVXNlciBmcm9tICcuLi9tb2RpZmllcnMvYWRkVXNlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVVzZXJKb2luZWQoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB1c2VyID0gYm9keTtcblxuICBjaGVjayh1c2VyLCBPYmplY3QpO1xuXG4gIGFkZFVzZXIobWVldGluZ0lkLCB1c2VyKTtcbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IHVzZXJKb2luIGZyb20gJy4vdXNlckpvaW4nO1xuaW1wb3J0IHBlbmRpbmdBdXRoZW50aWNhdGlvbnNTdG9yZSBmcm9tICcuLi9zdG9yZS9wZW5kaW5nQXV0aGVudGljYXRpb25zJztcbmltcG9ydCBjcmVhdGVEdW1teVVzZXIgZnJvbSAnLi4vbW9kaWZpZXJzL2NyZWF0ZUR1bW15VXNlcic7XG5pbXBvcnQgQ2xpZW50Q29ubmVjdGlvbnMgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvQ2xpZW50Q29ubmVjdGlvbnMnO1xuXG5pbXBvcnQgdXBzZXJ0VmFsaWRhdGlvblN0YXRlIGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24vc2VydmVyL21vZGlmaWVycy91cHNlcnRWYWxpZGF0aW9uU3RhdGUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5jb25zdCBjbGVhck90aGVyU2Vzc2lvbnMgPSAoc2Vzc2lvblVzZXJJZCwgY3VycmVudCA9IGZhbHNlKSA9PiB7XG4gIGNvbnN0IHNlcnZlclNlc3Npb25zID0gTWV0ZW9yLnNlcnZlci5zZXNzaW9ucztcbiAgT2JqZWN0LmtleXMoc2VydmVyU2Vzc2lvbnMpXG4gICAgLmZpbHRlcihpID0+IHNlcnZlclNlc3Npb25zW2ldLnVzZXJJZCA9PT0gc2Vzc2lvblVzZXJJZClcbiAgICAuZmlsdGVyKGkgPT4gaSAhPT0gY3VycmVudClcbiAgICAuZm9yRWFjaChpID0+IHNlcnZlclNlc3Npb25zW2ldLmNsb3NlKCkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlVmFsaWRhdGVBdXRoVG9rZW4oeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7XG4gICAgdXNlcklkLFxuICAgIHZhbGlkLFxuICAgIGF1dGhUb2tlbixcbiAgICB3YWl0Rm9yQXBwcm92YWwsXG4gICAgcmVnaXN0ZXJlZE9uLFxuICAgIGF1dGhUb2tlblZhbGlkYXRlZE9uLFxuICAgIHJlYXNvbkNvZGUsXG4gIH0gPSBib2R5O1xuXG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2soYXV0aFRva2VuLCBTdHJpbmcpO1xuICBjaGVjayh2YWxpZCwgQm9vbGVhbik7XG4gIGNoZWNrKHdhaXRGb3JBcHByb3ZhbCwgQm9vbGVhbik7XG4gIGNoZWNrKHJlZ2lzdGVyZWRPbiwgTnVtYmVyKTtcbiAgY2hlY2soYXV0aFRva2VuVmFsaWRhdGVkT24sIE51bWJlcik7XG4gIGNoZWNrKHJlYXNvbkNvZGUsIFN0cmluZyk7XG5cbiAgY29uc3QgcGVuZGluZ0F1dGhzID0gcGVuZGluZ0F1dGhlbnRpY2F0aW9uc1N0b3JlLnRha2UobWVldGluZ0lkLCB1c2VySWQsIGF1dGhUb2tlbik7XG5cbiAgTG9nZ2VyLmluZm8oYFBlbmRpbmdBdXRocyBsZW5ndGggWyR7cGVuZGluZ0F1dGhzLmxlbmd0aH1dYCk7XG4gIGlmIChwZW5kaW5nQXV0aHMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHBlbmRpbmdBdXRocy5mb3JFYWNoKFxuICAgICAgKHBlbmRpbmdBdXRoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBtZXRob2RJbnZvY2F0aW9uT2JqZWN0IH0gPSBwZW5kaW5nQXV0aDtcbiAgICAgICAgICBjb25zdCBjb25uZWN0aW9uSWQgPSBtZXRob2RJbnZvY2F0aW9uT2JqZWN0LmNvbm5lY3Rpb24uaWQ7XG5cbiAgICAgICAgICB1cHNlcnRWYWxpZGF0aW9uU3RhdGUobWVldGluZ0lkLCB1c2VySWQsIFZhbGlkYXRpb25TdGF0ZXMuSU5WQUxJRCwgY29ubmVjdGlvbklkLCByZWFzb25Db2RlKTtcblxuICAgICAgICAgIC8vIFNjaGVkdWxlIHNvY2tldCBkaXNjb25uZWN0aW9uIGZvciB0aGlzIHVzZXIsIGdpdmluZyBzb21lIHRpbWUgZm9yIGNsaWVudCByZWNlaXZpbmcgdGhlIHJlYXNvbiBvZiBkaXNjb25uZWN0aW9uXG4gICAgICAgICAgTWV0ZW9yLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgbWV0aG9kSW52b2NhdGlvbk9iamVjdC5jb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgfSwgMjAwMCk7XG5cbiAgICAgICAgICBMb2dnZXIuaW5mbyhgQ2xvc2VkIGNvbm5lY3Rpb24gJHtjb25uZWN0aW9uSWR9IGR1ZSB0byBpbnZhbGlkIGF1dGggdG9rZW4uYCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIGNsb3Npbmcgc29ja2V0IGZvciBtZWV0aW5nSWQgJyR7bWVldGluZ0lkfScsIHVzZXJJZCAnJHt1c2VySWR9JywgYXV0aFRva2VuICR7YXV0aFRva2VufWApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdXNlciBJRCBvbiBjb25uZWN0aW9uc1xuICBwZW5kaW5nQXV0aHMuZm9yRWFjaChcbiAgICAocGVuZGluZ0F1dGgpID0+IHtcbiAgICAgIGNvbnN0IHsgbWV0aG9kSW52b2NhdGlvbk9iamVjdCB9ID0gcGVuZGluZ0F1dGg7XG5cbiAgICAgIC8qIExvZ2ljIG1pZ3JhdGVkIGZyb20gdmFsaWRhdGVBdXRoVG9rZW4gbWV0aG9kICggcG9zdHBvbmVkIHRvIG9ubHkgcnVuIGluIGNhc2Ugb2Ygc3VjY2VzcyByZXNwb25zZSApIC0gQmVnaW4gKi9cbiAgICAgIGNvbnN0IHNlc3Npb25JZCA9IGAke21lZXRpbmdJZH0tLSR7dXNlcklkfWA7XG5cbiAgICAgIG1ldGhvZEludm9jYXRpb25PYmplY3Quc2V0VXNlcklkKHNlc3Npb25JZCk7XG5cbiAgICAgIGNvbnN0IFVzZXIgPSBVc2Vycy5maW5kT25lKHtcbiAgICAgICAgbWVldGluZ0lkLFxuICAgICAgICB1c2VySWQsXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFVc2VyKSB7XG4gICAgICAgIGNyZWF0ZUR1bW15VXNlcihtZWV0aW5nSWQsIHVzZXJJZCwgYXV0aFRva2VuKTtcbiAgICAgIH1cblxuICAgICAgQ2xpZW50Q29ubmVjdGlvbnMuYWRkKHNlc3Npb25JZCwgbWV0aG9kSW52b2NhdGlvbk9iamVjdC5jb25uZWN0aW9uKTtcbiAgICAgIHVwc2VydFZhbGlkYXRpb25TdGF0ZShtZWV0aW5nSWQsIHVzZXJJZCwgVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQsIG1ldGhvZEludm9jYXRpb25PYmplY3QuY29ubmVjdGlvbi5pZCk7XG5cbiAgICAgIC8qIEVuZCBvZiBsb2dpYyBtaWdyYXRlZCBmcm9tIHZhbGlkYXRlQXV0aFRva2VuICovXG4gICAgfSxcbiAgKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICAgIGNsaWVudFR5cGU6ICdIVE1MNScsXG4gIH07XG5cbiAgY29uc3QgVXNlciA9IFVzZXJzLmZpbmRPbmUoc2VsZWN0b3IpO1xuXG4gIC8vIElmIHdlIGRvbnQgZmluZCB0aGUgdXNlciBvbiBvdXIgY29sbGVjdGlvbiBpcyBhIGZsYXNoIHVzZXIgYW5kIHdlIGNhbiBza2lwXG4gIGlmICghVXNlcikgcmV0dXJuO1xuXG4gIC8vIFB1Ymxpc2ggdXNlciBqb2luIG1lc3NhZ2VcbiAgaWYgKCF3YWl0Rm9yQXBwcm92YWwpIHtcbiAgICBMb2dnZXIuaW5mbygnVXNlcj0nLCBVc2VyKTtcbiAgICB1c2VySm9pbihtZWV0aW5nSWQsIHVzZXJJZCwgVXNlci5hdXRoVG9rZW4pO1xuICB9XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgdmFsaWRhdGVkOiB2YWxpZCxcbiAgICAgIGFwcHJvdmVkOiAhd2FpdEZvckFwcHJvdmFsLFxuICAgICAgbG9naW5UaW1lOiByZWdpc3RlcmVkT24sXG4gICAgICBhdXRoVG9rZW5WYWxpZGF0ZWRUaW1lOiBhdXRoVG9rZW5WYWxpZGF0ZWRPbixcbiAgICAgIGluYWN0aXZpdHlDaGVjazogZmFsc2UsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVXNlcnMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIGNvbnN0IHNlc3Npb25Vc2VySWQgPSBgJHttZWV0aW5nSWR9LSR7dXNlcklkfWA7XG4gICAgICBjb25zdCBjdXJyZW50Q29ubmVjdGlvbklkID0gVXNlci5jb25uZWN0aW9uSWQgPyBVc2VyLmNvbm5lY3Rpb25JZCA6IGZhbHNlO1xuICAgICAgY2xlYXJPdGhlclNlc3Npb25zKHNlc3Npb25Vc2VySWQsIGN1cnJlbnRDb25uZWN0aW9uSWQpO1xuXG4gICAgICBMb2dnZXIuaW5mbyhgVmFsaWRhdGVkIGF1dGggdG9rZW4gYXMgJHt2YWxpZH0gdXNlcj0ke3VzZXJJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmluZm8oJ05vIGF1dGggdG8gdmFsaWRhdGUnKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgVmFsaWRhdGluZyBhdXRoIHRva2VuOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXNzaWduUHJlc2VudGVyKHVzZXJJZCkgeyAvLyBUT0RPLS0gc2VuZCB1c2VybmFtZSBmcm9tIGNsaWVudCBzaWRlXG4gIHRyeSB7XG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnQXNzaWduUHJlc2VudGVyUmVxTXNnJztcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBVc2VyID0gVXNlcnMuZmluZE9uZSh7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICB1c2VySWQsXG4gICAgfSk7XG5cbiAgICBpZiAoIVVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3VzZXItbm90LWZvdW5kJywgJ1lvdSBuZWVkIGEgdmFsaWQgdXNlciB0byBiZSBhYmxlIHRvIHNldCBwcmVzZW50ZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgbmV3UHJlc2VudGVySWQ6IHVzZXJJZCxcbiAgICAgIG5ld1ByZXNlbnRlck5hbWU6IFVzZXIubmFtZSxcbiAgICAgIGFzc2lnbmVkQnk6IHJlcXVlc3RlclVzZXJJZCxcbiAgICAgIHJlcXVlc3RlcklkOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgfTtcblxuICAgIExvZ2dlci52ZXJib3NlKCdVc2VyIHNldCBhcyBwcmVzZW50ZXInLCB7IHVzZXJJZCwgbWVldGluZ0lkLCBzZXRCeTogcmVxdWVzdGVyVXNlcklkIH0pO1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIGFzc2lnblByZXNlbnRlciAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYW5nZVJvbGUodXNlcklkLCByb2xlKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnQ2hhbmdlVXNlclJvbGVDbWRNc2cnO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJvbGUsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgdXNlcklkLFxuICAgICAgcm9sZSxcbiAgICAgIGNoYW5nZWRCeTogcmVxdWVzdGVyVXNlcklkLFxuICAgIH07XG5cbiAgICBMb2dnZXIudmVyYm9zZSgnQ2hhbmdlZCB1c2VyIHJvbGUnLCB7XG4gICAgICB1c2VySWQsIHJvbGUsIGNoYW5nZWRCeTogcmVxdWVzdGVyVXNlcklkLCBtZWV0aW5nSWQsXG4gICAgfSk7XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgY2hhbmdlUm9sZSAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZVVzZXIodXNlcklkLCBiYW5Vc2VyKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnRWplY3RVc2VyRnJvbU1lZXRpbmdDbWRNc2cnO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZDogZWplY3RlZEJ5IH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGVqZWN0ZWRCeSwgU3RyaW5nKTtcbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soYmFuVXNlciwgQm9vbGVhbik7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgdXNlcklkLFxuICAgICAgZWplY3RlZEJ5LFxuICAgICAgYmFuVXNlcixcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgZWplY3RlZEJ5LCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHJlbW92ZVVzZXIgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRFbW9qaVN0YXR1cyh1c2VySWQsIHN0YXR1cykge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ0NoYW5nZVVzZXJFbW9qaUNtZE1zZyc7XG5cbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soc3RhdHVzLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIGVtb2ppOiBzdGF0dXMsXG4gICAgICB1c2VySWQsXG4gICAgfTtcblxuICAgIExvZ2dlci52ZXJib3NlKCdVc2VyIGVtb2ppIHN0YXR1cyB1cGRhdGVkJywge1xuICAgICAgdXNlcklkLCBzdGF0dXMsIHJlcXVlc3RlclVzZXJJZCwgbWVldGluZ0lkLFxuICAgIH0pO1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHNldEVtb2ppU3RhdHVzICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgc2V0TW9iaWxlIGZyb20gJy4uL21vZGlmaWVycy9zZXRNb2JpbGUnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldE1vYmlsZVVzZXIoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBMb2dnZXIudmVyYm9zZShgTW9iaWxlIHVzZXIgJHtyZXF1ZXN0ZXJVc2VySWR9IGZyb20gbWVldGluZyAke21lZXRpbmdJZH1gKTtcblxuICAgIHNldE1vYmlsZShtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBzZXRNb2JpbGVVc2VyICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmFuZG9tVXNlcigpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gICAgY29uc3QgRVZFTlRfTkFNRSA9ICdTZWxlY3RSYW5kb21WaWV3ZXJSZXFNc2cnO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgcmVxdWVzdGVkQnk6IHJlcXVlc3RlclVzZXJJZCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHNldFJhbmRvbVVzZXIgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHNldEVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlIGZyb20gJy4uL21vZGlmaWVycy9zZXRVc2VyRWZmZWN0aXZlQ29ubmVjdGlvblR5cGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRVc2VyRWZmZWN0aXZlQ29ubmVjdGlvblR5cGUoZWZmZWN0aXZlQ29ubmVjdGlvblR5cGUpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gICAgY29uc3QgRVZFTlRfTkFNRSA9ICdDaGFuZ2VVc2VyRWZmZWN0aXZlQ29ubmVjdGlvbk1zZyc7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soZWZmZWN0aXZlQ29ubmVjdGlvblR5cGUsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgICBlZmZlY3RpdmVDb25uZWN0aW9uVHlwZSxcbiAgICB9O1xuXG4gICAgc2V0RWZmZWN0aXZlQ29ubmVjdGlvblR5cGUobWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIGVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlKTtcblxuICAgIExvZ2dlci52ZXJib3NlKCdVcGRhdGVkIHVzZXIgZWZmZWN0aXZlIGNvbm5lY3Rpb24nLCB7IHJlcXVlc3RlclVzZXJJZCwgZWZmZWN0aXZlQ29ubmVjdGlvblR5cGUgfSk7XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2Qgc2V0VXNlckVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9nZ2xlVXNlckxvY2sodXNlcklkLCBsb2NrKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnTG9ja1VzZXJJbk1lZXRpbmdDbWRNc2cnO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZDogbG9ja2VkQnkgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2sobG9ja2VkQnksIFN0cmluZyk7XG4gICAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKGxvY2ssIEJvb2xlYW4pO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIGxvY2tlZEJ5LFxuICAgICAgdXNlcklkLFxuICAgICAgbG9jayxcbiAgICB9O1xuXG4gICAgTG9nZ2VyLnZlcmJvc2UoJ1VwZGF0ZWQgbG9jayBzdGF0dXMgZm9yIHVzZXInLCB7XG4gICAgICBtZWV0aW5nSWQsIHVzZXJJZCwgbG9jaywgbG9ja2VkQnksXG4gICAgfSk7XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCBsb2NrZWRCeSwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB0b2dnbGVVc2VyTG9jayAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlckFjdGl2aXR5U2lnbigpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gICAgY29uc3QgRVZFTlRfTkFNRSA9ICdVc2VyQWN0aXZpdHlTaWduQ21kTXNnJztcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkOiB1c2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHVzZXJJZCxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgICB1c2VySWQsXG4gICAgfTtcblxuICAgIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICAgJHNldDoge1xuICAgICAgICBpbmFjdGl2aXR5Q2hlY2s6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgVXNlcnMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7IC8vIFRPRE8tLSB3ZSBzaG91bGQgbW92ZSB0aGlzIHRvIGEgbW9kaWZpZXJcblxuICAgIExvZ2dlci5pbmZvKGBVc2VyICR7dXNlcklkfSBzZW50IGEgYWN0aXZpdHkgc2lnbiBmb3IgbWVldGluZyAke21lZXRpbmdJZH1gKTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB1c2VyQWN0aXZpdHlTaWduICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IENsaWVudENvbm5lY3Rpb25zIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL0NsaWVudENvbm5lY3Rpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlckxlYXZpbmcobWVldGluZ0lkLCB1c2VySWQsIGNvbm5lY3Rpb25JZCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ1VzZXJMZWF2ZVJlcU1zZyc7XG5cbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHVzZXJJZCxcbiAgICB9O1xuXG4gICAgY29uc3QgdXNlciA9IFVzZXJzLmZpbmRPbmUoc2VsZWN0b3IpO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgU2tpcHBpbmcgdXNlckxlYXZpbmcuIENvdWxkIG5vdCBmaW5kICR7dXNlcklkfSBpbiAke21lZXRpbmdJZH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhdXRoID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHVzZXJJZCxcbiAgICB9LCB7IHNvcnQ6IHsgdXBkYXRlZEF0OiAtMSB9IH0pO1xuXG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgdXNlciBjb25uZWN0aW9uIGlzIG5vdCB0aGUgc2FtZSB0aGF0IHRyaWdnZXJlZCB0aGUgbGVhdmUgd2Ugc2tpcFxuICAgIGlmIChhdXRoPy5jb25uZWN0aW9uSWQgIT09IGNvbm5lY3Rpb25JZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFNraXBwaW5nIHVzZXJMZWF2aW5nLiBVc2VyIGNvbm5lY3Rpb25JZD0ke3VzZXIuY29ubmVjdGlvbklkfSBpcyBkaWZmZXJlbnQgZnJvbSByZXF1ZXN0ZXIgY29ubmVjdGlvbklkPSR7Y29ubmVjdGlvbklkfWApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICB1c2VySWQsXG4gICAgICBzZXNzaW9uSWQ6IG1lZXRpbmdJZCxcbiAgICAgIGxvZ2dlZE91dDogdXNlci5sb2dnZWRPdXQgfHwgZmFsc2UsXG4gICAgfTtcblxuICAgIENsaWVudENvbm5lY3Rpb25zLnJlbW92ZUNsaWVudENvbm5lY3Rpb24oYCR7bWVldGluZ0lkfS0tJHt1c2VySWR9YCwgY29ubmVjdGlvbklkKTtcblxuICAgIExvZ2dlci5pbmZvKGBVc2VyICcke3VzZXJJZH0nIGlzIGxlYXZpbmcgbWVldGluZyAnJHttZWV0aW5nSWR9J2ApO1xuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB1c2VyTGVhdmluZyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBDbGllbnRDb25uZWN0aW9ucyBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9DbGllbnRDb25uZWN0aW9ucyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZXJMZWZ0TWVldGluZygpIHsgLy8gVE9ETy0tIHNwcmVhZCB0aGUgY29kZSB0byBtZXRob2QvbW9kaWZpZXIvaGFuZGxlclxuICB0cnkge1xuICAgIC8vIHNvIHdlIGRvbid0IHVwZGF0ZSB0aGUgZGIgaW4gYSBtZXRob2RcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkOiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgfTtcblxuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVXNlcnMudXBkYXRlKHNlbGVjdG9yLCB7ICRzZXQ6IHsgbG9nZ2VkT3V0OiB0cnVlIH0gfSk7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGB1c2VyIGxlZnQgaWQ9JHtyZXF1ZXN0ZXJVc2VySWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgICBDbGllbnRDb25uZWN0aW9ucy5yZW1vdmVDbGllbnRDb25uZWN0aW9uKHRoaXMudXNlcklkLCB0aGlzLmNvbm5lY3Rpb24uaWQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHVzZXJMZWZ0TWVldGluZyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IHVwc2VydFZhbGlkYXRpb25TdGF0ZSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uL3NlcnZlci9tb2RpZmllcnMvdXBzZXJ0VmFsaWRhdGlvblN0YXRlJztcbmltcG9ydCB7IFZhbGlkYXRpb25TdGF0ZXMgfSBmcm9tICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uJztcbmltcG9ydCBwZW5kaW5nQXV0aGVudGljYXRpb25zU3RvcmUgZnJvbSAnLi4vc3RvcmUvcGVuZGluZ0F1dGhlbnRpY2F0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhbGlkYXRlQXV0aFRva2VuKG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCByZXF1ZXN0ZXJUb2tlbiwgZXh0ZXJuYWxJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ1ZhbGlkYXRlQXV0aFRva2VuUmVxTXNnJztcblxuICAgIExvZ2dlci5kZWJ1ZygnVmFsaWRhdGVBdXRoVG9rZW4gbWV0aG9kIGNhbGxlZCcsIHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHJlcXVlc3RlclRva2VuLCBleHRlcm5hbElkIH0pO1xuXG4gICAgaWYgKCFtZWV0aW5nSWQpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIFN0b3JlIHJlZmVyZW5jZSBvZiBtZXRob2RJbnZvY2F0aW9uT2JqZWN0ICggdG8gcG9zdHBvbmUgdGhlIGNvbm5lY3Rpb24gdXNlcklkIGRlZmluaXRpb24gKVxuICAgIHBlbmRpbmdBdXRoZW50aWNhdGlvbnNTdG9yZS5hZGQobWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHJlcXVlc3RlclRva2VuLCB0aGlzKTtcbiAgICB1cHNlcnRWYWxpZGF0aW9uU3RhdGUobWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVElORywgdGhpcy5jb25uZWN0aW9uLmlkKTtcblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICB1c2VySWQ6IHJlcXVlc3RlclVzZXJJZCxcbiAgICAgIGF1dGhUb2tlbjogcmVxdWVzdGVyVG9rZW4sXG4gICAgfTtcblxuICAgIExvZ2dlci5pbmZvKGBVc2VyICcke3JlcXVlc3RlclVzZXJJZH0nIGlzIHRyeWluZyB0byB2YWxpZGF0ZSBhdXRoIHRva2VuIGZvciBtZWV0aW5nICcke21lZXRpbmdJZH0nIGZyb20gY29ubmVjdGlvbiAnJHt0aGlzLmNvbm5lY3Rpb24uaWR9J2ApO1xuXG4gICAgcmV0dXJuIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCB2YWxpZGF0ZUF1dGhUb2tlbiAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IGFkZFVzZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tb2RpZmllcnMvYWRkVXNlcic7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRGlhbEluVXNlcihtZWV0aW5nSWQsIHZvaWNlVXNlcikge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHZvaWNlVXNlciwgT2JqZWN0KTtcblxuICBjb25zdCBVU0VSX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMudXNlcjtcbiAgY29uc3QgUk9MRV9WSUVXRVIgPSBVU0VSX0NPTkZJRy5yb2xlX3ZpZXdlcjtcblxuICBjb25zdCB7IGludElkLCBjYWxsZXJOYW1lIH0gPSB2b2ljZVVzZXI7XG5cbiAgY29uc3Qgdm9pY2VPbmx5VXNlciA9IHtcbiAgICBpbnRJZCxcbiAgICBleHRJZDogaW50SWQsIC8vIFRPRE9cbiAgICBuYW1lOiBjYWxsZXJOYW1lLFxuICAgIHJvbGU6IFJPTEVfVklFV0VSLnRvTG93ZXJDYXNlKCksXG4gICAgZ3Vlc3Q6IGZhbHNlLFxuICAgIGF1dGhlZDogdHJ1ZSxcbiAgICB3YWl0aW5nRm9yQWNjZXB0YW5jZTogZmFsc2UsXG4gICAgZ3Vlc3RTdGF0dXM6ICdBTExPVycsXG4gICAgZW1vamk6ICdub25lJyxcbiAgICBwcmVzZW50ZXI6IGZhbHNlLFxuICAgIGxvY2tlZDogZmFsc2UsIC8vIFRPRE9cbiAgICBhdmF0YXI6ICcnLFxuICAgIGNsaWVudFR5cGU6ICdkaWFsLWluLXVzZXInLFxuICB9O1xuXG4gIHJldHVybiBhZGRVc2VyKG1lZXRpbmdJZCwgdm9pY2VPbmx5VXNlcik7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IFZvaWNlVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzLyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFNhbml0aXplSFRNTCBmcm9tICdzYW5pdGl6ZS1odG1sJztcbmltcG9ydCBhZGRVc2VyUHNlcnNpc3RlbnREYXRhIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1wZXJzaXN0ZW50LWRhdGEvc2VydmVyL21vZGlmaWVycy9hZGRVc2VyUGVyc2lzdGVudERhdGEnO1xuaW1wb3J0IHN0cmluZ0hhc2ggZnJvbSAnc3RyaW5nLWhhc2gnO1xuaW1wb3J0IGZsYXQgZnJvbSAnZmxhdCc7XG5cbmltcG9ydCBhZGRWb2ljZVVzZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzL3NlcnZlci9tb2RpZmllcnMvYWRkVm9pY2VVc2VyJztcblxuY29uc3QgQ09MT1JfTElTVCA9IFtcbiAgJyM3YjFmYTInLCAnIzZhMWI5YScsICcjNGExNDhjJywgJyM1ZTM1YjEnLCAnIzUxMmRhOCcsICcjNDUyN2EwJyxcbiAgJyMzMTFiOTInLCAnIzM5NDlhYicsICcjMzAzZjlmJywgJyMyODM1OTMnLCAnIzFhMjM3ZScsICcjMTk3NmQyJywgJyMxNTY1YzAnLFxuICAnIzBkNDdhMScsICcjMDI3N2JkJywgJyMwMTU3OWInLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkVXNlcihtZWV0aW5nSWQsIHVzZXJEYXRhKSB7XG4gIGNvbnN0IHVzZXIgPSB1c2VyRGF0YTtcbiAgY29uc3Qgc2FuaXRpemVkTmFtZSA9IFNhbml0aXplSFRNTCh1c2VyRGF0YS5uYW1lLCB7XG4gICAgYWxsb3dlZFRhZ3M6IFtdLFxuICAgIGFsbG93ZWRBdHRyaWJ1dGVzOiB7fSxcbiAgfSk7XG4gIC8vIGlmIHVzZXIgdHlwZWQgb25seSB0YWdzXG4gIHVzZXIubmFtZSA9IHNhbml0aXplZE5hbWUubGVuZ3RoID09PSAwXG4gICAgPyBfLmVzY2FwZSh1c2VyRGF0YS5uYW1lKVxuICAgIDogc2FuaXRpemVkTmFtZTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgY2hlY2sodXNlciwge1xuICAgIGludElkOiBTdHJpbmcsXG4gICAgZXh0SWQ6IFN0cmluZyxcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgcm9sZTogU3RyaW5nLFxuICAgIGd1ZXN0OiBCb29sZWFuLFxuICAgIGF1dGhlZDogQm9vbGVhbixcbiAgICB3YWl0aW5nRm9yQWNjZXB0YW5jZTogTWF0Y2guTWF5YmUoQm9vbGVhbiksXG4gICAgZ3Vlc3RTdGF0dXM6IFN0cmluZyxcbiAgICBlbW9qaTogU3RyaW5nLFxuICAgIHByZXNlbnRlcjogQm9vbGVhbixcbiAgICBsb2NrZWQ6IEJvb2xlYW4sXG4gICAgYXZhdGFyOiBTdHJpbmcsXG4gICAgY2xpZW50VHlwZTogU3RyaW5nLFxuICB9KTtcblxuICBjb25zdCB1c2VySWQgPSB1c2VyLmludElkO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB1c2VySWQsXG4gIH07XG4gIGNvbnN0IE1lZXRpbmcgPSBNZWV0aW5ncy5maW5kT25lKHsgbWVldGluZ0lkIH0pO1xuXG4gIC8qIFdoaWxlIHRoZSBha2thLWFwcHMgZG9udCBnZW5lcmF0ZSBhIGNvbG9yIHdlIGp1c3QgcGljayBvbmVcbiAgICBmcm9tIGEgbGlzdCBiYXNlZCBvbiB0aGUgdXNlcklkICovXG4gIGNvbnN0IGNvbG9yID0gQ09MT1JfTElTVFtzdHJpbmdIYXNoKHVzZXIuaW50SWQpICUgQ09MT1JfTElTVC5sZW5ndGhdO1xuXG4gIGNvbnN0IHVzZXJJbmZvcyA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgc29ydE5hbWU6IHVzZXIubmFtZS50cmltKCkudG9Mb3dlckNhc2UoKSxcbiAgICAgIGNvbG9yLFxuICAgICAgbW9iaWxlOiBmYWxzZSxcbiAgICAgIGJyZWFrb3V0UHJvcHM6IHtcbiAgICAgICAgaXNCcmVha291dFVzZXI6IE1lZXRpbmcubWVldGluZ1Byb3AuaXNCcmVha291dCxcbiAgICAgICAgcGFyZW50SWQ6IE1lZXRpbmcuYnJlYWtvdXRQcm9wcy5wYXJlbnRJZCxcbiAgICAgIH0sXG4gICAgICBlZmZlY3RpdmVDb25uZWN0aW9uVHlwZTogbnVsbCxcbiAgICAgIGluYWN0aXZpdHlDaGVjazogZmFsc2UsXG4gICAgICByZXNwb25zZURlbGF5OiAwLFxuICAgICAgbG9nZ2VkT3V0OiBmYWxzZSxcbiAgICB9LFxuICAgIGZsYXQodXNlciksXG4gICk7XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDogdXNlckluZm9zLFxuICB9O1xuICBhZGRVc2VyUHNlcnNpc3RlbnREYXRhKHVzZXJJbmZvcyk7XG4gIC8vIE9ubHkgYWRkIGFuIGVtcHR5IFZvaWNlVXNlciBpZiB0aGVyZSBpc24ndCBvbmUgYWxyZWFkeSBhbmQgaWYgdGhlIHVzZXIgY29taW5nIGluIGlzbid0IGFcbiAgLy8gZGlhbC1pbiB1c2VyLiBXZSB3YW50IHRvIGF2b2lkIG92ZXJ3cml0aW5nIGdvb2QgZGF0YVxuICBpZiAodXNlci5jbGllbnRUeXBlICE9PSAnZGlhbC1pbi11c2VyJyAmJiAhVm9pY2VVc2Vycy5maW5kT25lKHsgbWVldGluZ0lkLCBpbnRJZDogdXNlcklkIH0pKSB7XG4gICAgYWRkVm9pY2VVc2VyKG1lZXRpbmdJZCwge1xuICAgICAgdm9pY2VVc2VySWQ6ICcnLFxuICAgICAgaW50SWQ6IHVzZXJJZCxcbiAgICAgIGNhbGxlck5hbWU6IHVzZXIubmFtZSxcbiAgICAgIGNhbGxlck51bTogJycsXG4gICAgICBtdXRlZDogZmFsc2UsXG4gICAgICB0YWxraW5nOiBmYWxzZSxcbiAgICAgIGNhbGxpbmdXaXRoOiAnJyxcbiAgICAgIGxpc3Rlbk9ubHk6IGZhbHNlLFxuICAgICAgdm9pY2VDb25mOiAnJyxcbiAgICAgIGpvaW5lZDogZmFsc2UsXG4gICAgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHsgaW5zZXJ0ZWRJZCB9ID0gVXNlcnMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIHVzZXIgaWQ9JHt1c2VySWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIExvZ2dlci5pbmZvKGBVcHNlcnRlZCB1c2VyIGlkPSR7dXNlcklkfSBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBZGRpbmcgdXNlciB0byBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBzdG9wV2F0Y2hpbmdFeHRlcm5hbFZpZGVvU3lzdGVtQ2FsbCBmcm9tICcvaW1wb3J0cy9hcGkvZXh0ZXJuYWwtdmlkZW9zL3NlcnZlci9tZXRob2RzL3N0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW9TeXN0ZW1DYWxsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hhbmdlUHJlc2VudGVyKHByZXNlbnRlciwgdXNlcklkLCBtZWV0aW5nSWQsIGNoYW5nZWRCeSkge1xuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIHByZXNlbnRlcixcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgbWVldGluZyA9IE1lZXRpbmdzLmZpbmRPbmUoeyBtZWV0aW5nSWQgfSk7XG4gICAgaWYgKG1lZXRpbmcgJiYgbWVldGluZy5leHRlcm5hbFZpZGVvVXJsKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ2hhbmdlUHJlc2VudGVyOlRoZXJlIGlzIGV4dGVybmFsIHZpZGVvIGJlaW5nIHNoYXJlZC4gU3RvcHBpbmcgaXQgZHVlIHRvIHByZXNlbnRlciBjaGFuZ2UsICR7bWVldGluZy5leHRlcm5hbFZpZGVvVXJsfWApO1xuICAgICAgc3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlb1N5c3RlbUNhbGwoeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZDogJ3N5c3RlbS1wcmVzZW50ZXItY2hhbmdlZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBVc2Vycy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYENoYW5nZWQgcHJlc2VudGVyPSR7cHJlc2VudGVyfSBpZD0ke3VzZXJJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gXG4gICAgICAgICsgYCR7Y2hhbmdlZEJ5ID8gYCBjaGFuZ2VkQnk9JHtjaGFuZ2VkQnl9YCA6ICcnfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBDaGFuZ2VkIHVzZXIgcm9sZTogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB1cGRhdGVSb2xlIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1wZXJzaXN0ZW50LWRhdGEvc2VydmVyL21vZGlmaWVycy91cGRhdGVSb2xlJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaGFuZ2VSb2xlKHJvbGUsIHVzZXJJZCwgbWVldGluZ0lkLCBjaGFuZ2VkQnkpIHtcbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHVzZXJJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICByb2xlLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFVzZXJzLnVwZGF0ZShzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICB1cGRhdGVSb2xlKHVzZXJJZCwgbWVldGluZ0lkLCByb2xlKTtcbiAgICAgIExvZ2dlci5pbmZvKGBDaGFuZ2VkIHVzZXIgcm9sZT0ke3JvbGV9IGlkPSR7dXNlcklkfSBtZWV0aW5nPSR7bWVldGluZ0lkfWBcbiAgICAgICAgKyBgJHtjaGFuZ2VkQnkgPyBgIGNoYW5nZWRCeT0ke2NoYW5nZWRCeX1gIDogJyd9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYENoYW5nZWQgdXNlciByb2xlOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyVXNlcnMobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBVc2Vycy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBVc2VycyAoJHttZWV0aW5nSWR9KWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBjbGVhcmluZyBVc2VycyAoJHttZWV0aW5nSWR9KS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFVzZXJzLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBVc2VycyAoYWxsKScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBjbGVhcmluZyBVc2VycyAoYWxsKS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEdW1teVVzZXIobWVldGluZ0lkLCB1c2VySWQsIGF1dGhUb2tlbikge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2soYXV0aFRva2VuLCBTdHJpbmcpO1xuXG4gIGNvbnN0IFVzZXIgPSBVc2Vycy5maW5kT25lKHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG4gIGlmIChVc2VyKSB7XG4gICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXhpc3RpbmctdXNlcicsICdUcmllZCB0byBjcmVhdGUgYSBkdW1teSB1c2VyIGZvciBhbiBleGlzdGluZyB1c2VyJyk7XG4gIH1cblxuICBjb25zdCBkb2MgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHVzZXJJZCxcbiAgICBhdXRoVG9rZW4sXG4gICAgY2xpZW50VHlwZTogJ0hUTUw1JyxcbiAgICB2YWxpZGF0ZWQ6IG51bGwsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBpbnNlcnRlZElkID0gVXNlcnMuaW5zZXJ0KGRvYyk7XG5cbiAgICBpZiAoaW5zZXJ0ZWRJZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYENyZWF0ZWQgZHVtbXkgdXNlciBpZD0ke3VzZXJJZH0gdG9rZW49JHthdXRoVG9rZW59IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYENyZWF0aW5nIGR1bW15IHVzZXIgdG8gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IFZpZGVvU3RyZWFtcyBmcm9tICcvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgc2V0bG9nZ2VkT3V0U3RhdHVzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1wZXJzaXN0ZW50LWRhdGEvc2VydmVyL21vZGlmaWVycy9zZXRsb2dnZWRPdXRTdGF0dXMnO1xuaW1wb3J0IHN0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW9TeXN0ZW1DYWxsIGZyb20gJy9pbXBvcnRzL2FwaS9leHRlcm5hbC12aWRlb3Mvc2VydmVyL21ldGhvZHMvc3RvcFdhdGNoaW5nRXh0ZXJuYWxWaWRlb1N5c3RlbUNhbGwnO1xuaW1wb3J0IGNsZWFyVXNlckluZm9Gb3JSZXF1ZXN0ZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzLWluZm9zL3NlcnZlci9tb2RpZmllcnMvY2xlYXJVc2VySW5mb0ZvclJlcXVlc3Rlcic7XG5pbXBvcnQgQ2xpZW50Q29ubmVjdGlvbnMgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvQ2xpZW50Q29ubmVjdGlvbnMnO1xuXG5jb25zdCBjbGVhckFsbFNlc3Npb25zID0gKHNlc3Npb25Vc2VySWQpID0+IHtcbiAgY29uc3Qgc2VydmVyU2Vzc2lvbnMgPSBNZXRlb3Iuc2VydmVyLnNlc3Npb25zO1xuICBPYmplY3Qua2V5cyhzZXJ2ZXJTZXNzaW9ucylcbiAgICAuZmlsdGVyKChpKSA9PiBzZXJ2ZXJTZXNzaW9uc1tpXS51c2VySWQgPT09IHNlc3Npb25Vc2VySWQpXG4gICAgLmZvckVhY2goKGkpID0+IHNlcnZlclNlc3Npb25zW2ldLmNsb3NlKCkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlVXNlcihtZWV0aW5nSWQsIHVzZXJJZCkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcblxuICB0cnkge1xuICAgIGlmICghcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1JPTEUgfHwgcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1JPTEUgPT09ICdmcm9udGVuZCcpIHtcbiAgICAgIGNvbnN0IHNlc3Npb25Vc2VySWQgPSBgJHttZWV0aW5nSWR9LSR7dXNlcklkfWA7XG4gICAgICBDbGllbnRDb25uZWN0aW9ucy5yZW1vdmVDbGllbnRDb25uZWN0aW9uKGAke21lZXRpbmdJZH0tLSR7dXNlcklkfWApO1xuICAgICAgY2xlYXJBbGxTZXNzaW9ucyhzZXNzaW9uVXNlcklkKTtcblxuICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBmdWxseSBwcm9jZXNzIHRoZSByZWRpcyBtZXNzYWdlIGluIGZyb250ZW5kXG4gICAgICAvLyBzaW5jZSB0aGUgYmFja2VuZCBpcyBzdXBwb3NlZCB0byB1cGRhdGUgTW9uZ29cbiAgICAgIGlmIChwcm9jZXNzLmVudi5CQkJfSFRNTDVfUk9MRSA9PT0gJ2Zyb250ZW5kJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICB1c2VySWQsXG4gICAgfTtcblxuICAgIGNvbnN0IHVzZXJUb1JlbW92ZSA9IFVzZXJzLmZpbmRPbmUoeyB1c2VySWQsIG1lZXRpbmdJZCB9KTtcblxuICAgIGlmICh1c2VyVG9SZW1vdmUpIHtcbiAgICAgIGNvbnN0IHsgcHJlc2VudGVyIH0gPSB1c2VyVG9SZW1vdmU7XG4gICAgICBpZiAocHJlc2VudGVyKSB7XG4gICAgICAgIHN0b3BXYXRjaGluZ0V4dGVybmFsVmlkZW9TeXN0ZW1DYWxsKHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQ6ICdzeXN0ZW0tcHJlc2VudGVyLXdhcy1yZW1vdmVkJyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRsb2dnZWRPdXRTdGF0dXModXNlcklkLCBtZWV0aW5nSWQsIHRydWUpO1xuICAgIFZpZGVvU3RyZWFtcy5yZW1vdmUoeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcblxuICAgIGNsZWFyVXNlckluZm9Gb3JSZXF1ZXN0ZXIobWVldGluZ0lkLCB1c2VySWQpO1xuXG4gICAgVXNlcnMucmVtb3ZlKHNlbGVjdG9yKTtcblxuICAgIExvZ2dlci5pbmZvKGBSZW1vdmVkIHVzZXIgaWQ9JHt1c2VySWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgUmVtb3ZpbmcgdXNlciBmcm9tIFVzZXJzIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0TW9iaWxlKG1lZXRpbmdJZCwgdXNlcklkKSB7XG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB1c2VySWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgbW9iaWxlOiB0cnVlLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFVzZXJzLnVwZGF0ZShzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQXNzaWduZWQgbW9iaWxlIHVzZXIgaWQ9JHt1c2VySWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEFzc2lnbmluZyBtb2JpbGUgdXNlcjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRVc2VyRWZmZWN0aXZlQ29ubmVjdGlvblR5cGUobWVldGluZ0lkLCB1c2VySWQsIGVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICBjaGVjayhlZmZlY3RpdmVDb25uZWN0aW9uVHlwZSwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICAgIGVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlOiB7ICRuZTogZWZmZWN0aXZlQ29ubmVjdGlvblR5cGUgfSxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBlZmZlY3RpdmVDb25uZWN0aW9uVHlwZSxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBVc2Vycy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwZGF0ZWQgdXNlciAke3VzZXJJZH0gZWZmZWN0aXZlIGNvbm5lY3Rpb24gdG8gJHtlZmZlY3RpdmVDb25uZWN0aW9uVHlwZX0gaW4gbWVldGluZyAke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgVXBkYXRpbmcgdXNlciAke3VzZXJJZH06ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBjbGVhclVzZXJJbmZvRm9yUmVxdWVzdGVyIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1pbmZvcy9zZXJ2ZXIvbW9kaWZpZXJzL2NsZWFyVXNlckluZm9Gb3JSZXF1ZXN0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VyRWplY3RlZChtZWV0aW5nSWQsIHVzZXJJZCwgZWplY3RlZFJlYXNvbikge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2soZWplY3RlZFJlYXNvbiwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHtcbiAgICAgIGVqZWN0ZWQ6IHRydWUsXG4gICAgICBlamVjdGVkUmVhc29uLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFVzZXJzLnVwZGF0ZShzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBjbGVhclVzZXJJbmZvRm9yUmVxdWVzdGVyKG1lZXRpbmdJZCwgdXNlcklkKTtcbiAgICAgIExvZ2dlci5pbmZvKGBFamVjdGVkIHVzZXIgaWQ9JHt1c2VySWR9IG1lZXRpbmc9JHttZWV0aW5nSWR9IHJlYXNvbj0ke2VqZWN0ZWRSZWFzb259YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVqZWN0aW5nIHVzZXIgZnJvbSBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZXJJbmFjdGl2aXR5SW5zcGVjdCh1c2VySWQsIHJlc3BvbnNlRGVsYXkpIHtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICBjaGVjayhyZXNwb25zZURlbGF5LCBNYXRjaC5JbnRlZ2VyKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICB1c2VySWQsXG4gICAgaW5hY3Rpdml0eUNoZWNrOiBmYWxzZSxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBpbmFjdGl2aXR5Q2hlY2s6IHRydWUsXG4gICAgICByZXNwb25zZURlbGF5LFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG51bWJlckFmZmVjdGVkIH0gPSBVc2Vycy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFVwZGF0ZWQgdXNlciAke3VzZXJJZH0gd2l0aCBpbmFjdGl2aXR5IGluc3BlY3RgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgSW5hY3Rpdml0eSBjaGVjayBmb3IgdXNlciAke3VzZXJJZH06ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmNsYXNzIFBlbmRpbmdBdXRoZW50aXRjYXRpb25zIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgTG9nZ2VyLmRlYnVnKCdQZW5kaW5nQXV0aGVudGl0Y2F0aW9ucyA6OiBjb25zdHJ1Y3RvcicpO1xuICAgIHRoaXMuc3RvcmUgPSBbXTtcbiAgfVxuXG4gIGdlbmVyYXRlS2V5KG1lZXRpbmdJZCwgdXNlcklkLCBhdXRoVG9rZW4pIHtcbiAgICAvLyBQcm90ZWN0IGFnYWluc3Qgc2VwYXJhdG9yIGluamVjdGlvblxuICAgIG1lZXRpbmdJZCA9IG1lZXRpbmdJZC5yZXBsYWNlKC8gL2csICcnKTtcbiAgICB1c2VySWQgPSB1c2VySWQucmVwbGFjZSgvIC9nLCAnJyk7XG4gICAgYXV0aFRva2VuID0gYXV0aFRva2VuLnJlcGxhY2UoLyAvZywgJycpO1xuXG4gICAgLy8gU3BhY2Ugc2VwYXJhdGVkIGtleVxuICAgIHJldHVybiBgJHttZWV0aW5nSWR9ICR7dXNlcklkfSAke2F1dGhUb2tlbn1gO1xuICB9XG5cbiAgYWRkKG1lZXRpbmdJZCwgdXNlcklkLCBhdXRoVG9rZW4sIG1ldGhvZEludm9jYXRpb25PYmplY3QpIHtcbiAgICBMb2dnZXIuZGVidWcoJ1BlbmRpbmdBdXRoZW50aXRjYXRpb25zIDo6IGFkZCcsIHsgbWVldGluZ0lkLCB1c2VySWQsIGF1dGhUb2tlbiB9KTtcbiAgICB0aGlzLnN0b3JlLnB1c2goe1xuICAgICAga2V5OiB0aGlzLmdlbmVyYXRlS2V5KG1lZXRpbmdJZCwgdXNlcklkLCBhdXRoVG9rZW4pLFxuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkLFxuICAgICAgYXV0aFRva2VuLFxuICAgICAgbWV0aG9kSW52b2NhdGlvbk9iamVjdCxcbiAgICB9KTtcbiAgfVxuXG4gIHRha2UobWVldGluZ0lkLCB1c2VySWQsIGF1dGhUb2tlbikge1xuICAgIGNvbnN0IGtleSA9IHRoaXMuZ2VuZXJhdGVLZXkobWVldGluZ0lkLCB1c2VySWQsIGF1dGhUb2tlbik7XG4gICAgTG9nZ2VyLmRlYnVnKCdQZW5kaW5nQXV0aGVudGl0Y2F0aW9ucyA6OiB0YWtlJywge1xuICAgICAga2V5LCBtZWV0aW5nSWQsIHVzZXJJZCwgYXV0aFRva2VuLFxuICAgIH0pO1xuXG4gICAgLy8gZmluZCBtYXRjaGVzXG4gICAgY29uc3QgbWF0Y2hlcyA9IHRoaXMuc3RvcmUuZmlsdGVyKGUgPT4gZS5rZXkgPT09IGtleSk7XG5cbiAgICAvLyByZW1vdmUgbWF0Y2hlcyAoaWYgYW55KVxuICAgIGlmIChtYXRjaGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zdG9yZSA9IHRoaXMuc3RvcmUuZmlsdGVyKGUgPT4gZS5rZXkgIT09IGtleSk7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIG1hdGNoZXNcbiAgICByZXR1cm4gbWF0Y2hlcztcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IFBlbmRpbmdBdXRoZW50aXRjYXRpb25zKCk7XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IGhhbmRsZVJlbW92ZVVzZXIgZnJvbSAnLi9oYW5kbGVycy9yZW1vdmVVc2VyJztcbmltcG9ydCBoYW5kbGVVc2VySm9pbmVkIGZyb20gJy4vaGFuZGxlcnMvdXNlckpvaW5lZCc7XG5pbXBvcnQgaGFuZGxlVmFsaWRhdGVBdXRoVG9rZW4gZnJvbSAnLi9oYW5kbGVycy92YWxpZGF0ZUF1dGhUb2tlbic7XG5pbXBvcnQgaGFuZGxlUHJlc2VudGVyQXNzaWduZWQgZnJvbSAnLi9oYW5kbGVycy9wcmVzZW50ZXJBc3NpZ25lZCc7XG5pbXBvcnQgaGFuZGxlRW1vamlTdGF0dXMgZnJvbSAnLi9oYW5kbGVycy9lbW9qaVN0YXR1cyc7XG5pbXBvcnQgaGFuZGxlVXNlckVqZWN0ZWQgZnJvbSAnLi9oYW5kbGVycy91c2VyRWplY3RlZCc7XG5pbXBvcnQgaGFuZGxlQ2hhbmdlUm9sZSBmcm9tICcuL2hhbmRsZXJzL2NoYW5nZVJvbGUnO1xuaW1wb3J0IGhhbmRsZVVzZXJJbmFjdGl2aXR5SW5zcGVjdCBmcm9tICcuL2hhbmRsZXJzL3VzZXJJbmFjdGl2aXR5SW5zcGVjdCc7XG5cblJlZGlzUHViU3ViLm9uKCdQcmVzZW50ZXJBc3NpZ25lZEV2dE1zZycsIGhhbmRsZVByZXNlbnRlckFzc2lnbmVkKTtcblJlZGlzUHViU3ViLm9uKCdVc2VySm9pbmVkTWVldGluZ0V2dE1zZycsIGhhbmRsZVVzZXJKb2luZWQpO1xuUmVkaXNQdWJTdWIub24oJ1VzZXJMZWZ0TWVldGluZ0V2dE1zZycsIGhhbmRsZVJlbW92ZVVzZXIpO1xuUmVkaXNQdWJTdWIub24oJ1ZhbGlkYXRlQXV0aFRva2VuUmVzcE1zZycsIGhhbmRsZVZhbGlkYXRlQXV0aFRva2VuKTtcblJlZGlzUHViU3ViLm9uKCdVc2VyRW1vamlDaGFuZ2VkRXZ0TXNnJywgaGFuZGxlRW1vamlTdGF0dXMpO1xuUmVkaXNQdWJTdWIub24oJ1VzZXJFamVjdGVkRnJvbU1lZXRpbmdFdnRNc2cnLCBoYW5kbGVVc2VyRWplY3RlZCk7XG5SZWRpc1B1YlN1Yi5vbignVXNlclJvbGVDaGFuZ2VkRXZ0TXNnJywgaGFuZGxlQ2hhbmdlUm9sZSk7XG5SZWRpc1B1YlN1Yi5vbignVXNlckluYWN0aXZpdHlJbnNwZWN0TXNnJywgaGFuZGxlVXNlckluYWN0aXZpdHlJbnNwZWN0KTtcbiIsImltcG9ydCAnLi9ldmVudEhhbmRsZXJzJztcbmltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHZhbGlkYXRlQXV0aFRva2VuIGZyb20gJy4vbWV0aG9kcy92YWxpZGF0ZUF1dGhUb2tlbic7XG5pbXBvcnQgc2V0RW1vamlTdGF0dXMgZnJvbSAnLi9tZXRob2RzL3NldEVtb2ppU3RhdHVzJztcbmltcG9ydCBzZXRNb2JpbGVVc2VyIGZyb20gJy4vbWV0aG9kcy9zZXRNb2JpbGVVc2VyJztcbmltcG9ydCBhc3NpZ25QcmVzZW50ZXIgZnJvbSAnLi9tZXRob2RzL2Fzc2lnblByZXNlbnRlcic7XG5pbXBvcnQgY2hhbmdlUm9sZSBmcm9tICcuL21ldGhvZHMvY2hhbmdlUm9sZSc7XG5pbXBvcnQgcmVtb3ZlVXNlciBmcm9tICcuL21ldGhvZHMvcmVtb3ZlVXNlcic7XG5pbXBvcnQgdG9nZ2xlVXNlckxvY2sgZnJvbSAnLi9tZXRob2RzL3RvZ2dsZVVzZXJMb2NrJztcbmltcG9ydCBzZXRVc2VyRWZmZWN0aXZlQ29ubmVjdGlvblR5cGUgZnJvbSAnLi9tZXRob2RzL3NldFVzZXJFZmZlY3RpdmVDb25uZWN0aW9uVHlwZSc7XG5pbXBvcnQgdXNlckFjdGl2aXR5U2lnbiBmcm9tICcuL21ldGhvZHMvdXNlckFjdGl2aXR5U2lnbic7XG5pbXBvcnQgdXNlckxlZnRNZWV0aW5nIGZyb20gJy4vbWV0aG9kcy91c2VyTGVmdE1lZXRpbmcnO1xuaW1wb3J0IHNldFJhbmRvbVVzZXIgZnJvbSAnLi9tZXRob2RzL3NldFJhbmRvbVVzZXInO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHNldEVtb2ppU3RhdHVzLFxuICBzZXRNb2JpbGVVc2VyLFxuICBhc3NpZ25QcmVzZW50ZXIsXG4gIGNoYW5nZVJvbGUsXG4gIHJlbW92ZVVzZXIsXG4gIHZhbGlkYXRlQXV0aFRva2VuLFxuICB0b2dnbGVVc2VyTG9jayxcbiAgc2V0VXNlckVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlLFxuICB1c2VyQWN0aXZpdHlTaWduLFxuICB1c2VyTGVmdE1lZXRpbmcsXG4gIHNldFJhbmRvbVVzZXIsXG59KTtcbiIsImltcG9ydCBVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuY29uc3QgUk9MRV9NT0RFUkFUT1IgPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLnVzZXIucm9sZV9tb2RlcmF0b3I7XG5cbmZ1bmN0aW9uIGN1cnJlbnRVc2VyKCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIFVzZXJzLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG4gIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHVzZXJJZDogcmVxdWVzdGVyVXNlcklkLFxuICAgIGludElkOiB7ICRleGlzdHM6IHRydWUgfSxcbiAgfTtcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGZpZWxkczoge1xuICAgICAgdXNlcjogZmFsc2UsXG4gICAgICBhdXRoVG9rZW46IGZhbHNlLCAvLyBOb3QgYXNraW5nIGZvciBhdXRoVG9rZW4gZnJvbSBjbGllbnQgc2lkZSBidXQgYWxzbyBub3QgZXhwb3NpbmcgaXRcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBVc2Vycy5maW5kKHNlbGVjdG9yLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaEN1cnJlbnRVc2VyKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRVc2VycyA9IGN1cnJlbnRVc2VyLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFVzZXJzKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgnY3VycmVudC11c2VyJywgcHVibGlzaEN1cnJlbnRVc2VyKTtcblxuZnVuY3Rpb24gdXNlcnMocm9sZSkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBVc2VycyB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBVc2Vycy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGlmICghdGhpcy51c2VySWQpIHtcbiAgICByZXR1cm4gVXNlcnMuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIExvZ2dlci5kZWJ1ZyhgUHVibGlzaGluZyBVc2VycyBmb3IgJHttZWV0aW5nSWR9ICR7dXNlcklkfWApO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgICRvcjogW1xuICAgICAgeyBtZWV0aW5nSWQgfSxcbiAgICBdLFxuICAgIGludElkOiB7ICRleGlzdHM6IHRydWUgfSxcbiAgfTtcblxuICBjb25zdCBVc2VyID0gVXNlcnMuZmluZE9uZSh7IHVzZXJJZCwgbWVldGluZ0lkIH0sIHsgZmllbGRzOiB7IHJvbGU6IDEgfSB9KTtcbiAgaWYgKCEhVXNlciAmJiBVc2VyLnJvbGUgPT09IFJPTEVfTU9ERVJBVE9SKSB7XG4gICAgc2VsZWN0b3IuJG9yLnB1c2goe1xuICAgICAgJ2JyZWFrb3V0UHJvcHMuaXNCcmVha291dFVzZXInOiB0cnVlLFxuICAgICAgJ2JyZWFrb3V0UHJvcHMucGFyZW50SWQnOiBtZWV0aW5nSWQsXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGZpZWxkczoge1xuICAgICAgYXV0aFRva2VuOiBmYWxzZSxcbiAgICB9LFxuICB9O1xuXG4gIExvZ2dlci5kZWJ1ZygnUHVibGlzaGluZyBVc2VycycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgcmV0dXJuIFVzZXJzLmZpbmQoc2VsZWN0b3IsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRVc2VycyA9IHVzZXJzLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFVzZXJzKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgndXNlcnMnLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBVc2VycyA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCd1c2VycycpO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG4gIC8vIHR5cGVzIG9mIHF1ZXJpZXMgZm9yIHRoZSB1c2VyczpcbiAgLy8gMS4gbWVldGluZ0lkXG4gIC8vIDIuIG1lZXRpbmdJZCwgdXNlcklkXG5cbiAgVXNlcnMuX2Vuc3VyZUluZGV4KHsgbWVldGluZ0lkOiAxLCB1c2VySWQ6IDEgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJzO1xuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IGFkZFVzZXJJbmZvIGZyb20gJy4uL21vZGlmaWVycy9hZGRVc2VySW5mbyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVVzZXJJbmZvcm1hdGlvbih7IGhlYWRlciwgYm9keSB9KSB7XG4gIGNoZWNrKGJvZHksIE9iamVjdCk7XG4gIGNoZWNrKGhlYWRlciwgT2JqZWN0KTtcblxuICBjb25zdCB7IHVzZXJJbmZvIH0gPSBib2R5O1xuICBjb25zdCB7IHVzZXJJZCwgbWVldGluZ0lkIH0gPSBoZWFkZXI7XG5cbiAgY2hlY2sodXNlckluZm8sIEFycmF5KTtcbiAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgcmV0dXJuIGFkZFVzZXJJbmZvKHVzZXJJbmZvLCB1c2VySWQsIG1lZXRpbmdJZCk7XG59XG4iLCJpbXBvcnQgVXNlckluZm9zIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1pbmZvcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlVXNlckluZm9ybWF0aW9uKCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgICBtZWV0aW5nSWQsXG4gICAgICByZXF1ZXN0ZXJVc2VySWQsXG4gICAgfTtcblxuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVXNlckluZm9zLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBSZW1vdmVkIHVzZXIgaW5mb3JtYXRpb246IHJlcXVlc3RlciBpZD0ke3JlcXVlc3RlclVzZXJJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCByZW1vdmVVc2VySW5mb3JtYXRpb24gJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVc2VySW5mb3JtYXRpb24oZXh0ZXJuYWxVc2VySWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvVGhpcmRQYXJ0eTtcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ0xvb2tVcFVzZXJSZXFNc2cnO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soZXh0ZXJuYWxVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgZXh0ZXJuYWxVc2VySWQsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBnZXRVc2VySW5mb3JtYXRpb24gJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBVc2VySW5mb3MgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzLWluZm9zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkVXNlckluZm8odXNlckluZm8sIHJlcXVlc3RlclVzZXJJZCwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IGluZm8gPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHJlcXVlc3RlclVzZXJJZCxcbiAgICB1c2VySW5mbyxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVXNlckluZm9zLmluc2VydChpbmZvKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYEFkZGVkIHVzZXIgaW5mb3JtYXRpb246IHJlcXVlc3RlciBpZD0ke3JlcXVlc3RlclVzZXJJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgQWRkaW5nIHVzZXIgaW5mb3JtYXRpb24gdG8gY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBVc2VySW5mb3MgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzLWluZm9zJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJVc2Vyc0luZm8obWVldGluZ0lkKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBVc2VySW5mb3MucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBVc2VyIEluZm9zICgke21lZXRpbmdJZH0pYCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIFVzZXIgSW5mb3MgKCR7bWVldGluZ0lkfSkuICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgVXNlckluZm9zIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1pbmZvcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyVXNlcnNJbmZvRm9yUmVxdWVzdGVyKG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBVc2VySW5mb3MucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCBVc2VyIEluZm9zIHJlcXVlc3RlZCBieSB1c2VyPSR7cmVxdWVzdGVyVXNlcklkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmluZm8oYEVycm9yIG9uIGNsZWFyaW5nIFVzZXIgSW5mb3MgcmVxdWVzdGVkIGJ5IHVzZXI9JHtyZXF1ZXN0ZXJVc2VySWR9LiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVVc2VySW5mb3JtYXRpb24gZnJvbSAnLi9oYW5kbGVycy91c2VySW5mb3JtYXRpb24nO1xuXG5SZWRpc1B1YlN1Yi5vbignTG9va1VwVXNlclJlc3BNc2cnLCBoYW5kbGVVc2VySW5mb3JtYXRpb24pO1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgcmVxdWVzdFVzZXJJbmZvcm1hdGlvbiBmcm9tICcuL21ldGhvZHMvcmVxdWVzdFVzZXJJbmZvcm1hdGlvbic7XG5pbXBvcnQgcmVtb3ZlVXNlckluZm9ybWF0aW9uIGZyb20gJy4vbWV0aG9kcy9yZW1vdmVVc2VySW5mb3JtYXRpb24nO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHJlcXVlc3RVc2VySW5mb3JtYXRpb24sXG4gIHJlbW92ZVVzZXJJbmZvcm1hdGlvbixcbn0pO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgVXNlckluZm9zIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1pbmZvcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmZ1bmN0aW9uIHVzZXJJbmZvcygpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgVXNlckluZm9zIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIFVzZXJJbmZvcy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQ6IHJlcXVlc3RlclVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIExvZ2dlci5kZWJ1ZygnUHVibGlzaGluZyBVc2VySW5mb3MgcmVxdWVzdGVkJywgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9KTtcblxuICByZXR1cm4gVXNlckluZm9zLmZpbmQoeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kVXNlckluZm9zID0gdXNlckluZm9zLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFVzZXJJbmZvcyguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ3VzZXJzLWluZm9zJywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgVXNlckluZm9zID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3VzZXJzLWluZm9zJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgVXNlckluZm9zLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSwgdXNlcklkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VySW5mb3M7XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgVXNlcnNQZXJzaXN0ZW50RGF0YSBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMtcGVyc2lzdGVudC1kYXRhJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkVXNlclBlcnNpc3RlbnREYXRhKHVzZXIpIHtcbiAgY2hlY2sodXNlciwge1xuICAgIG1lZXRpbmdJZDogU3RyaW5nLFxuICAgIHNvcnROYW1lOiBTdHJpbmcsXG4gICAgY29sb3I6IFN0cmluZyxcbiAgICBtb2JpbGU6IEJvb2xlYW4sXG4gICAgYnJlYWtvdXRQcm9wczogT2JqZWN0LFxuICAgIGluYWN0aXZpdHlDaGVjazogQm9vbGVhbixcbiAgICByZXNwb25zZURlbGF5OiBOdW1iZXIsXG4gICAgbG9nZ2VkT3V0OiBCb29sZWFuLFxuICAgIGludElkOiBTdHJpbmcsXG4gICAgZXh0SWQ6IFN0cmluZyxcbiAgICBuYW1lOiBTdHJpbmcsXG4gICAgcm9sZTogU3RyaW5nLFxuICAgIGd1ZXN0OiBCb29sZWFuLFxuICAgIGF1dGhlZDogQm9vbGVhbixcbiAgICB3YWl0aW5nRm9yQWNjZXB0YW5jZTogTWF0Y2guTWF5YmUoQm9vbGVhbiksXG4gICAgZ3Vlc3RTdGF0dXM6IFN0cmluZyxcbiAgICBlbW9qaTogU3RyaW5nLFxuICAgIHByZXNlbnRlcjogQm9vbGVhbixcbiAgICBsb2NrZWQ6IEJvb2xlYW4sXG4gICAgYXZhdGFyOiBTdHJpbmcsXG4gICAgY2xpZW50VHlwZTogU3RyaW5nLFxuICAgIGVmZmVjdGl2ZUNvbm5lY3Rpb25UeXBlOiBudWxsLFxuICB9KTtcblxuXG4gIGNvbnN0IHtcbiAgICBpbnRJZCxcbiAgICBleHRJZCxcbiAgICBtZWV0aW5nSWQsXG4gICAgbmFtZSxcbiAgICByb2xlLFxuICAgIHRva2VuLFxuICAgIGF2YXRhcixcbiAgICBndWVzdCxcbiAgICBjb2xvcixcbiAgfSA9IHVzZXI7XG5cbiAgY29uc3QgdXNlckRhdGEgPSB7XG4gICAgdXNlcklkOiBpbnRJZCxcbiAgICBleHRJZCxcbiAgICBtZWV0aW5nSWQsXG4gICAgbmFtZSxcbiAgICByb2xlLFxuICAgIHRva2VuLFxuICAgIGF2YXRhcixcbiAgICBndWVzdCxcbiAgICBjb2xvcixcbiAgICBsb2dnZWRPdXQ6IGZhbHNlLFxuICB9O1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIHVzZXJJZDogaW50SWQsXG4gICAgbWVldGluZ0lkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IHVzZXJEYXRhLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBpbnNlcnRlZElkIH0gPSBVc2Vyc1BlcnNpc3RlbnREYXRhLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBBZGRlZCB1c2VyIGlkPSR7aW50SWR9IHRvIHVzZXIgcGVyc2lzdGVudCBEYXRhOiBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBzZXJ0ZWQgdXNlciBpZD0ke2ludElkfSB0byB1c2VyIHBlcnNpc3RlbnQgRGF0YTogbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgQWRkaW5nIG5vdGUgdG8gdGhlIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVXNlcnNQZXJzaXN0ZW50RGF0YSBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMtcGVyc2lzdGVudC1kYXRhL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJVc2Vyc1BlcnNpc3RlbnREYXRhKG1lZXRpbmdJZCkge1xuICBpZiAobWVldGluZ0lkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVXNlcnNQZXJzaXN0ZW50RGF0YS5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbyhgQ2xlYXJlZCB1c2VycyBwZXJzaXN0ZW50IGRhdGEgKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3IgY2xlYXJpbmcgdXNlcnMgcGVyc2lzdGVudCBkYXRhICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVXNlcnNQZXJzaXN0ZW50RGF0YS5yZW1vdmUoe30pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oJ0NsZWFyZWQgdXNlcnMgcGVyc2lzdGVudCBkYXRhIChhbGwpJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIGNsZWFyaW5nIHVzZXJzIHBlcnNpc3RlbnQgZGF0YSAoYWxsKS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgVXNlcnNQZXJzaXN0ZW50RGF0YSBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMtcGVyc2lzdGVudC1kYXRhJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0bG9nZ2VkT3V0U3RhdHVzKHVzZXJJZCwgbWVldGluZ0lkLCBzdGF0dXMgPSB0cnVlKSB7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhzdGF0dXMsIEJvb2xlYW4pO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIHVzZXJJZCxcbiAgICBtZWV0aW5nSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgbG9nZ2VkT3V0OiBzdGF0dXMsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIFVzZXJzUGVyc2lzdGVudERhdGEudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgU2V0dGluZyB1c2VycyBwZXJzaXN0ZW50IGRhdGEncyBsb2dnZWQgb3V0IHN0YXR1cyB0byB0aGUgY29sbGVjdGlvbjogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBVc2Vyc1BlcnNpc3RlbnREYXRhIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1wZXJzaXN0ZW50LWRhdGEnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVSb2xlKHVzZXJJZCwgbWVldGluZ0lkLCByb2xlKSB7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhyb2xlLCBTdHJpbmcpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIHVzZXJJZCxcbiAgICBtZWV0aW5nSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgcm9sZSxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgVXNlcnNQZXJzaXN0ZW50RGF0YS51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBVcGRhdGluZyB1c2VycyBwZXJzaXN0ZW50IGRhdGEncyByb2xlIHRvIHRoZSBjb2xsZWN0aW9uOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IFVzZXJzUGVyc2lzdGVudERhdGEgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzLXBlcnNpc3RlbnQtZGF0YSc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5mdW5jdGlvbiB1c2Vyc1BlcnNpc3RlbnREYXRhKCkge1xuICBpZiAoIXRoaXMudXNlcklkKSB7XG4gICAgcmV0dXJuIFVzZXJzUGVyc2lzdGVudERhdGEuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gIH07XG5cbiAgcmV0dXJuIFVzZXJzUGVyc2lzdGVudERhdGEuZmluZChzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2hVc2Vyc1BlcnNpc3RlbnREYXRhKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRVc2VycyA9IHVzZXJzUGVyc2lzdGVudERhdGEuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kVXNlcnMoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCd1c2Vycy1wZXJzaXN0ZW50LWRhdGEnLCBwdWJsaXNoVXNlcnNQZXJzaXN0ZW50RGF0YSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgVXNlcnNQZXJzaXN0ZW50RGF0YSA9IG5ldyBNb25nby5Db2xsZWN0aW9uKCd1c2Vycy1wZXJzaXN0ZW50LWRhdGEnKTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICBVc2Vyc1BlcnNpc3RlbnREYXRhLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSwgdXNlcklkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVc2Vyc1BlcnNpc3RlbnREYXRhO1xuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IGFkZFVzZXJTZXR0aW5nIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1zZXR0aW5ncy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZFVzZXJTZXR0aW5nJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5jb25zdCBvbGRQYXJhbWV0ZXJzID0ge1xuICBhc2tGb3JGZWVkYmFja09uTG9nb3V0OiAnYmJiX2Fza19mb3JfZmVlZGJhY2tfb25fbG9nb3V0JyxcbiAgYXV0b0pvaW46ICdiYmJfYXV0b19qb2luX2F1ZGlvJyxcbiAgYXV0b1NoYXJlV2ViY2FtOiAnYmJiX2F1dG9fc2hhcmVfd2ViY2FtJyxcbiAgYXV0b1N3YXBMYXlvdXQ6ICdiYmJfYXV0b19zd2FwX2xheW91dCcsXG4gIGNsaWVudFRpdGxlOiAnYmJiX2NsaWVudF90aXRsZScsXG4gIGN1c3RvbVN0eWxlOiAnYmJiX2N1c3RvbV9zdHlsZScsXG4gIGN1c3RvbVN0eWxlVXJsOiAnYmJiX2N1c3RvbV9zdHlsZV91cmwnLFxuICBkaXNwbGF5QnJhbmRpbmdBcmVhOiAnYmJiX2Rpc3BsYXlfYnJhbmRpbmdfYXJlYScsXG4gIGVuYWJsZVNjcmVlbnNoYXJpbmc6ICdiYmJfZW5hYmxlX3NjcmVlbl9zaGFyaW5nJyxcbiAgZW5hYmxlVmlkZW86ICdiYmJfZW5hYmxlX3ZpZGVvJyxcbiAgZm9yY2VMaXN0ZW5Pbmx5OiAnYmJiX2ZvcmNlX2xpc3Rlbl9vbmx5JyxcbiAgaGlkZVByZXNlbnRhdGlvbjogJ2JiYl9oaWRlX3ByZXNlbnRhdGlvbicsXG4gIGxpc3Rlbk9ubHlNb2RlOiAnYmJiX2xpc3Rlbl9vbmx5X21vZGUnLFxuICBtdWx0aVVzZXJQZW5Pbmx5OiAnYmJiX211bHRpX3VzZXJfcGVuX29ubHknLFxuICBtdWx0aVVzZXJUb29sczogJ2JiYl9tdWx0aV91c2VyX3Rvb2xzJyxcbiAgb3V0c2lkZVRvZ2dsZVJlY29yZGluZzogJ2JiYl9vdXRzaWRlX3RvZ2dsZV9yZWNvcmRpbmcnLFxuICBvdXRzaWRlVG9nZ2xlU2VsZlZvaWNlOiAnYmJiX291dHNpZGVfdG9nZ2xlX3NlbGZfdm9pY2UnLFxuICBwcmVzZW50ZXJUb29sczogJ2JiYl9wcmVzZW50ZXJfdG9vbHMnLFxuICBzaG9ydGN1dHM6ICdiYmJfc2hvcnRjdXRzJyxcbiAgc2tpcENoZWNrOiAnYmJiX3NraXBfY2hlY2tfYXVkaW8nLFxufTtcblxuY29uc3Qgb2xkUGFyYW1ldGVyc0tleXMgPSBPYmplY3Qua2V5cyhvbGRQYXJhbWV0ZXJzKTtcblxuY29uc3QgY3VycmVudFBhcmFtZXRlcnMgPSBbXG4gIC8vIEFQUFxuICAnYmJiX2Fza19mb3JfZmVlZGJhY2tfb25fbG9nb3V0JyxcbiAgJ2JiYl9vdmVycmlkZV9kZWZhdWx0X2xvY2FsZScsXG4gICdiYmJfYXV0b19qb2luX2F1ZGlvJyxcbiAgJ2JiYl9jbGllbnRfdGl0bGUnLFxuICAnYmJiX2ZvcmNlX2xpc3Rlbl9vbmx5JyxcbiAgJ2JiYl9saXN0ZW5fb25seV9tb2RlJyxcbiAgJ2JiYl9za2lwX2NoZWNrX2F1ZGlvJyxcbiAgJ2JiYl9za2lwX2NoZWNrX2F1ZGlvX29uX2ZpcnN0X2pvaW4nLFxuICAvLyBCUkFORElOR1xuICAnYmJiX2Rpc3BsYXlfYnJhbmRpbmdfYXJlYScsXG4gIC8vIFNIT1JUQ1VUU1xuICAnYmJiX3Nob3J0Y3V0cycsXG4gIC8vIEtVUkVOVE9cbiAgJ2JiYl9hdXRvX3NoYXJlX3dlYmNhbScsXG4gICdiYmJfcHJlZmVycmVkX2NhbWVyYV9wcm9maWxlJyxcbiAgJ2JiYl9lbmFibGVfc2NyZWVuX3NoYXJpbmcnLFxuICAnYmJiX2VuYWJsZV92aWRlbycsXG4gICdiYmJfcmVjb3JkX3ZpZGVvJyxcbiAgJ2JiYl9za2lwX3ZpZGVvX3ByZXZpZXcnLFxuICAnYmJiX3NraXBfdmlkZW9fcHJldmlld19vbl9maXJzdF9qb2luJyxcbiAgJ2JiYl9taXJyb3Jfb3duX3dlYmNhbScsXG4gIC8vIFBSRVNFTlRBVElPTlxuICAnYmJiX2ZvcmNlX3Jlc3RvcmVfcHJlc2VudGF0aW9uX29uX25ld19ldmVudHMnLFxuICAvLyBXSElURUJPQVJEXG4gICdiYmJfbXVsdGlfdXNlcl9wZW5fb25seScsXG4gICdiYmJfcHJlc2VudGVyX3Rvb2xzJyxcbiAgJ2JiYl9tdWx0aV91c2VyX3Rvb2xzJyxcbiAgLy8gU0tJTk5JTkcvVEhFTU1JTkdcbiAgJ2JiYl9jdXN0b21fc3R5bGUnLFxuICAnYmJiX2N1c3RvbV9zdHlsZV91cmwnLFxuICAvLyBMQVlPVVRcbiAgJ2JiYl9hdXRvX3N3YXBfbGF5b3V0JyxcbiAgJ2JiYl9oaWRlX3ByZXNlbnRhdGlvbicsXG4gICdiYmJfc2hvd19wYXJ0aWNpcGFudHNfb25fbG9naW4nLFxuICAnYmJiX3Nob3dfcHVibGljX2NoYXRfb25fbG9naW4nLFxuICAvLyBPVVRTSURFIENPTU1BTkRTXG4gICdiYmJfb3V0c2lkZV90b2dnbGVfc2VsZl92b2ljZScsXG4gICdiYmJfb3V0c2lkZV90b2dnbGVfcmVjb3JkaW5nJyxcbl07XG5cbmZ1bmN0aW9uIHZhbHVlUGFyc2VyKHZhbCkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZSh2YWwudG9Mb3dlckNhc2UoKS50cmltKCkpO1xuICAgIHJldHVybiBwYXJzZWRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIud2FybihgYWRkVXNlclNldHRpbmdzOlBhcmFtZXRlciAke3ZhbH0gY291bGQgbm90IGJlIHBhcnNlZCAod2FzIG5vdCBqc29uKWApO1xuICAgIHJldHVybiB2YWw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkVXNlclNldHRpbmdzKHNldHRpbmdzKSB7XG4gIHRyeSB7XG4gICAgY2hlY2soc2V0dGluZ3MsIFtPYmplY3RdKTtcblxuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQ6IHVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG5cbiAgICBsZXQgcGFyYW1ldGVycyA9IHt9O1xuXG4gICAgc2V0dGluZ3MuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGNvbnN0IHNldHRpbmdLZXkgPSBPYmplY3Qua2V5cyhlbCkuc2hpZnQoKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBzZXR0aW5nS2V5LnRyaW0oKTtcblxuICAgICAgaWYgKGN1cnJlbnRQYXJhbWV0ZXJzLmluY2x1ZGVzKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMocGFyYW1ldGVycykuaW5jbHVkZXMobm9ybWFsaXplZEtleSkpIHtcbiAgICAgICAgICBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgW25vcm1hbGl6ZWRLZXldOiB2YWx1ZVBhcnNlcihlbFtzZXR0aW5nS2V5XSksXG4gICAgICAgICAgICAuLi5wYXJhbWV0ZXJzLFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyYW1ldGVyc1tub3JtYWxpemVkS2V5XSA9IGVsW3NldHRpbmdLZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9sZFBhcmFtZXRlcnNLZXlzLmluY2x1ZGVzKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nTmV3S2V5ID0gb2xkUGFyYW1ldGVyc1tub3JtYWxpemVkS2V5XTtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKS5pbmNsdWRlcyhtYXRjaGluZ05ld0tleSkpIHtcbiAgICAgICAgICBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgW21hdGNoaW5nTmV3S2V5XTogdmFsdWVQYXJzZXIoZWxbc2V0dGluZ0tleV0pLFxuICAgICAgICAgICAgLi4ucGFyYW1ldGVycyxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbG9nZ2VyLndhcm4oYFBhcmFtZXRlciAke25vcm1hbGl6ZWRLZXl9IG5vdCBoYW5kbGVkYCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBzZXR0aW5nc0FkZGVkID0gW107XG4gICAgT2JqZWN0LmVudHJpZXMocGFyYW1ldGVycykuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGNvbnN0IHNldHRpbmcgPSBlbFswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gZWxbMV07XG4gICAgICBzZXR0aW5nc0FkZGVkLnB1c2goYWRkVXNlclNldHRpbmcobWVldGluZ0lkLCB1c2VySWQsIHNldHRpbmcsIHZhbHVlKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2V0dGluZ3NBZGRlZDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIGFkZFVzZXJTZXR0aW5ncyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFVzZXJTZXR0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMtc2V0dGluZ3MnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRVc2VyU2V0dGluZyhtZWV0aW5nSWQsIHVzZXJJZCwgc2V0dGluZywgdmFsdWUpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKHNldHRpbmcsIFN0cmluZyk7XG4gIGNoZWNrKHZhbHVlLCBNYXRjaC5BbnkpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB1c2VySWQsXG4gICAgc2V0dGluZyxcbiAgfTtcbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkLFxuICAgICAgc2V0dGluZyxcbiAgICAgIHZhbHVlLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IG51bWJlckFmZmVjdGVkIH0gPSBVc2VyU2V0dGluZ3MudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci52ZXJib3NlKCdVcHNlcnRlZCB1c2VyIHNldHRpbmcnLCB7IG1lZXRpbmdJZCwgdXNlcklkLCBzZXR0aW5nIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBZGRpbmcgdXNlciBzZXR0aW5nIHRvIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgVXNlclNldHRpbmdzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy1zZXR0aW5ncyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFyVXNlcnNTZXR0aW5ncyhtZWV0aW5nSWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFVzZXJTZXR0aW5ncy5yZW1vdmUoeyBtZWV0aW5nSWQgfSk7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIFVzZXIgU2V0dGluZ3MgKCR7bWVldGluZ0lkfSlgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgVXNlciBTZXR0aW5ncyAoJHttZWV0aW5nSWR9KS4gJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCAnLi9tZXRob2RzJztcbmltcG9ydCAnLi9wdWJsaXNoZXJzJztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IGFkZFVzZXJTZXR0aW5ncyBmcm9tICcuL21ldGhvZHMvYWRkVXNlclNldHRpbmdzJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICBhZGRVc2VyU2V0dGluZ3MsXG59KTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IFVzZXJTZXR0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMtc2V0dGluZ3MnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuaW1wb3J0IFVzZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcblxuZnVuY3Rpb24gdXNlclNldHRpbmdzKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBVc2VyU2V0dGluZ3Mgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gVXNlclNldHRpbmdzLmZpbmQoeyBtZWV0aW5nSWQ6ICcnIH0pO1xuICB9XG5cbiAgY29uc3QgeyBtZWV0aW5nSWQsIHVzZXJJZCB9ID0gdG9rZW5WYWxpZGF0aW9uO1xuXG4gIGNvbnN0IGN1cnJlbnRVc2VyID0gVXNlci5maW5kT25lKHsgdXNlcklkLCBtZWV0aW5nSWQgfSk7XG5cbiAgaWYgKGN1cnJlbnRVc2VyICYmIGN1cnJlbnRVc2VyPy5icmVha291dFByb3BzPy5pc0JyZWFrb3V0VXNlcikge1xuICAgIGNvbnN0IHsgcGFyZW50SWQgfSA9IGN1cnJlbnRVc2VyLmJyZWFrb3V0UHJvcHM7XG5cbiAgICBjb25zdCBbZXh0ZXJuYWxJZF0gPSBjdXJyZW50VXNlci5leHRJZC5zcGxpdCgnLScpO1xuXG4gICAgY29uc3QgbWFpblJvb21Vc2VyU2V0dGluZ3MgPSBVc2VyU2V0dGluZ3MuZmluZCh7IG1lZXRpbmdJZDogcGFyZW50SWQsIHVzZXJJZDogZXh0ZXJuYWxJZCB9KTtcblxuICAgIG1haW5Sb29tVXNlclNldHRpbmdzLm1hcCgoeyBzZXR0aW5nLCB2YWx1ZSB9KSA9PiAoe1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgc2V0dGluZyxcbiAgICAgIHVzZXJJZCxcbiAgICAgIHZhbHVlLFxuICAgIH0pKS5mb3JFYWNoKChkb2MpID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgICAgICBtZWV0aW5nSWQsXG4gICAgICAgIHNldHRpbmc6IGRvYy5zZXR0aW5nLFxuICAgICAgfTtcblxuICAgICAgVXNlclNldHRpbmdzLnVwc2VydChzZWxlY3RvciwgZG9jKTtcbiAgICB9KTtcblxuICAgIExvZ2dlci5kZWJ1ZygnUHVibGlzaGluZyBVc2VyU2V0dGluZ3MnLCB7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xuXG4gICAgcmV0dXJuIFVzZXJTZXR0aW5ncy5maW5kKHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG4gIH1cblxuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgVXNlclNldHRpbmdzJywgeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcblxuICByZXR1cm4gVXNlclNldHRpbmdzLmZpbmQoeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kVXNlclNldHRpbmdzID0gdXNlclNldHRpbmdzLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFVzZXJTZXR0aW5ncyguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ3VzZXJzLXNldHRpbmdzJywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgVXNlclNldHRpbmdzID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3VzZXJzLXNldHRpbmdzJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgVXNlclNldHRpbmdzLl9lbnN1cmVJbmRleCh7XG4gICAgbWVldGluZ0lkOiAxLCB1c2VySWQ6IDEsXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyU2V0dGluZ3M7XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgZmxvb3JDaGFuZ2VkIGZyb20gJy4uL21vZGlmaWVycy9mbG9vckNoYW5nZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVGbG9vckNoYW5nZWQoeyBoZWFkZXIsIGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHsgaW50SWQsIGZsb29yLCBsYXN0Rmxvb3JUaW1lIH0gPSBib2R5O1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKGludElkLCBTdHJpbmcpO1xuICBjaGVjayhmbG9vciwgQm9vbGVhbik7XG4gIGNoZWNrKGxhc3RGbG9vclRpbWUsIFN0cmluZyk7XG5cbiAgcmV0dXJuIGZsb29yQ2hhbmdlZChtZWV0aW5nSWQsIGludElkLCBmbG9vciwgbGFzdEZsb29yVGltZSk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgc2hhcmVkV2ViY2FtIGZyb20gJy4uL21vZGlmaWVycy9zaGFyZWRXZWJjYW0nO1xuaW1wb3J0IHsgaXNWYWxpZFN0cmVhbSB9IGZyb20gJy9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlVXNlclNoYXJlZEh0bWw1V2ViY2FtKHsgaGVhZGVyLCBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHVzZXJJZCwgc3RyZWFtIH0gPSBib2R5O1xuXG4gIGNoZWNrKGhlYWRlciwgT2JqZWN0KTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKHN0cmVhbSwgU3RyaW5nKTtcblxuICBpZiAoIWlzVmFsaWRTdHJlYW0oc3RyZWFtKSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBzaGFyZWRXZWJjYW0obWVldGluZ0lkLCB1c2VySWQsIHN0cmVhbSk7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgdW5zaGFyZWRXZWJjYW0gZnJvbSAnLi4vbW9kaWZpZXJzL3Vuc2hhcmVkV2ViY2FtJztcbmltcG9ydCB7IGlzVmFsaWRTdHJlYW0gfSBmcm9tICcvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXIvaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVVzZXJVbnNoYXJlZEh0bWw1V2ViY2FtKHsgaGVhZGVyLCBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IHVzZXJJZCwgc3RyZWFtIH0gPSBib2R5O1xuXG4gIGNoZWNrKGhlYWRlciwgT2JqZWN0KTtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKHN0cmVhbSwgU3RyaW5nKTtcblxuICBpZiAoIWlzVmFsaWRTdHJlYW0oc3RyZWFtKSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB1bnNoYXJlZFdlYmNhbShtZWV0aW5nSWQsIHVzZXJJZCwgc3RyZWFtKTtcbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VyU2hhcmVXZWJjYW0oc3RyZWFtKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnVXNlckJyb2FkY2FzdENhbVN0YXJ0TXNnJztcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHModGhpcy51c2VySWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcXVlc3RlclVzZXJJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhzdHJlYW0sIFN0cmluZyk7XG5cbiAgICBMb2dnZXIuaW5mbyhgdXNlciBzaGFyaW5nIHdlYmNhbTogJHttZWV0aW5nSWR9ICR7cmVxdWVzdGVyVXNlcklkfWApO1xuXG4gICAgLy8gY29uc3QgYWN0aW9uTmFtZSA9ICdqb2luVmlkZW8nO1xuICAgIC8qIFRPRE8gdGhyb3cgYW4gZXJyb3IgaWYgdXNlciBoYXMgbm8gcGVybWlzc2lvbiB0byBzaGFyZSB3ZWJjYW1cbiAgICBpZiAoIWlzQWxsb3dlZFRvKGFjdGlvbk5hbWUsIGNyZWRlbnRpYWxzKSkge1xuICAgICAgdGhyb3cgbmV3IE1ldGVvci5FcnJvcignbm90LWFsbG93ZWQnLCBgWW91IGFyZSBub3QgYWxsb3dlZCB0byBzaGFyZSB3ZWJjYW1gKTtcbiAgICB9ICovXG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgc3RyZWFtLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgdXNlclNoYXJlV2ViY2FtICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlclVuc2hhcmVXZWJjYW0oc3RyZWFtKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnVXNlckJyb2FkY2FzdENhbVN0b3BNc2cnO1xuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHN0cmVhbSwgU3RyaW5nKTtcblxuICAgIExvZ2dlci5pbmZvKGB1c2VyIHVuc2hhcmluZyB3ZWJjYW06ICR7bWVldGluZ0lkfSAke3JlcXVlc3RlclVzZXJJZH1gKTtcblxuICAgIC8vIGNvbnN0IGFjdGlvbk5hbWUgPSAnam9pblZpZGVvJztcbiAgICAvKiBUT0RPIHRocm93IGFuIGVycm9yIGlmIHVzZXIgaGFzIG5vIHBlcm1pc3Npb24gdG8gc2hhcmUgd2ViY2FtXG4gICAgaWYgKCFpc0FsbG93ZWRUbyhhY3Rpb25OYW1lLCBjcmVkZW50aWFscykpIHtcbiAgICAgIHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ25vdC1hbGxvd2VkJywgYFlvdSBhcmUgbm90IGFsbG93ZWQgdG8gc2hhcmUgd2ViY2FtYCk7XG4gICAgfSAqL1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHN0cmVhbSxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHVzZXJVbnNoYXJlV2ViY2FtICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVmlkZW9TdHJlYW1zIGZyb20gJy9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJWaWRlb1N0cmVhbXMobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBWaWRlb1N0cmVhbXMucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgVmlkZW9TdHJlYW1zIGluICgke21lZXRpbmdJZH0pYCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIFZpZGVvU3RyZWFtcyAoJHttZWV0aW5nSWR9KS4gJHtlcnJ9YCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFZpZGVvU3RyZWFtcy5yZW1vdmUoe30pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oJ0NsZWFyZWQgVmlkZW9TdHJlYW1zIGluIGFsbCBtZWV0aW5ncycpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhcmluZyBWaWRlb1N0cmVhbXMgKGFsbCkuICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFZpZGVvU3RyZWFtcyBmcm9tICcvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsb29yQ2hhbmdlZChtZWV0aW5nSWQsIHVzZXJJZCwgZmxvb3IsIGxhc3RGbG9vclRpbWUpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKGZsb29yLCBCb29sZWFuKTtcbiAgY2hlY2sobGFzdEZsb29yVGltZSwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICB9XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgZmxvb3IsXG4gICAgICBsYXN0Rmxvb3JUaW1lOiBmbG9vciA/IGxhc3RGbG9vclRpbWUgOiB1bmRlZmluZWQsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVmlkZW9TdHJlYW1zLnVwZGF0ZShzZWxlY3RvciwgbW9kaWZpZXIsIHsgbXVsdGk6IHRydWUgfSk7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBVcGRhdGVkIHVzZXIgc3RyZWFtcyBmbG9vciB0aW1lcyB1c2VySWQ9JHt1c2VySWR9IGZsb29yPSR7Zmxvb3J9IGxhc3RGbG9vclRpbWU9JHtsYXN0Rmxvb3JUaW1lfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gTG9nZ2VyLmVycm9yKGBFcnJvciB1cGRhdGluZyBzdHJlYW0gZmxvb3Igc3RhdHVzOiAke2Vycm9yfWApO1xuICB9XG59XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVmlkZW9TdHJlYW1zIGZyb20gJy9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB7XG4gIGdldERldmljZUlkLFxuICBnZXRVc2VyTmFtZSxcbn0gZnJvbSAnL2ltcG9ydHMvYXBpL3ZpZGVvLXN0cmVhbXMvc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IFZvaWNlVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzLyc7XG5cbmNvbnN0IEJBU0VfRkxPT1JfVElNRSA9IFwiMFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFyZWRXZWJjYW0obWVldGluZ0lkLCB1c2VySWQsIHN0cmVhbSkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2soc3RyZWFtLCBTdHJpbmcpO1xuXG4gIGNvbnN0IGRldmljZUlkID0gZ2V0RGV2aWNlSWQoc3RyZWFtKTtcbiAgY29uc3QgbmFtZSA9IGdldFVzZXJOYW1lKHVzZXJJZCwgbWVldGluZ0lkKTtcbiAgY29uc3QgdnUgPSBWb2ljZVVzZXJzLmZpbmRPbmUoXG4gICAgeyBtZWV0aW5nSWQsIGludElkOiB1c2VySWQgfSxcbiAgICB7IGZpZWxkczogeyBmbG9vcjogMSwgbGFzdEZsb29yVGltZTogMSB9fVxuICApIHx8IHt9O1xuICBjb25zdCBmbG9vciA9IHZ1LmZsb29yIHx8IGZhbHNlO1xuICBjb25zdCBsYXN0Rmxvb3JUaW1lID0gdnUubGFzdEZsb29yVGltZSB8fCBCQVNFX0ZMT09SX1RJTUU7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHVzZXJJZCxcbiAgICBkZXZpY2VJZCxcbiAgfTtcblxuICBjb25zdCBtb2RpZmllciA9IHtcbiAgICAkc2V0OiB7XG4gICAgICBzdHJlYW0sXG4gICAgICBuYW1lLFxuICAgICAgbGFzdEZsb29yVGltZSxcbiAgICAgIGZsb29yLFxuICAgIH0sXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGluc2VydGVkSWQgfSA9IFZpZGVvU3RyZWFtcy51cHNlcnQoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChpbnNlcnRlZElkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgVXBkYXRlZCBzdHJlYW09JHtzdHJlYW19IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIHNldHRpbmcgc3RyZWFtOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFZpZGVvU3RyZWFtcyBmcm9tICcvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgeyBnZXREZXZpY2VJZCB9IGZyb20gJy9pbXBvcnRzL2FwaS92aWRlby1zdHJlYW1zL3NlcnZlci9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5zaGFyZWRXZWJjYW0obWVldGluZ0lkLCB1c2VySWQsIHN0cmVhbSkge1xuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgY2hlY2soc3RyZWFtLCBTdHJpbmcpO1xuXG4gIGNvbnN0IGRldmljZUlkID0gZ2V0RGV2aWNlSWQoc3RyZWFtKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICAgIGRldmljZUlkLFxuICB9O1xuXG4gIHRyeSB7XG4gICAgVmlkZW9TdHJlYW1zLnJlbW92ZShzZWxlY3Rvcik7XG5cbiAgICBMb2dnZXIuaW5mbyhgUmVtb3ZlZCBzdHJlYW09JHtzdHJlYW19IG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXJyb3IgcmVtb3Zpbmcgc3RyZWFtOiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVVc2VyU2hhcmVkSHRtbDVXZWJjYW0gZnJvbSAnLi9oYW5kbGVycy91c2VyU2hhcmVkSHRtbDVXZWJjYW0nO1xuaW1wb3J0IGhhbmRsZVVzZXJVbnNoYXJlZEh0bWw1V2ViY2FtIGZyb20gJy4vaGFuZGxlcnMvdXNlclVuc2hhcmVkSHRtbDVXZWJjYW0nO1xuaW1wb3J0IGhhbmRsZUZsb29yQ2hhbmdlZCBmcm9tICcuL2hhbmRsZXJzL2Zsb29yQ2hhbmdlZCc7XG5cblJlZGlzUHViU3ViLm9uKCdVc2VyQnJvYWRjYXN0Q2FtU3RhcnRlZEV2dE1zZycsIGhhbmRsZVVzZXJTaGFyZWRIdG1sNVdlYmNhbSk7XG5SZWRpc1B1YlN1Yi5vbignVXNlckJyb2FkY2FzdENhbVN0b3BwZWRFdnRNc2cnLCBoYW5kbGVVc2VyVW5zaGFyZWRIdG1sNVdlYmNhbSk7XG5SZWRpc1B1YlN1Yi5vbignQXVkaW9GbG9vckNoYW5nZWRFdnRNc2cnLCBoYW5kbGVGbG9vckNoYW5nZWQpO1xuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5cbmNvbnN0IEZMQVNIX1NUUkVBTV9SRUdFWCA9IC9eKFtBLXowLTldKyktKFtBLXowLTldKyktKFtBLXowLTldKykoLXJlY29yZGVkKT8kLztcbmNvbnN0IFRPS0VOID0gJ18nO1xuXG5jb25zdCBpc1ZhbGlkU3RyZWFtID0gc3RyZWFtID0+ICFGTEFTSF9TVFJFQU1fUkVHRVgudGVzdChzdHJlYW0pO1xuY29uc3QgZ2V0RGV2aWNlSWQgPSAoc3RyZWFtKSA9PiB7XG4gIGNvbnN0IHNwbGl0U3RyZWFtID0gc3RyZWFtLnNwbGl0KFRPS0VOKTtcbiAgaWYgKHNwbGl0U3RyZWFtLmxlbmd0aCA9PT0gMykgcmV0dXJuIHNwbGl0U3RyZWFtWzJdO1xuICBMb2dnZXIud2FybihgQ291bGQgbm90IGdldCBkZXZpY2VJZCBmcm9tIHN0cmVhbT0ke3N0cmVhbX1gKTtcbiAgcmV0dXJuIHN0cmVhbTtcbn07XG5cbmNvbnN0IGdldFVzZXJOYW1lID0gKHVzZXJJZCwgbWVldGluZ0lkKSA9PiB7XG4gIGNvbnN0IHVzZXIgPSBVc2Vycy5maW5kT25lKFxuICAgIHsgdXNlcklkLCBtZWV0aW5nSWQgfSxcbiAgICB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSxcbiAgKTtcbiAgaWYgKHVzZXIpIHJldHVybiB1c2VyLm5hbWU7XG4gIHJldHVybiB1c2VySWQ7XG59O1xuXG5leHBvcnQge1xuICBpc1ZhbGlkU3RyZWFtLFxuICBnZXREZXZpY2VJZCxcbiAgZ2V0VXNlck5hbWUsXG59O1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcic7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB1c2VyU2hhcmVXZWJjYW0gZnJvbSAnLi9tZXRob2RzL3VzZXJTaGFyZVdlYmNhbSc7XG5pbXBvcnQgdXNlclVuc2hhcmVXZWJjYW0gZnJvbSAnLi9tZXRob2RzL3VzZXJVbnNoYXJlV2ViY2FtJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICB1c2VyU2hhcmVXZWJjYW0sXG4gIHVzZXJVbnNoYXJlV2ViY2FtLFxufSk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBWaWRlb1N0cmVhbXMgZnJvbSAnL2ltcG9ydHMvYXBpL3ZpZGVvLXN0cmVhbXMnO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuXG5mdW5jdGlvbiB2aWRlb1N0cmVhbXMoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIFZpZGVvU3RyZWFtcyB3YXMgcmVxdWVzdGVkIGJ5IHVuYXV0aCBjb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uLmlkfWApO1xuICAgIHJldHVybiBWaWRlb1N0cmVhbXMuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCB7IG1lZXRpbmdJZCwgdXNlcklkIH0gPSB0b2tlblZhbGlkYXRpb247XG5cbiAgTG9nZ2VyLmRlYnVnKCdQdWJsaXNoaW5nIFZpZGVvU3RyZWFtcycsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICB9O1xuXG4gIHJldHVybiBWaWRlb1N0cmVhbXMuZmluZChzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2goLi4uYXJncykge1xuICBjb25zdCBib3VuZFZpZGVvU3RyZWFtcyA9IHZpZGVvU3RyZWFtcy5iaW5kKHRoaXMpO1xuICByZXR1cm4gYm91bmRWaWRlb1N0cmVhbXMoLi4uYXJncyk7XG59XG5cbk1ldGVvci5wdWJsaXNoKCd2aWRlby1zdHJlYW1zJywgcHVibGlzaCk7XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcblxuY29uc3QgVmlkZW9TdHJlYW1zID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3ZpZGVvLXN0cmVhbXMnKTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAvLyB0eXBlcyBvZiBxdWVyaWVzIGZvciB0aGUgdmlkZW8gdXNlcnM6XG4gIC8vIDIuIG1lZXRpbmdJZFxuXG4gIFZpZGVvU3RyZWFtcy5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvU3RyZWFtcztcbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBWb2ljZUNhbGxTdGF0ZSBmcm9tICcvaW1wb3J0cy9hcGkvdm9pY2UtY2FsbC1zdGF0ZXMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG4vLyBcIkNBTExfU1RBUlRFRFwiLCBcIklOX0VDSE9fVEVTVFwiLCBcIklOX0NPTkZFUkVOQ0VcIiwgXCJDQUxMX0VOREVEXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlVm9pY2VDYWxsU3RhdGVFdmVudCh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHtcbiAgICB2b2ljZUNvbmYsXG4gICAgY2xpZW50U2Vzc2lvbixcbiAgICB1c2VySWQsXG4gICAgY2FsbGVyTmFtZSxcbiAgICBjYWxsU3RhdGUsXG4gIH0gPSBib2R5O1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodm9pY2VDb25mLCBTdHJpbmcpO1xuICBjaGVjayhjbGllbnRTZXNzaW9uLCBTdHJpbmcpO1xuICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIGNoZWNrKGNhbGxlck5hbWUsIFN0cmluZyk7XG4gIGNoZWNrKGNhbGxTdGF0ZSwgU3RyaW5nKTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgdXNlcklkLFxuICAgIGNsaWVudFNlc3Npb24sXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkLFxuICAgICAgdm9pY2VDb25mLFxuICAgICAgY2xpZW50U2Vzc2lvbixcbiAgICAgIGNhbGxTdGF0ZSxcbiAgICB9LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBudW1iZXJBZmZlY3RlZCB9ID0gVm9pY2VDYWxsU3RhdGUudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5kZWJ1ZygnVXBkYXRlIHZvaWNlIGNhbGwnLCB7XG4gICAgICAgIHN0YXRlOiB1c2VySWQsIG1lZXRpbmdJZCwgY2xpZW50U2Vzc2lvbiwgY2FsbFN0YXRlLFxuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYFVwZGF0ZSB2b2ljZSBjYWxsIHN0YXRlPSR7dXNlcklkfTogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBWb2ljZUNhbGxTdGF0ZXMgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLWNhbGwtc3RhdGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJWb2ljZUNhbGxTdGF0ZXMobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBWb2ljZUNhbGxTdGF0ZXMucmVtb3ZlKHsgbWVldGluZ0lkIH0pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oYENsZWFyZWQgVm9pY2VDYWxsU3RhdGVzIGluICgke21lZXRpbmdJZH0pYCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgRXJyb3Igb24gY2xlYXJpbmcgVm9pY2VDYWxsU3RhdGVzIGluICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVm9pY2VDYWxsU3RhdGVzLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBWb2ljZUNhbGxTdGF0ZXMgaW4gYWxsIG1lZXRpbmdzJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGNsZWFyaW5nIFZvaWNlQ2FsbFN0YXRlcyBpbiBhbGwgbWVldGluZ3MuICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBoYW5kbGVWb2ljZUNhbGxTdGF0ZUV2ZW50IGZyb20gJy4vaGFuZGxlcnMvdm9pY2VDYWxsU3RhdGVFdmVudCc7XG5cblJlZGlzUHViU3ViLm9uKCdWb2ljZUNhbGxTdGF0ZUV2dE1zZycsIGhhbmRsZVZvaWNlQ2FsbFN0YXRlRXZlbnQpO1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IFZvaWNlQ2FsbFN0YXRlcyBmcm9tICcvaW1wb3J0cy9hcGkvdm9pY2UtY2FsbC1zdGF0ZXMnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmZ1bmN0aW9uIHZvaWNlQ2FsbFN0YXRlcygpIHtcbiAgY29uc3QgdG9rZW5WYWxpZGF0aW9uID0gQXV0aFRva2VuVmFsaWRhdGlvbi5maW5kT25lKHsgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb24uaWQgfSk7XG5cbiAgaWYgKCF0b2tlblZhbGlkYXRpb24gfHwgdG9rZW5WYWxpZGF0aW9uLnZhbGlkYXRpb25TdGF0dXMgIT09IFZhbGlkYXRpb25TdGF0ZXMuVkFMSURBVEVEKSB7XG4gICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgVm9pY2VDYWxsU3RhdGVzIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIFZvaWNlQ2FsbFN0YXRlcy5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgVm9pY2UgQ2FsbCBTdGF0ZXMnLCB7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xuXG4gIHJldHVybiBWb2ljZUNhbGxTdGF0ZXMuZmluZCh7IG1lZXRpbmdJZCwgdXNlcklkIH0pO1xufVxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRWb2ljZUNhbGxTdGF0ZXMgPSB2b2ljZUNhbGxTdGF0ZXMuYmluZCh0aGlzKTtcbiAgcmV0dXJuIGJvdW5kVm9pY2VDYWxsU3RhdGVzKC4uLmFyZ3MpO1xufVxuXG5NZXRlb3IucHVibGlzaCgndm9pY2UtY2FsbC1zdGF0ZXMnLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBWb2ljZUNhbGxTdGF0ZXMgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbigndm9pY2VDYWxsU3RhdGVzJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgLy8gdHlwZXMgb2YgcXVlcmllcyBmb3IgdGhlIHZvaWNlIHVzZXJzOlxuICAvLyAxLiBpbnRJZFxuICAvLyAyLiBtZWV0aW5nSWQsIGludElkXG5cbiAgVm9pY2VDYWxsU3RhdGVzLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSwgdXNlcklkOiAxIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWb2ljZUNhbGxTdGF0ZXM7XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgdXBkYXRlVm9pY2VVc2VyIGZyb20gJy4uL21vZGlmaWVycy91cGRhdGVWb2ljZVVzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVGbG9vckNoYW5nZSh7IGhlYWRlciwgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3Qgdm9pY2VVc2VyID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG5cbiAgcmV0dXJuIHVwZGF0ZVZvaWNlVXNlcihtZWV0aW5nSWQsIHZvaWNlVXNlcik7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgVm9pY2VVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvJztcbmltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IGFkZFZvaWNlVXNlciBmcm9tICcuLi9tb2RpZmllcnMvYWRkVm9pY2VVc2VyJztcbmltcG9ydCByZW1vdmVWb2ljZVVzZXIgZnJvbSAnLi4vbW9kaWZpZXJzL3JlbW92ZVZvaWNlVXNlcic7XG5pbXBvcnQgdXBkYXRlVm9pY2VVc2VyIGZyb20gJy4uL21vZGlmaWVycy91cGRhdGVWb2ljZVVzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVHZXRWb2ljZVVzZXJzKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3QgeyB1c2VycyB9ID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHVzZXJzLCBBcnJheSk7XG5cbiAgY29uc3QgbWVldGluZyA9IE1lZXRpbmdzLmZpbmRPbmUoeyBtZWV0aW5nSWQgfSwgeyBmaWVsZHM6IHsgJ3ZvaWNlUHJvcC52b2ljZUNvbmYnOiAxIH0gfSk7XG4gIGNvbnN0IHVzZXJzSWRzID0gdXNlcnMubWFwKG0gPT4gbS5pbnRJZCk7XG5cbiAgY29uc3Qgdm9pY2VVc2Vyc0lkc1RvVXBkYXRlID0gVm9pY2VVc2Vycy5maW5kKHtcbiAgICBtZWV0aW5nSWQsXG4gICAgaW50SWQ6IHsgJGluOiB1c2Vyc0lkcyB9LFxuICB9LCB7IGZpZWxkczogeyBpbnRJZDogMSB9IH0pLmZldGNoKCkubWFwKG0gPT4gbS5pbnRJZCk7XG5cbiAgdXNlcnMuZm9yRWFjaCgodXNlcikgPT4ge1xuICAgIGlmICh2b2ljZVVzZXJzSWRzVG9VcGRhdGUuaW5kZXhPZih1c2VyLmludElkKSA+PSAwKSB7XG4gICAgICAvLyB1c2VyIGFscmVhZHkgZXhpc3QsIHRoZW4gdXBkYXRlXG4gICAgICB1cGRhdGVWb2ljZVVzZXIobWVldGluZ0lkLCB7XG4gICAgICAgIGludElkOiB1c2VyLmludElkLFxuICAgICAgICB2b2ljZVVzZXJJZDogdXNlci52b2ljZVVzZXJJZCxcbiAgICAgICAgdGFsa2luZzogdXNlci50YWxraW5nLFxuICAgICAgICBtdXRlZDogdXNlci5tdXRlZCxcbiAgICAgICAgdm9pY2VDb25mOiBtZWV0aW5nLnZvaWNlUHJvcC52b2ljZUNvbmYsXG4gICAgICAgIGpvaW5lZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1c2VyIGRvZXNuJ3QgZXhpc3QgeWV0LCB0aGVuIGFkZCBpdFxuICAgICAgYWRkVm9pY2VVc2VyKG1lZXRpbmdJZCwge1xuICAgICAgICB2b2ljZVVzZXJJZDogdXNlci52b2ljZVVzZXJJZCxcbiAgICAgICAgaW50SWQ6IHVzZXIuaW50SWQsXG4gICAgICAgIGNhbGxlck5hbWU6IHVzZXIuY2FsbGVyTmFtZSxcbiAgICAgICAgY2FsbGVyTnVtOiB1c2VyLmNhbGxlck51bSxcbiAgICAgICAgbXV0ZWQ6IHVzZXIubXV0ZWQsXG4gICAgICAgIHRhbGtpbmc6IHVzZXIudGFsa2luZyxcbiAgICAgICAgY2FsbGluZ1dpdGg6IHVzZXIuY2FsbGluZ1dpdGgsXG4gICAgICAgIGxpc3Rlbk9ubHk6IHVzZXIubGlzdGVuT25seSxcbiAgICAgICAgdm9pY2VDb25mOiBtZWV0aW5nLnZvaWNlUHJvcC52b2ljZUNvbmYsXG4gICAgICAgIGpvaW5lZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcmVtb3ZpbmcgZXh0cmEgdXNlcnMgYWxyZWFkeSBleGlzdGluZyBpbiBNb25nb1xuICBjb25zdCB2b2ljZVVzZXJzVG9SZW1vdmUgPSBWb2ljZVVzZXJzLmZpbmQoe1xuICAgIG1lZXRpbmdJZCxcbiAgICBpbnRJZDogeyAkbmluOiB1c2Vyc0lkcyB9LFxuICB9KS5mZXRjaCgpO1xuICB2b2ljZVVzZXJzVG9SZW1vdmUuZm9yRWFjaCh1c2VyID0+IHJlbW92ZVZvaWNlVXNlcihtZWV0aW5nSWQsIHtcbiAgICB2b2ljZUNvbmY6IG1lZXRpbmcudm9pY2VQcm9wLnZvaWNlQ29uZixcbiAgICB2b2ljZVVzZXJJZDogdXNlci52b2ljZVVzZXJJZCxcbiAgICBpbnRJZDogdXNlci5pbnRJZCxcbiAgfSkpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgYWRkRGlhbEluVXNlciBmcm9tICcvaW1wb3J0cy9hcGkvdXNlcnMvc2VydmVyL21vZGlmaWVycy9hZGREaWFsSW5Vc2VyJztcbmltcG9ydCBhZGRWb2ljZVVzZXIgZnJvbSAnLi4vbW9kaWZpZXJzL2FkZFZvaWNlVXNlcic7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlSm9pblZvaWNlVXNlcih7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHZvaWNlVXNlciA9IGJvZHk7XG4gIHZvaWNlVXNlci5qb2luZWQgPSB0cnVlO1xuXG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodm9pY2VVc2VyLCB7XG4gICAgdm9pY2VDb25mOiBTdHJpbmcsXG4gICAgaW50SWQ6IFN0cmluZyxcbiAgICB2b2ljZVVzZXJJZDogU3RyaW5nLFxuICAgIGNhbGxlck5hbWU6IFN0cmluZyxcbiAgICBjYWxsZXJOdW06IFN0cmluZyxcbiAgICBtdXRlZDogQm9vbGVhbixcbiAgICB0YWxraW5nOiBCb29sZWFuLFxuICAgIGNhbGxpbmdXaXRoOiBTdHJpbmcsXG4gICAgbGlzdGVuT25seTogQm9vbGVhbixcbiAgICBqb2luZWQ6IEJvb2xlYW4sXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBpbnRJZCxcbiAgfSA9IHZvaWNlVXNlcjtcblxuICBjb25zdCBVc2VyID0gVXNlcnMuZmluZE9uZSh7XG4gICAgbWVldGluZ0lkLFxuICAgIGludElkLFxuICB9KTtcblxuICBpZiAoIVVzZXIpIHtcbiAgICAvKiB2b2ljZS1vbmx5IHVzZXIgLSBjYWxsZWQgaW50byB0aGUgY29uZmVyZW5jZSAqL1xuICAgIGFkZERpYWxJblVzZXIobWVldGluZ0lkLCB2b2ljZVVzZXIpO1xuICB9XG5cbiAgcmV0dXJuIGFkZFZvaWNlVXNlcihtZWV0aW5nSWQsIHZvaWNlVXNlcik7XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5cbmltcG9ydCByZW1vdmVWb2ljZVVzZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzL3NlcnZlci9tb2RpZmllcnMvcmVtb3ZlVm9pY2VVc2VyJztcbmltcG9ydCByZW1vdmVVc2VyIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL3JlbW92ZVVzZXInO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVZvaWNlVXBkYXRlKHsgYm9keSB9LCBtZWV0aW5nSWQpIHtcbiAgY29uc3Qgdm9pY2VVc2VyID0gYm9keTtcblxuICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gIGNoZWNrKHZvaWNlVXNlciwge1xuICAgIHZvaWNlQ29uZjogU3RyaW5nLFxuICAgIGludElkOiBTdHJpbmcsXG4gICAgdm9pY2VVc2VySWQ6IFN0cmluZyxcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGludElkLFxuICAgIHZvaWNlVXNlcklkLFxuICB9ID0gdm9pY2VVc2VyO1xuXG4gIGNvbnN0IGlzRGlhbEluVXNlciA9ICh1c2VySWQsIG1lZXRpbmdJRCkgPT4gISFVc2Vycy5maW5kT25lKHsgbWVldGluZ0lkOiBtZWV0aW5nSUQsIHVzZXJJZCwgY2xpZW50VHlwZTogJ2RpYWwtaW4tdXNlcicgfSk7XG5cbiAgLy8gaWYgdGhlIHVzZXIgaXMgZGlhbC1pbiwgbGVhdmluZyB2b2ljZSBhbHNvIG1lYW5zIGxlYXZpbmcgdXNlcmxpc3RcbiAgaWYgKGlzRGlhbEluVXNlcih2b2ljZVVzZXJJZCwgbWVldGluZ0lkKSkgcmVtb3ZlVXNlcihtZWV0aW5nSWQsIGludElkKTtcblxuICByZXR1cm4gcmVtb3ZlVm9pY2VVc2VyKG1lZXRpbmdJZCwgdm9pY2VVc2VyKTtcbn1cbiIsImltcG9ydCBjaGFuZ2VNdXRlTWVldGluZyBmcm9tICcuLi9tb2RpZmllcnMvY2hhbmdlTXV0ZU1lZXRpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVNZWV0aW5nTXV0ZWQoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjaGFuZ2VNdXRlTWVldGluZyhtZWV0aW5nSWQsIGJvZHkpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5pbXBvcnQgdXBkYXRlVm9pY2VVc2VyIGZyb20gJy4uL21vZGlmaWVycy91cGRhdGVWb2ljZVVzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVWb2ljZVVwZGF0ZSh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHZvaWNlVXNlciA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuXG4gIC8vIElmIGEgcGVyc29uIGlzIG11dGVkIHdlIGhhdmUgdG8gZm9yY2UgdGhlbSB0byBub3QgdGFsa2luZ1xuICBpZiAodm9pY2VVc2VyLm11dGVkKSB7XG4gICAgdm9pY2VVc2VyLnRhbGtpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB1cGRhdGVWb2ljZVVzZXIobWVldGluZ0lkLCB2b2ljZVVzZXIpO1xufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuXG5pbXBvcnQgdXBkYXRlVm9pY2VVc2VyIGZyb20gJy4uL21vZGlmaWVycy91cGRhdGVWb2ljZVVzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVWb2ljZVVwZGF0ZSh7IGJvZHkgfSwgbWVldGluZ0lkKSB7XG4gIGNvbnN0IHZvaWNlVXNlciA9IGJvZHk7XG5cbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuXG4gIHJldHVybiB1cGRhdGVWb2ljZVVzZXIobWVldGluZ0lkLCB2b2ljZVVzZXIpO1xufVxuIiwiaW1wb3J0IFZvaWNlVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzLyc7XG5pbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBhZGREaWFsSW5Vc2VyIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycy9zZXJ2ZXIvbW9kaWZpZXJzL2FkZERpYWxJblVzZXInO1xuaW1wb3J0IHJlbW92ZVZvaWNlVXNlciBmcm9tICcuLi9tb2RpZmllcnMvcmVtb3ZlVm9pY2VVc2VyJztcbmltcG9ydCB1cGRhdGVWb2ljZVVzZXIgZnJvbSAnLi4vbW9kaWZpZXJzL3VwZGF0ZVZvaWNlVXNlcic7XG5pbXBvcnQgYWRkVm9pY2VVc2VyIGZyb20gJy4uL21vZGlmaWVycy9hZGRWb2ljZVVzZXInO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZVZvaWNlVXNlcnMoeyBoZWFkZXIsIGJvZHkgfSkge1xuICBjb25zdCB7IHZvaWNlVXNlcnMgfSA9IGJvZHk7XG4gIGNvbnN0IHsgbWVldGluZ0lkIH0gPSBoZWFkZXI7XG5cbiAgY29uc3QgbWVldGluZyA9IE1lZXRpbmdzLmZpbmRPbmUoeyBtZWV0aW5nSWQgfSwgeyBmaWVsZHM6IHsgJ3ZvaWNlUHJvcC52b2ljZUNvbmYnOiAxIH0gfSk7XG4gIGNvbnN0IHVzZXJzSWRzID0gdm9pY2VVc2Vycy5tYXAobSA9PiBtLmludElkKTtcblxuICBjb25zdCB2b2ljZVVzZXJzSWRzVG9VcGRhdGUgPSBWb2ljZVVzZXJzLmZpbmQoe1xuICAgIG1lZXRpbmdJZCxcbiAgICBpbnRJZDogeyAkaW46IHVzZXJzSWRzIH0sXG4gIH0sIHsgZmllbGRzOiB7IGludElkOiAxIH0gfSkuZmV0Y2goKS5tYXAobSA9PiBtLmludElkKTtcblxuICB2b2ljZVVzZXJzLmZvckVhY2goKHZvaWNlKSA9PiB7XG4gICAgaWYgKHZvaWNlVXNlcnNJZHNUb1VwZGF0ZS5pbmRleE9mKHZvaWNlLmludElkKSA+PSAwKSB7XG4gICAgICAvLyB1c2VyIGFscmVhZHkgZXhpc3QsIHRoZW4gdXBkYXRlXG4gICAgICB1cGRhdGVWb2ljZVVzZXIobWVldGluZ0lkLCB7XG4gICAgICAgIGludElkOiB2b2ljZS5pbnRJZCxcbiAgICAgICAgdm9pY2VVc2VySWQ6IHZvaWNlLnZvaWNlVXNlcklkLFxuICAgICAgICB0YWxraW5nOiB2b2ljZS50YWxraW5nLFxuICAgICAgICBtdXRlZDogdm9pY2UubXV0ZWQsXG4gICAgICAgIHZvaWNlQ29uZjogbWVldGluZy52b2ljZVByb3Audm9pY2VDb25mLFxuICAgICAgICBqb2luZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXNlciBkb2Vzbid0IGV4aXN0IHlldCwgdGhlbiBhZGQgaXRcbiAgICAgIGFkZFZvaWNlVXNlcihtZWV0aW5nSWQsIHtcbiAgICAgICAgdm9pY2VVc2VySWQ6IHZvaWNlLnZvaWNlVXNlcklkLFxuICAgICAgICBpbnRJZDogdm9pY2UuaW50SWQsXG4gICAgICAgIGNhbGxlck5hbWU6IHZvaWNlLmNhbGxlck5hbWUsXG4gICAgICAgIGNhbGxlck51bTogdm9pY2UuY2FsbGVyTnVtLFxuICAgICAgICBtdXRlZDogdm9pY2UubXV0ZWQsXG4gICAgICAgIHRhbGtpbmc6IHZvaWNlLnRhbGtpbmcsXG4gICAgICAgIGNhbGxpbmdXaXRoOiB2b2ljZS5jYWxsaW5nV2l0aCxcbiAgICAgICAgbGlzdGVuT25seTogdm9pY2UubGlzdGVuT25seSxcbiAgICAgICAgdm9pY2VDb25mOiBtZWV0aW5nLnZvaWNlUHJvcC52b2ljZUNvbmYsXG4gICAgICAgIGpvaW5lZDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBhZGREaWFsSW5Vc2VyKG1lZXRpbmdJZCwgdm9pY2UpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcmVtb3ZpbmcgZXh0cmEgdXNlcnMgYWxyZWFkeSBleGlzdGluZyBpbiBNb25nb1xuICBjb25zdCB2b2ljZVVzZXJzVG9SZW1vdmUgPSBWb2ljZVVzZXJzLmZpbmQoe1xuICAgIG1lZXRpbmdJZCxcbiAgICBpbnRJZDogeyAkbmluOiB1c2Vyc0lkcyB9LFxuICB9LCB7IGZpZWxkczogeyB2b2ljZVVzZXJJZDogMSwgaW50SWQ6IDEgfSB9KS5mZXRjaCgpO1xuICB2b2ljZVVzZXJzVG9SZW1vdmUuZm9yRWFjaCh1c2VyID0+IHJlbW92ZVZvaWNlVXNlcihtZWV0aW5nSWQsIHtcbiAgICB2b2ljZUNvbmY6IG1lZXRpbmcudm9pY2VQcm9wLnZvaWNlQ29uZixcbiAgICB2b2ljZVVzZXJJZDogdXNlci52b2ljZVVzZXJJZCxcbiAgICBpbnRJZDogdXNlci5pbnRJZCxcbiAgfSkpO1xufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVqZWN0VXNlckZyb21Wb2ljZSh1c2VySWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBSRURJU19DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcztcbiAgICBjb25zdCBDSEFOTkVMID0gUkVESVNfQ09ORklHLmNoYW5uZWxzLnRvQWtrYUFwcHM7XG4gICAgY29uc3QgRVZFTlRfTkFNRSA9ICdFamVjdFVzZXJGcm9tVm9pY2VDbWRNc2cnO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2sodXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIGVqZWN0ZWRCeTogcmVxdWVzdGVyVXNlcklkLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgZWplY3RVc2VyRnJvbVZvaWNlICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtdXRlQWxsRXhjZXB0UHJlc2VudGVyVG9nZ2xlKCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ011dGVBbGxFeGNlcHRQcmVzZW50ZXJzQ21kTXNnJztcblxuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgbWVldGluZyA9IE1lZXRpbmdzLmZpbmRPbmUoeyBtZWV0aW5nSWQgfSk7XG4gICAgY29uc3QgdG9nZ2xlTWVldGluZ011dGVkID0gIW1lZXRpbmcudm9pY2VQcm9wLm11dGVPblN0YXJ0O1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIG11dGVkQnk6IHJlcXVlc3RlclVzZXJJZCxcbiAgICAgIG11dGU6IHRvZ2dsZU1lZXRpbmdNdXRlZCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIG11dGVBbGxFeGNlcHRQcmVzZW50ZXJUb2dnbGUgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IHsgZXh0cmFjdENyZWRlbnRpYWxzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG11dGVBbGxUb2dnbGUoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnTXV0ZU1lZXRpbmdDbWRNc2cnO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBtZWV0aW5nID0gTWVldGluZ3MuZmluZE9uZSh7IG1lZXRpbmdJZCB9KTtcbiAgICBjb25zdCB0b2dnbGVNZWV0aW5nTXV0ZWQgPSAhbWVldGluZy52b2ljZVByb3AubXV0ZU9uU3RhcnQ7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgbXV0ZWRCeTogcmVxdWVzdGVyVXNlcklkLFxuICAgICAgbXV0ZTogdG9nZ2xlTWVldGluZ011dGVkLFxuICAgIH07XG5cbiAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBpbnZva2luZyBtZXRob2QgbXV0ZUFsbFRvZ2dsZSAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCBWb2ljZVVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS92b2ljZS11c2Vycyc7XG5pbXBvcnQgTWVldGluZ3MgZnJvbSAnL2ltcG9ydHMvYXBpL21lZXRpbmdzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbXV0ZVRvZ2dsZSh1SWQsIHRvZ2dsZSkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ011dGVVc2VyQ21kTXNnJztcblxuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgdXNlclRvTXV0ZSA9IHVJZCB8fCByZXF1ZXN0ZXJVc2VySWQ7XG5cbiAgICBjb25zdCByZXF1ZXN0ZXIgPSBVc2Vycy5maW5kT25lKHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHVzZXJJZDogcmVxdWVzdGVyVXNlcklkLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgdm9pY2VVc2VyID0gVm9pY2VVc2Vycy5maW5kT25lKHtcbiAgICAgIGludElkOiB1c2VyVG9NdXRlLFxuICAgICAgbWVldGluZ0lkLFxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXF1ZXN0ZXIgfHwgIXZvaWNlVXNlcikgcmV0dXJuO1xuXG4gICAgY29uc3QgeyBsaXN0ZW5Pbmx5LCBtdXRlZCB9ID0gdm9pY2VVc2VyO1xuICAgIGlmIChsaXN0ZW5Pbmx5KSByZXR1cm47XG5cbiAgICAvLyBpZiBhbGxvd01vZHNUb1VubXV0ZVVzZXJzIGlzIGZhbHNlLCB1c2VycyB3aWxsIGJlIGtpY2tlZCBvdXQgZm9yIGF0dGVtcHRpbmcgdG8gdW5tdXRlIG90aGVyc1xuICAgIGlmIChyZXF1ZXN0ZXJVc2VySWQgIT09IHVzZXJUb011dGUgJiYgbXV0ZWQpIHtcbiAgICAgIGNvbnN0IG1lZXRpbmcgPSBNZWV0aW5ncy5maW5kT25lKHsgbWVldGluZ0lkIH0sXG4gICAgICAgIHsgZmllbGRzOiB7ICd1c2Vyc1Byb3AuYWxsb3dNb2RzVG9Vbm11dGVVc2Vycyc6IDEgfSB9KTtcbiAgICAgIGlmIChtZWV0aW5nLnVzZXJzUHJvcCAmJiAhbWVldGluZy51c2Vyc1Byb3AuYWxsb3dNb2RzVG9Vbm11dGVVc2Vycykge1xuICAgICAgICBMb2dnZXIud2FybihgQXR0ZW1wdGVkIHVubXV0aW5nIGJ5IGFub3RoZXIgdXNlciBtZWV0aW5nSWQ6JHttZWV0aW5nSWR9IHJlcXVlc3RlcjogJHtyZXF1ZXN0ZXJVc2VySWR9IHVzZXJJZDogJHt1c2VyVG9NdXRlfWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IF9tdXRlZDtcblxuICAgIGlmICgodG9nZ2xlID09PSB1bmRlZmluZWQpIHx8ICh0b2dnbGUgPT09IG51bGwpKSB7XG4gICAgICBfbXV0ZWQgPSAhbXV0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9tdXRlZCA9ICEhdG9nZ2xlO1xuICAgIH1cblxuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICB1c2VySWQ6IHVzZXJUb011dGUsXG4gICAgICBtdXRlZEJ5OiByZXF1ZXN0ZXJVc2VySWQsXG4gICAgICBtdXRlOiBfbXV0ZWQsXG4gICAgfTtcblxuICAgIFJlZGlzUHViU3ViLnB1Ymxpc2hVc2VyTWVzc2FnZShDSEFOTkVMLCBFVkVOVF9OQU1FLCBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCwgcGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBtdXRlVG9nZ2xlICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVm9pY2VVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMnO1xuaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgZmxhdCBmcm9tICdmbGF0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkVm9pY2VVc2VyKG1lZXRpbmdJZCwgdm9pY2VVc2VyKSB7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgY2hlY2sodm9pY2VVc2VyLCB7XG4gICAgdm9pY2VVc2VySWQ6IFN0cmluZyxcbiAgICBpbnRJZDogU3RyaW5nLFxuICAgIGNhbGxlck5hbWU6IFN0cmluZyxcbiAgICBjYWxsZXJOdW06IFN0cmluZyxcbiAgICBtdXRlZDogQm9vbGVhbixcbiAgICB0YWxraW5nOiBCb29sZWFuLFxuICAgIGNhbGxpbmdXaXRoOiBTdHJpbmcsXG4gICAgbGlzdGVuT25seTogQm9vbGVhbixcbiAgICB2b2ljZUNvbmY6IFN0cmluZyxcbiAgICBqb2luZWQ6IEJvb2xlYW4sIC8vIFRoaXMgaXMgYSBIVE1MNSBvbmx5IHBhcmFtLlxuICB9KTtcblxuICBjb25zdCB7IGludElkLCB0YWxraW5nIH0gPSB2b2ljZVVzZXI7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIGludElkLFxuICB9O1xuXG4gIGNvbnN0IG1vZGlmaWVyID0ge1xuICAgICRzZXQ6IE9iamVjdC5hc3NpZ24oXG4gICAgICB7IG1lZXRpbmdJZCwgc3Bva2U6IHRhbGtpbmcgfSxcbiAgICAgIGZsYXQodm9pY2VVc2VyKSxcbiAgICApLFxuICB9O1xuXG4gIGNvbnN0IHVzZXIgPSBVc2Vycy5maW5kT25lKHsgbWVldGluZ0lkLCB1c2VySWQ6IGludElkIH0sIHtcbiAgICBmaWVsZHM6IHtcbiAgICAgIGNvbG9yOiAxLFxuICAgIH0sXG4gIH0pO1xuXG4gIGlmICh1c2VyKSBtb2RpZmllci4kc2V0LmNvbG9yID0gdXNlci5jb2xvcjtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbnVtYmVyQWZmZWN0ZWQgfSA9IFZvaWNlVXNlcnMudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBBZGQgdm9pY2UgdXNlcj0ke2ludElkfSBtZWV0aW5nPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBBZGQgdm9pY2UgdXNlcj0ke2ludElkfTogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBNZWV0aW5ncyBmcm9tICcvaW1wb3J0cy9hcGkvbWVldGluZ3MnO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaGFuZ2VNdXRlTWVldGluZyhtZWV0aW5nSWQsIHBheWxvYWQpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayhwYXlsb2FkLCB7XG4gICAgbXV0ZWQ6IEJvb2xlYW4sXG4gICAgbXV0ZWRCeTogU3RyaW5nLFxuICB9KTtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgJ3ZvaWNlUHJvcC5tdXRlT25TdGFydCc6IHBheWxvYWQubXV0ZWQsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHsgbnVtYmVyQWZmZWN0ZWQgfSA9IE1lZXRpbmdzLnVwc2VydChzZWxlY3RvciwgbW9kaWZpZXIpO1xuXG4gICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ2hhbmdlZCBtZWV0aW5nIG11dGUgc3RhdHVzIG1lZXRpbmc9JHttZWV0aW5nSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYENoYW5naW5nIG1lZXRpbmcgbXV0ZSBzdGF0dXMgbWVldGluZz17JHttZWV0aW5nSWR9fSAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFZvaWNlVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYXJWb2ljZVVzZXIobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBWb2ljZVVzZXJzLnJlbW92ZSh7IG1lZXRpbmdJZCB9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIFZvaWNlVXNlcnMgaW4gKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihgRXJyb3Igb24gY2xlYXJpbmcgVm9pY2VVc2VycyBpbiAke21lZXRpbmdJZH0uICR7ZXJyfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBWb2ljZVVzZXJzLnJlbW92ZSh7fSk7XG5cbiAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICBMb2dnZXIuaW5mbygnQ2xlYXJlZCBWb2ljZVVzZXJzIGluIGFsbCBtZWV0aW5ncycpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBjbGVhcmluZyBWb2ljZVVzZXJzLiAke2Vycn1gKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBWb2ljZVVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS92b2ljZS11c2Vycyc7XG5pbXBvcnQgeyBjbGVhclNwb2tlVGltZW91dCB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVWb2ljZVVzZXIobWVldGluZ0lkLCB2b2ljZVVzZXIpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh2b2ljZVVzZXIsIHtcbiAgICB2b2ljZUNvbmY6IFN0cmluZyxcbiAgICB2b2ljZVVzZXJJZDogU3RyaW5nLFxuICAgIGludElkOiBTdHJpbmcsXG4gIH0pO1xuXG4gIGNvbnN0IHsgaW50SWQgfSA9IHZvaWNlVXNlcjtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgaW50SWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDoge1xuICAgICAgbXV0ZWQ6IGZhbHNlLFxuICAgICAgdGFsa2luZzogZmFsc2UsXG4gICAgICBsaXN0ZW5Pbmx5OiBmYWxzZSxcbiAgICAgIGpvaW5lZDogZmFsc2UsXG4gICAgICBzcG9rZTogZmFsc2UsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNsZWFyU3Bva2VUaW1lb3V0KG1lZXRpbmdJZCwgaW50SWQpO1xuICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVm9pY2VVc2Vycy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgTG9nZ2VyLmluZm8oYFJlbW92ZSB2b2ljZVVzZXI9JHtpbnRJZH0gbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgUmVtb3ZlIHZvaWNlVXNlcj0ke2ludElkfTogJHtlcnJ9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGNoLCBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgVm9pY2VVc2VycyBmcm9tICcvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMnO1xuaW1wb3J0IGZsYXQgZnJvbSAnZmxhdCc7XG5pbXBvcnQgeyBzcG9rZVRpbWVvdXRIYW5kbGVzLCBjbGVhclNwb2tlVGltZW91dCB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuXG5jb25zdCBUQUxLSU5HX1RJTUVPVVQgPSA2MDAwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVWb2ljZVVzZXIobWVldGluZ0lkLCB2b2ljZVVzZXIpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh2b2ljZVVzZXIsIHtcbiAgICBpbnRJZDogU3RyaW5nLFxuICAgIHZvaWNlVXNlcklkOiBTdHJpbmcsXG4gICAgdGFsa2luZzogTWF0Y2guTWF5YmUoQm9vbGVhbiksXG4gICAgbXV0ZWQ6IE1hdGNoLk1heWJlKEJvb2xlYW4pLFxuICAgIHZvaWNlQ29uZjogU3RyaW5nLFxuICAgIGpvaW5lZDogTWF0Y2guTWF5YmUoQm9vbGVhbiksXG4gICAgZmxvb3I6IE1hdGNoLk1heWJlKEJvb2xlYW4pLFxuICAgIGxhc3RGbG9vclRpbWU6IE1hdGNoLk1heWJlKFN0cmluZyksXG4gIH0pO1xuXG4gIGNvbnN0IHsgaW50SWQgfSA9IHZvaWNlVXNlcjtcblxuICBjb25zdCBzZWxlY3RvciA9IHtcbiAgICBtZWV0aW5nSWQsXG4gICAgaW50SWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgJHNldDogT2JqZWN0LmFzc2lnbihcbiAgICAgIGZsYXQodm9pY2VVc2VyKSxcbiAgICApLFxuICB9O1xuXG4gIGlmICh2b2ljZVVzZXIudGFsa2luZykge1xuICAgIGNvbnN0IHVzZXIgPSBWb2ljZVVzZXJzLmZpbmRPbmUoeyBtZWV0aW5nSWQsIGludElkIH0sIHtcbiAgICAgIGZpZWxkczoge1xuICAgICAgICBzdGFydFRpbWU6IDEsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKHVzZXIgJiYgIXVzZXIuc3RhcnRUaW1lKSBtb2RpZmllci4kc2V0LnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgbW9kaWZpZXIuJHNldC5zcG9rZSA9IHRydWU7XG4gICAgbW9kaWZpZXIuJHNldC5lbmRUaW1lID0gbnVsbDtcbiAgICBjbGVhclNwb2tlVGltZW91dChtZWV0aW5nSWQsIGludElkKTtcbiAgfVxuXG4gIGlmICghdm9pY2VVc2VyLnRhbGtpbmcpIHtcbiAgICBjb25zdCB0aW1lb3V0SGFuZGxlID0gTWV0ZW9yLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgdXNlciA9IFZvaWNlVXNlcnMuZmluZE9uZSh7IG1lZXRpbmdJZCwgaW50SWQgfSwge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBlbmRUaW1lOiAxLFxuICAgICAgICAgIHRhbGtpbmc6IDEsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgY29uc3QgeyBlbmRUaW1lLCB0YWxraW5nIH0gPSB1c2VyO1xuICAgICAgICBjb25zdCBzcG9rZURlbGF5ID0gKChEYXRlLm5vdygpIC0gZW5kVGltZSkgPCBUQUxLSU5HX1RJTUVPVVQpO1xuICAgICAgICBpZiAodGFsa2luZyB8fCBzcG9rZURlbGF5KSByZXR1cm47XG4gICAgICAgIG1vZGlmaWVyLiRzZXQuc3Bva2UgPSBmYWxzZTtcbiAgICAgICAgbW9kaWZpZXIuJHNldC5zdGFydFRpbWUgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gVm9pY2VVc2Vycy51cGRhdGUoc2VsZWN0b3IsIG1vZGlmaWVyKTtcblxuICAgICAgICAgIGlmIChudW1iZXJBZmZlY3RlZCkge1xuICAgICAgICAgICAgTG9nZ2VyLmRlYnVnKCdVcGRhdGUgdm9pY2VVc2VyJywgeyB2b2ljZVVzZXI6IGludElkLCBtZWV0aW5nSWQgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBMb2dnZXIuZXJyb3IoYFVwZGF0ZSB2b2ljZVVzZXI9JHtpbnRJZH06ICR7ZXJyfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgVEFMS0lOR19USU1FT1VUKTtcblxuICAgIHNwb2tlVGltZW91dEhhbmRsZXNbYCR7bWVldGluZ0lkfS0ke2ludElkfWBdID0gdGltZW91dEhhbmRsZTtcbiAgICBtb2RpZmllci4kc2V0LmVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBudW1iZXJBZmZlY3RlZCA9IFZvaWNlVXNlcnMudXBkYXRlKHNlbGVjdG9yLCBtb2RpZmllcik7XG5cbiAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgIExvZ2dlci5kZWJ1ZygnVXBkYXRlIHZvaWNlVXNlcicsIHsgdm9pY2VVc2VyOiBpbnRJZCwgbWVldGluZ0lkIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBVcGRhdGUgdm9pY2VVc2VyPSR7aW50SWR9OiAke2Vycn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IHByb2Nlc3NGb3JIVE1MNVNlcnZlck9ubHkgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBoYW5kbGVKb2luVm9pY2VVc2VyIGZyb20gJy4vaGFuZGxlcnMvam9pblZvaWNlVXNlcic7XG5pbXBvcnQgaGFuZGxlTGVmdFZvaWNlVXNlciBmcm9tICcuL2hhbmRsZXJzL2xlZnRWb2ljZVVzZXInO1xuaW1wb3J0IGhhbmRsZVRhbGtpbmdWb2ljZVVzZXIgZnJvbSAnLi9oYW5kbGVycy90YWxraW5nVm9pY2VVc2VyJztcbmltcG9ydCBoYW5kbGVNdXRlZFZvaWNlVXNlciBmcm9tICcuL2hhbmRsZXJzL211dGVkVm9pY2VVc2VyJztcbmltcG9ydCBoYW5kbGVHZXRWb2ljZVVzZXJzIGZyb20gJy4vaGFuZGxlcnMvZ2V0Vm9pY2VVc2Vycyc7XG5pbXBvcnQgaGFuZGxlVm9pY2VVc2VycyBmcm9tICcuL2hhbmRsZXJzL3ZvaWNlVXNlcnMnO1xuaW1wb3J0IGhhbmRsZU1lZXRpbmdNdXRlZCBmcm9tICcuL2hhbmRsZXJzL21lZXRpbmdNdXRlZCc7XG5pbXBvcnQgaGFuZGxlRmxvb3JDaGFuZ2UgZnJvbSAnLi9oYW5kbGVycy9mbG9vckNoYW5nZWQnO1xuXG5SZWRpc1B1YlN1Yi5vbignVXNlckxlZnRWb2ljZUNvbmZUb0NsaWVudEV2dE1zZycsIGhhbmRsZUxlZnRWb2ljZVVzZXIpO1xuUmVkaXNQdWJTdWIub24oJ1VzZXJKb2luZWRWb2ljZUNvbmZUb0NsaWVudEV2dE1zZycsIGhhbmRsZUpvaW5Wb2ljZVVzZXIpO1xuUmVkaXNQdWJTdWIub24oJ1VzZXJUYWxraW5nVm9pY2VFdnRNc2cnLCBoYW5kbGVUYWxraW5nVm9pY2VVc2VyKTtcblJlZGlzUHViU3ViLm9uKCdVc2VyTXV0ZWRWb2ljZUV2dE1zZycsIGhhbmRsZU11dGVkVm9pY2VVc2VyKTtcblJlZGlzUHViU3ViLm9uKCdHZXRWb2ljZVVzZXJzTWVldGluZ1Jlc3BNc2cnLCBwcm9jZXNzRm9ySFRNTDVTZXJ2ZXJPbmx5KGhhbmRsZUdldFZvaWNlVXNlcnMpKTtcblJlZGlzUHViU3ViLm9uKCdTeW5jR2V0Vm9pY2VVc2Vyc1Jlc3BNc2cnLCBoYW5kbGVWb2ljZVVzZXJzKTtcblJlZGlzUHViU3ViLm9uKCdNZWV0aW5nTXV0ZWRFdnRNc2cnLCBoYW5kbGVNZWV0aW5nTXV0ZWQpO1xuUmVkaXNQdWJTdWIub24oJ0F1ZGlvRmxvb3JDaGFuZ2VkRXZ0TXNnJywgaGFuZGxlRmxvb3JDaGFuZ2UpO1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgbXV0ZVRvZ2dsZSBmcm9tICcuL21ldGhvZHMvbXV0ZVRvZ2dsZSc7XG5pbXBvcnQgbXV0ZUFsbFRvZ2dsZSBmcm9tICcuL21ldGhvZHMvbXV0ZUFsbFRvZ2dsZSc7XG5pbXBvcnQgbXV0ZUFsbEV4Y2VwdFByZXNlbnRlclRvZ2dsZSBmcm9tICcuL21ldGhvZHMvbXV0ZUFsbEV4Y2VwdFByZXNlbnRlclRvZ2dsZSc7XG5pbXBvcnQgZWplY3RVc2VyRnJvbVZvaWNlIGZyb20gJy4vbWV0aG9kcy9lamVjdFVzZXJGcm9tVm9pY2UnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG4gIHRvZ2dsZVZvaWNlOiBtdXRlVG9nZ2xlLFxuICBtdXRlQWxsVXNlcnM6IG11dGVBbGxUb2dnbGUsXG4gIG11dGVBbGxFeGNlcHRQcmVzZW50ZXI6IG11dGVBbGxFeGNlcHRQcmVzZW50ZXJUb2dnbGUsXG4gIGVqZWN0VXNlckZyb21Wb2ljZSxcbn0pO1xuIiwiaW1wb3J0IFZvaWNlVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3ZvaWNlLXVzZXJzJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24sIHsgVmFsaWRhdGlvblN0YXRlcyB9IGZyb20gJy9pbXBvcnRzL2FwaS9hdXRoLXRva2VuLXZhbGlkYXRpb24nO1xuaW1wb3J0IGVqZWN0VXNlckZyb21Wb2ljZSBmcm9tICcuL21ldGhvZHMvZWplY3RVc2VyRnJvbVZvaWNlJztcblxuZnVuY3Rpb24gdm9pY2VVc2VyKCkge1xuICBjb25zdCB0b2tlblZhbGlkYXRpb24gPSBBdXRoVG9rZW5WYWxpZGF0aW9uLmZpbmRPbmUoeyBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbi5pZCB9KTtcblxuICBpZiAoIXRva2VuVmFsaWRhdGlvbiB8fCB0b2tlblZhbGlkYXRpb24udmFsaWRhdGlvblN0YXR1cyAhPT0gVmFsaWRhdGlvblN0YXRlcy5WQUxJREFURUQpIHtcbiAgICBMb2dnZXIud2FybihgUHVibGlzaGluZyBWb2ljZVVzZXJzIHdhcyByZXF1ZXN0ZWQgYnkgdW5hdXRoIGNvbm5lY3Rpb24gJHt0aGlzLmNvbm5lY3Rpb24uaWR9YCk7XG4gICAgcmV0dXJuIFZvaWNlVXNlcnMuZmluZCh7IG1lZXRpbmdJZDogJycgfSk7XG4gIH1cblxuICBjb25zdCB7IG1lZXRpbmdJZCwgdXNlcklkOiByZXF1ZXN0ZXJVc2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBjb25zdCBvbkNsb3NlQ29ubmVjdGlvbiA9IE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBJIHVzZWQgdXNlciBiZWNhdXNlIHZvaWNlVXNlciBpcyB0aGUgZnVuY3Rpb24ncyBuYW1lXG4gICAgICBjb25zdCBVc2VyID0gVm9pY2VVc2Vycy5maW5kT25lKHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSk7XG4gICAgICBpZiAoVXNlcikge1xuICAgICAgICBlamVjdFVzZXJGcm9tVm9pY2UocmVxdWVzdGVyVXNlcklkKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEV4Y2VwdGlvbiB3aGlsZSBleGVjdXRpbmcgZWplY3RVc2VyRnJvbVZvaWNlIGZvciAke3JlcXVlc3RlclVzZXJJZH06ICR7ZX1gKTtcbiAgICB9XG4gIH0pO1xuXG4gIExvZ2dlci5kZWJ1ZygnUHVibGlzaGluZyBWb2ljZSBVc2VyJywgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9KTtcblxuICB0aGlzLl9zZXNzaW9uLnNvY2tldC5vbignY2xvc2UnLCBfLmRlYm91bmNlKG9uQ2xvc2VDb25uZWN0aW9uLCAxMDApKTtcbiAgcmV0dXJuIFZvaWNlVXNlcnMuZmluZCh7IG1lZXRpbmdJZCB9KTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaCguLi5hcmdzKSB7XG4gIGNvbnN0IGJvdW5kVm9pY2VVc2VyID0gdm9pY2VVc2VyLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZFZvaWNlVXNlciguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ3ZvaWNlVXNlcnMnLCBwdWJsaXNoKTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuXG5jb25zdCBWb2ljZVVzZXJzID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24oJ3ZvaWNlVXNlcnMnKTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuICAvLyB0eXBlcyBvZiBxdWVyaWVzIGZvciB0aGUgdm9pY2UgdXNlcnM6XG4gIC8vIDEuIGludElkXG4gIC8vIDIuIG1lZXRpbmdJZCwgaW50SWRcblxuICBWb2ljZVVzZXJzLl9lbnN1cmVJbmRleCh7IGludElkOiAxIH0pO1xuICBWb2ljZVVzZXJzLl9lbnN1cmVJbmRleCh7IG1lZXRpbmdJZDogMSwgaW50SWQ6IDEgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZvaWNlVXNlcnM7XG4iLCJpbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgbW9kaWZ5V2hpdGVib2FyZEFjY2VzcyBmcm9tICcuLi9tb2RpZmllcnMvbW9kaWZ5V2hpdGVib2FyZEFjY2Vzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZU1vZGlmeVdoaXRlYm9hcmRBY2Nlc3MoeyBib2R5IH0sIG1lZXRpbmdJZCkge1xuICBjb25zdCB7IG11bHRpVXNlciwgd2hpdGVib2FyZElkIH0gPSBib2R5O1xuXG4gIGNoZWNrKG11bHRpVXNlciwgQXJyYXkpO1xuICBjaGVjayh3aGl0ZWJvYXJkSWQsIFN0cmluZyk7XG4gIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcblxuICByZXR1cm4gbW9kaWZ5V2hpdGVib2FyZEFjY2VzcyhtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCwgbXVsdGlVc2VyKTtcbn1cbiIsImltcG9ydCBSZWRpc1B1YlN1YiBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9yZWRpcyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB7IGdldFVzZXJzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkR2xvYmFsQWNjZXNzKHdoaXRlYm9hcmRJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ01vZGlmeVdoaXRlYm9hcmRBY2Nlc3NQdWJNc2cnO1xuXG4gICAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBtdWx0aVVzZXIgPSBnZXRVc2VycyhtZWV0aW5nSWQpO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIG11bHRpVXNlcixcbiAgICAgIHdoaXRlYm9hcmRJZCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIGFkZEdsb2JhbEFjY2VzcyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHsgZ2V0TXVsdGlVc2VyIH0gZnJvbSAnL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkSW5kaXZpZHVhbEFjY2Vzcyh3aGl0ZWJvYXJkSWQsIHVzZXJJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ01vZGlmeVdoaXRlYm9hcmRBY2Nlc3NQdWJNc2cnO1xuXG4gICAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgbXVsdGlVc2VyID0gZ2V0TXVsdGlVc2VyKG1lZXRpbmdJZCwgd2hpdGVib2FyZElkKTtcblxuICAgIGlmICghbXVsdGlVc2VyLmluY2x1ZGVzKHVzZXJJZCkpIHtcbiAgICAgIG11bHRpVXNlci5wdXNoKHVzZXJJZCk7XG5cbiAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgIG11bHRpVXNlcixcbiAgICAgICAgd2hpdGVib2FyZElkLFxuICAgICAgfTtcblxuICAgICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIExvZ2dlci5lcnJvcihgRXhjZXB0aW9uIHdoaWxlIGludm9raW5nIG1ldGhvZCBhZGRJbmRpdmlkdWFsQWNjZXNzICR7ZXJyLnN0YWNrfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgeyBjaGVjayB9IGZyb20gJ21ldGVvci9jaGVjayc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlR2xvYmFsQWNjZXNzKHdoaXRlYm9hcmRJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ01vZGlmeVdoaXRlYm9hcmRBY2Nlc3NQdWJNc2cnO1xuXG4gICAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZCB9ID0gZXh0cmFjdENyZWRlbnRpYWxzKHRoaXMudXNlcklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayhyZXF1ZXN0ZXJVc2VySWQsIFN0cmluZyk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgbXVsdGlVc2VyOiBbXSxcbiAgICAgIHdoaXRlYm9hcmRJZCxcbiAgICB9O1xuXG4gICAgUmVkaXNQdWJTdWIucHVibGlzaFVzZXJNZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkLCBwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHJlbW92ZUdsb2JhbEFjY2VzcyAke2Vyci5zdGFja31gKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlZGlzUHViU3ViIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL3JlZGlzJztcbmltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IHsgZ2V0TXVsdGlVc2VyIH0gZnJvbSAnL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgeyBleHRyYWN0Q3JlZGVudGlhbHMgfSBmcm9tICcvaW1wb3J0cy9hcGkvY29tbW9uL3NlcnZlci9oZWxwZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlSW5kaXZpZHVhbEFjY2Vzcyh3aGl0ZWJvYXJkSWQsIHVzZXJJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IFJFRElTX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzO1xuICAgIGNvbnN0IENIQU5ORUwgPSBSRURJU19DT05GSUcuY2hhbm5lbHMudG9Ba2thQXBwcztcbiAgICBjb25zdCBFVkVOVF9OQU1FID0gJ01vZGlmeVdoaXRlYm9hcmRBY2Nlc3NQdWJNc2cnO1xuXG4gICAgY2hlY2sod2hpdGVib2FyZElkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcblxuICAgIGNvbnN0IHsgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyh0aGlzLnVzZXJJZCk7XG5cbiAgICBjaGVjayhtZWV0aW5nSWQsIFN0cmluZyk7XG4gICAgY2hlY2socmVxdWVzdGVyVXNlcklkLCBTdHJpbmcpO1xuXG4gICAgY29uc3QgbXVsdGlVc2VyID0gZ2V0TXVsdGlVc2VyKG1lZXRpbmdJZCwgd2hpdGVib2FyZElkKTtcblxuICAgIGlmIChtdWx0aVVzZXIuaW5jbHVkZXModXNlcklkKSkge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgbXVsdGlVc2VyOiBtdWx0aVVzZXIuZmlsdGVyKGlkID0+IGlkICE9PSB1c2VySWQpLFxuICAgICAgICB3aGl0ZWJvYXJkSWQsXG4gICAgICB9O1xuXG4gICAgICBSZWRpc1B1YlN1Yi5wdWJsaXNoVXNlck1lc3NhZ2UoQ0hBTk5FTCwgRVZFTlRfTkFNRSwgbWVldGluZ0lkLCByZXF1ZXN0ZXJVc2VySWQsIHBheWxvYWQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2VyLmVycm9yKGBFeGNlcHRpb24gd2hpbGUgaW52b2tpbmcgbWV0aG9kIHJlbW92ZUluZGl2aWR1YWxBY2Nlc3MgJHtlcnIuc3RhY2t9YCk7XG4gIH1cbn1cbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvbG9nZ2VyJztcbmltcG9ydCBXaGl0ZWJvYXJkTXVsdGlVc2VyIGZyb20gJy9pbXBvcnRzL2FwaS93aGl0ZWJvYXJkLW11bHRpLXVzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhcldoaXRlYm9hcmRNdWx0aVVzZXIobWVldGluZ0lkKSB7XG4gIGlmIChtZWV0aW5nSWQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbnVtYmVyQWZmZWN0ZWQgPSBXaGl0ZWJvYXJkTXVsdGlVc2VyLnJlbW92ZSh7IG1lZXRpbmdJZCB9KTtcblxuICAgICAgaWYgKG51bWJlckFmZmVjdGVkKSB7XG4gICAgICAgIExvZ2dlci5pbmZvKGBDbGVhcmVkIFdoaXRlYm9hcmRNdWx0aVVzZXIgKCR7bWVldGluZ0lkfSlgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBFcnJvciBjbGVhcmluZyBXaGl0ZWJvYXJkTXVsdGlVc2VyICgke21lZXRpbmdJZH0pLiAke2Vycn1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG51bWJlckFmZmVjdGVkID0gV2hpdGVib2FyZE11bHRpVXNlci5yZW1vdmUoe30pO1xuXG4gICAgICBpZiAobnVtYmVyQWZmZWN0ZWQpIHtcbiAgICAgICAgTG9nZ2VyLmluZm8oJ0NsZWFyZWQgV2hpdGVib2FyZE11bHRpVXNlciAoYWxsKScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmluZm8oYEVycm9yIGNsZWFyaW5nIFdoaXRlYm9hcmRNdWx0aVVzZXIgKGFsbCkuICR7ZXJyfWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2sgfSBmcm9tICdtZXRlb3IvY2hlY2snO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IFdoaXRlYm9hcmRNdWx0aVVzZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci8nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb2RpZnlXaGl0ZWJvYXJkQWNjZXNzKG1lZXRpbmdJZCwgd2hpdGVib2FyZElkLCBtdWx0aVVzZXIpIHtcbiAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICBjaGVjayh3aGl0ZWJvYXJkSWQsIFN0cmluZyk7XG4gIGNoZWNrKG11bHRpVXNlciwgQXJyYXkpO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0ge1xuICAgIG1lZXRpbmdJZCxcbiAgICB3aGl0ZWJvYXJkSWQsXG4gIH07XG5cbiAgY29uc3QgbW9kaWZpZXIgPSB7XG4gICAgbWVldGluZ0lkLFxuICAgIHdoaXRlYm9hcmRJZCxcbiAgICBtdWx0aVVzZXIsXG4gIH07XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGluc2VydGVkSWQgfSA9IFdoaXRlYm9hcmRNdWx0aVVzZXIudXBzZXJ0KHNlbGVjdG9yLCBtb2RpZmllcik7XG4gICAgaWYgKGluc2VydGVkSWQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBBZGRlZCBtdWx0aVVzZXIgZmxhZz0ke211bHRpVXNlcn0gbWVldGluZ0lkPSR7bWVldGluZ0lkfSB3aGl0ZWJvYXJkSWQ9JHt3aGl0ZWJvYXJkSWR9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIExvZ2dlci5pbmZvKGBVcHNlcnRlZCBtdWx0aVVzZXIgZmxhZz0ke211bHRpVXNlcn0gbWVldGluZ0lkPSR7bWVldGluZ0lkfSB3aGl0ZWJvYXJkSWQ9JHt3aGl0ZWJvYXJkSWR9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZXJyb3IoYEVycm9yIHdoaWxlIGFkZGluZyBhbiBlbnRyeSB0byBNdWx0aS1Vc2VyIGNvbGxlY3Rpb246ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVkaXNQdWJTdWIgZnJvbSAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXIvcmVkaXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0ZvckhUTUw1U2VydmVyT25seSB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IGhhbmRsZUdldFdoaXRlYm9hcmRBY2Nlc3MgZnJvbSAnLi9oYW5kbGVycy9tb2RpZnlXaGl0ZWJvYXJkQWNjZXNzJztcblxuUmVkaXNQdWJTdWIub24oJ0dldFdoaXRlYm9hcmRBY2Nlc3NSZXNwTXNnJywgcHJvY2Vzc0ZvckhUTUw1U2VydmVyT25seShoYW5kbGVHZXRXaGl0ZWJvYXJkQWNjZXNzKSk7XG5SZWRpc1B1YlN1Yi5vbignU3luY0dldFdoaXRlYm9hcmRBY2Nlc3NSZXNwTXNnJywgaGFuZGxlR2V0V2hpdGVib2FyZEFjY2Vzcyk7XG5SZWRpc1B1YlN1Yi5vbignTW9kaWZ5V2hpdGVib2FyZEFjY2Vzc0V2dE1zZycsIGhhbmRsZUdldFdoaXRlYm9hcmRBY2Nlc3MpO1xuIiwiaW1wb3J0IFVzZXJzIGZyb20gJy9pbXBvcnRzL2FwaS91c2Vycyc7XG5pbXBvcnQgV2hpdGVib2FyZE11bHRpVXNlciBmcm9tICcvaW1wb3J0cy9hcGkvd2hpdGVib2FyZC1tdWx0aS11c2VyLyc7XG5cbmNvbnN0IGdldE11bHRpVXNlciA9IChtZWV0aW5nSWQsIHdoaXRlYm9hcmRJZCkgPT4ge1xuICBjb25zdCBkYXRhID0gV2hpdGVib2FyZE11bHRpVXNlci5maW5kT25lKFxuICAgIHtcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHdoaXRlYm9hcmRJZCxcbiAgICB9LCB7IGZpZWxkczogeyBtdWx0aVVzZXI6IDEgfSB9LFxuICApO1xuXG4gIGlmICghZGF0YSB8fCAhZGF0YS5tdWx0aVVzZXIgfHwgIUFycmF5LmlzQXJyYXkoZGF0YS5tdWx0aVVzZXIpKSByZXR1cm4gW107XG5cbiAgcmV0dXJuIGRhdGEubXVsdGlVc2VyO1xufTtcblxuY29uc3QgZ2V0VXNlcnMgPSAobWVldGluZ0lkKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBVc2Vycy5maW5kKFxuICAgIHsgbWVldGluZ0lkIH0sXG4gICAgeyBmaWVsZHM6IHsgdXNlcklkOiAxIH0gfSxcbiAgKS5mZXRjaCgpO1xuXG4gIGlmICghZGF0YSkgcmV0dXJuIFtdO1xuXG4gIHJldHVybiBkYXRhLm1hcCh1c2VyID0+IHVzZXIudXNlcklkKTtcbn07XG5cbmV4cG9ydCB7XG4gIGdldE11bHRpVXNlcixcbiAgZ2V0VXNlcnMsXG59O1xuIiwiaW1wb3J0ICcuL2V2ZW50SGFuZGxlcnMnO1xuaW1wb3J0ICcuL21ldGhvZHMnO1xuaW1wb3J0ICcuL3B1Ymxpc2hlcnMnO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgYWRkR2xvYmFsQWNjZXNzIGZyb20gJy4vbWV0aG9kcy9hZGRHbG9iYWxBY2Nlc3MnO1xuaW1wb3J0IGFkZEluZGl2aWR1YWxBY2Nlc3MgZnJvbSAnLi9tZXRob2RzL2FkZEluZGl2aWR1YWxBY2Nlc3MnO1xuaW1wb3J0IHJlbW92ZUdsb2JhbEFjY2VzcyBmcm9tICcuL21ldGhvZHMvcmVtb3ZlR2xvYmFsQWNjZXNzJztcbmltcG9ydCByZW1vdmVJbmRpdmlkdWFsQWNjZXNzIGZyb20gJy4vbWV0aG9kcy9yZW1vdmVJbmRpdmlkdWFsQWNjZXNzJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuICBhZGRHbG9iYWxBY2Nlc3MsXG4gIGFkZEluZGl2aWR1YWxBY2Nlc3MsXG4gIHJlbW92ZUdsb2JhbEFjY2VzcyxcbiAgcmVtb3ZlSW5kaXZpZHVhbEFjY2Vzcyxcbn0pO1xuIiwiaW1wb3J0IFdoaXRlYm9hcmRNdWx0aVVzZXIgZnJvbSAnL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci8nO1xuaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5pbXBvcnQgQXV0aFRva2VuVmFsaWRhdGlvbiwgeyBWYWxpZGF0aW9uU3RhdGVzIH0gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5cbmZ1bmN0aW9uIHdoaXRlYm9hcmRNdWx0aVVzZXIoKSB7XG4gIGNvbnN0IHRva2VuVmFsaWRhdGlvbiA9IEF1dGhUb2tlblZhbGlkYXRpb24uZmluZE9uZSh7IGNvbm5lY3Rpb25JZDogdGhpcy5jb25uZWN0aW9uLmlkIH0pO1xuXG4gIGlmICghdG9rZW5WYWxpZGF0aW9uIHx8IHRva2VuVmFsaWRhdGlvbi52YWxpZGF0aW9uU3RhdHVzICE9PSBWYWxpZGF0aW9uU3RhdGVzLlZBTElEQVRFRCkge1xuICAgIExvZ2dlci53YXJuKGBQdWJsaXNoaW5nIFdoaXRlYm9hcmRNdWx0aVVzZXIgd2FzIHJlcXVlc3RlZCBieSB1bmF1dGggY29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbi5pZH1gKTtcbiAgICByZXR1cm4gV2hpdGVib2FyZE11bHRpVXNlci5maW5kKHsgbWVldGluZ0lkOiAnJyB9KTtcbiAgfVxuXG4gIGNvbnN0IHsgbWVldGluZ0lkLCB1c2VySWQgfSA9IHRva2VuVmFsaWRhdGlvbjtcblxuICBMb2dnZXIuZGVidWcoJ1B1Ymxpc2hpbmcgV2hpdGVib2FyZE11bHRpVXNlcicsIHsgbWVldGluZ0lkLCB1c2VySWQgfSk7XG5cbiAgcmV0dXJuIFdoaXRlYm9hcmRNdWx0aVVzZXIuZmluZCh7IG1lZXRpbmdJZCB9KTtcbn1cblxuXG5mdW5jdGlvbiBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgY29uc3QgYm91bmRNdWx0aVVzZXIgPSB3aGl0ZWJvYXJkTXVsdGlVc2VyLmJpbmQodGhpcyk7XG4gIHJldHVybiBib3VuZE11bHRpVXNlciguLi5hcmdzKTtcbn1cblxuTWV0ZW9yLnB1Ymxpc2goJ3doaXRlYm9hcmQtbXVsdGktdXNlcicsIHB1Ymxpc2gpO1xuIiwiaW1wb3J0IHsgTWV0ZW9yIH0gZnJvbSAnbWV0ZW9yL21ldGVvcic7XG5cbmNvbnN0IFdoaXRlYm9hcmRNdWx0aVVzZXIgPSBuZXcgTW9uZ28uQ29sbGVjdGlvbignd2hpdGVib2FyZC1tdWx0aS11c2VyJyk7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcbiAgLy8gdHlwZXMgb2YgcXVlcmllcyBmb3IgdGhlIHdoaXRlYm9hcmQtbXVsdGktdXNlcjpcbiAgLy8gMS4gbWVldGluZ0lkXG5cbiAgV2hpdGVib2FyZE11bHRpVXNlci5fZW5zdXJlSW5kZXgoeyBtZWV0aW5nSWQ6IDEgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdoaXRlYm9hcmRNdWx0aVVzZXI7XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHNoYTEgZnJvbSAnY3J5cHRvLWpzL3NoYTEnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcvaW1wb3J0cy9zdGFydHVwL3NlcnZlci9sb2dnZXInO1xuaW1wb3J0IGNyZWF0ZU5vdGUgZnJvbSAnL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyL21ldGhvZHMvY3JlYXRlTm90ZSc7XG5pbXBvcnQgY3JlYXRlQ2FwdGlvbnMgZnJvbSAnL2ltcG9ydHMvYXBpL2NhcHRpb25zL3NlcnZlci9tZXRob2RzL2NyZWF0ZUNhcHRpb25zJztcblxuY29uc3QgRVRIRVJQQUQgPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5ldGhlcnBhZDtcbmNvbnN0IEJBU0VfVVJMID0gYGh0dHA6Ly8ke0VUSEVSUEFELmhvc3R9OiR7RVRIRVJQQUQucG9ydH0vYXBpLyR7RVRIRVJQQUQudmVyc2lvbn1gO1xuY29uc3QgSEFTSF9TSVpFID0gMzY7XG5cbmNvbnN0IGNyZWF0ZVBhZFVSTCA9IHBhZElkID0+IGAke0JBU0VfVVJMfS9jcmVhdGVQYWQ/YXBpa2V5PSR7RVRIRVJQQUQuYXBpa2V5fSZwYWRJRD0ke3BhZElkfWA7XG5cbmNvbnN0IGdldFJlYWRPbmx5SWRVUkwgPSBwYWRJZCA9PiBgJHtCQVNFX1VSTH0vZ2V0UmVhZE9ubHlJRD9hcGlrZXk9JHtFVEhFUlBBRC5hcGlrZXl9JnBhZElEPSR7cGFkSWR9YDtcblxuY29uc3QgYXBwZW5kVGV4dFVSTCA9IChwYWRJZCwgdGV4dCkgPT4gYCR7QkFTRV9VUkx9L2FwcGVuZFRleHQ/YXBpa2V5PSR7RVRIRVJQQUQuYXBpa2V5fSZwYWRJRD0ke3BhZElkfSZ0ZXh0PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRleHQpfWA7XG5cbmNvbnN0IGNoZWNrVG9rZW5VUkwgPSAoKSA9PiBgJHtCQVNFX1VSTH0vY2hlY2tUb2tlbj9hcGlrZXk9JHtFVEhFUlBBRC5hcGlrZXl9YDtcblxuY29uc3QgaGFzaFNIQTEgPSAoc3RyKSA9PiBzaGExKHN0cikudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgSEFTSF9TSVpFKTtcblxuY29uc3QgY2hlY2tTZXJ2ZXIgPSAoKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXhpb3Moe1xuICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgIHVybDogY2hlY2tUb2tlblVSTCgpLFxuICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSByZXNwb25zZTtcbiAgICAgIGlmIChzdGF0dXMgIT09IDIwMCkgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgY29uc3QgeyBtZXNzYWdlIH0gPSByZXNwb25zZS5kYXRhO1xuICAgICAgaWYgKG1lc3NhZ2UgIT09ICdvaycpIHJldHVybiByZWplY3QoKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KS5jYXRjaCgoKSA9PiByZWplY3QoKSk7XG4gIH0pO1xufTtcblxuY29uc3QgaW5pdFBhZHMgPSAobWVldGluZ0lkLCBodG1sNUluc3RhbmNlSWQpID0+IHtcbiAgY2hlY2tTZXJ2ZXIoKS50aGVuKCgpID0+IHtcbiAgICBjcmVhdGVOb3RlKG1lZXRpbmdJZCwgaHRtbDVJbnN0YW5jZUlkKTtcbiAgICBjcmVhdGVDYXB0aW9ucyhtZWV0aW5nSWQsIGh0bWw1SW5zdGFuY2VJZCk7XG4gIH0pLmNhdGNoKCgpID0+IExvZ2dlci5lcnJvcihgUGFkcycgc2VydmVyIHVucmVhY2hhYmxlYCkpO1xufTtcblxuY29uc3Qgd2l0aEluc3RhY2VJZCA9IChpbnN0YW5jZUlkLCBpZCkgPT4gYFske2luc3RhbmNlSWR9XSR7aWR9YDtcblxuZXhwb3J0IHtcbiAgaGFzaFNIQTEsXG4gIGNyZWF0ZVBhZFVSTCxcbiAgZ2V0UmVhZE9ubHlJZFVSTCxcbiAgYXBwZW5kVGV4dFVSTCxcbiAgaW5pdFBhZHMsXG4gIHdpdGhJbnN0YWNlSWQsXG59XG4iLCJpbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcblxuY29uc3QgTVNHX0RJUkVDVF9UWVBFID0gJ0RJUkVDVCc7XG5jb25zdCBOT0RFX1VTRVIgPSAnbm9kZUpTYXBwJztcblxuZXhwb3J0IGNvbnN0IHNwb2tlVGltZW91dEhhbmRsZXMgPSB7fTtcbmV4cG9ydCBjb25zdCBjbGVhclNwb2tlVGltZW91dCA9IChtZWV0aW5nSWQsIHVzZXJJZCkgPT4ge1xuICBpZiAoc3Bva2VUaW1lb3V0SGFuZGxlc1tgJHttZWV0aW5nSWR9LSR7dXNlcklkfWBdKSB7XG4gICAgTWV0ZW9yLmNsZWFyVGltZW91dChzcG9rZVRpbWVvdXRIYW5kbGVzW2Ake21lZXRpbmdJZH0tJHt1c2VySWR9YF0pO1xuICAgIGRlbGV0ZSBzcG9rZVRpbWVvdXRIYW5kbGVzW2Ake21lZXRpbmdJZH0tJHt1c2VySWR9YF07XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbiAoaXRlbSkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSArPSAxKSB7XG4gICAgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuXG5leHBvcnQgY29uc3QgcHJvY2Vzc0ZvckhUTUw1U2VydmVyT25seSA9IGZuID0+IChtZXNzYWdlLCAuLi5hcmdzKSA9PiB7XG4gIGNvbnN0IHsgZW52ZWxvcGUgfSA9IG1lc3NhZ2U7XG4gIGNvbnN0IHsgcm91dGluZyB9ID0gZW52ZWxvcGU7XG4gIGNvbnN0IHsgbXNnVHlwZSwgbWVldGluZ0lkLCB1c2VySWQgfSA9IHJvdXRpbmc7XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSB7XG4gICAgdXNlcklkLFxuICAgIG1lZXRpbmdJZCxcbiAgfTtcblxuICBjb25zdCB1c2VyID0gVXNlcnMuZmluZE9uZShzZWxlY3Rvcik7XG5cbiAgY29uc3Qgc2hvdWxkU2tpcCA9IHVzZXIgJiYgbXNnVHlwZSA9PT0gTVNHX0RJUkVDVF9UWVBFICYmIHVzZXJJZCAhPT0gTk9ERV9VU0VSICYmIHVzZXIuY2xpZW50VHlwZSAhPT0gJ0hUTUw1JztcbiAgaWYgKHNob3VsZFNraXApIHJldHVybiAoKSA9PiB7IH07XG4gIHJldHVybiBmbihtZXNzYWdlLCAuLi5hcmdzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0Q3JlZGVudGlhbHMgPSAoY3JlZGVudGlhbHMpID0+IHtcbiAgaWYgKCFjcmVkZW50aWFscykgcmV0dXJuIHt9O1xuICBjb25zdCBjcmVkZW50aWFsc0FycmF5ID0gY3JlZGVudGlhbHMuc3BsaXQoJy0tJyk7XG4gIGNvbnN0IG1lZXRpbmdJZCA9IGNyZWRlbnRpYWxzQXJyYXlbMF07XG4gIGNvbnN0IHJlcXVlc3RlclVzZXJJZCA9IGNyZWRlbnRpYWxzQXJyYXlbMV07XG4gIHJldHVybiB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkIH07XG59O1xuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgdXNlckxlYXZpbmcgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlci9tZXRob2RzL3VzZXJMZWF2aW5nJztcbmltcG9ydCB7IGV4dHJhY3RDcmVkZW50aWFscyB9IGZyb20gJy9pbXBvcnRzL2FwaS9jb21tb24vc2VydmVyL2hlbHBlcnMnO1xuaW1wb3J0IEF1dGhUb2tlblZhbGlkYXRpb24gZnJvbSAnL2ltcG9ydHMvYXBpL2F1dGgtdG9rZW4tdmFsaWRhdGlvbic7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcblxuY29uc3QgeyBlbmFibGVkLCBzeW5jSW50ZXJ2YWwgfSA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMuc3luY1VzZXJzV2l0aENvbm5lY3Rpb25NYW5hZ2VyO1xuXG5jbGFzcyBDbGllbnRDb25uZWN0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIExvZ2dlci5kZWJ1ZygnSW5pdGlhbGl6aW5nIGNsaWVudCBjb25uZWN0aW9ucyBzdHJ1Y3R1cmUnLCB7IGxvZ0NvZGU6ICdjbGllbnRfY29ubmVjdGlvbnNfaW5pdCcgfSk7XG4gICAgdGhpcy5jb25uZWN0aW9ucyA9IG5ldyBNYXAoKTtcblxuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMucHJpbnQoKTtcbiAgICB9LCAzMDAwMCk7XG5cbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgY29uc3Qgc3luY0Nvbm5lY3Rpb25zID0gTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3luY0Nvbm5lY3Rpb25zV2l0aFNlcnZlcigpO1xuICAgICAgfSk7XG5cbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgc3luY0Nvbm5lY3Rpb25zKCk7XG4gICAgICB9LCBzeW5jSW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIGFkZChzZXNzaW9uSWQsIGNvbm5lY3Rpb24pIHtcbiAgICBMb2dnZXIuaW5mbygnQ2xpZW50IGNvbm5lY3Rpb25zIGFkZCBjYWxsZWQnLCB7IGxvZ0NvZGU6ICdjbGllbnRfY29ubmVjdGlvbnNfYWRkJywgZXh0cmFJbmZvOiB7IHNlc3Npb25JZCwgY29ubmVjdGlvbiB9IH0pO1xuICAgIGlmICghc2Vzc2lvbklkIHx8ICFjb25uZWN0aW9uKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoYEVycm9yIG9uIGFkZCBuZXcgY2xpZW50IGNvbm5lY3Rpb24uIHNlc3Npb25JZD0ke3Nlc3Npb25JZH0gY29ubmVjdGlvbj0ke2Nvbm5lY3Rpb24uaWR9YCxcbiAgICAgICAgeyBsb2dDb2RlOiAnY2xpZW50X2Nvbm5lY3Rpb25zX2FkZF9lcnJvcicsIGV4dHJhSW5mbzogeyBzZXNzaW9uSWQsIGNvbm5lY3Rpb24gfSB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZDogdXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHMoc2Vzc2lvbklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gICAgICBcbiAgICBpZiAoIW1lZXRpbmdJZCkge1xuICAgICAgTG9nZ2VyLmVycm9yKGBFcnJvciBvbiBhZGQgbmV3IGNsaWVudCBjb25uZWN0aW9uLiBzZXNzaW9uSWQ9JHtzZXNzaW9uSWR9IGNvbm5lY3Rpb249JHtjb25uZWN0aW9uLmlkfWAsXG4gICAgICAgIHsgbG9nQ29kZTogJ2NsaWVudF9jb25uZWN0aW9uc19hZGRfZXJyb3JfbWVldGluZ19pZF9udWxsJywgZXh0cmFJbmZvOiB7IG1lZXRpbmdJZCwgdXNlcklkIH0gfVxuICAgICAgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZXhpc3RzKG1lZXRpbmdJZCkpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBNZWV0aW5nIG5vdCBmb3VuZCBpbiBjb25uZWN0aW9uczogbWVldGluZ0lkPSR7bWVldGluZ0lkfWApO1xuICAgICAgdGhpcy5jcmVhdGVNZWV0aW5nQ29ubmVjdGlvbnMobWVldGluZ0lkKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZXNzaW9uQ29ubmVjdGlvbnMgPSB0aGlzLmNvbm5lY3Rpb25zLmdldChtZWV0aW5nSWQpO1xuXG4gICAgaWYgKHNlc3Npb25Db25uZWN0aW9ucy5oYXModXNlcklkKSAmJiBzZXNzaW9uQ29ubmVjdGlvbnMuZ2V0KHVzZXJJZCkuaW5jbHVkZXMoY29ubmVjdGlvbi5pZCkpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBDb25uZWN0aW9uIGFscmVhZHkgZXhpc3RzIGZvciB1c2VyLiB1c2VySWQ9JHt1c2VySWR9IGNvbm5lY3Rpb25JZD0ke2Nvbm5lY3Rpb24uaWR9YCk7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25uZWN0aW9uLm9uQ2xvc2UoTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoKSA9PiB7XG4gICAgICB1c2VyTGVhdmluZyhtZWV0aW5nSWQsIHVzZXJJZCwgY29ubmVjdGlvbi5pZCk7XG4gICAgfSkpO1xuXG4gICAgTG9nZ2VyLmluZm8oYEFkZGluZyBuZXcgY29ubmVjdGlvbiBmb3Igc2Vzc2lvbklkPSR7c2Vzc2lvbklkfSBjb25uZWN0aW9uPSR7Y29ubmVjdGlvbi5pZH1gKTtcblxuICAgIGlmICghc2Vzc2lvbkNvbm5lY3Rpb25zLmhhcyh1c2VySWQpKSB7XG4gICAgICBMb2dnZXIuaW5mbyhgQ3JlYXRpbmcgY29ubmVjdGlvbnMgcG9sbCBmb3IgJHt1c2VySWR9YCk7XG5cbiAgICAgIHNlc3Npb25Db25uZWN0aW9ucy5zZXQodXNlcklkLCBbXSk7XG4gICAgICByZXR1cm4gc2Vzc2lvbkNvbm5lY3Rpb25zLmdldCh1c2VySWQpLnB1c2goY29ubmVjdGlvbi5pZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzZXNzaW9uQ29ubmVjdGlvbnMuZ2V0KHVzZXJJZCkucHVzaChjb25uZWN0aW9uLmlkKTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVNZWV0aW5nQ29ubmVjdGlvbnMobWVldGluZ0lkKSB7XG4gICAgTG9nZ2VyLmluZm8oYENyZWF0aW5nIG1lZXRpbmcgaW4gY29ubmVjdGlvbnMuIG1lZXRpbmdJZD0ke21lZXRpbmdJZH1gKTtcblxuICAgIGlmICghdGhpcy5leGlzdHMobWVldGluZ0lkKSlcbiAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25zLnNldChtZWV0aW5nSWQsIG5ldyBNYXAoKSk7XG4gIH1cblxuICBleGlzdHMobWVldGluZ0lkKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbnMuaGFzKG1lZXRpbmdJZCk7XG4gIH1cblxuICBnZXRDb25uZWN0aW9uc0ZvckNsaWVudChzZXNzaW9uSWQpIHtcbiAgICBjb25zdCB7IG1lZXRpbmdJZCwgcmVxdWVzdGVyVXNlcklkOiB1c2VySWQgfSA9IGV4dHJhY3RDcmVkZW50aWFscyhzZXNzaW9uSWQpO1xuXG4gICAgY2hlY2sobWVldGluZ0lkLCBTdHJpbmcpO1xuICAgIGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcbiAgXG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbnMuZ2V0KG1lZXRpbmdJZCk/LmdldCh1c2VySWQpO1xuICB9XG5cbiAgcHJpbnQoKSB7XG4gICAgY29uc3QgbWFwQ29ubmVjdGlvbnNPYmogPSB7fTtcbiAgICB0aGlzLmNvbm5lY3Rpb25zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIG1hcENvbm5lY3Rpb25zT2JqW2tleV0gPSB7fTtcblxuICAgICAgdmFsdWUuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICBtYXBDb25uZWN0aW9uc09ialtrZXldW2tdID0gdjtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gICAgTG9nZ2VyLmluZm8oJ0FjdGl2ZSBjb25uZWN0aW9ucycsIG1hcENvbm5lY3Rpb25zT2JqKTtcbiAgfVxuXG4gIHJlbW92ZUNsaWVudENvbm5lY3Rpb24oc2Vzc2lvbklkLCBjb25uZWN0aW9uSWQgPSBudWxsKSB7XG4gICAgTG9nZ2VyLmluZm8oYFJlbW92aW5nIGNvbm5lY3Rpb25JZCBmb3IgdXNlci4gc2Vzc2lvbklkPSR7c2Vzc2lvbklkfSBjb25uZWN0aW9uSWQ9JHtjb25uZWN0aW9uSWR9YCk7XG4gICAgY29uc3QgeyBtZWV0aW5nSWQsIHJlcXVlc3RlclVzZXJJZDogdXNlcklkIH0gPSBleHRyYWN0Q3JlZGVudGlhbHMoc2Vzc2lvbklkKTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gIFxuICAgIGNvbnN0IG1lZXRpbmdDb25uZWN0aW9ucyA9IHRoaXMuY29ubmVjdGlvbnMuZ2V0KG1lZXRpbmdJZCk7XG5cbiAgICBpZiAobWVldGluZ0Nvbm5lY3Rpb25zPy5oYXModXNlcklkKSkge1xuICAgICAgY29uc3QgZmlsdGVyZWRDb25uZWN0aW9ucyA9IG1lZXRpbmdDb25uZWN0aW9ucy5nZXQodXNlcklkKS5maWx0ZXIoYyA9PiBjICE9PSBjb25uZWN0aW9uSWQpO1xuXG4gICAgICByZXR1cm4gY29ubmVjdGlvbklkICYmIGZpbHRlcmVkQ29ubmVjdGlvbnMubGVuZ3RoID8gbWVldGluZ0Nvbm5lY3Rpb25zLnNldCh1c2VySWQsIGZpbHRlcmVkQ29ubmVjdGlvbnMpIDogbWVldGluZ0Nvbm5lY3Rpb25zLmRlbGV0ZSh1c2VySWQpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJlbW92ZU1lZXRpbmcobWVldGluZ0lkKSB7XG4gICAgTG9nZ2VyLmRlYnVnKGBSZW1vdmluZyBjb25uZWN0aW9ucyBmb3IgbWVldGluZz0ke21lZXRpbmdJZH1gKTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9ucy5kZWxldGUobWVldGluZ0lkKTtcbiAgfVxuXG4gIHN5bmNDb25uZWN0aW9uc1dpdGhTZXJ2ZXIoKSB7XG4gICAgTG9nZ2VyLmluZm8oJ1N5bmNpbmcgQ2xpZW50Q29ubmVjdGlvbnMgd2l0aCBzZXJ2ZXInKTtcbiAgICBjb25zdCBhY3RpdmVDb25uZWN0aW9ucyA9IEFycmF5LmZyb20oTWV0ZW9yLnNlcnZlci5zZXNzaW9ucy5rZXlzKCkpO1xuXG4gICAgTG9nZ2VyLmRlYnVnKGBGb3VuZCAke2FjdGl2ZUNvbm5lY3Rpb25zLmxlbmd0aH0gYWN0aXZlIGNvbm5lY3Rpb25zIGluIHNlcnZlcmApO1xuXG4gICAgY29uc3Qgb25saW5lVXNlcnMgPSBBdXRoVG9rZW5WYWxpZGF0aW9uXG4gICAgICAuZmluZChcbiAgICAgICAgeyBjb25uZWN0aW9uSWQ6IHsgJGluOiBhY3RpdmVDb25uZWN0aW9ucyB9IH0sXG4gICAgICAgIHsgZmllbGRzOiB7IG1lZXRpbmdJZDogMSwgdXNlcklkOiAxIH0gfVxuICAgICAgKVxuICAgICAgLmZldGNoKCk7XG5cbiAgICBjb25zdCBvbmxpbmVVc2Vyc0lkID0gb25saW5lVXNlcnMubWFwKCh7IHVzZXJJZCB9KSA9PiB1c2VySWQpO1xuXG4gICAgY29uc3QgdXNlcnNRdWVyeSA9IHsgdXNlcklkOiB7ICRuaW46IG9ubGluZVVzZXJzSWQgfSB9O1xuXG4gICAgY29uc3QgdXNlcldpdGhvdXRDb25uZWN0aW9uSWRzID0gVXNlcnMuZmluZCh1c2Vyc1F1ZXJ5LCB7IGZpZWxkczogeyBtZWV0aW5nSWQ6IDEsIHVzZXJJZDogMSB9IH0pLmZldGNoKCk7XG5cbiAgICBjb25zdCByZW1vdmVkVXNlcnNXaXRob3V0Q29ubmVjdGlvbiA9IFVzZXJzLnJlbW92ZSh1c2Vyc1F1ZXJ5KTtcblxuICAgIGlmIChyZW1vdmVkVXNlcnNXaXRob3V0Q29ubmVjdGlvbikge1xuICAgICAgTG9nZ2VyLmluZm8oYFJlbW92ZWQgJHtyZW1vdmVkVXNlcnNXaXRob3V0Q29ubmVjdGlvbn0gdXNlcnMgdGhhdCBhcmUgbm90IGNvbm5lY3RlZGApO1xuICAgICAgTG9nZ2VyLmluZm8oYENsZWFyaW5nIGNvbm5lY3Rpb25zYCk7XG4gICAgICB0cnkge1xuICAgICAgICB1c2VyV2l0aG91dENvbm5lY3Rpb25JZHNcbiAgICAgICAgICAuZm9yRWFjaCgoeyBtZWV0aW5nSWQsIHVzZXJJZCB9KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNsaWVudENvbm5lY3Rpb24oYCR7bWVldGluZ0lkfS0tJHt1c2VySWR9YCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgTG9nZ2VyLmVycm9yKCdFcnJvciBvbiBzeW5jIENsaWVudENvbm5lY3Rpb25zJywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5pZiAoIXByb2Nlc3MuZW52LkJCQl9IVE1MNV9ST0xFIHx8IHByb2Nlc3MuZW52LkJCQl9IVE1MNV9ST0xFID09PSAnZnJvbnRlbmQnKSB7XG4gIExvZ2dlci5pbmZvKFwiQ2xpZW50Q29ubmVjdGlvbnNTaW5nbGV0b24gd2FzIGNyZWF0ZWRcIilcblxuICBjb25zdCBDbGllbnRDb25uZWN0aW9uc1NpbmdsZXRvbiA9IG5ldyBDbGllbnRDb25uZWN0aW9ucygpO1xuXG4gIGV4cG9ydCBkZWZhdWx0IENsaWVudENvbm5lY3Rpb25zU2luZ2xldG9uO1xufVxuIiwiY29uc3QgSU5TVEFOQ0VfSURfUkVHRVggPSAvXFxkKy87XG5cbmNvbnN0IGlzUGFkTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gY29uc3QgeyBuYW1lIH0gPSBtZXNzYWdlLmNvcmUuaGVhZGVyO1xuXG4gIGNvbnN0IGlzUGFkQ3JlYXRlID0gbmFtZSA9PT0gJ1BhZENyZWF0ZVN5c01zZyc7XG4gIGNvbnN0IGlzUGFkVXBkYXRlID0gbmFtZSA9PT0gJ1BhZFVwZGF0ZVN5c01zZyc7XG5cbiAgcmV0dXJuIGlzUGFkQ3JlYXRlIHx8IGlzUGFkVXBkYXRlO1xufTtcblxuY29uc3QgZ2V0SW5zdGFuY2VJZEZyb21QYWRNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgbGV0IGluc3RhbmNlSWQ7XG4gIGNvbnN0IHsgaWQgfSA9IG1lc3NhZ2UuY29yZS5ib2R5LnBhZDtcblxuICAvLyBQYWQgaWQgaXMgY29tcG9zZWQgYnkgdGhlIGluc3RhbmNlIGlkIGJldHdlZW4gYnJhY2tldHNcbiAgY29uc3QgbWF0Y2ggPSBpZC5tYXRjaChJTlNUQU5DRV9JRF9SRUdFWCk7XG4gIGlmIChtYXRjaCkgaW5zdGFuY2VJZCA9IHBhcnNlSW50KG1hdGNoWzBdKTtcblxuICByZXR1cm4gaW5zdGFuY2VJZDtcbn07XG5cbmV4cG9ydCB7XG4gIGlzUGFkTWVzc2FnZSxcbiAgZ2V0SW5zdGFuY2VJZEZyb21QYWRNZXNzYWdlLFxufTtcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgV2ViQXBwSW50ZXJuYWxzIH0gZnJvbSAnbWV0ZW9yL3dlYmFwcCc7XG5pbXBvcnQgTGFuZ21hcCBmcm9tICdsYW5nbWFwJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgVXNlcnMgZnJvbSAnL2ltcG9ydHMvYXBpL3VzZXJzJztcbmltcG9ydCAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBsb29rdXAgYXMgbG9va3VwVXNlckFnZW50IH0gZnJvbSAndXNlcmFnZW50JztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IFJlZGlzIGZyb20gJy4vcmVkaXMnO1xuXG5pbXBvcnQgc2V0TWluQnJvd3NlclZlcnNpb25zIGZyb20gJy4vbWluQnJvd3NlclZlcnNpb24nO1xuXG5sZXQgZ3Vlc3RXYWl0SHRtbCA9ICcnO1xuXG5jb25zdCBlbnYgPSBNZXRlb3IuaXNEZXZlbG9wbWVudCA/ICdkZXZlbG9wbWVudCcgOiAncHJvZHVjdGlvbic7XG5cbmNvbnN0IG1ldGVvclJvb3QgPSBmcy5yZWFscGF0aFN5bmMoYCR7cHJvY2Vzcy5jd2QoKX0vLi4vYCk7XG5cbmNvbnN0IGFwcGxpY2F0aW9uUm9vdCA9IChlbnYgPT09ICdkZXZlbG9wbWVudCcpXG4gID8gZnMucmVhbHBhdGhTeW5jKGAke21ldGVvclJvb3R9Jy8uLi8uLi8uLi8uLi9wdWJsaWMvbG9jYWxlcy9gKVxuICA6IGZzLnJlYWxwYXRoU3luYyhgJHttZXRlb3JSb290fS8uLi9wcm9ncmFtcy93ZWIuYnJvd3Nlci9hcHAvbG9jYWxlcy9gKTtcblxuY29uc3QgQVZBSUxBQkxFX0xPQ0FMRVMgPSBmcy5yZWFkZGlyU3luYyhgJHthcHBsaWNhdGlvblJvb3R9YCk7XG5jb25zdCBGQUxMQkFDS19MT0NBTEVTID0gSlNPTi5wYXJzZShBc3NldHMuZ2V0VGV4dCgnY29uZmlnL2ZhbGxiYWNrTG9jYWxlcy5qc29uJykpO1xuXG5wcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIChlcnIpID0+IHtcbiAgTG9nZ2VyLmVycm9yKGB1bmNhdWdodEV4Y2VwdGlvbjogJHtlcnJ9YCk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuXG5wcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIChlcnIpID0+IHtcbiAgTG9nZ2VyLmVycm9yKGB1bmNhdWdodEV4Y2VwdGlvbjogJHtlcnJ9YCk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuXG5NZXRlb3Iuc3RhcnR1cCgoKSA9PiB7XG4gIGNvbnN0IEFQUF9DT05GSUcgPSBNZXRlb3Iuc2V0dGluZ3MucHVibGljLmFwcDtcbiAgY29uc3QgQ0ROX1VSTCA9IEFQUF9DT05GSUcuY2RuO1xuICBjb25zdCBpbnN0YW5jZUlkID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuSU5TVEFOQ0VfSUQsIDEwKSB8fCAxO1xuXG4gIExvZ2dlci53YXJuKGBTdGFydGVkIGJiYi1odG1sNSBwcm9jZXNzIHdpdGggaW5zdGFuY2VJZD0ke2luc3RhbmNlSWR9YCk7XG5cbiAgY29uc3QgeyBjdXN0b21IZWFydGJlYXQgfSA9IEFQUF9DT05GSUc7XG5cbiAgaWYgKGN1c3RvbUhlYXJ0YmVhdCkge1xuICAgIExvZ2dlci53YXJuKCdDdXN0b20gaGVhcnRiZWF0IGZ1bmN0aW9ucyBhcmUgZW5hYmxlZCcpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NranMvc29ja2pzLW5vZGUvYmxvYi8xZWYwODkwMWYwNDVhYWU3YjRkZjBmOTFlZjU5OGQ3YTExZTgyODk3L2xpYi90cmFuc3BvcnQvd2Vic29ja2V0LmpzI0w3NC1MODJcbiAgICBjb25zdCBuZXdIZWFydGJlYXQgPSBmdW5jdGlvbiBoZWFydGJlYXQoKSB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgICAvLyBTa2lwcGluZyBoZWFydGJlYXQsIGJlY2F1c2Ugd2Vic29ja2V0IGlzIHNlbmRpbmcgZGF0YVxuICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gdGhpcy53cy5sYXN0U2VudEZyYW1lVGltZXN0YW1wIDwgMTAwMDApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBMb2dnZXIuaW5mbygnU2tpcHBpbmcgaGVhcnRiZWF0LCBiZWNhdXNlIHdlYnNvY2tldCBpcyBzZW5kaW5nIGRhdGEnLCB7XG4gICAgICAgICAgICBjdXJyZW50VGltZSxcbiAgICAgICAgICAgIGxhc3RTZW50RnJhbWVUaW1lc3RhbXA6IHRoaXMud3MubGFzdFNlbnRGcmFtZVRpbWVzdGFtcCxcbiAgICAgICAgICAgIHVzZXJJZDogdGhpcy5zZXNzaW9uLmNvbm5lY3Rpb24uX21ldGVvclNlc3Npb24udXNlcklkLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgTG9nZ2VyLmVycm9yKGBTa2lwcGluZyBoZWFydGJlYXQgZXJyb3I6ICR7ZXJyfWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN1cHBvcnRzSGVhcnRiZWF0cyA9IHRoaXMud3MucGluZyhudWxsLCAoKSA9PiBjbGVhclRpbWVvdXQodGhpcy5odG9fcmVmKSk7XG4gICAgICBpZiAoc3VwcG9ydHNIZWFydGJlYXRzKSB7XG4gICAgICAgIHRoaXMuaHRvX3JlZiA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBMb2dnZXIuaW5mbygnSGVhcnRiZWF0IHRpbWVvdXQnLCB7IHVzZXJJZDogdGhpcy5zZXNzaW9uLmNvbm5lY3Rpb24uX21ldGVvclNlc3Npb24udXNlcklkLCBzZW50QXQ6IGN1cnJlbnRUaW1lLCBub3c6IG5ldyBEYXRlKCkuZ2V0VGltZSgpIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgTG9nZ2VyLmVycm9yKGBIZWFydGJlYXQgdGltZW91dCBlcnJvcjogJHtlcnJ9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBNZXRlb3Iuc2VydmVyLm9wdGlvbnMuaGVhcnRiZWF0VGltZW91dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBMb2dnZXIuZXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3Igc3VwcG9ydHNIZWFydGJlYXRzPWZhbHNlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZoYW5pL2hhZ3R5L2Jsb2IvNmE1Yzc4ZTlhZTVhNWU0YWRlMDNlNzQ3ZmI0Y2M4ZWEyZGY0YmUwYy9mYXllLXdlYnNvY2tldC9saWIvZmF5ZS93ZWJzb2NrZXQvYXBpLmpzI0w4NC1MODhcbiAgICBjb25zdCBuZXdTZW5kID0gZnVuY3Rpb24gc2VuZChkYXRhKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmxhc3RTZW50RnJhbWVUaW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgICBpZiAodGhpcy5tZXRlb3JIZWFydGJlYXQpIHtcbiAgICAgICAgICAvLyBDYWxsIGh0dHBzOi8vZ2l0aHViLmNvbS9tZXRlb3IvbWV0ZW9yL2Jsb2IvMWU3ZTU2ZWVjODQxNDA5M2NkMGMxYzcwNzUwYjg5NDA2OWZjOTcyYS9wYWNrYWdlcy9kZHAtY29tbW9uL2hlYXJ0YmVhdC5qcyNMODAtTDg4XG4gICAgICAgICAgdGhpcy5tZXRlb3JIZWFydGJlYXQuX3NlZW5QYWNrZXQgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGlzLm1ldGVvckhlYXJ0YmVhdC5faGVhcnRiZWF0VGltZW91dEhhbmRsZSkge1xuICAgICAgICAgICAgdGhpcy5tZXRlb3JIZWFydGJlYXQuX2NsZWFySGVhcnRiZWF0VGltZW91dFRpbWVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA+IDEvKiBBUEkuT1BFTiA9IDEgKi8pIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIEJ1ZmZlcikpIGRhdGEgPSBTdHJpbmcoZGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcml2ZXIubWVzc2FnZXMud3JpdGUoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb24gc2VuZCBkYXRhJywgZXJyKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBNZXRlb3Iuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBzZXNzaW9uIG9mIE1ldGVvci5zZXJ2ZXIuc2Vzc2lvbnMudmFsdWVzKCkpIHtcbiAgICAgICAgY29uc3QgeyBzb2NrZXQgfSA9IHNlc3Npb247XG4gICAgICAgIGNvbnN0IHJlY3YgPSBzb2NrZXQuX3Nlc3Npb24ucmVjdjtcblxuICAgICAgICBpZiAoc2Vzc2lvbi5iYmJGaXhBcHBsaWVkIHx8ICFyZWN2IHx8ICFyZWN2LndzKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICByZWN2LndzLm1ldGVvckhlYXJ0YmVhdCA9IHNlc3Npb24uaGVhcnRiZWF0O1xuICAgICAgICByZWN2Ll9fcHJvdG9fXy5oZWFydGJlYXQgPSBuZXdIZWFydGJlYXQ7XG4gICAgICAgIHJlY3Yud3MuX19wcm90b19fLnNlbmQgPSBuZXdTZW5kO1xuICAgICAgICBzZXNzaW9uLmJiYkZpeEFwcGxpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sIDUwMDApO1xuICB9XG4gIGlmIChDRE5fVVJMLnRyaW0oKSkge1xuICAgIC8vIEFkZCBDRE5cbiAgICBCcm93c2VyUG9saWN5LmNvbnRlbnQuZGlzYWxsb3dFdmFsKCk7XG4gICAgQnJvd3NlclBvbGljeS5jb250ZW50LmFsbG93SW5saW5lU2NyaXB0cygpO1xuICAgIEJyb3dzZXJQb2xpY3kuY29udGVudC5hbGxvd0lubGluZVN0eWxlcygpO1xuICAgIEJyb3dzZXJQb2xpY3kuY29udGVudC5hbGxvd0ltYWdlRGF0YVVybChDRE5fVVJMKTtcbiAgICBCcm93c2VyUG9saWN5LmNvbnRlbnQuYWxsb3dGb250RGF0YVVybChDRE5fVVJMKTtcbiAgICBCcm93c2VyUG9saWN5LmNvbnRlbnQuYWxsb3dPcmlnaW5Gb3JBbGwoQ0ROX1VSTCk7XG4gICAgV2ViQXBwSW50ZXJuYWxzLnNldEJ1bmRsZWRKc0Nzc1ByZWZpeChDRE5fVVJMICsgQVBQX0NPTkZJRy5iYXNlbmFtZSArIE1ldGVvci5zZXR0aW5ncy5wdWJsaWMuYXBwLmluc3RhbmNlSWQpO1xuXG4gICAgY29uc3QgZm9udFJlZ0V4cCA9IC9cXC4oZW90fHR0ZnxvdGZ8d29mZnx3b2ZmMikkLztcblxuICAgIFdlYkFwcC5yYXdDb25uZWN0SGFuZGxlcnMudXNlKCcvJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBpZiAoZm9udFJlZ0V4cC50ZXN0KHJlcS5fcGFyc2VkVXJsLnBhdGhuYW1lKSkge1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdWYXJ5JywgJ09yaWdpbicpO1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdQcmFnbWEnLCAncHVibGljJyk7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NhY2hlLUNvbnRyb2wnLCAnXCJwdWJsaWNcIicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldE1pbkJyb3dzZXJWZXJzaW9ucygpO1xuXG4gIExvZ2dlci53YXJuKGBTRVJWRVIgU1RBUlRFRC5cbiAgRU5WPSR7ZW52fVxuICBub2RlanMgdmVyc2lvbj0ke3Byb2Nlc3MudmVyc2lvbn1cbiAgQkJCX0hUTUw1X1JPTEU9JHtwcm9jZXNzLmVudi5CQkJfSFRNTDVfUk9MRX1cbiAgSU5TVEFOQ0VfSUQ9JHtpbnN0YW5jZUlkfVxuICBQT1JUPSR7cHJvY2Vzcy5lbnYuUE9SVH1cbiAgQ0ROPSR7Q0ROX1VSTH1cXG5gLCBBUFBfQ09ORklHKTtcbn0pO1xuXG5cbmNvbnN0IGdlbmVyYXRlTG9jYWxlT3B0aW9ucyA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBMb2dnZXIud2FybignQ2FsY3VsYXRpbmcgYWdncmVnYXRlTG9jYWxlcyAoaGVhdnkpJyk7XG5cblxuICAgIC8vIHJlbW92ZSBkdXBsaWNhdGVkIGxvY2FsZXMgKGFsd2F5cyByZW1vdmUgbW9yZSBnZW5lcmljIGlmIHNhbWUgbmFtZSlcbiAgICBjb25zdCB0ZW1wQWdncmVnYXRlTG9jYWxlcyA9IEFWQUlMQUJMRV9MT0NBTEVTXG4gICAgICAubWFwKGZpbGUgPT4gZmlsZS5yZXBsYWNlKCcuanNvbicsICcnKSlcbiAgICAgIC5tYXAoZmlsZSA9PiBmaWxlLnJlcGxhY2UoJ18nLCAnLScpKVxuICAgICAgLm1hcCgobG9jYWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IGxvY2FsZU5hbWUgPSAoTGFuZ21hcFtsb2NhbGVdIHx8IHt9KS5uYXRpdmVOYW1lXG4gICAgICAgICAgfHwgKEZBTExCQUNLX0xPQ0FMRVNbbG9jYWxlXSB8fCB7fSkubmF0aXZlTmFtZVxuICAgICAgICAgIHx8IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgbmFtZTogbG9jYWxlTmFtZSxcbiAgICAgICAgfTtcbiAgICAgIH0pLnJldmVyc2UoKVxuICAgICAgLmZpbHRlcigoaXRlbSwgaW5kZXgsIHNlbGYpID0+IGluZGV4ID09PSBzZWxmLmZpbmRJbmRleChpID0+IChcbiAgICAgICAgaS5uYW1lID09PSBpdGVtLm5hbWVcbiAgICAgICkpKVxuICAgICAgLnJldmVyc2UoKTtcblxuICAgIExvZ2dlci53YXJuKGBUb3RhbCBsb2NhbGVzOiAke3RlbXBBZ2dyZWdhdGVMb2NhbGVzLmxlbmd0aH1gLCB0ZW1wQWdncmVnYXRlTG9jYWxlcyk7XG5cbiAgICByZXR1cm4gdGVtcEFnZ3JlZ2F0ZUxvY2FsZXM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBMb2dnZXIuZXJyb3IoYCdDb3VsZCBub3QgcHJvY2VzcyBsb2NhbGVzIGVycm9yOiAke2V9YCk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5sZXQgYXZhaWJsZUxvY2FsZXNOYW1lc0pTT04gPSBKU09OLnN0cmluZ2lmeShnZW5lcmF0ZUxvY2FsZU9wdGlvbnMoKSk7XG5cbldlYkFwcC5jb25uZWN0SGFuZGxlcnMudXNlKCcvY2hlY2snLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHsgaHRtbDVjbGllbnRTdGF0dXM6ICdydW5uaW5nJyB9O1xuXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIHJlcy53cml0ZUhlYWQoMjAwKTtcbiAgcmVzLmVuZChKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG59KTtcblxuV2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UoJy9sb2NhbGUnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgQVBQX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wdWJsaWMuYXBwO1xuICBjb25zdCBmYWxsYmFjayA9IEFQUF9DT05GSUcuZGVmYXVsdFNldHRpbmdzLmFwcGxpY2F0aW9uLmZhbGxiYWNrTG9jYWxlO1xuICBjb25zdCBvdmVycmlkZSA9IEFQUF9DT05GSUcuZGVmYXVsdFNldHRpbmdzLmFwcGxpY2F0aW9uLm92ZXJyaWRlTG9jYWxlO1xuICBjb25zdCBicm93c2VyTG9jYWxlID0gb3ZlcnJpZGUgJiYgcmVxLnF1ZXJ5LmluaXQgPT09ICd0cnVlJ1xuICAgID8gb3ZlcnJpZGUuc3BsaXQoL1stX10vZykgOiByZXEucXVlcnkubG9jYWxlLnNwbGl0KC9bLV9dL2cpO1xuXG4gIGxldCBsb2NhbGVGaWxlID0gZmFsbGJhY2s7XG5cbiAgY29uc3QgdXNhYmxlTG9jYWxlcyA9IEFWQUlMQUJMRV9MT0NBTEVTXG4gICAgLm1hcChmaWxlID0+IGZpbGUucmVwbGFjZSgnLmpzb24nLCAnJykpXG4gICAgLnJlZHVjZSgobG9jYWxlcywgbG9jYWxlKSA9PiAobG9jYWxlLm1hdGNoKGJyb3dzZXJMb2NhbGVbMF0pXG4gICAgICA/IFsuLi5sb2NhbGVzLCBsb2NhbGVdXG4gICAgICA6IGxvY2FsZXMpLCBbXSk7XG5cbiAgbGV0IG5vcm1hbGl6ZWRMb2NhbGU7XG5cbiAgY29uc3QgcmVnaW9uRGVmYXVsdCA9IHVzYWJsZUxvY2FsZXMuZmluZChsb2NhbGUgPT4gYnJvd3NlckxvY2FsZVswXSA9PT0gbG9jYWxlKTtcblxuICBpZiAoYnJvd3NlckxvY2FsZS5sZW5ndGggPiAxKSB7XG4gICAgLy8gYnJvd3NlciBhc2tzIGZvciBzcGVjaWZpYyBsb2NhbGVcbiAgICBub3JtYWxpemVkTG9jYWxlID0gYCR7YnJvd3NlckxvY2FsZVswXX1fJHticm93c2VyTG9jYWxlWzFdLnRvVXBwZXJDYXNlKCl9YDtcblxuICAgIGNvbnN0IG5vcm1EZWZhdWx0ID0gdXNhYmxlTG9jYWxlcy5maW5kKGxvY2FsZSA9PiBub3JtYWxpemVkTG9jYWxlID09PSBsb2NhbGUpO1xuICAgIGlmIChub3JtRGVmYXVsdCkge1xuICAgICAgbG9jYWxlRmlsZSA9IG5vcm1EZWZhdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocmVnaW9uRGVmYXVsdCkge1xuICAgICAgICBsb2NhbGVGaWxlID0gcmVnaW9uRGVmYXVsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNwZWNGYWxsYmFjayA9IHVzYWJsZUxvY2FsZXMuZmluZChsb2NhbGUgPT4gYnJvd3NlckxvY2FsZVswXSA9PT0gbG9jYWxlLnNwbGl0KFwiX1wiKVswXSk7XG4gICAgICAgIGlmIChzcGVjRmFsbGJhY2spIGxvY2FsZUZpbGUgPSBzcGVjRmFsbGJhY2s7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgYXNrcyBmb3IgcmVnaW9uIGRlZmF1bHQgbG9jYWxlXG4gICAgaWYgKHJlZ2lvbkRlZmF1bHQgJiYgbG9jYWxlRmlsZSA9PT0gZmFsbGJhY2sgJiYgcmVnaW9uRGVmYXVsdCAhPT0gbG9jYWxlRmlsZSkge1xuICAgICAgbG9jYWxlRmlsZSA9IHJlZ2lvbkRlZmF1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5vcm1GYWxsYmFjayA9IHVzYWJsZUxvY2FsZXMuZmluZChsb2NhbGUgPT4gYnJvd3NlckxvY2FsZVswXSA9PT0gbG9jYWxlLnNwbGl0KFwiX1wiKVswXSk7XG4gICAgICBpZiAobm9ybUZhbGxiYWNrKSBsb2NhbGVGaWxlID0gbm9ybUZhbGxiYWNrO1xuICAgIH1cbiAgfVxuXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgIG5vcm1hbGl6ZWRMb2NhbGU6IGxvY2FsZUZpbGUsXG4gICAgcmVnaW9uRGVmYXVsdExvY2FsZTogKHJlZ2lvbkRlZmF1bHQgJiYgcmVnaW9uRGVmYXVsdCAhPT0gbG9jYWxlRmlsZSkgPyByZWdpb25EZWZhdWx0IDogJycsXG4gIH0pKTtcbn0pO1xuXG5XZWJBcHAuY29ubmVjdEhhbmRsZXJzLnVzZSgnL2xvY2FsZS1saXN0JywgKHJlcSwgcmVzKSA9PiB7XG4gIGlmICghYXZhaWJsZUxvY2FsZXNOYW1lc0pTT04pIHtcbiAgICBhdmFpYmxlTG9jYWxlc05hbWVzSlNPTiA9IEpTT04uc3RyaW5naWZ5KGdlbmVyYXRlTG9jYWxlT3B0aW9ucygpKTtcbiAgfVxuXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIHJlcy53cml0ZUhlYWQoMjAwKTtcbiAgcmVzLmVuZChhdmFpYmxlTG9jYWxlc05hbWVzSlNPTik7XG59KTtcblxuV2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UoJy9mZWVkYmFjaycsIChyZXEsIHJlcykgPT4ge1xuICByZXEub24oJ2RhdGEnLCBNZXRlb3IuYmluZEVudmlyb25tZW50KChkYXRhKSA9PiB7XG4gICAgY29uc3QgYm9keSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgY29uc3Qge1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkLFxuICAgICAgYXV0aFRva2VuLFxuICAgICAgdXNlck5hbWU6IHJlcVVzZXJOYW1lLFxuICAgICAgY29tbWVudCxcbiAgICAgIHJhdGluZyxcbiAgICB9ID0gYm9keTtcblxuICAgIGNoZWNrKG1lZXRpbmdJZCwgU3RyaW5nKTtcbiAgICBjaGVjayh1c2VySWQsIFN0cmluZyk7XG4gICAgY2hlY2soYXV0aFRva2VuLCBTdHJpbmcpO1xuICAgIGNoZWNrKHJlcVVzZXJOYW1lLCBTdHJpbmcpO1xuICAgIGNoZWNrKGNvbW1lbnQsIFN0cmluZyk7XG4gICAgY2hlY2socmF0aW5nLCBOdW1iZXIpO1xuXG4gICAgY29uc3QgdXNlciA9IFVzZXJzLmZpbmRPbmUoe1xuICAgICAgbWVldGluZ0lkLFxuICAgICAgdXNlcklkLFxuICAgICAgYXV0aFRva2VuLFxuICAgIH0pO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBMb2dnZXIud2FybignQ291bGRuXFwndCBmaW5kIHVzZXIgZm9yIGZlZWRiYWNrJyk7XG4gICAgfVxuXG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICByZXMud3JpdGVIZWFkKDIwMCk7XG4gICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IHN0YXR1czogJ29rJyB9KSk7XG5cbiAgICBib2R5LnVzZXJOYW1lID0gdXNlciA/IHVzZXIubmFtZSA6IGBbdW5jb25maXJtZWRdICR7cmVxVXNlck5hbWV9YDtcblxuICAgIGNvbnN0IGZlZWRiYWNrID0ge1xuICAgICAgLi4uYm9keSxcbiAgICB9O1xuICAgIExvZ2dlci5pbmZvKCdGRUVEQkFDSyBMT0c6JywgZmVlZGJhY2spO1xuICB9KSk7XG59KTtcblxuV2ViQXBwLmNvbm5lY3RIYW5kbGVycy51c2UoJy91c2VyYWdlbnQnLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgdXNlckFnZW50ID0gcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXTtcbiAgbGV0IHJlc3BvbnNlID0gJ05vIHVzZXIgYWdlbnQgZm91bmQgaW4gaGVhZGVyJztcbiAgaWYgKHVzZXJBZ2VudCkge1xuICAgIHJlc3BvbnNlID0gbG9va3VwVXNlckFnZW50KHVzZXJBZ2VudCkudG9TdHJpbmcoKTtcbiAgfVxuXG4gIExvZ2dlci5pbmZvKGBUaGUgcmVxdWVzdGluZyB1c2VyIGFnZW50IGlzICR7cmVzcG9uc2V9YCk7XG5cbiAgLy8gcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgcmVzLndyaXRlSGVhZCgyMDApO1xuICByZXMuZW5kKHJlc3BvbnNlKTtcbn0pO1xuXG5XZWJBcHAuY29ubmVjdEhhbmRsZXJzLnVzZSgnL2d1ZXN0V2FpdCcsIChyZXEsIHJlcykgPT4ge1xuICBpZiAoIWd1ZXN0V2FpdEh0bWwpIHtcbiAgICB0cnkge1xuICAgICAgZ3Vlc3RXYWl0SHRtbCA9IEFzc2V0cy5nZXRUZXh0KCdzdGF0aWMvZ3Vlc3Qtd2FpdC9ndWVzdC13YWl0Lmh0bWwnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBMb2dnZXIud2FybihgQ291bGQgbm90IHByb2Nlc3MgZ3Vlc3Qgd2FpdCBodG1sIGZpbGU6ICR7ZX1gKTtcbiAgICB9XG4gIH1cblxuICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9odG1sJyk7XG4gIHJlcy53cml0ZUhlYWQoMjAwKTtcbiAgcmVzLmVuZChndWVzdFdhaXRIdG1sKTtcbn0pO1xuXG5cbmV4cG9ydCBjb25zdCBldmVudEVtaXR0ZXIgPSBSZWRpcy5lbWl0dGVyO1xuXG5leHBvcnQgY29uc3QgcmVkaXNQdWJTdWIgPSBSZWRpcztcbiIsImltcG9ydCB7IE1ldGVvciB9IGZyb20gJ21ldGVvci9tZXRlb3InO1xuaW1wb3J0IHsgY3JlYXRlTG9nZ2VyLCBmb3JtYXQsIHRyYW5zcG9ydHMgfSBmcm9tICd3aW5zdG9uJztcblxuY29uc3QgTE9HX0NPTkZJRyA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnNlcnZlckxvZyB8fCB7fTtcbmNvbnN0IHsgbGV2ZWwgfSA9IExPR19DT05GSUc7XG5cbmNvbnN0IExvZ2dlciA9IGNyZWF0ZUxvZ2dlcih7XG4gIGxldmVsLFxuICBmb3JtYXQ6IGZvcm1hdC5jb21iaW5lKFxuICAgIGZvcm1hdC5jb2xvcml6ZSh7IGxldmVsOiB0cnVlIH0pLFxuICAgIGZvcm1hdC5zcGxhdCgpLFxuICAgIGZvcm1hdC5zaW1wbGUoKSxcbiAgKSxcbiAgdHJhbnNwb3J0czogW1xuICAgIC8vIGNvbnNvbGUgbG9nZ2luZ1xuICAgIG5ldyB0cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgcHJldHR5UHJpbnQ6IGZhbHNlLFxuICAgICAgaHVtYW5SZWFkYWJsZVVuaGFuZGxlZEV4Y2VwdGlvbjogdHJ1ZSxcbiAgICAgIGNvbG9yaXplOiB0cnVlLFxuICAgICAgaGFuZGxlRXhjZXB0aW9uczogdHJ1ZSxcbiAgICAgIGxldmVsLFxuICAgIH0pLFxuICBdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2dlcjtcblxuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IExvZ2dlcjtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG5jb25zdCB7XG4gIG1ldHJpY3NEdW1wSW50ZXJ2YWxNcyxcbiAgbWV0cmljc0ZvbGRlclBhdGgsXG4gIHJlbW92ZU1lZXRpbmdPbkVuZCxcbn0gPSBNZXRlb3Iuc2V0dGluZ3MucHJpdmF0ZS5yZWRpcy5tZXRyaWNzO1xuXG5jbGFzcyBNZXRyaWNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tZXRyaWNzID0ge307XG4gIH1cblxuICBhZGRFdmVudChtZWV0aW5nSWQsIGV2ZW50TmFtZSwgbWVzc2FnZUxlbmd0aCkge1xuICAgIGlmICghdGhpcy5tZXRyaWNzLmhhc093blByb3BlcnR5KG1lZXRpbmdJZCkpIHtcbiAgICAgIHRoaXMubWV0cmljc1ttZWV0aW5nSWRdID0ge1xuICAgICAgICBjdXJyZW50bHlJblF1ZXVlOiB7fSxcbiAgICAgICAgd2FzSW5RdWV1ZToge30sXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IHsgY3VycmVudGx5SW5RdWV1ZSB9ID0gdGhpcy5tZXRyaWNzW21lZXRpbmdJZF07XG5cbiAgICBpZiAoIWN1cnJlbnRseUluUXVldWUuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkge1xuICAgICAgY3VycmVudGx5SW5RdWV1ZVtldmVudE5hbWVdID0ge1xuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgcGF5bG9hZFNpemU6IG1lc3NhZ2VMZW5ndGgsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50bHlJblF1ZXVlW2V2ZW50TmFtZV0uY291bnQgKz0gMTtcbiAgICAgIGN1cnJlbnRseUluUXVldWVbZXZlbnROYW1lXS5wYXlsb2FkU2l6ZSArPSBtZXNzYWdlTGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHByb2Nlc3NFdmVudChtZWV0aW5nSWQsIGV2ZW50TmFtZSwgc2l6ZSwgcHJvY2Vzc2luZ1N0YXJ0VGltZXN0YW1wKSB7XG4gICAgY29uc3QgY3VycmVudFByb2Nlc3NpbmdUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHByb2Nlc3NUaW1lID0gY3VycmVudFByb2Nlc3NpbmdUaW1lc3RhbXAgLSBwcm9jZXNzaW5nU3RhcnRUaW1lc3RhbXA7XG5cbiAgICB0aGlzLmFkZEV2ZW50KG1lZXRpbmdJZCwgZXZlbnROYW1lLCBzaXplKTtcblxuICAgIGlmICghdGhpcy5tZXRyaWNzW21lZXRpbmdJZF0ud2FzSW5RdWV1ZS5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG4gICAgICB0aGlzLm1ldHJpY3NbbWVldGluZ0lkXS53YXNJblF1ZXVlW2V2ZW50TmFtZV0gPSB7XG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBwYXlsb2FkU2l6ZToge1xuICAgICAgICAgIG1pbjogc2l6ZSxcbiAgICAgICAgICBtYXg6IHNpemUsXG4gICAgICAgICAgbGFzdDogc2l6ZSxcbiAgICAgICAgICB0b3RhbDogc2l6ZSxcbiAgICAgICAgICBhdmc6IHNpemUsXG4gICAgICAgIH0sXG4gICAgICAgIHByb2Nlc3NpbmdUaW1lOiB7XG4gICAgICAgICAgbWluOiBwcm9jZXNzVGltZSxcbiAgICAgICAgICBtYXg6IHByb2Nlc3NUaW1lLFxuICAgICAgICAgIGxhc3Q6IHByb2Nlc3NUaW1lLFxuICAgICAgICAgIHRvdGFsOiBwcm9jZXNzVGltZSxcbiAgICAgICAgICBhdmc6IHByb2Nlc3NUaW1lLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIHRoaXMubWV0cmljc1ttZWV0aW5nSWRdLmN1cnJlbnRseUluUXVldWVbZXZlbnROYW1lXS5jb3VudCAtPSAxO1xuXG4gICAgICBpZiAoIXRoaXMubWV0cmljc1ttZWV0aW5nSWRdLmN1cnJlbnRseUluUXVldWVbZXZlbnROYW1lXS5jb3VudCkge1xuICAgICAgICBkZWxldGUgdGhpcy5tZXRyaWNzW21lZXRpbmdJZF0uY3VycmVudGx5SW5RdWV1ZVtldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IGN1cnJlbnRseUluUXVldWUsIHdhc0luUXVldWUgfSA9IHRoaXMubWV0cmljc1ttZWV0aW5nSWRdO1xuXG4gICAgICBjdXJyZW50bHlJblF1ZXVlW2V2ZW50TmFtZV0uY291bnQgLT0gMTtcblxuICAgICAgaWYgKCFjdXJyZW50bHlJblF1ZXVlW2V2ZW50TmFtZV0uY291bnQpIHtcbiAgICAgICAgZGVsZXRlIGN1cnJlbnRseUluUXVldWVbZXZlbnROYW1lXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBwYXlsb2FkU2l6ZSwgcHJvY2Vzc2luZ1RpbWUgfSA9IHdhc0luUXVldWVbZXZlbnROYW1lXTtcblxuICAgICAgd2FzSW5RdWV1ZVtldmVudE5hbWVdLmNvdW50ICs9IDE7XG5cbiAgICAgIHBheWxvYWRTaXplLmxhc3QgPSBzaXplO1xuICAgICAgcGF5bG9hZFNpemUudG90YWwgKz0gc2l6ZTtcblxuICAgICAgaWYgKHBheWxvYWRTaXplLm1pbiA+IHNpemUpIHBheWxvYWRTaXplLm1pbiA9IHNpemU7XG4gICAgICBpZiAocGF5bG9hZFNpemUubWF4IDwgc2l6ZSkgcGF5bG9hZFNpemUubWF4ID0gc2l6ZTtcblxuICAgICAgcGF5bG9hZFNpemUuYXZnID0gcGF5bG9hZFNpemUudG90YWwgLyB3YXNJblF1ZXVlW2V2ZW50TmFtZV0uY291bnQ7XG5cbiAgICAgIGlmIChwcm9jZXNzaW5nVGltZS5taW4gPiBwcm9jZXNzVGltZSkgcHJvY2Vzc2luZ1RpbWUubWluID0gcHJvY2Vzc1RpbWU7XG4gICAgICBpZiAocHJvY2Vzc2luZ1RpbWUubWF4IDwgcHJvY2Vzc1RpbWUpIHByb2Nlc3NpbmdUaW1lLm1heCA9IHByb2Nlc3NUaW1lO1xuXG4gICAgICBwcm9jZXNzaW5nVGltZS5sYXN0ID0gcHJvY2Vzc1RpbWU7XG4gICAgICBwcm9jZXNzaW5nVGltZS50b3RhbCArPSBwcm9jZXNzVGltZTtcbiAgICAgIHByb2Nlc3NpbmdUaW1lLmF2ZyA9IHByb2Nlc3NpbmdUaW1lLnRvdGFsIC8gd2FzSW5RdWV1ZVtldmVudE5hbWVdLmNvdW50O1xuICAgIH1cbiAgfVxuXG4gIHNldEFubm90YXRpb25RdWV1ZUxlbmd0aChtZWV0aW5nSWQsIHNpemUpIHtcbiAgICB0aGlzLm1ldHJpY3NbbWVldGluZ0lkXS5hbm5vdGF0aW9uUXVldWVMZW5ndGggPSBzaXplO1xuICB9XG5cbiAgc3RhcnREdW1wRmlsZSgpIHtcbiAgICBNZXRlb3Iuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZmlsZURhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBmdWxsWWVhciA9IGZpbGVEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIGNvbnN0IG1vbnRoID0gKGZpbGVEYXRlLmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIGNvbnN0IGRheSA9IGZpbGVEYXRlLmdldERhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIGNvbnN0IGhvdXIgPSBmaWxlRGF0ZS5nZXRIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgY29uc3QgbWludXRlcyA9IGZpbGVEYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIGNvbnN0IHNlY29uZHMgPSBmaWxlRGF0ZS5nZXRTZWNvbmRzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpO1xuXG4gICAgICAgIGNvbnN0IGZvbGRlck5hbWUgPSBgJHtmdWxsWWVhcn0ke21vbnRofSR7ZGF5fV8ke2hvdXJ9YDtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBgJHtmb2xkZXJOYW1lfSR7bWludXRlc30ke3NlY29uZHN9X21ldHJpY3MuanNvbmA7XG5cbiAgICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IHBhdGguam9pbihtZXRyaWNzRm9sZGVyUGF0aCwgZm9sZGVyTmFtZSk7XG4gICAgICAgIGNvbnN0IGZ1bGxGaWxlUGF0aCA9IHBhdGguam9pbihmb2xkZXJQYXRoLCBmaWxlTmFtZSk7XG5cbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGZvbGRlclBhdGgpKSB7XG4gICAgICAgICAgTG9nZ2VyLmRlYnVnKGBDcmVhdGluZyBmb2xkZXI6ICR7Zm9sZGVyUGF0aH1gKTtcbiAgICAgICAgICBmcy5ta2RpclN5bmMoZm9sZGVyUGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZ1bGxGaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkodGhpcy5tZXRyaWNzKSk7XG5cbiAgICAgICAgTG9nZ2VyLmluZm8oJ01ldHJpYyBmaWxlIHN1Y2Nlc3NmdWxseSB3cml0dGVuJyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgTG9nZ2VyLmVycm9yKCdFcnJvciBvbiB3cml0aW5nIG1ldHJpY3MgdG8gZGlzay4nLCBlcnIpO1xuICAgICAgfVxuICAgIH0sIG1ldHJpY3NEdW1wSW50ZXJ2YWxNcyk7XG4gIH1cblxuICByZW1vdmVNZWV0aW5nKG1lZXRpbmdJZCkge1xuICAgIGlmIChyZW1vdmVNZWV0aW5nT25FbmQpIHtcbiAgICAgIExvZ2dlci5pbmZvKGBSZW1vdmluZyBtZWV0aW5nICR7bWVldGluZ0lkfSBmcm9tIG1ldHJpY3NgKTtcbiAgICAgIGRlbGV0ZSB0aGlzLm1ldHJpY3NbbWVldGluZ0lkXTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmluZm8oYFNraXBwaW5nIHJlbW92ZSBvZiBtZWV0aW5nICR7bWVldGluZ0lkfSBmcm9tIG1ldHJpY3NgKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgbWV0cmljc1NpbmdsZXRvbiA9IG5ldyBNZXRyaWNzKCk7XG5cbmV4cG9ydCBkZWZhdWx0IG1ldHJpY3NTaW5nbGV0b247XG4iLCJpbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IHNldE1pbmltdW1Ccm93c2VyVmVyc2lvbnMgfSBmcm9tICdtZXRlb3IvbW9kZXJuLWJyb3dzZXJzJztcblxuY29uc3Qgc2V0TWluQnJvd3NlclZlcnNpb25zID0gKCkgPT4ge1xuICBjb25zdCB7IG1pbkJyb3dzZXJWZXJzaW9ucyB9ID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGU7XG5cbiAgY29uc3QgdmVyc2lvbnMgPSB7fTtcblxuICBtaW5Ccm93c2VyVmVyc2lvbnMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgIGxldCB7IHZlcnNpb24gfSA9IGVsZW07XG4gICAgaWYgKHZlcnNpb24gPT09ICdJbmZpbml0eScpIHZlcnNpb24gPSBJbmZpbml0eTtcblxuICAgIHZlcnNpb25zW2VsZW0uYnJvd3Nlcl0gPSB2ZXJzaW9uO1xuICB9KTtcblxuICBzZXRNaW5pbXVtQnJvd3NlclZlcnNpb25zKHZlcnNpb25zLCAnYmJiLW1pbicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2V0TWluQnJvd3NlclZlcnNpb25zO1xuIiwiLyogZ2xvYmFsIFBvd2VyUXVldWUgKi9cbmltcG9ydCBSZWRpcyBmcm9tICdyZWRpcyc7XG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlcjIgfSBmcm9tICdldmVudGVtaXR0ZXIyJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnbWV0ZW9yL2NoZWNrJztcbmltcG9ydCB7XG4gIGlzUGFkTWVzc2FnZSxcbiAgZ2V0SW5zdGFuY2VJZEZyb21QYWRNZXNzYWdlLFxufSBmcm9tICcuL2V0aGVycGFkJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IE1ldHJpY3MgZnJvbSAnLi9tZXRyaWNzJztcblxuLy8gRmFrZSBtZWV0aW5nSWQgdXNlZCBmb3IgbWVzc2FnZXMgdGhhdCBoYXZlIG5vIG1lZXRpbmdJZFxuY29uc3QgTk9fTUVFVElOR19JRCA9ICdfJztcblxuY29uc3QgeyBxdWV1ZU1ldHJpY3MgfSA9IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzLm1ldHJpY3M7XG5cbmNvbnN0IG1ha2VFbnZlbG9wZSA9IChjaGFubmVsLCBldmVudE5hbWUsIGhlYWRlciwgYm9keSwgcm91dGluZykgPT4ge1xuICBjb25zdCBlbnZlbG9wZSA9IHtcbiAgICBlbnZlbG9wZToge1xuICAgICAgbmFtZTogZXZlbnROYW1lLFxuICAgICAgcm91dGluZzogcm91dGluZyB8fCB7XG4gICAgICAgIHNlbmRlcjogJ2h0bWw1LXNlcnZlcicsXG4gICAgICB9LFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgIH0sXG4gICAgY29yZToge1xuICAgICAgaGVhZGVyLFxuICAgICAgYm9keSxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShlbnZlbG9wZSk7XG59O1xuXG5jb25zdCBnZXRJbnN0YW5jZUlkRnJvbU1lc3NhZ2UgPSAocGFyc2VkTWVzc2FnZSkgPT4ge1xuICAvLyBFbmQgbWVldGluZyBtZXNzYWdlIGRvZXMgbm90IHNlZW0gdG8gaGF2ZSBzeXN0ZW1Qcm9wc1xuICBsZXQgaW5zdGFuY2VJZEZyb21NZXNzYWdlID0gcGFyc2VkTWVzc2FnZS5jb3JlLmJvZHkucHJvcHM/LnN5c3RlbVByb3BzPy5odG1sNUluc3RhbmNlSWQ7XG5cbiAgLy8gUGFkIG1lc3NhZ2VzIGRvZXMgbm90IGhhdmUgc3lzdGVtUHJvcHNcbiAgaWYgKCFpbnN0YW5jZUlkRnJvbU1lc3NhZ2UgJiYgaXNQYWRNZXNzYWdlKHBhcnNlZE1lc3NhZ2UpKSB7XG4gICAgaW5zdGFuY2VJZEZyb21NZXNzYWdlID0gZ2V0SW5zdGFuY2VJZEZyb21QYWRNZXNzYWdlKHBhcnNlZE1lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlSWRGcm9tTWVzc2FnZTtcbn07XG5cbmNsYXNzIE1lZXRpbmdNZXNzYWdlUXVldWUge1xuICBjb25zdHJ1Y3RvcihldmVudEVtaXR0ZXIsIGFzeW5jTWVzc2FnZXMgPSBbXSwgcmVkaXNEZWJ1Z0VuYWJsZWQgPSBmYWxzZSkge1xuICAgIHRoaXMuYXN5bmNNZXNzYWdlcyA9IGFzeW5jTWVzc2FnZXM7XG4gICAgdGhpcy5lbWl0dGVyID0gZXZlbnRFbWl0dGVyO1xuICAgIHRoaXMucXVldWUgPSBuZXcgUG93ZXJRdWV1ZSgpO1xuICAgIHRoaXMucmVkaXNEZWJ1Z0VuYWJsZWQgPSByZWRpc0RlYnVnRW5hYmxlZDtcblxuICAgIHRoaXMuaGFuZGxlVGFzayA9IHRoaXMuaGFuZGxlVGFzay5iaW5kKHRoaXMpO1xuICAgIHRoaXMucXVldWUudGFza0hhbmRsZXIgPSB0aGlzLmhhbmRsZVRhc2s7XG4gIH1cblxuICBoYW5kbGVUYXNrKGRhdGEsIG5leHQpIHtcbiAgICBjb25zdCB7IGNoYW5uZWwgfSA9IGRhdGE7XG4gICAgY29uc3QgeyBlbnZlbG9wZSB9ID0gZGF0YS5wYXJzZWRNZXNzYWdlO1xuICAgIGNvbnN0IHsgaGVhZGVyIH0gPSBkYXRhLnBhcnNlZE1lc3NhZ2UuY29yZTtcbiAgICBjb25zdCB7IGJvZHkgfSA9IGRhdGEucGFyc2VkTWVzc2FnZS5jb3JlO1xuICAgIGNvbnN0IHsgbWVldGluZ0lkIH0gPSBoZWFkZXI7XG4gICAgY29uc3QgZXZlbnROYW1lID0gaGVhZGVyLm5hbWU7XG4gICAgY29uc3QgaXNBc3luYyA9IHRoaXMuYXN5bmNNZXNzYWdlcy5pbmNsdWRlcyhjaGFubmVsKVxuICAgICAgfHwgdGhpcy5hc3luY01lc3NhZ2VzLmluY2x1ZGVzKGV2ZW50TmFtZSk7XG5cbiAgICBjb25zdCBiZWdpbkhhbmRsZVRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuXG4gICAgY2hlY2soZXZlbnROYW1lLCBTdHJpbmcpO1xuICAgIGNoZWNrKGJvZHksIE9iamVjdCk7XG5cbiAgICBjb25zdCBjYWxsTmV4dCA9ICgpID0+IHtcbiAgICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLnJlZGlzRGVidWdFbmFibGVkKSB7XG4gICAgICAgIExvZ2dlci5kZWJ1ZyhgUmVkaXM6ICR7ZXZlbnROYW1lfSBjb21wbGV0ZWQgJHtpc0FzeW5jID8gJ2FzeW5jJyA6ICdzeW5jJ31gKTtcbiAgICAgIH1cbiAgICAgIGNhbGxlZCA9IHRydWU7XG5cbiAgICAgIGlmIChxdWV1ZU1ldHJpY3MpIHtcbiAgICAgICAgY29uc3QgcXVldWVJZCA9IG1lZXRpbmdJZCB8fCBOT19NRUVUSU5HX0lEO1xuICAgICAgICBjb25zdCBkYXRhTGVuZ3RoID0gSlNPTi5zdHJpbmdpZnkoZGF0YSkubGVuZ3RoO1xuXG4gICAgICAgIE1ldHJpY3MucHJvY2Vzc0V2ZW50KHF1ZXVlSWQsIGV2ZW50TmFtZSwgZGF0YUxlbmd0aCwgYmVnaW5IYW5kbGVUaW1lc3RhbXApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBxdWV1ZUxlbmd0aCA9IHRoaXMucXVldWUubGVuZ3RoKCk7XG4gICAgICBpZiAocXVldWVMZW5ndGggPiAxMDApIHtcbiAgICAgICAgTG9nZ2VyLndhcm4oYFJlZGlzOiBNZWV0aW5nTWVzc2FnZVF1ZXVlIGZvciBtZWV0aW5nSWQ9JHttZWV0aW5nSWR9IGhhcyBxdWV1ZSBzaXplPSR7cXVldWVMZW5ndGh9IGApO1xuICAgICAgfVxuICAgICAgbmV4dCgpO1xuICAgIH07XG5cbiAgICBjb25zdCBvbkVycm9yID0gKHJlYXNvbikgPT4ge1xuICAgICAgTG9nZ2VyLmVycm9yKGAke2V2ZW50TmFtZX06ICR7cmVhc29uLnN0YWNrID8gcmVhc29uLnN0YWNrIDogcmVhc29ufWApO1xuICAgICAgY2FsbE5leHQoKTtcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLnJlZGlzRGVidWdFbmFibGVkKSB7XG4gICAgICAgIGlmICghTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUuYW5hbHl0aWNzLmluY2x1ZGVDaGF0ICYmIGV2ZW50TmFtZSA9PT0gJ0dyb3VwQ2hhdE1lc3NhZ2VCcm9hZGNhc3RFdnRNc2cnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIExvZ2dlci5kZWJ1ZyhgUmVkaXM6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YS5wYXJzZWRNZXNzYWdlLmNvcmUpfSBlbWl0dGVkYCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FzeW5jKSB7XG4gICAgICAgIGNhbGxOZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZW1pdHRlclxuICAgICAgICAuZW1pdEFzeW5jKGV2ZW50TmFtZSwgeyBlbnZlbG9wZSwgaGVhZGVyLCBib2R5IH0sIG1lZXRpbmdJZClcbiAgICAgICAgLnRoZW4oY2FsbE5leHQpXG4gICAgICAgIC5jYXRjaChvbkVycm9yKTtcbiAgICB9IGNhdGNoIChyZWFzb24pIHtcbiAgICAgIG9uRXJyb3IocmVhc29uKTtcbiAgICB9XG4gIH1cblxuICBhZGQoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlLmFkZCguLi5hcmdzKTtcbiAgfVxufVxuXG5jbGFzcyBSZWRpc1B1YlN1YiB7XG4gIHN0YXRpYyBoYW5kbGVQdWJsaXNoRXJyb3IoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgIHRoaXMuZGlkU2VuZFJlcXVlc3RFdmVudCA9IGZhbHNlO1xuICAgIGNvbnN0IGhvc3QgPSBwcm9jZXNzLmVudi5SRURJU19IT1NUIHx8IE1ldGVvci5zZXR0aW5ncy5wcml2YXRlLnJlZGlzLmhvc3Q7XG4gICAgY29uc3QgcmVkaXNDb25mID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgdGhpcy5pbnN0YW5jZUlkID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuSU5TVEFOQ0VfSUQsIDEwKSB8fCAxOyAvLyAxIGFsc28gaGFuZGxlcyBydW5uaW5nIGluIGRldiBtb2RlXG4gICAgdGhpcy5yb2xlID0gcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1JPTEU7XG4gICAgdGhpcy5jdXN0b21SZWRpc0NoYW5uZWwgPSBgdG8taHRtbDUtcmVkaXMtY2hhbm5lbCR7dGhpcy5pbnN0YW5jZUlkfWA7XG5cbiAgICBjb25zdCB7IHBhc3N3b3JkLCBwb3J0IH0gPSByZWRpc0NvbmY7XG5cbiAgICBpZiAocGFzc3dvcmQpIHtcbiAgICAgIHRoaXMucHViID0gUmVkaXMuY3JlYXRlQ2xpZW50KHsgaG9zdCwgcG9ydCwgcGFzc3dvcmQgfSk7XG4gICAgICB0aGlzLnN1YiA9IFJlZGlzLmNyZWF0ZUNsaWVudCh7IGhvc3QsIHBvcnQsIHBhc3N3b3JkIH0pO1xuICAgICAgdGhpcy5wdWIuYXV0aChwYXNzd29yZCk7XG4gICAgICB0aGlzLnN1Yi5hdXRoKHBhc3N3b3JkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdWIgPSBSZWRpcy5jcmVhdGVDbGllbnQoeyBob3N0LCBwb3J0IH0pO1xuICAgICAgdGhpcy5zdWIgPSBSZWRpcy5jcmVhdGVDbGllbnQoeyBob3N0LCBwb3J0IH0pO1xuICAgIH1cblxuICAgIGlmIChxdWV1ZU1ldHJpY3MpIHtcbiAgICAgIE1ldHJpY3Muc3RhcnREdW1wRmlsZSgpO1xuICAgIH1cblxuICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIyKCk7XG4gICAgdGhpcy5tZWV0aW5nc1F1ZXVlcyA9IHt9O1xuICAgIC8vIFdlIGNyZWF0ZSB0aGlzIF8gbWVldGluZyBxdWV1ZSBiZWNhdXNlIHdlIG5lZWQgdG8gYmUgYWJsZSB0byBoYW5kbGUgc3lzdGVtIG1lc3NhZ2VzIChubyBtZWV0aW5nSWQgaW4gY29yZS5oZWFkZXIpXG4gICAgdGhpcy5tZWV0aW5nc1F1ZXVlc1tOT19NRUVUSU5HX0lEXSA9IG5ldyBNZWV0aW5nTWVzc2FnZVF1ZXVlKHRoaXMuZW1pdHRlciwgdGhpcy5jb25maWcuYXN5bmMsIHRoaXMuY29uZmlnLmRlYnVnKTtcblxuICAgIHRoaXMuaGFuZGxlU3Vic2NyaWJlID0gdGhpcy5oYW5kbGVTdWJzY3JpYmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZU1lc3NhZ2UgPSB0aGlzLmhhbmRsZU1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5zdWIub24oJ3BzdWJzY3JpYmUnLCBNZXRlb3IuYmluZEVudmlyb25tZW50KHRoaXMuaGFuZGxlU3Vic2NyaWJlKSk7XG4gICAgdGhpcy5zdWIub24oJ3BtZXNzYWdlJywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCh0aGlzLmhhbmRsZU1lc3NhZ2UpKTtcblxuICAgIGNvbnN0IGNoYW5uZWxzVG9TdWJzY3JpYmUgPSB0aGlzLmNvbmZpZy5zdWJzY3JpYmVUbztcblxuICAgIGNoYW5uZWxzVG9TdWJzY3JpYmUucHVzaCh0aGlzLmN1c3RvbVJlZGlzQ2hhbm5lbCk7XG5cbiAgICBzd2l0Y2ggKHRoaXMucm9sZSkge1xuICAgICAgY2FzZSAnZnJvbnRlbmQnOlxuICAgICAgICB0aGlzLnN1Yi5wc3Vic2NyaWJlKCdmcm9tLWFra2EtYXBwcy1mcm9udGVuZC1yZWRpcy1jaGFubmVsJyk7XG4gICAgICAgIGlmICh0aGlzLnJlZGlzRGVidWdFbmFibGVkKSB7XG4gICAgICAgICAgTG9nZ2VyLmRlYnVnKGBSZWRpczogTm9kZUpTUG9vbDoke3RoaXMuaW5zdGFuY2VJZH0gUm9sZTogZnJvbnRlbmQuIFN1YnNjcmliZWQgdG8gJ2Zyb20tYWtrYS1hcHBzLWZyb250ZW5kLXJlZGlzLWNoYW5uZWwnYCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdiYWNrZW5kJzpcbiAgICAgICAgY2hhbm5lbHNUb1N1YnNjcmliZS5mb3JFYWNoKChjaGFubmVsKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdWIucHN1YnNjcmliZShjaGFubmVsKTtcbiAgICAgICAgICBpZiAodGhpcy5yZWRpc0RlYnVnRW5hYmxlZCkge1xuICAgICAgICAgICAgTG9nZ2VyLmRlYnVnKGBSZWRpczogTm9kZUpTUG9vbDoke3RoaXMuaW5zdGFuY2VJZH0gUm9sZTogYmFja2VuZC4gU3Vic2NyaWJlZCB0byAnJHtjaGFubmVsc1RvU3Vic2NyaWJlfSdgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuc3ViLnBzdWJzY3JpYmUoJ2Zyb20tYWtrYS1hcHBzLWZyb250ZW5kLXJlZGlzLWNoYW5uZWwnKTtcbiAgICAgICAgY2hhbm5lbHNUb1N1YnNjcmliZS5mb3JFYWNoKChjaGFubmVsKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdWIucHN1YnNjcmliZShjaGFubmVsKTtcbiAgICAgICAgICBpZiAodGhpcy5yZWRpc0RlYnVnRW5hYmxlZCkge1xuICAgICAgICAgICAgTG9nZ2VyLmRlYnVnKGBSZWRpczogTm9kZUpTUG9vbDoke3RoaXMuaW5zdGFuY2VJZH0gUm9sZToke3RoaXMucm9sZX0gKGxpa2VseSBvbmx5IG9uZSBub2RlanMgcnVubmluZywgZG9pbmcgYm90aCBmcm9udGVuZCBhbmQgYmFja2VuZC4gRGV2IGVudj8gKS4gU3Vic2NyaWJlZCB0byAnJHtjaGFubmVsc1RvU3Vic2NyaWJlfSdgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnLCBjb25maWcpO1xuICAgIHRoaXMucmVkaXNEZWJ1Z0VuYWJsZWQgPSB0aGlzLmNvbmZpZy5kZWJ1ZztcbiAgfVxuXG5cbiAgLy8gVE9ETzogTW92ZSB0aGlzIG91dCBvZiB0aGlzIGNsYXNzLCBtYXliZSBwYXNzIGFzIGEgY2FsbGJhY2sgdG8gaW5pdD9cbiAgaGFuZGxlU3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLmRpZFNlbmRSZXF1ZXN0RXZlbnQgfHwgdGhpcy5yb2xlID09PSAnZnJvbnRlbmQnKSByZXR1cm47XG5cbiAgICAvLyBwb3B1bGF0ZSBjb2xsZWN0aW9ucyB3aXRoIHByZS1leGlzdGluZyBkYXRhXG4gICAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG4gICAgY29uc3QgQ0hBTk5FTCA9IFJFRElTX0NPTkZJRy5jaGFubmVscy50b0Fra2FBcHBzO1xuICAgIGNvbnN0IEVWRU5UX05BTUUgPSAnR2V0QWxsTWVldGluZ3NSZXFNc2cnO1xuXG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIHJlcXVlc3RlcklkOiAnbm9kZUpTYXBwJyxcbiAgICAgIGh0bWw1SW5zdGFuY2VJZDogdGhpcy5pbnN0YW5jZUlkLFxuICAgIH07XG5cbiAgICB0aGlzLnB1Ymxpc2hTeXN0ZW1NZXNzYWdlKENIQU5ORUwsIEVWRU5UX05BTUUsIGJvZHkpO1xuICAgIHRoaXMuZGlkU2VuZFJlcXVlc3RFdmVudCA9IHRydWU7XG4gIH1cblxuICBoYW5kbGVNZXNzYWdlKHBhdHRlcm4sIGNoYW5uZWwsIG1lc3NhZ2UpIHtcbiAgICBjb25zdCBwYXJzZWRNZXNzYWdlID0gSlNPTi5wYXJzZShtZXNzYWdlKTtcbiAgICBjb25zdCB7IGlnbm9yZWQ6IGlnbm9yZWRNZXNzYWdlcywgYXN5bmMgfSA9IHRoaXMuY29uZmlnO1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHBhcnNlZE1lc3NhZ2UuY29yZS5oZWFkZXIubmFtZTtcblxuICAgIGlmIChpZ25vcmVkTWVzc2FnZXMuaW5jbHVkZXMoY2hhbm5lbClcbiAgICAgIHx8IGlnbm9yZWRNZXNzYWdlcy5pbmNsdWRlcyhldmVudE5hbWUpKSB7XG4gICAgICBpZiAoZXZlbnROYW1lID09PSAnQ2hlY2tBbGl2ZVBvbmdTeXNNc2cnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJlZGlzRGVidWdFbmFibGVkKSB7XG4gICAgICAgIExvZ2dlci5kZWJ1ZyhgUmVkaXM6ICR7ZXZlbnROYW1lfSBza2lwcGVkYCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVkaXNEZWJ1Z0VuYWJsZWQpIHtcbiAgICAgIExvZ2dlci53YXJuKCdSZWNlaXZlZCBldmVudCB0byBoYW5kbGUnLCB7IGRhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSwgZXZlbnROYW1lIH0pO1xuICAgIH1cblxuICAgIC8vIFN5c3RlbSBtZXNzYWdlcyBsaWtlIENyZWF0ZSAvIERlc3Ryb3kgTWVldGluZywgZXRjIGRvIG5vdCBoYXZlIGNvcmUuaGVhZGVyLm1lZXRpbmdJZC5cbiAgICAvLyBQcm9jZXNzIHRoZW0gaW4gTWVldGluZ1F1ZXVlWydfJ10gIC0tLSB0aGUgTk9fTUVFVElORyBxdWV1ZUlkXG4gICAgY29uc3QgbWVldGluZ0lkRnJvbU1lc3NhZ2VDb3JlSGVhZGVyID0gcGFyc2VkTWVzc2FnZS5jb3JlLmhlYWRlci5tZWV0aW5nSWQgfHwgTk9fTUVFVElOR19JRDtcblxuICAgIGlmICh0aGlzLnJvbGUgPT09ICdmcm9udGVuZCcpIHtcbiAgICAgIC8vIHJlY2VpdmluZyB0aGlzIG1lc3NhZ2UgbWVhbnMgd2UgbmVlZCB0byBsb29rIGF0IGl0LiBGcm9udGVuZHMgZG8gbm90IGhhdmUgaW5zdGFuY2VJZC5cbiAgICAgIGlmIChtZWV0aW5nSWRGcm9tTWVzc2FnZUNvcmVIZWFkZXIgPT09IE5PX01FRVRJTkdfSUQpIHsgLy8gaWYgdGhpcyBpcyBhIHN5c3RlbSBtZXNzYWdlXG4gICAgICAgIGlmIChldmVudE5hbWUgPT09ICdNZWV0aW5nQ3JlYXRlZEV2dE1zZycgfHwgZXZlbnROYW1lID09PSAnU3luY0dldE1lZXRpbmdJbmZvUmVzcE1zZycpIHtcbiAgICAgICAgICBjb25zdCBtZWV0aW5nSWRGcm9tTWVzc2FnZU1lZXRpbmdQcm9wID0gcGFyc2VkTWVzc2FnZS5jb3JlLmJvZHkucHJvcHMubWVldGluZ1Byb3AuaW50SWQ7XG4gICAgICAgICAgdGhpcy5tZWV0aW5nc1F1ZXVlc1ttZWV0aW5nSWRGcm9tTWVzc2FnZU1lZXRpbmdQcm9wXSA9IG5ldyBNZWV0aW5nTWVzc2FnZVF1ZXVlKHRoaXMuZW1pdHRlciwgYXN5bmMsIHRoaXMucmVkaXNEZWJ1Z0VuYWJsZWQpO1xuICAgICAgICAgIGlmICh0aGlzLnJlZGlzRGVidWdFbmFibGVkKSB7XG4gICAgICAgICAgICBMb2dnZXIud2FybignQ3JlYXRlZCBmcm9udGVuZCBxdWV1ZSBmb3IgbWVldGluZycsIHsgZGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLCBldmVudE5hbWUsIG1lZXRpbmdJZEZyb21NZXNzYWdlTWVldGluZ1Byb3AgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5tZWV0aW5nc1F1ZXVlc1ttZWV0aW5nSWRGcm9tTWVzc2FnZUNvcmVIZWFkZXJdKSB7XG4gICAgICAgIExvZ2dlci53YXJuKGBGcm9udGVuZCBtZWV0aW5nIHF1ZXVlIGhhZCBub3QgYmVlbiBpbml0aWFsaXplZCAgICR7bWVzc2FnZX1gLCB7IGV2ZW50TmFtZSwgbWVldGluZ0lkRnJvbU1lc3NhZ2VDb3JlSGVhZGVyIH0pO1xuICAgICAgICB0aGlzLm1lZXRpbmdzUXVldWVzW05PX01FRVRJTkdfSURdLmFkZCh7XG4gICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICBjaGFubmVsLFxuICAgICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgICBwYXJzZWRNZXNzYWdlLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHByb2Nlc3MgdGhlIGV2ZW50IC0gd2hldGhlciBpdCdzIGEgc3lzdGVtIG1lc3NhZ2Ugb3Igbm90LCB0aGUgbWVldGluZ0lkRnJvbU1lc3NhZ2VDb3JlSGVhZGVyIHZhbHVlIGlzIGFkanVzdGVkXG4gICAgICAgIHRoaXMubWVldGluZ3NRdWV1ZXNbbWVldGluZ0lkRnJvbU1lc3NhZ2VDb3JlSGVhZGVyXS5hZGQoe1xuICAgICAgICAgIHBhdHRlcm4sXG4gICAgICAgICAgY2hhbm5lbCxcbiAgICAgICAgICBldmVudE5hbWUsXG4gICAgICAgICAgcGFyc2VkTWVzc2FnZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gYmFja2VuZFxuICAgICAgaWYgKG1lZXRpbmdJZEZyb21NZXNzYWdlQ29yZUhlYWRlciA9PT0gTk9fTUVFVElOR19JRCkgeyAvLyBpZiB0aGlzIGlzIGEgc3lzdGVtIG1lc3NhZ2VcbiAgICAgICAgY29uc3QgbWVldGluZ0lkRnJvbU1lc3NhZ2VNZWV0aW5nUHJvcCA9IHBhcnNlZE1lc3NhZ2UuY29yZS5ib2R5LnByb3BzPy5tZWV0aW5nUHJvcD8uaW50SWQ7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlSWRGcm9tTWVzc2FnZSA9IGdldEluc3RhbmNlSWRGcm9tTWVzc2FnZShwYXJzZWRNZXNzYWdlKTtcblxuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZUlkID09PSBpbnN0YW5jZUlkRnJvbU1lc3NhZ2UpIHtcbiAgICAgICAgICAvLyBjcmVhdGUgcXVldWUgb3IgZGVzdHJveSBxdWV1ZVxuICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICdNZWV0aW5nQ3JlYXRlZEV2dE1zZycgfHwgZXZlbnROYW1lID09PSAnU3luY0dldE1lZXRpbmdJbmZvUmVzcE1zZycpIHtcbiAgICAgICAgICAgIHRoaXMubWVldGluZ3NRdWV1ZXNbbWVldGluZ0lkRnJvbU1lc3NhZ2VNZWV0aW5nUHJvcF0gPSBuZXcgTWVldGluZ01lc3NhZ2VRdWV1ZSh0aGlzLmVtaXR0ZXIsIGFzeW5jLCB0aGlzLnJlZGlzRGVidWdFbmFibGVkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlZGlzRGVidWdFbmFibGVkKSB7XG4gICAgICAgICAgICAgIExvZ2dlci53YXJuKCdDcmVhdGVkIGJhY2tlbmQgcXVldWUgZm9yIG1lZXRpbmcnLCB7IGRhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSwgZXZlbnROYW1lLCBtZWV0aW5nSWRGcm9tTWVzc2FnZU1lZXRpbmdQcm9wIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm1lZXRpbmdzUXVldWVzW05PX01FRVRJTkdfSURdLmFkZCh7XG4gICAgICAgICAgICBwYXR0ZXJuLFxuICAgICAgICAgICAgY2hhbm5lbCxcbiAgICAgICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgICAgIHBhcnNlZE1lc3NhZ2UsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ01lZXRpbmdFbmRlZEV2dE1zZycgfHwgZXZlbnROYW1lID09PSAnTWVldGluZ0Rlc3Ryb3llZEV2dE1zZycpIHtcbiAgICAgICAgICAgIC8vIE1lZXRpbmdFbmRlZEV2dE1zZyBkb2VzIG5vdCBmb2xsb3cgdGhlIHN5c3RlbSBtZXNzYWdlIHBhdHRlcm4gZm9yIG1lZXRpbmdJZFxuICAgICAgICAgICAgLy8gYnV0IHdlIHN0aWxsIG5lZWQgdG8gcHJvY2VzcyBpdCBvbiB0aGUgYmFja2VuZCB3aGljaCBpcyBwcm9jZXNzaW5nIHRoZSByZXN0IG9mIHRoZSBldmVudHNcbiAgICAgICAgICAgIC8vIGZvciB0aGlzIG1lZXRpbmdJZCAoaXQgZG9lcyBub3QgY29udGFpbiBpbnN0YW5jZUlkIGVpdGhlciwgc28gd2UgY2Fubm90IGNvbXBhcmUgdGhhdClcbiAgICAgICAgICAgIGNvbnN0IG1lZXRpbmdJZEZvck1lZXRpbmdFbmRlZCA9IHBhcnNlZE1lc3NhZ2UuY29yZS5ib2R5Lm1lZXRpbmdJZDtcbiAgICAgICAgICAgIGlmICghIXRoaXMubWVldGluZ3NRdWV1ZXNbbWVldGluZ0lkRm9yTWVldGluZ0VuZGVkXSkge1xuICAgICAgICAgICAgICB0aGlzLm1lZXRpbmdzUXVldWVzW05PX01FRVRJTkdfSURdLmFkZCh7XG4gICAgICAgICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICAgICAgICBjaGFubmVsLFxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBwYXJzZWRNZXNzYWdlLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFkZCB0byBleGlzdGluZyBxdWV1ZVxuICAgICAgICBpZiAoISF0aGlzLm1lZXRpbmdzUXVldWVzW21lZXRpbmdJZEZyb21NZXNzYWdlQ29yZUhlYWRlcl0pIHtcbiAgICAgICAgICAvLyBvbmx5IGhhbmRsZSBtZXNzYWdlIGlmIHdlIGhhdmUgYSBxdWV1ZSBmb3IgdGhlIG1lZXRpbmcuIElmIHdlIGRvbid0IGhhdmUgYSBxdWV1ZSwgaXQgbWVhbnMgaXQncyBmb3IgYSBkaWZmZXJlbnQgaW5zdGFuY2VJZFxuICAgICAgICAgIHRoaXMubWVldGluZ3NRdWV1ZXNbbWVldGluZ0lkRnJvbU1lc3NhZ2VDb3JlSGVhZGVyXS5hZGQoe1xuICAgICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICAgIGNoYW5uZWwsXG4gICAgICAgICAgICBldmVudE5hbWUsXG4gICAgICAgICAgICBwYXJzZWRNZXNzYWdlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHdlIHJlYWNoIHRoaXMgbGluZSwgdGhpcyBtZWFucyB0aGF0IHRoZXJlIGlzIG5vIGV4aXN0aW5nIHF1ZXVlIGZvciB0aGlzIHJlZGlzIFwiYmFja2VuZFwiIG1lc3NhZ2VcbiAgICAgICAgICAvLyB3aGljaCBtZWFucyB0aGF0IHRoZSBtZWV0aW5nIGlzIGZ1bGx5IGhhbmRsZWQgYnkgYW5vdGhlciBiYmItaHRtbDUtYmFja2VuZC5cbiAgICAgICAgICAvLyBMb2dnZXIud2FybignQmFja2VuZCBtZWV0aW5nIHF1ZXVlIGhhZCBub3QgYmVlbiBpbml0aWFsaXplZCcsIHsgZXZlbnROYW1lLCBtZWV0aW5nSWRGcm9tTWVzc2FnZUNvcmVIZWFkZXIgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lNZWV0aW5nUXVldWUoaWQpIHtcbiAgICBkZWxldGUgdGhpcy5tZWV0aW5nc1F1ZXVlc1tpZF07XG4gIH1cblxuICBvbiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbiguLi5hcmdzKTtcbiAgfVxuXG4gIHB1Ymxpc2hWb2ljZU1lc3NhZ2UoY2hhbm5lbCwgZXZlbnROYW1lLCB2b2ljZUNvbmYsIHBheWxvYWQpIHtcbiAgICBjb25zdCBoZWFkZXIgPSB7XG4gICAgICBuYW1lOiBldmVudE5hbWUsXG4gICAgICB2b2ljZUNvbmYsXG4gICAgfTtcblxuICAgIGNvbnN0IGVudmVsb3BlID0gbWFrZUVudmVsb3BlKGNoYW5uZWwsIGV2ZW50TmFtZSwgaGVhZGVyLCBwYXlsb2FkKTtcblxuICAgIHJldHVybiB0aGlzLnB1Yi5wdWJsaXNoKGNoYW5uZWwsIGVudmVsb3BlLCBSZWRpc1B1YlN1Yi5oYW5kbGVQdWJsaXNoRXJyb3IpO1xuICB9XG5cbiAgcHVibGlzaFN5c3RlbU1lc3NhZ2UoY2hhbm5lbCwgZXZlbnROYW1lLCBwYXlsb2FkKSB7XG4gICAgY29uc3QgaGVhZGVyID0ge1xuICAgICAgbmFtZTogZXZlbnROYW1lLFxuICAgIH07XG5cbiAgICBjb25zdCBlbnZlbG9wZSA9IG1ha2VFbnZlbG9wZShjaGFubmVsLCBldmVudE5hbWUsIGhlYWRlciwgcGF5bG9hZCk7XG5cbiAgICByZXR1cm4gdGhpcy5wdWIucHVibGlzaChjaGFubmVsLCBlbnZlbG9wZSwgUmVkaXNQdWJTdWIuaGFuZGxlUHVibGlzaEVycm9yKTtcbiAgfVxuXG4gIHB1Ymxpc2hNZWV0aW5nTWVzc2FnZShjaGFubmVsLCBldmVudE5hbWUsIG1lZXRpbmdJZCwgcGF5bG9hZCkge1xuICAgIGNvbnN0IGhlYWRlciA9IHtcbiAgICAgIG5hbWU6IGV2ZW50TmFtZSxcbiAgICAgIG1lZXRpbmdJZCxcbiAgICB9O1xuXG4gICAgY29uc3QgZW52ZWxvcGUgPSBtYWtlRW52ZWxvcGUoY2hhbm5lbCwgZXZlbnROYW1lLCBoZWFkZXIsIHBheWxvYWQpO1xuXG4gICAgcmV0dXJuIHRoaXMucHViLnB1Ymxpc2goY2hhbm5lbCwgZW52ZWxvcGUsIFJlZGlzUHViU3ViLmhhbmRsZVB1Ymxpc2hFcnJvcik7XG4gIH1cblxuICBwdWJsaXNoVXNlck1lc3NhZ2UoY2hhbm5lbCwgZXZlbnROYW1lLCBtZWV0aW5nSWQsIHVzZXJJZCwgcGF5bG9hZCkge1xuICAgIGNvbnN0IGhlYWRlciA9IHtcbiAgICAgIG5hbWU6IGV2ZW50TmFtZSxcbiAgICAgIG1lZXRpbmdJZCxcbiAgICAgIHVzZXJJZCxcbiAgICB9O1xuXG4gICAgaWYgKCFtZWV0aW5nSWQgfHwgIXVzZXJJZCkge1xuICAgICAgTG9nZ2VyLndhcm4oYFB1Ymxpc2hpbmcgJHtldmVudE5hbWV9IHdpdGggcG90ZW50aWFsbHkgbWlzc2luZyBkYXRhIHVzZXJJZD0ke3VzZXJJZH0gbWVldGluZ0lkPSR7bWVldGluZ0lkfWApO1xuICAgIH1cbiAgICBjb25zdCBlbnZlbG9wZSA9IG1ha2VFbnZlbG9wZShjaGFubmVsLCBldmVudE5hbWUsIGhlYWRlciwgcGF5bG9hZCwgeyBtZWV0aW5nSWQsIHVzZXJJZCB9KTtcblxuICAgIHJldHVybiB0aGlzLnB1Yi5wdWJsaXNoKGNoYW5uZWwsIGVudmVsb3BlLCBSZWRpc1B1YlN1Yi5oYW5kbGVQdWJsaXNoRXJyb3IpO1xuICB9XG59XG5cbmNvbnN0IFJlZGlzUHViU3ViU2luZ2xldG9uID0gbmV3IFJlZGlzUHViU3ViKCk7XG5cbk1ldGVvci5zdGFydHVwKCgpID0+IHtcbiAgY29uc3QgUkVESVNfQ09ORklHID0gTWV0ZW9yLnNldHRpbmdzLnByaXZhdGUucmVkaXM7XG5cbiAgUmVkaXNQdWJTdWJTaW5nbGV0b24udXBkYXRlQ29uZmlnKFJFRElTX0NPTkZJRyk7XG4gIFJlZGlzUHViU3ViU2luZ2xldG9uLmluaXQoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSZWRpc1B1YlN1YlNpbmdsZXRvbjtcbiIsIi8qIGdsb2JhbCBfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fICovXG5pbXBvcnQgeyBNZXRlb3IgfSBmcm9tICdtZXRlb3IvbWV0ZW9yJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgWUFNTCBmcm9tICd5YW1sJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1NfRklMRV9QQVRIID0gcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X1NFVFRJTkdTIHx8ICdhc3NldHMvYXBwL2NvbmZpZy9zZXR0aW5ncy55bWwnO1xuY29uc3QgTE9DQUxfU0VUVElOR1NfRklMRV9QQVRIID0gcHJvY2Vzcy5lbnYuQkJCX0hUTUw1X0xPQ0FMX1NFVFRJTkdTIHx8ICcvZXRjL2JpZ2JsdWVidXR0b24vYmJiLWh0bWw1LnltbCc7XG5cblxudHJ5IHtcbiAgaWYgKGZzLmV4aXN0c1N5bmMoREVGQVVMVF9TRVRUSU5HU19GSUxFX1BBVEgpKSB7XG4gICAgY29uc3QgU0VUVElOR1MgPSBZQU1MLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhERUZBVUxUX1NFVFRJTkdTX0ZJTEVfUEFUSCwgJ3V0Zi04JykpO1xuXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoTE9DQUxfU0VUVElOR1NfRklMRV9QQVRIKSkge1xuICAgICAgY29uc29sZS5sb2coJ0xvY2FsIGNvbmZpZ3VyYXRpb24gZm91bmQhIE1lcmdpbmcgd2l0aCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uLi4nKTtcbiAgICAgIGNvbnN0IExPQ0FMX0NPTkZJRyA9IFlBTUwucGFyc2UoZnMucmVhZEZpbGVTeW5jKExPQ0FMX1NFVFRJTkdTX0ZJTEVfUEFUSCwgJ3V0Zi04JykpO1xuICAgICAgXy5tZXJnZShTRVRUSU5HUywgTE9DQUxfQ09ORklHKTtcbiAgICB9IGVsc2UgY29uc29sZS5sb2coJ0xvY2FsIENvbmZpZ3VyYXRpb24gbm90IGZvdW5kISBMb2FkaW5nIGRlZmF1bHQgY29uZmlndXJhdGlvbi4uLicpO1xuXG4gICAgTWV0ZW9yLnNldHRpbmdzID0gU0VUVElOR1M7XG4gICAgTWV0ZW9yLnNldHRpbmdzLnB1YmxpYy5hcHAuaW5zdGFuY2VJZCA9ICcnOyAvLyBubyBsb25nZXIgdXNlIGluc3RhbmNlSWQgaW4gVVJMcy4gTGlrZWx5IHBlcm1hbmVudCBjaGFuZ2VcbiAgICAvLyBNZXRlb3Iuc2V0dGluZ3MucHVibGljLmFwcC5pbnN0YW5jZUlkID0gYC8ke0lOU1RBTkNFX0lEfWA7XG5cbiAgICBfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlBVQkxJQ19TRVRUSU5HUyA9IFNFVFRJTkdTLnB1YmxpYztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgZG9lc25cXCd0IGV4aXN0cycpO1xuICB9XG59IGNhdGNoIChlcnJvcikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLmVycm9yKCdFcnJvciBvbiBsb2FkIGNvbmZpZ3VyYXRpb24gZmlsZS4nLCBlcnJvcik7XG59XG4iLCIvLyBVc2VkIGluIEZsYXNoIGFuZCBIVE1MIHRvIHNob3cgYSBsZWdpdGltYXRlIGJyZWFrIGluIHRoZSBsaW5lXG5jb25zdCBCUkVBS19MSU5FID0gJzxici8+JztcblxuLy8gU29mdCByZXR1cm4gaW4gSFRNTCB0byBzaWduaWZ5IGEgYnJva2VuIGxpbmUgd2l0aG91dFxuLy8gZGlzcGxheWluZyB0aGUgZXNjYXBlZCAnPGJyLz4nIGxpbmUgYnJlYWsgdGV4dFxuY29uc3QgQ0FSUklBR0VfUkVUVVJOID0gJ1xccic7XG5cbi8vIEhhbmRsZSB0aGlzIHRoZSBzYW1lIGFzIGNhcnJpYWdlIHJldHVybiwgaW4gY2FzZSB0ZXh0IGNvcGllZCBoYXMgdGhpc1xuY29uc3QgTkVXX0xJTkUgPSAnXFxuJztcblxuZXhwb3J0IHsgQlJFQUtfTElORSwgQ0FSUklBR0VfUkVUVVJOLCBORVdfTElORSB9O1xuIiwiZXhwb3J0IGNvbnN0IFhMUyA9ICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnO1xuZXhwb3J0IGNvbnN0IFhMU1ggPSAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQnO1xuZXhwb3J0IGNvbnN0IERPQyA9ICdhcHBsaWNhdGlvbi9tc3dvcmQnO1xuZXhwb3J0IGNvbnN0IERPQ1ggPSAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnO1xuZXhwb3J0IGNvbnN0IFBQVCA9ICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludCc7XG5leHBvcnQgY29uc3QgUFBUWCA9ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJztcbmV4cG9ydCBjb25zdCBPRFQgPSAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0JztcbmV4cG9ydCBjb25zdCBSVEYgPSAnYXBwbGljYXRpb24vcnRmJztcbmV4cG9ydCBjb25zdCBUWFQgPSAndGV4dC9wbGFpbic7XG5leHBvcnQgY29uc3QgT0RTID0gJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQnO1xuZXhwb3J0IGNvbnN0IE9EUCA9ICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbic7XG5leHBvcnQgY29uc3QgUERGID0gJ2FwcGxpY2F0aW9uL3BkZic7XG5leHBvcnQgY29uc3QgSlBFRyA9ICdpbWFnZS9qcGVnJztcbmV4cG9ydCBjb25zdCBQTkcgPSAnaW1hZ2UvcG5nJztcbmV4cG9ydCBjb25zdCBTVkcgPSAnaW1hZ2Uvc3ZnK3htbCc7XG5cbmV4cG9ydCBjb25zdCBVUExPQURfU1VQT1JURUQgPSBbXG4gIFhMUyxcbiAgWExTWCxcbiAgRE9DLFxuICBET0NYLFxuICBQUFQsXG4gIFBQVFgsXG4gIE9EVCxcbiAgUlRGLFxuICBUWFQsXG4gIE9EUyxcbiAgT0RQLFxuICBQREYsXG4gIEpQRUcsXG4gIFBORyxcbl07XG4iLCIvL1xuLy8gUmVndWxhciBFeHByZXNzaW9uIGZvciBVUkwgdmFsaWRhdGlvblxuLy9cbi8vIEF1dGhvcjogRGllZ28gUGVyaW5pXG4vLyBVcGRhdGVkOiAyMDEwLzEyLzA1XG4vLyBMaWNlbnNlOiBNSVRcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxMyBEaWVnbyBQZXJpbmkgKGh0dHA6Ly93d3cuaXBvcnQuaXQpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbi8vIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4vLyBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXRcbi8vIHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuLy8gY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZVxuLy8gU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmdcbi8vIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbi8vIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4vLyBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVNcbi8vIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4vLyBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVFxuLy8gSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4vLyBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbi8vIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1Jcbi8vIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vXG4vLyB0aGUgcmVndWxhciBleHByZXNzaW9uIGNvbXBvc2VkICYgY29tbWVudGVkXG4vLyBjb3VsZCBiZSBlYXNpbHkgdHdlYWtlZCBmb3IgUkZDIGNvbXBsaWFuY2UsXG4vLyBpdCB3YXMgZXhwcmVzc2x5IG1vZGlmaWVkIHRvIGZpdCAmIHNhdGlzZnlcbi8vIHRoZXNlIHRlc3QgZm9yIGFuIFVSTCBzaG9ydGVuZXI6XG4vL1xuLy8gICBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleFxuLy9cbi8vIE5vdGVzIG9uIHBvc3NpYmxlIGRpZmZlcmVuY2VzIGZyb20gYSBzdGFuZGFyZC9nZW5lcmljIHZhbGlkYXRpb246XG4vL1xuLy8gLSB1dGYtOCBjaGFyIGNsYXNzIHRha2UgaW4gY29uc2lkZXJhdGlvbiB0aGUgZnVsbCBVbmljb2RlIHJhbmdlXG4vLyAtIFRMRHMgaGF2ZSBiZWVuIG1hZGUgbWFuZGF0b3J5IHNvIHNpbmdsZSBuYW1lcyBsaWtlIFwibG9jYWxob3N0XCIgZmFpbHNcbi8vIC0gcHJvdG9jb2xzIGhhdmUgYmVlbiByZXN0cmljdGVkIHRvIGZ0cCwgaHR0cCBhbmQgaHR0cHMgb25seSBhcyByZXF1ZXN0ZWRcbi8vXG4vLyBDaGFuZ2VzOlxuLy9cbi8vIC0gSVAgYWRkcmVzcyBkb3R0ZWQgbm90YXRpb24gdmFsaWRhdGlvbiwgcmFuZ2U6IDEuMC4wLjAgLSAyMjMuMjU1LjI1NS4yNTVcbi8vICAgZmlyc3QgYW5kIGxhc3QgSVAgYWRkcmVzcyBvZiBlYWNoIGNsYXNzIGlzIGNvbnNpZGVyZWQgaW52YWxpZFxuLy8gICAoc2luY2UgdGhleSBhcmUgYnJvYWRjYXN0L25ldHdvcmsgYWRkcmVzc2VzKVxuLy9cbi8vIC0gQWRkZWQgZXhjbHVzaW9uIG9mIHByaXZhdGUsIHJlc2VydmVkIGFuZC9vciBsb2NhbCBuZXR3b3JrcyByYW5nZXNcbi8vXG4vLyAtIE1hZGUgc3RhcnRpbmcgcGF0aCBzbGFzaCBvcHRpb25hbCAoaHR0cDovL2V4YW1wbGUuY29tP2Zvbz1iYXIpXG4vL1xuLy8gLSBBbGxvdyBhIGRvdCAoLikgYXQgdGhlIGVuZCBvZiBob3N0bmFtZXMgKGh0dHA6Ly9leGFtcGxlLmNvbS4pXG4vL1xuLy8gQ29tcHJlc3NlZCBvbmUtbGluZSB2ZXJzaW9uczpcbi8vXG4vLyBKYXZhc2NyaXB0IHZlcnNpb24gKG1lcmdlIGludG8gb25lIGxpbmUpXG4vL1xuLy8gL14oPzooPzpodHRwcz98ZnRwKTpcXC9cXC8pKD86XFxTKyg/OjpcXFMqKT9AKT8oPzooPyEoPzoxMHwxMjcpKD86XFwuXFxkezEsM30pezN9KVxuLy8gKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKSg/OlxcLlxcZHsxLDN9KXsyfSlcbi8vICg/OlsxLTldXFxkP3wxXFxkXFxkfDJbMDFdXFxkfDIyWzAtM10pKD86XFwuKD86MT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkpezJ9XG4vLyAoPzpcXC4oPzpbMS05XVxcZD98MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKylcbi8vICg/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSlcXC4/KVxuLy8gKD86OlxcZHsyLDV9KT8oPzpbLz8jXVxcUyopPyQvaVxuLy9cbi8vIFBIUCB2ZXJzaW9uIChtZXJnZSBpbnRvIG9uZSBsaW5lKVxuLy9cbi8vIF9eKD86KD86aHR0cHM/fGZ0cCk6Ly8pKD86XFxTKyg/OjpcXFMqKT9AKT8oPzooPyEoPzoxMHwxMjcpXG4vLyAoPzpcXC5cXGR7MSwzfSl7M30pKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKVxuLy8gKD86XFwuXFxkezEsM30pezJ9KSg/OlsxLTldXFxkP3wxXFxkXFxkfDJbMDFdXFxkfDIyWzAtM10pKD86XFwuKD86MT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkpXG4vLyB7Mn0oPzpcXC4oPzpbMS05XVxcZD98MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXHh7MDBhMX0tXFx4e2ZmZmZ9MC05XS0qKVxuLy8gKlthLXpcXHh7MDBhMX0tXFx4e2ZmZmZ9MC05XSspKD86XFwuKD86W2EtelxceHswMGExfS1cXHh7ZmZmZn0wLTldLSopKlthLXpcXHh7MDBhMX0tXFx4e2ZmZmZ9MC05XSspXG4vLyAqKD86XFwuKD86W2EtelxceHswMGExfS1cXHh7ZmZmZn1dezIsfSkpXFwuPykoPzo6XFxkezIsNX0pPyg/OlsvPyNdXFxTKik/JF9pdVNcbi8vXG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBSZWdFeHAoXG5cbiAgLy8gcHJvdG9jb2wgaWRlbnRpZmllclxuICAnKD86KD86aHR0cHM/fGZ0cCk6Ly8pJyArXG5cbiAgLy8gdXNlcjpwYXNzIGF1dGhlbnRpY2F0aW9uXG4gICcoPzpcXFxcUysoPzo6XFxcXFMqKT9AKT8nICtcbiAgJyg/OicgK1xuXG4gICAgLy8gSVAgYWRkcmVzcyBleGNsdXNpb25cbiAgICAvLyBwcml2YXRlICYgbG9jYWwgbmV0d29ya3NcbiAgICAnKD8hKD86MTB8MTI3KSg/OlxcXFwuXFxcXGR7MSwzfSl7M30pJyArXG4gICAgJyg/ISg/OjE2OVxcXFwuMjU0fDE5MlxcXFwuMTY4KSg/OlxcXFwuXFxcXGR7MSwzfSl7Mn0pJyArXG4gICAgJyg/ITE3MlxcXFwuKD86MVs2LTldfDJcXFxcZHwzWzAtMV0pKD86XFxcXC5cXFxcZHsxLDN9KXsyfSknICtcblxuICAgIC8vIElQIGFkZHJlc3MgZG90dGVkIG5vdGF0aW9uIG9jdGV0c1xuICAgIC8vIGV4Y2x1ZGVzIGxvb3BiYWNrIG5ldHdvcmsgMC4wLjAuMFxuICAgIC8vIGV4Y2x1ZGVzIHJlc2VydmVkIHNwYWNlID49IDIyNC4wLjAuMFxuICAgIC8vIGV4Y2x1ZGVzIG5ldHdvcmsgJiBicm9hY2FzdCBhZGRyZXNzZXNcbiAgICAvLyAoZmlyc3QgJiBsYXN0IElQIGFkZHJlc3Mgb2YgZWFjaCBjbGFzcylcbiAgICAnKD86WzEtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswMV1cXFxcZHwyMlswLTNdKScgK1xuICAgICcoPzpcXFxcLig/OjE/XFxcXGR7MSwyfXwyWzAtNF1cXFxcZHwyNVswLTVdKSl7Mn0nICtcbiAgICAnKD86XFxcXC4oPzpbMS05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAtNF1cXFxcZHwyNVswLTRdKSknICtcbiAgJ3wnICtcblxuICAgIC8vIGhvc3QgbmFtZVxuICAgICcoPzooPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0tKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKyknICtcblxuICAgIC8vIGRvbWFpbiBuYW1lXG4gICAgJyg/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldLSopKlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSspKicgK1xuXG4gICAgLy8gVExEIGlkZW50aWZpZXJcbiAgICAnKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZl17Mix9KSknICtcblxuICAgIC8vIFRMRCBtYXkgZW5kIHdpdGggZG90XG4gICAgJ1xcXFwuPycgK1xuICAnKScgK1xuXG4gIC8vIHBvcnQgbnVtYmVyXG4gICcoPzo6XFxcXGR7Miw1fSk/JyArXG5cbiAgLy8gcmVzb3VyY2UgcGF0aFxuICAnKD86Wy8/I11cXFxcUyopPycsICdpbWcnLFxuKTtcbiIsImltcG9ydCAnL2ltcG9ydHMvc3RhcnR1cC9zZXJ2ZXInO1xuXG4vLyAyeFxuaW1wb3J0ICcvaW1wb3J0cy9hcGkvbWVldGluZ3Mvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL3VzZXJzL3NlcnZlcic7XG5pbXBvcnQgJy9pbXBvcnRzL2FwaS9hbm5vdGF0aW9ucy9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvY3Vyc29yL3NlcnZlcic7XG5pbXBvcnQgJy9pbXBvcnRzL2FwaS9wb2xscy9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvY2FwdGlvbnMvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbnMvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL3ByZXNlbnRhdGlvbi1wb2RzL3NlcnZlcic7XG5pbXBvcnQgJy9pbXBvcnRzL2FwaS9wcmVzZW50YXRpb24tdXBsb2FkLXRva2VuL3NlcnZlcic7XG5pbXBvcnQgJy9pbXBvcnRzL2FwaS9zbGlkZXMvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL2JyZWFrb3V0cy9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvZ3JvdXAtY2hhdC1tc2cvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL3NjcmVlbnNoYXJlL3NlcnZlcic7XG5pbXBvcnQgJy9pbXBvcnRzL2FwaS91c2Vycy1zZXR0aW5ncy9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvdm9pY2UtdXNlcnMvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL3doaXRlYm9hcmQtbXVsdGktdXNlci9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvdmlkZW8tc3RyZWFtcy9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvbmV0d29yay1pbmZvcm1hdGlvbi9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvdXNlcnMtaW5mb3Mvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL3VzZXJzLXBlcnNpc3RlbnQtZGF0YS9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvY29ubmVjdGlvbi1zdGF0dXMvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL25vdGUvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL2V4dGVybmFsLXZpZGVvcy9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvZ3Vlc3QtdXNlcnMvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL2xvY2FsLXNldHRpbmdzL3NlcnZlcic7XG5pbXBvcnQgJy9pbXBvcnRzL2FwaS92b2ljZS1jYWxsLXN0YXRlcy9zZXJ2ZXInO1xuaW1wb3J0ICcvaW1wb3J0cy9hcGkvYXV0aC10b2tlbi12YWxpZGF0aW9uL3NlcnZlcic7XG5cbi8vIENvbW1vbnNcbmltcG9ydCAnL2ltcG9ydHMvYXBpL2xvZy1jbGllbnQvc2VydmVyJztcbmltcG9ydCAnL2ltcG9ydHMvYXBpL2NvbW1vbi9zZXJ2ZXIvaGVscGVycyc7XG5pbXBvcnQgJy9pbXBvcnRzL3N0YXJ0dXAvc2VydmVyL2xvZ2dlcic7XG5cbi8vIE5lZWRlZCBmb3IgQXRtb3NwaGVyZSBwYWNrYWdlIFJvY2tldENoYXQvbWV0ZW9yLXN0cmVhbWVyXG4vLyBJdCBpcyBvdXQgb2YgZGF0ZSBhbmQgd2FzIHdyaXR0ZW4gd2hlbiBNZXRlb3IgY29udGFpbmVkIGxvZGFzaFxuLy8gcGFja2FnZS4gSG93ZXZlciwgd2Ugbm93IGltcG9ydCBsb2Rhc2ggYXMgYW4gbnBtIHBhY2thZ2Vcbi8vIGluIG9yZGVyIHRvIGNvbnRyb2wgdmVyc2lvbnMsIHVwZGF0ZSBmbGV4aWJseSwgZXRjLi5cbi8vIFNldHRpbmcgdGhlIGdsb2JhbC5fIHRvIHV0aWxpemUgdGhlIG5wbSBsb2Rhc2ggcGFja2FnZSBpcyBhbiBpbnRlcmltIGZpeFxuLy8gYW5kIGl0cyBpbnRyb2R1Y3Rpb24gd2FzIGluc3BpcmVkIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vUm9ja2V0Q2hhdC9tZXRlb3Itc3RyZWFtZXIvaXNzdWVzLzQwI2lzc3VlY29tbWVudC00OTc2Mjc4OTNcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmdsb2JhbC5fID0gXztcbiJdfQ==
