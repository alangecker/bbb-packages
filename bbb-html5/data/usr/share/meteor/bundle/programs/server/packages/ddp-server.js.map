{"version":3,"sources":["meteor://ðŸ’»app/packages/ddp-server/stream_server.js","meteor://ðŸ’»app/packages/ddp-server/livedata_server.js","meteor://ðŸ’»app/packages/ddp-server/writefence.js","meteor://ðŸ’»app/packages/ddp-server/crossbar.js","meteor://ðŸ’»app/packages/ddp-server/server_convenience.js"],"names":["websocketExtensions","_","once","extensions","websocketCompressionConfig","process","env","SERVER_WEBSOCKET_COMPRESSION","JSON","parse","push","Npm","require","configure","pathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","StreamServer","self","registration_callbacks","open_sockets","prefix","RoutePolicy","declare","sockjs","serverOptions","log","heartbeat_delay","disconnect_delay","jsessionid","USE_JSESSIONID","DISABLE_WEBSOCKETS","websocket","faye_server_options","server","createServer","WebApp","httpServer","removeListener","_timeoutAdjustmentRequestCallback","installHandlers","addListener","_redirectWebsocketEndpoint","on","socket","setWebsocketTimeout","timeout","protocol","_session","recv","connection","setTimeout","send","data","write","without","TEST_METADATA","stringify","testMessageOnConnect","each","callback","Object","assign","prototype","register","all_sockets","values","forEach","event","oldHttpServerListeners","listeners","slice","removeAllListeners","newListener","request","args","arguments","url","parsedUrl","pathname","format","oldListener","apply","_objectSpread","module","link","default","v","DDPServer","Fiber","publicationStrategies","SERVER_MERGE","useCollectionView","doAccountingForCollection","NO_MERGE_NO_HISTORY","NO_MERGE","SessionDocumentView","existsIn","Set","dataByKey","Map","_SessionDocumentView","extend","getFields","ret","precedenceList","key","value","clearField","subscriptionHandle","changeCollector","get","removedValue","undefined","i","length","precedence","splice","delete","EJSON","equals","changeField","isAdd","clone","has","set","elt","find","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","isEmpty","size","diff","previous","DiffSequence","diffMaps","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","diffObjects","prev","now","changed","docView","add","changedResult","Error","err","Session","version","options","Random","initialized","inQueue","Meteor","_DoubleEndedQueue","blocked","workerRunning","cachedUnblock","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","msg","session","startUniversalSubs","run","heartbeatInterval","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","_canSend","getPublicationStrategy","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","unblock","onMessageHook","protocol_handlers","call","sub","name","params","Array","publish_handlers","error","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","fence","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","setUserId","_setUserId","invocation","MethodInvocation","isSimulation","promise","Promise","resolve","reject","_CurrentWriteFence","withValue","DDP","_CurrentMethodInvocation","maybeAuditArgumentChecks","finish","payload","then","result","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","newSub","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","unblockHander","subName","maybeSub","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","remoteAddress","forwardedFor","isString","trim","split","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","resultOrThenable","_CurrentPublicationInvocation","e","_isDeactivated","isThenable","_publishHandlerResult","res","isCursor","c","_publishCursor","ready","isArray","all","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","strId","onStop","ids","Server","defaultPublicationStrategy","onConnectionHook","Hook","debugPrintExceptions","_publicationStrategies","sessions","stream_server","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","setPublicationStrategy","publicationName","strategy","includes","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","func","pop","callAsync","applyAsync","await","currentMethodInvocation","currentPublicationInvocation","makeRpcSeed","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","stack","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked","Future","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","EnvironmentVariable","beginWrite","committed","_maybeFire","onBeforeFire","armAndWait","future","wait","invokeCallback","_Crossbar","nextId","listenersByCollection","listenersByCollectionCount","factPackage","factName","_collectionForMessage","listen","trigger","record","fire","notification","listenersForCollection","callbackIds","l","_matches","ObjectID","triggerValue","_InvalidationCrossbar","DDP_DEFAULT_CONNECTION_URL","refresh"],"mappings":"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","file":"/packages/ddp-server.js","sourcesContent":["// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return;\n\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' ||\n           socket.protocol === 'websocket-raw')\n          && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n    if (process.env.TEST_METADATA && process.env.TEST_METADATA !== \"{}\") {\n      socket.send(JSON.stringify({ testMessageOnConnect: true }));\n    }\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    ['request', 'upgrade'].forEach((event) => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // TODO replace with url package\n        var url = Npm.require('url');\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n","DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useCollectionView: true,\n    doAccountingForCollection: true,\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useCollectionView: false,\n    doAccountingForCollection: false,\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useCollectionView: false,\n    doAccountingForCollection: true,\n  }\n};\n\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{subscriptionHandle: subscriptionHandle,\n                                value: value}]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n          return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\nObject.assign(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\nObject.assign(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n\n\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"added\", collection: collectionName, id, fields});\n  },\n\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields))\n      return;\n\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"removed\", collection: collectionName, id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n         this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(\n          fence,\n          () => DDP._CurrentMethodInvocation.withValue(\n            invocation,\n            () => maybeAuditArgumentChecks(\n              handler, invocation, msg.params,\n              \"call to '\" + msg.method + \"'\"\n            )\n          )\n        ));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then((result) => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n\n      oldNamedSubs.forEach(function (sub, subscriptionId) {\n        var newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        newSub._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n\n    if (subId)\n      self._namedSubs.set(subId, sub);\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\nObject.assign(Subscription.prototype, {\n  _runHandler: function() {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () =>\n        maybeAuditArgumentChecks(\n          self._handler,\n          self,\n          EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"\n        )\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable =\n      resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      Promise.resolve(resultOrThenable).then(\n        (...args) => self._publishHandlerResult.bind(self)(...args),\n        e => self.error(e)\n      );\n    } else {\n      self._publishHandlerResult(resultOrThenable);\n    }\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed (collectionName, id) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options = {}) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE,\n    ...options,\n  };\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self._publicationStrategies = {};\n\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\nObject.assign(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Set publication strategy for the given publication. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param publicationName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(publicationName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(`Invalid merge strategy: ${strategy} \n        for collection ${publicationName}`);\n    }\n    this._publicationStrategies[publicationName] = strategy;\n  },\n\n  /**\n   * @summary Gets the publication strategy for the requested publication. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param publicationName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(publicationName) {\n    return this._publicationStrategies[publicationName]\n      || this.options.defaultPublicationStrategy;\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function() {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    return this.applyAsync(name, args);\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise.await();\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function() {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function(userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function(userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise(resolve => resolve(\n      DDP._CurrentMethodInvocation.withValue(\n        invocation,\n        () => maybeAuditArgumentChecks(\n          handler, invocation, EJSON.clone(args),\n          \"internal call to '\" + name + \"'\"\n        )\n      )\n    )).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n","var Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n","// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n","if (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL =\n    process.env.DDP_DEFAULT_CONNECTION_URL;\n}\n\nMeteor.server = new Server;\n\nMeteor.refresh = function (notification) {\n  DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n_.each(['publish', 'methods', 'call', 'apply', 'onConnection', 'onMessage'],\n       function (name) {\n         Meteor[name] = _.bind(Meteor.server[name], Meteor.server);\n       });\n"]}